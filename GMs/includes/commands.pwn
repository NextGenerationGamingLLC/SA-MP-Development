/*
    	 		 /$$   /$$  /$$$$$$          /$$$$$$$  /$$$$$$$
				| $$$ | $$ /$$__  $$        | $$__  $$| $$__  $$
				| $$$$| $$| $$  \__/        | $$  \ $$| $$  \ $$
				| $$ $$ $$| $$ /$$$$ /$$$$$$| $$$$$$$/| $$$$$$$/
				| $$  $$$$| $$|_  $$|______/| $$__  $$| $$____/
				| $$\  $$$| $$  \ $$        | $$  \ $$| $$
				| $$ \  $$|  $$$$$$/        | $$  | $$| $$
				|__/  \__/ \______/         |__/  |__/|__/

//--------------------------------[COMMANDS.PWN]--------------------------------


 * Copyright (c) 2014, Next Generation Gaming, LLC
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are not permitted in any case.
 *
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
#if defined event_chancegambler
CMD:togchancegambler(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pPR] >= 2)
	{
		if(chancegambler == 0)
		{
			chancegambler = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled the chance gambler event.");
		}
		else
		{
			chancegambler = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the chance gambler event.");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized to use this command.");
	return 1;
}

CMD:gamblechances(playerid, params[])
{
	if(chancegambler == 1)
	{
		new iChances = PlayerInfo[playerid][pRewardDrawChance] / 3;
		
		if(iChances < 1)
			return SendClientMessageEx(playerid, COLOR_GREY, "You don't have any chances.");
			
		if(!IsPlayerInRangeOfPoint(playerid, 20, 1479.1448,-1675.6207,14.0469))
			return SendClientMessageEx(playerid, COLOR_GREY, "You aren't at pershing square.");
						
		ShowPlayerDialog(playerid, DIALOG_ROLL, DIALOG_STYLE_MSGBOX, "Chance Gambler! - All or Nothing","You must roll a number greater than 4 to double your chances.", "Roll", "Cancel");
	}
	else return 0;
	return 1;
}
#endif
 
CMD:chances(playerid, params[])
{
	if(chancegambler == 1)
	{
		new szMessage[128],
			iChances = PlayerInfo[playerid][pRewardDrawChance] / 3;
		format(szMessage, sizeof(szMessage), "Chances: %d", iChances);
		SendClientMessageEx(playerid, COLOR_CYAN, szMessage);
	}
	else return 0;
	return 1;
}
 
CMD:clearbugs(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(PlayerInfo[playerid][pLeader] == PlayerInfo[playerid][pMember] && PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iBugAccess]) // has leader flag
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "All agency bugs destroyed.");
			//foreach(new i : Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pBugged] == PlayerInfo[playerid][pMember]){
						PlayerInfo[i][pBugged] = INVALID_GROUP_ID;
					}
				}	
			}
			new query[256];
			format(query, sizeof(query), "UPDATE accounts SET `Bugged` = %d WHERE `Bugged` > %d AND `Online` = 0", INVALID_GROUP_ID, INVALID_GROUP_ID);
			mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
			return 1;
		}
	}
	return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized to use this command.");
}

CMD:listbugs(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(PlayerInfo[playerid][pLeader] == PlayerInfo[playerid][pMember] && PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iBugAccess]) // has leader flag
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "List of deployed Bugs:");
			//foreach(new i : Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pBugged] == PlayerInfo[playerid][pMember]){
						SendClientMessageEx(playerid, COLOR_GREEN, GetPlayerNameEx(i));
					}
				}	
			}
			new query[256];
			format(query, sizeof(query), "SELECT `Username`, `Bugged` FROM `accounts`  WHERE `Bugged` = %d AND `Online` = 0", PlayerInfo[playerid][pMember]);
			mysql_function_query(MainPipeline, query, true, "OnQueryFinish", "iii", BUG_LIST_THREAD, playerid, g_arrQueryHandle{playerid});
			return 1;
		}
	}
	return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized to use this command.");
}
 
CMD:jointable(playerid, params[])
{
	if(PlayerInfo[playerid][pConnectHours] < 5) {
	    SendClientMessageEx(playerid, COLOR_GREY, "You need 5 playing hours to join a poker table.");
	    return 1;
	}
	if(GetPVarType(playerid, "pkrTableID") == 0) {
		for(new t = 0; t < MAX_POKERTABLES; t++) {
			if(IsPlayerInRangeOfPoint(playerid, 5.0, PokerTable[t][pkrX], PokerTable[t][pkrY], PokerTable[t][pkrZ])) {
				if(PokerTable[t][pkrPass][0] != EOS) {
					if(!strcmp(params, PokerTable[t][pkrPass], false, 32)) {
						JoinPokerTable(playerid, t);
					} else {
						return SendClientMessage(playerid, COLOR_WHITE, "Usage: /jointable (password)");
					}
				} else {
					JoinPokerTable(playerid, t);
				}
				return 1;
			}
		}
	} else {
		SendClientMessage(playerid, COLOR_WHITE, "You are already at a Poker Table! You must /leavetable before you join another one!");
	}
	return 1;
}

CMD:leavetable(playerid, params[])
{
	if(GetPVarType(playerid, "pkrTableID")) {
		LeavePokerTable(playerid);
	}
	return 1;
}

CMD:placetable(playerid, params[])
{
	if(PlayerInfo[playerid][pTable] == 1 || PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't do this while being in an arena!");
		if(WatchingTV[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can not do this while watching TV!");
		if(GetPVarInt(playerid, "Injured") == 1 || PlayerInfo[playerid][pHospital] > 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You can't do this right now.");
		if(PlayerInfo[playerid][pVW] == 0 || PlayerInfo[playerid][pInt] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can only place poker tables inside interiors.");
		if(GetPVarType(playerid, "pTable")) return SendClientMessageEx(playerid, COLOR_GREY, "You already have a poker table out, use /destroytable.");

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(GetPVarType(i, "pTable"))
				{
					if(IsPlayerInRangeOfPoint(playerid, 7.0, PokerTable[GetPVarInt(i, "pTable")][pkrX], PokerTable[GetPVarInt(i, "pTable")][pkrY], PokerTable[GetPVarInt(i, "pTable")][pkrZ]))
					{
						SendClientMessage(playerid, COLOR_GREY, "You are in range of another poker table, you can't place one here!");
						return 1;
					}
				}
			}	
		}


		new string[128];
		format(string, sizeof(string), "%s has placed a poker table!", GetPlayerNameEx(playerid));
	    ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);

	    new Float:x, Float:y, Float:z, Float:a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
	    x += (2 * floatsin(-a, degrees));
    	y += (2 * floatcos(-a, degrees));
		z -= 0.5;

        for(new i = 0; i < MAX_POKERTABLES; i++) {
		    if(PokerTable[i][pkrPlaced] == 0) {
				PlacePokerTable(i, 1, x, y, z, 0, 0, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				SetPVarInt(playerid, "pTable", i);
				break;
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a poker table! Buy from one shop.ng-gaming.net");
	}
	return 1;
}

CMD:destroytable(playerid, params[])
{
	if(GetPVarType(playerid, "pTable"))
	{
	    if(PokerTable[GetPVarType(playerid, "pTable")][pkrPlayers] != 0)
			return SendClientMessageEx(playerid, COLOR_GREY, "You can't destroy your table while a game is in progress.");

	    DestroyPokerTable(GetPVarInt(playerid, "pTable"));
		DeletePVar(playerid, "pTable");
		SendClientMessage(playerid, COLOR_GREY, "You've destroyed your poker table!");
	}
	return 1;
}


CMD:speedcam(playerid, params[])
{
	if (IsPlayerInAnyVehicle(playerid))
		return SendClientMessageEx(playerid, COLOR_GREY, "You cannot manage speed cameras whilst inside a vehicle.");

	if (IsACop(playerid) && PlayerInfo[playerid][pRank] == Group_GetMaxRank(PlayerInfo[playerid][pLeader]) || PlayerInfo[playerid][pAdmin] >= 1337)
	{
		ShowPlayerDialog(playerid, SPEEDCAM_DIALOG_MAIN, DIALOG_STYLE_LIST, "{FFFF00}Speed Cameras", "Create a speed camera\nEdit a speed camera\nDelete a speed camera\n\
			Get nearest speedcamera", "Select", "Cancel");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You do not have permission to use this command.");
		return 1;
	}

	return 1;
}

CMD:placekit(playerid, params[]) {
	if(IsACop(playerid) || IsAMedic(playerid) || IsAGovernment(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being inside the vehicle!");
		if(GetPVarInt(playerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command!");
		if(!GetPVarInt(playerid, "MedVestKit")) return SendClientMessageEx(playerid, COLOR_GRAD1, "You aren't carrying a kit.");
		new choice[9];
		if(sscanf(params, "s[9]", choice))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /placekit [name]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Car, Backpack");
			return 1;
		}
		new string[128];
		if(strcmp(choice, "Car", true)  == 0)
		{
			new vehicleid = GetClosestCar(playerid, INVALID_VEHICLE_ID, 10.0);
			if( vehicleid != INVALID_VEHICLE_ID && GetDistanceToCar(playerid, vehicleid) < 10 )
			{
				if(!IsABike(vehicleid) && !IsAPlane(vehicleid)) {
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
					if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "The vehicle's trunk must be opened in order to place it.");
						return 1;
					}
				}
				if(CrateVehicleLoad[vehicleid][vCarVestKit] == 2)
				{
					return SendClientMessageEx(playerid, COLOR_GRAD1, "This vehicle already has two kits loaded.");
				}
				format(string, sizeof(string), "{FF8000}** {C2A2DA}%s leans in to the trunk and places a Kevlar Vest & First Aid Kit inside.", GetPlayerNameEx(playerid));
				SendClientMessageEx(playerid, COLOR_WHITE, "You have loaded the Med Kit in to the Vehicle Trunk. /usekit to use it.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "MedVestKit", 0);
				CrateVehicleLoad[vehicleid][vCarVestKit] += 1;
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not near any vehicle.");
		}
		else if(strcmp(choice, "Backpack", true)  == 0)
		{
			if(PlayerInfo[playerid][pBackpack] > 0 && PlayerInfo[playerid][pBEquipped])
			{
				if(PlayerInfo[playerid][pBItems][5] > 0 && PlayerInfo[playerid][pBackpack] == 1)
				{
					return SendClientMessageEx(playerid, COLOR_GRAD1, "Your backpack size only lets you store 1 med kit.");
				}
				else if(PlayerInfo[playerid][pBItems][5] > 1 && PlayerInfo[playerid][pBackpack] == 2)
				{
					return SendClientMessageEx(playerid, COLOR_GRAD1, "Your backpack size only lets you store 2 med kit.");
				}
				else if(PlayerInfo[playerid][pBItems][5] > 2 && PlayerInfo[playerid][pBackpack] == 3)
				{
					return SendClientMessageEx(playerid, COLOR_GRAD1, "Your backpack size only lets you store 3 med kit.");
				}
				format(string, sizeof(string), "{FF8000}** {C2A2DA}%s opens a backpack and places a Kevlar Vest & First Aid Kit inside.", GetPlayerNameEx(playerid));
				SendClientMessageEx(playerid, COLOR_WHITE, "You have loaded the Med Kit in to your backpack. /usekit to use it.");
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "MedVestKit", 0);
				PlayerInfo[playerid][pBItems][5] += 1;
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a backpack Equipped, if you want to buy one type /miscshop.");
		}
		else 
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /placekit [name]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Car, Backpack");
			return 1;
		}
	}
	return 1;
}

CMD:usekit(playerid, params[]) {
	if(IsACop(playerid) || IsAMedic(playerid) || IsAGovernment(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid)) { SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being inside the vehicle!"); return 1; }
		if(GetPVarInt(playerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command!");
		new string[128];
		new vehicleid = GetClosestCar(playerid, INVALID_VEHICLE_ID, 10.0);
		if( vehicleid != INVALID_VEHICLE_ID && GetDistanceToCar(playerid, vehicleid) < 10 )
		{
		    if(CrateVehicleLoad[vehicleid][vCarVestKit] > 0)
		    {
		    	if(!IsABike(vehicleid) && !IsAPlane(vehicleid)) {
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
					if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "The vehicle's trunk must be opened in order to search it.");
						return 1;
					}
				}
		        format(string, sizeof(string), "{FF8000}** {C2A2DA}%s leans in to the trunk and takes out a Kevlar Vest & First Aid Kit.", GetPlayerNameEx(playerid));
            	SendClientMessageEx(playerid, COLOR_WHITE, "You have used the Med Kit from the Vehicle Trunk.");
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPlayerHealth(playerid, 100);
				SetPlayerArmor(playerid, 100);
            	CrateVehicleLoad[vehicleid][vCarVestKit] -= 1;
				return 1;
		    }
		}
		if(PlayerInfo[playerid][pBackpack] > 0 && PlayerInfo[playerid][pBEquipped])
		{
			if(PlayerInfo[playerid][pBItems][5] > 0)
			{
				if(GetPVarInt(playerid, "BackpackMedKit") == 1) {
					return SendClientMessageEx(playerid, COLOR_GRAD2, "You have already requested to use a medic kit.");
				}
				else 
				{
					defer FinishMedKit(playerid);
					SetPVarInt(playerid, "BackpackMedKit", 1);
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
					format(string, sizeof(string), "{FF8000}** {C2A2DA}%s opens a backpack and takes out a Kevlar Vest & First Aid Kit inside.", GetPlayerNameEx(playerid));
					SendClientMessageEx(playerid, COLOR_WHITE, "You are taking the Med Kit from your backpack, please wait.");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD1, "You have no kits inside your backpack.");
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not near a vehicle.");
	}
	return 1;
}

CMD:crates(playerid, params[]) {
	if(IsACop(playerid))
	{
	    new string[128], zone[64];
	    format(string, sizeof(string), "List of Crates to be delivered (MAX IN PRODUCTION: %d):", MAXCRATES);
	    SendClientMessage(playerid, COLOR_GREEN, string);
	    for(new i = 0; i < sizeof(CrateInfo); i++)
	    {
	        if(CrateInfo[i][crActive])
	        {
				if(CrateInfo[i][InVehicle] == INVALID_VEHICLE_ID)
				{
				    GetDynamicObjectPos(CrateInfo[i][crObject], CrateInfo[i][crX],CrateInfo[i][crY],CrateInfo[i][crZ]);
				}
				else
				{
					GetVehiclePos(CrateInfo[i][InVehicle],CrateInfo[i][crX],CrateInfo[i][crY],CrateInfo[i][crZ]);
					CrateInfo[i][crVW] = GetVehicleVirtualWorld(CrateInfo[i][InVehicle]);
				}
	            if(CrateInfo[i][crInt] != 0 || CrateInfo[i][crVW] != 0 || CrateInfo[i][crZ] > 500)
	            {
	                format(zone, sizeof(zone), "*Weak Signal* (( Garage / Interior ))");
	            }
	            else Get3DZone(CrateInfo[i][crX],CrateInfo[i][crY],CrateInfo[i][crZ],zone, sizeof(zone));
	        	format(string, sizeof(string), "Crate Serial Number: #%d  Location: %s  In a Vehicle: %s", i, zone,(CrateInfo[i][InVehicle] != INVALID_VEHICLE_ID) ? ("Yes") : ("No"));
	        	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	       	}
	    }
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, " You do not have access to this information. ");
	}
	return 1;
}

CMD:destroycrate(playerid, params[]) {
	if(IsACop(playerid))
	{
	    if(servernumber == 2)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "This command is disabled!");
		    return 1;
		}
	    new string[128], CrateFound;
	    new Float:cX, Float: cY, Float: cZ;
		for(new i = 0; i < sizeof(CrateInfo); i++)
	    {
	    	if(CrateInfo[i][crActive])
	    	{
	    		GetDynamicObjectPos(CrateInfo[i][crObject], cX, cY, cZ);
	    		if(IsPlayerInRangeOfPoint(playerid, 5.0, cX, cY, cZ))
	    		{
	    		    DestroyDynamicObject(CrateInfo[i][crObject]);
	    		    DestroyDynamic3DTextLabel(CrateInfo[i][crLabel]);
	    		    CrateInfo[i][crActive] = 0;
	    		    CrateInfo[i][InVehicle] = INVALID_VEHICLE_ID;
				    CrateInfo[i][crObject] = INVALID_OBJECT_ID;
				    CrateInfo[i][crX] = 0;
				    CrateInfo[i][crY] = 0;
				    CrateInfo[i][crZ] = 0;
					CrateFound = 1;
					mysql_SaveCrates();
					break;
	    		}
	    	}
	    }
	    if(!CrateFound) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not near any crates!");
		format(string, sizeof(string), "* %s seizes the weapon crate.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, " You are not authorized. ");
	}
	return 1;
}

CMD:adestroycrate(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if(servernumber == 2)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "This command is disabled!");
		    return 1;
		}
	    new i;
	    if(sscanf(params, "d", i)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adestroycrate [crate id]");
		if(i < 0 || i > MAX_CRATES) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adestroycrate [crate id]");
	    new string[128];
    	if(CrateInfo[i][crActive])
    	{
		    DestroyDynamicObject(CrateInfo[i][crObject]);
		    DestroyDynamic3DTextLabel(CrateInfo[i][crLabel]);
		    CrateInfo[i][crActive] = 0;
		    CrateInfo[i][InVehicle] = INVALID_VEHICLE_ID;
		    CrateInfo[i][crObject] = INVALID_OBJECT_ID;
		    CrateInfo[i][crX] = 0;
		    CrateInfo[i][crY] = 0;
		    CrateInfo[i][crZ] = 0;
		    format(string, sizeof(string), "* You have destroyed crate id %d.", i);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			mysql_SaveCrates();
			return 1;
    	}
	    else {
			return SendClientMessageEx(playerid, COLOR_GRAD2, "That crate isn't active!");
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, " You are not authorized.");
	}
	return 1;
}

CMD:gotospeedcam(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
	    new i;
	    if(sscanf(params, "d", i)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotospeedcam [Speedcam id]");
		if(i < 0 || i > MAX_SPEEDCAMERAS) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotospeedcam [Speedcam id]");
    	if (SpeedCameras[i][_scActive] == true)
    	{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, SpeedCameras[i][_scPosX], SpeedCameras[i][_scPosY], SpeedCameras[i][_scPosZ]);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, SpeedCameras[i][_scPosX], SpeedCameras[i][_scPosY], SpeedCameras[i][_scPosZ]);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			return 1;
    	}
	    else return SendClientMessageEx(playerid, COLOR_GRAD2, "That speed camera isn't active!");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, " You are not authorized.");
	}
	return 1;
}

CMD:gotocrate(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
	    new i;
	    if(sscanf(params, "d", i)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotocrate [crate id]");
		if(i < 0 || i > MAX_CRATES) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotocrate [crate id]");
    	if(CrateInfo[i][crActive])
    	{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, CrateInfo[i][crX],CrateInfo[i][crY],CrateInfo[i][crZ]);
				LinkVehicleToInterior(tmpcar, CrateInfo[i][crInt]);
				SetVehicleVirtualWorld(tmpcar, CrateInfo[i][crVW]);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, CrateInfo[i][crX],CrateInfo[i][crY],CrateInfo[i][crZ]);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,CrateInfo[i][crInt]);
			PlayerInfo[playerid][pInt] = CrateInfo[i][crInt];
			SetPlayerVirtualWorld(playerid, CrateInfo[i][crVW]);
			PlayerInfo[playerid][pVW] = CrateInfo[i][crVW];
			return 1;
    	}
	    else return SendClientMessageEx(playerid, COLOR_GRAD2, "That crate isn't active!");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, " You are not authorized.");
	}
	return 1;
}

CMD:cargo(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid);
	new string[128];
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a vehicle.");
	if((DynVeh[vehicleid] != -1 && DynVehicleInfo[DynVeh[vehicleid]][gv_iType] == 1))
	{
	    format(string, sizeof(string), "Loaded Cargo: (Capacity: %d)", DynVehicleInfo[DynVeh[vehicleid]][gv_iLoadMax]);
	    SendClientMessage(playerid, COLOR_GREEN, string);
	    if(GetVehicleModel(vehicleid) == 592)
	    {
	 	    for(new i = 0; i < 6; i++)
		    {
		        if(CrateVehicleLoad[vehicleid][vCrateID][i] != -1)
		        {
		            if(CrateInfo[CrateVehicleLoad[vehicleid][vCrateID][i]][InVehicle] == vehicleid)
		            {
						format(string, sizeof(string), "Crate SN: #%d  High Grade Materials: %d", CrateVehicleLoad[vehicleid][vCrateID][i], CrateInfo[CrateVehicleLoad[vehicleid][vCrateID][i]][GunQuantity]);
						SendClientMessage(playerid, COLOR_GRAD2, string);
					}
					else
					{
					    printf("Bugged crate ID %d deleted from vehicle id %d automatically via %s",  CrateVehicleLoad[vehicleid][vCrateID][i], vehicleid, GetPlayerNameEx(playerid));
					    CrateVehicleLoad[vehicleid][vCrateID][i] = -1;
					}
		        }
		    }
		}
		else
		{
		    for(new i = 0; i < DynVehicleInfo[DynVeh[vehicleid]][gv_iLoadMax]; i++)
		    {
		        if(CrateVehicleLoad[vehicleid][vCrateID][i] != -1)
		        {
		            if(CrateInfo[CrateVehicleLoad[vehicleid][vCrateID][i]][InVehicle] == vehicleid)
		            {
						format(string, sizeof(string), "Crate SN: #%d  High Grade Materials: %d", CrateVehicleLoad[vehicleid][vCrateID][i], CrateInfo[CrateVehicleLoad[vehicleid][vCrateID][i]][GunQuantity]);
						SendClientMessage(playerid, COLOR_GRAD2, string);
					}
					else
					{
					    printf("Bugged crate ID %d deleted from vehicle id %d automatically via %s",  CrateVehicleLoad[vehicleid][vCrateID][i], vehicleid, GetPlayerNameEx(playerid));
					    CrateVehicleLoad[vehicleid][vCrateID][i] = -1;
					}
				}
		    }
		}
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD2, "You aren't in a designated Armored Truck or Plane.");
	}
	return 1;
}

CMD:delivercrate(playerid, params[])
{
    if(servernumber == 2)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This command is disabled!");
	    return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	if(DynVeh[vehicleid] != -1 && DynVehicleInfo[DynVeh[vehicleid]][gv_iType] == 1)
	{
	    for(new group; group < MAX_GROUPS; group++)
	    {

		    if(IsPlayerInRangeOfPoint(playerid, 6, arrGroupData[group][g_fCratePos][0], arrGroupData[group][g_fCratePos][1], arrGroupData[group][g_fCratePos][2]))
		    {
		        if(arrGroupData[group][g_iLockerStock] >= MAX_LOCKER_STOCK)
		        {
		            SendClientMessageEx(playerid, COLOR_GRAD2, "This locker is at full capacity and does not require a delivery.");
		            return 1;
		        }
		        if(arrGroupData[group][g_iBudget] < floatround(CRATE_COST * 1.2))
		        {
		            SendClientMessageEx(playerid, COLOR_GRAD2, "This agency cannot afford a crate delivery.");
		            return 1;
		        }
		        if(arrGroupData[group][g_iCratesOrder] == 0)
		        {
		            SendClientMessageEx(playerid, COLOR_GRAD2, "This agency has not placed any crate orders.");
		            return 1;
		        }
		        if(arrGroupData[group][g_iLockerCostType] != 0)
		        {
		            SendClientMessageEx(playerid, COLOR_GRAD2, "This agency is not accepting crate deliveries.");
		            return 1;
		        }
				for(new i = 0; i < DynVehicleInfo[DynVeh[vehicleid]][gv_iLoadMax]; i++)
			    {
			        if(CrateVehicleLoad[vehicleid][vCrateID][i] != -1)
			        {
			            TogglePlayerControllable(playerid, 0);
			            SetTimerEx("DeliverCrate", 1000, 0, "d", playerid);
			            SetPVarInt(playerid, "dc_CrateFound", 1);
			            SetPVarInt(playerid, "delivercratecrateid", CrateVehicleLoad[vehicleid][vCrateID][i]);
                        SetPVarInt(playerid, "DeliverCrateTime", 8);
                        SetPVarInt(playerid, "SecuricarID", vehicleid);
                        SetPVarInt(playerid, "dc_GroupID", group);
                        SetPVarInt(playerid, "dc_i", i);
						break;
			        }
			    }
				break;
		    }
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a cargo certified vehicle.");
	return 1;
}

CMD:loadcrate(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(vehicleid) == 530)
	{
		if(CrateVehicleLoad[vehicleid][vForkLoaded])
		{
		    new TruckFound, FreeSlot;
		    TruckFound = INVALID_VEHICLE_ID;
		    FreeSlot = -1;
		    new Float:vx, Float:vy, Float:vz;
		    for(new i = 0; i < sizeof(DynVehicleInfo); i++)
		    {
		        GetPosBehindVehicle(DynVehicleInfo[i][gv_iSpawnedID], vx, vy, vz, -2);
				if(IsPlayerInRangeOfPoint(playerid, 6, vx, vy, vz))
		        {
		            if(DynVehicleInfo[i][gv_iType] == 1 && DynVehicleInfo[i][gv_iSpawnedID] != vehicleid && GetVehicleModel(DynVehicleInfo[i][gv_iSpawnedID]) != 592)
		            {
						TruckFound = DynVehicleInfo[i][gv_iSpawnedID];
						break;
				    }
		        }
		    }
		    if(TruckFound != INVALID_VEHICLE_ID)
		    {
		        new iDvSlotID = DynVeh[TruckFound];
			    for(new i = 0; i < DynVehicleInfo[iDvSlotID][gv_iLoadMax]; i++)
			    {
			        if(CrateVehicleLoad[TruckFound][vCrateID][i] == -1)
			        {
						FreeSlot = i;
						break;
			        }
			    }
			}
			if(TruckFound == INVALID_VEHICLE_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not near a Loaded Crate Vehicle!");
			if(FreeSlot == -1) return SendClientMessageEx(playerid, COLOR_GRAD2, "The truck is fully loaded!");
		    DestroyDynamicObject(CrateVehicleLoad[vehicleid][vForkObject]);
		    CrateVehicleLoad[vehicleid][vForkLoaded] = 0;
		    CrateVehicleLoad[vehicleid][vForkObject] = INVALID_OBJECT_ID;
			CrateVehicleLoad[TruckFound][vCrateID][FreeSlot] = CrateVehicleLoad[vehicleid][vCrateID][0];
			CrateInfo[CrateVehicleLoad[TruckFound][vCrateID][FreeSlot]][InVehicle] = TruckFound;
		    CrateVehicleLoad[vehicleid][vCrateID][0] = -1;
		    SendClientMessageEx(playerid, COLOR_GRAD2, "You loaded a crate onto the vehicle!");
		}
		else
		{
		    return SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a crate loaded!");
		}
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a forklift!");
	}
	return 1;
}

CMD:unloadcrate(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(vehicleid) == 530)
	{
		if(!CrateVehicleLoad[vehicleid][vForkLoaded])
		{
		    new TruckFound, UsedSlot;
		    TruckFound = INVALID_VEHICLE_ID;
		    UsedSlot = -1;
		    new Float:vx, Float:vy, Float:vz;
		    for(new i = 0; i < sizeof(DynVehicleInfo); i++)
		    {
		        GetPosBehindVehicle(DynVehicleInfo[i][gv_iSpawnedID], vx, vy, vz, -2);
				if(IsPlayerInRangeOfPoint(playerid, 6, vx, vy, vz))
		        {
		            if(DynVehicleInfo[i][gv_iType] == 1 && DynVehicleInfo[i][gv_iSpawnedID] != vehicleid && GetVehicleModel(DynVehicleInfo[i][gv_iSpawnedID]) != 592)
		            {
						TruckFound = DynVehicleInfo[i][gv_iSpawnedID];
						break;
				    }
		        }
		    }
		    if(TruckFound != INVALID_VEHICLE_ID)
		    {
		        new iDvSlotID = DynVeh[TruckFound];
			    for(new i = 0; i < DynVehicleInfo[iDvSlotID][gv_iLoadMax]; i++)
			    {
			        if(CrateVehicleLoad[TruckFound][vCrateID][i] != -1)
			        {
			            if(CrateInfo[CrateVehicleLoad[TruckFound][vCrateID][i]][InVehicle] == TruckFound)
			            {
							UsedSlot = i;
							break;
						}
						else
						{
						    CrateVehicleLoad[TruckFound][vCrateID][i] = -1;
						}
			        }
			    }
			}
			if(TruckFound == INVALID_VEHICLE_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not near a Loaded Crate Vehicle!");
			if(UsedSlot == -1) return SendClientMessageEx(playerid, COLOR_GRAD2, "The Truck is empty!");
		    CrateVehicleLoad[vehicleid][vForkLoaded] = 1;
		    CrateInfo[CrateVehicleLoad[TruckFound][vCrateID][UsedSlot]][InVehicle] = vehicleid;
		    CrateVehicleLoad[vehicleid][vCrateID][0] = CrateVehicleLoad[TruckFound][vCrateID][UsedSlot];
		    CrateVehicleLoad[vehicleid][vForkObject] = CreateDynamicObject(964,-1077.59997559,4274.39990234,3.40000010,0.00000000,0.00000000,0.00000000);
			AttachDynamicObjectToVehicle(CrateVehicleLoad[vehicleid][vForkObject], vehicleid, 0, 0.9, 0, 0, 0, 0);
			CrateVehicleLoad[TruckFound][vCrateID][UsedSlot] = -1;
		    SendClientMessageEx(playerid, COLOR_GRAD2, "You've unloaded a crate from the vehicle!");
		}
		else
		{

		    SendClientMessageEx(playerid, COLOR_GRAD2, "Unload your forklift first!");
		    return 1;

		}
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a forklift!");
	}
	return 1;
}

CMD:loadplane(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(vehicleid) == 530)
	{
		if(CrateVehicleLoad[vehicleid][vForkLoaded])
		{
		    new PlaneFound, FreeSlot;
		    PlaneFound = INVALID_VEHICLE_ID;
		    FreeSlot = -1;
		    new Float:vx, Float:vy, Float:vz;
		    for(new i = 0; i < sizeof(DynVehicleInfo); i++)
		    {
		        if(DynVehicleInfo[i][gv_iSpawnedID] != INVALID_VEHICLE_ID) { GetPosBehindVehicle(DynVehicleInfo[i][gv_iSpawnedID], vx, vy, vz, -8); }
		        else continue;
				if(IsPlayerInRangeOfPoint(playerid, 6, vx, vy, vz))
		        {
		            if(GetVehicleModel(DynVehicleInfo[i][gv_iSpawnedID]) == 592 && DynVehicleInfo[i][gv_iType] == 1)
		            {
						PlaneFound = DynVehicleInfo[i][gv_iSpawnedID];
						break;
				    }
		        }
		    }
		    if(PlaneFound != INVALID_VEHICLE_ID)
		    {
			    for(new i = 0; i < 6; i++)
			    {
			        if(CrateVehicleLoad[PlaneFound][vCrateID][i] == -1)
			        {
						FreeSlot = i;
						break;
			        }
			    }
			}
			if(PlaneFound == INVALID_VEHICLE_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not near a plane!");
			if(FreeSlot == -1) return SendClientMessageEx(playerid, COLOR_GRAD2, "The Plane is fully loaded!");
		    DestroyDynamicObject(CrateVehicleLoad[vehicleid][vForkObject]);
		    CrateVehicleLoad[vehicleid][vForkLoaded] = 0;
		    CrateVehicleLoad[vehicleid][vForkObject] = INVALID_OBJECT_ID;
			CrateVehicleLoad[PlaneFound][vCrateID][FreeSlot] = CrateVehicleLoad[vehicleid][vCrateID][0];
			CrateInfo[CrateVehicleLoad[PlaneFound][vCrateID][FreeSlot]][InVehicle] = PlaneFound;
		    CrateVehicleLoad[vehicleid][vCrateID][0] = -1;
		    SendClientMessageEx(playerid, COLOR_GRAD2, "You loaded a crate onto the plane!");
		}
		else
		{
		    return SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a crate loaded!");
		}
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a forklift!");
	}
	return 1;
}

CMD:planeinfo(playerid, params[]) {
    new PlaneFound, string[128];
    PlaneFound = INVALID_VEHICLE_ID;
    new Float:vx, Float:vy, Float:vz;
    for(new i = 0; i < sizeof(DynVehicleInfo); i++)
    {
        GetPosBehindVehicle(DynVehicleInfo[i][gv_iSpawnedID], vx, vy, vz, -8);
		if(IsPlayerInRangeOfPoint(playerid, 10, vx, vy, vz))
        {
            if(GetVehicleModel(DynVehicleInfo[i][gv_iSpawnedID]) == 592 && DynVehicleInfo[i][gv_iType] == 1)
            {
				PlaneFound = DynVehicleInfo[i][gv_iSpawnedID];
				format(string, sizeof(string), "Plane ID: %d Cargo Information", PlaneFound);
				SendClientMessage(playerid, COLOR_GREEN, string);
				break;
		    }
        }
    }
    if(PlaneFound != INVALID_VEHICLE_ID)
    {
	    for(new i = 0; i < 6; i++)
	    {
			format(string, sizeof(string), "Cargo Slot %d Crate SN %d",i, CrateVehicleLoad[PlaneFound][vCrateID][i]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
	    }
	}
	if(PlaneFound == INVALID_VEHICLE_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not near a plane!");
	return 1;
}

CMD:unloadplane(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(vehicleid) == 530)
	{
		if(!CrateVehicleLoad[vehicleid][vForkLoaded])
		{
		    new PlaneFound, UsedSlot;
		    PlaneFound = INVALID_VEHICLE_ID;
		    UsedSlot = -1;
		    new Float:vx, Float:vy, Float:vz;
		    for(new i = 0; i < sizeof(DynVehicleInfo); i++)
		    {
		        GetPosBehindVehicle(DynVehicleInfo[i][gv_iSpawnedID], vx, vy, vz, -8);
				if(IsPlayerInRangeOfPoint(playerid, 6, vx, vy, vz))
		        {
		            if(GetVehicleModel(DynVehicleInfo[i][gv_iSpawnedID]) == 592 && DynVehicleInfo[i][gv_iType] == 1)
		            {
						PlaneFound = DynVehicleInfo[i][gv_iSpawnedID];
						break;
				    }
		        }
		    }
		    if(PlaneFound != INVALID_VEHICLE_ID)
		    {
			    for(new i = 0; i < 6; i++)
			    {
					if(CrateVehicleLoad[PlaneFound][vCrateID][i] != -1)
					{
			            if(CrateInfo[CrateVehicleLoad[PlaneFound][vCrateID][i]][InVehicle] == PlaneFound)
			            {
							UsedSlot = i;
							break;
						}
						else
						{
						    printf("Bugged crate ID %d deleted from vehicle id %d automatically via %s",  CrateVehicleLoad[PlaneFound][vCrateID][i], PlaneFound, GetPlayerNameEx(playerid));
						    CrateVehicleLoad[PlaneFound][vCrateID][i] = -1;
						}
					}
			    }
			}
			if(PlaneFound == INVALID_VEHICLE_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not near a plane!");
			if(UsedSlot == -1) return SendClientMessageEx(playerid, COLOR_GRAD2, "The Plane is empty!");
		    CrateVehicleLoad[vehicleid][vForkLoaded] = 1;
		    CrateInfo[CrateVehicleLoad[PlaneFound][vCrateID][UsedSlot]][InVehicle] = vehicleid;
		    CrateVehicleLoad[vehicleid][vCrateID][0] = CrateVehicleLoad[PlaneFound][vCrateID][UsedSlot];
		    CrateVehicleLoad[vehicleid][vForkObject] = CreateDynamicObject(964,-1077.59997559,4274.39990234,3.40000010,0.00000000,0.00000000,0.00000000);
			AttachDynamicObjectToVehicle(CrateVehicleLoad[vehicleid][vForkObject], vehicleid, 0, 0.9, 0, 0, 0, 0);
			CrateVehicleLoad[PlaneFound][vCrateID][UsedSlot] = -1;
		    SendClientMessageEx(playerid, COLOR_GRAD2, "You've unloaded a crate from the plane!");
		}
		else
		{

		    SendClientMessageEx(playerid, COLOR_GRAD2, "Unload your forklift first!");
		    return 1;

		}
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a forklift!");
	}
	return 1;
}

CMD:loadforklift(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(vehicleid) == 530)
	{
	    new string[128];
		if(servernumber == 2)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "This command is disabled!");
		    return 1;
		}
		if(PlayerInfo[playerid][pConnectHours] < 25)
	    {
			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has attempted to load a crate with only %d playing hours.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pConnectHours]);
			ABroadCast(COLOR_YELLOW, string, 4);
	        return SendClientMessage(playerid, COLOR_GRAD2, " You've not played long enough to do this!");
	    }
		if(!CrateVehicleLoad[vehicleid][vForkLoaded])
		{
		    new CrateFound;
		    if(IsPlayerInRangeOfPoint(playerid, 5, -2114.1, -1723.5, 11984.5))
		    {
				Streamer_Update(playerid);
		        if(CountCrates() < MAXCRATES)
		        {
		            if(Tax < CRATE_COST)
		            {
		                SendClientMessageEx(playerid, COLOR_GRAD2, "The San Andreas Government cannot afford this crate");
		                return 1;
		            }
		            if(IslandGateStatus)
		            {
		                SendClientMessageEx(playerid, COLOR_GRAD2, "Crates have ceased production due to the lockdown of the island.");
		                return 1;
		            }
		            if(LoadForkliftStatus)
		            {
		                SendClientMessageEx(playerid, COLOR_GRAD2, "A Crate is already being loaded.");
		                return 1;
		            }
		            if(GetPVarInt(playerid, "LoadForkliftTime") > 0)
		            {
		                SendClientMessageEx(playerid, COLOR_WHITE, "You are currently loading your forklift!");
						return 1;
		            }
		            if(Streamer_IsItemVisible(playerid, STREAMER_TYPE_OBJECT, CrateLoad))
		            {
		                LoadForkliftStatus = 1;
		                SetPVarInt(playerid, "LoadForkliftTime", 5);
		                SetPVarInt(playerid, "ForkliftID", vehicleid);
						if(PlayerInfo[playerid][pSpeedo])
						{
							PlayerInfo[playerid][pSpeedo] = 0;
							SetPVarInt(playerid, "Speedo", 1);
						}
		                SetTimerEx("LoadForklift", 1000, 0, "d", playerid);
						TogglePlayerControllable(playerid, 0);
					    CrateFound = 1;
					}
					else return SendClientMessage(playerid, COLOR_GRAD2, " Please wait.  There is another crate in production. ");
				}
				else return SendClientMessage(playerid, COLOR_GRAD2, " This facility is at full capacity.  Please wait for the current outstanding crates to be delivered.");
			}
			else
			{
			    new Float:cX, Float: cY, Float: cZ;
				for(new i = 0; i < sizeof(CrateInfo); i++)
			    {
			    	if(CrateInfo[i][crActive])
			    	{
			    		GetDynamicObjectPos(CrateInfo[i][crObject], cX, cY, cZ);
			    		if(IsPlayerInRangeOfPoint(playerid, 5.0, cX, cY, cZ))
			    		{
			    		    DestroyDynamicObject(CrateInfo[i][crObject]);
			    		    CrateInfo[i][InVehicle] = vehicleid;
			    		    CrateVehicleLoad[vehicleid][vCrateID][0] = i;
			    		    CrateVehicleLoad[vehicleid][vForkLoaded] = 1;
						    CrateVehicleLoad[vehicleid][vForkObject] = CreateDynamicObject(964,-1077.59997559,4274.39990234,3.40000010,0.00000000,0.00000000,0.00000000);
							AttachDynamicObjectToVehicle(CrateVehicleLoad[vehicleid][vForkObject], vehicleid, 0, 0.9, 0, 0, 0, 0);
							DestroyDynamic3DTextLabel(CrateInfo[i][crLabel]);
							CrateFound = 1;
							Streamer_Update(playerid);
							new Float: pX, Float: pY, Float: pZ;
							GetPlayerPos(playerid, pX, pY, pZ);
							SetPVarFloat(playerid, "tpForkliftX", pX);
					 		SetPVarFloat(playerid, "tpForkliftY", pY);
					  		SetPVarFloat(playerid, "tpForkliftZ", pZ);
							SetPVarInt(playerid, "tpForkliftTimer", 80);
							SetPVarInt(playerid, "tpForkliftID", GetPlayerVehicleID(playerid));
							SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_CRATETIMER);
							break;
			    		}
			    	}
			    }
			}
			if(!CrateFound) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not near any crates!");

		}
		else
		{
		    new Float: vX, Float: vY, Float: vZ;
		    GetVehiclePos(vehicleid, vX, vY, vZ);
		    GetXYInFrontOfPlayer(playerid, vX, vY, 2);
		    DestroyDynamicObject(CrateVehicleLoad[vehicleid][vForkObject]);
		    CrateVehicleLoad[vehicleid][vForkObject] = INVALID_OBJECT_ID;
		    CrateVehicleLoad[vehicleid][vForkLoaded] = 0;
		    CrateVehicleLoad[vehicleid][vCrateID][0] = -1;
		    for(new i = 0; i < sizeof(CrateInfo); i++)
		    {
				if(CrateInfo[i][InVehicle] == vehicleid)
				{
					if(CrateInfo[i][crActive])
					{
					    CrateInfo[i][InVehicle] = INVALID_VEHICLE_ID;
					    CrateInfo[i][crX] = vX;
					    CrateInfo[i][crY] = vY;
					    CrateInfo[i][crZ] = vZ-0.8;
					    CrateInfo[i][crVW] = GetPlayerVirtualWorld(playerid);
					    CrateInfo[i][crInt] = GetPlayerInterior(playerid);
					    GetPlayerName(playerid, CrateInfo[i][crPlacedBy], MAX_PLAYER_NAME);
					    CrateInfo[i][crObject] = CreateDynamicObject(964,vX,vY,vZ-0.8,0.00000000,0.00000000,0.00000000, CrateInfo[i][crVW], CrateInfo[i][crInt]);
					    format(string, sizeof(string), "Serial Number: #%d\n High Grade Materials: %d/50\n (( Dropped by: %s ))", i, CrateInfo[i][GunQuantity], CrateInfo[i][crPlacedBy]);
					    CrateInfo[i][crLabel] = CreateDynamic3DTextLabel(string, COLOR_ORANGE, CrateInfo[i][crX],CrateInfo[i][crY],CrateInfo[i][crZ]+1, 10.0, _, _, 1, CrateInfo[i][crVW], CrateInfo[i][crInt], _, 20.0);
						Streamer_Update(playerid);
	                    mysql_SaveCrates();
						break;
					}
					else return SendClientMessageEx(playerid, COLOR_GRAD2, "The crate has vanished!");
				}
		    }
		    SendClientMessageEx(playerid, COLOR_GRAD2, " Crate unloaded onto the ground!");
		    return 1;

		}
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a forklift!");
	}
	return 1;
}

CMD:cratelimit(playerid, params[]) {

	new iGroupID = PlayerInfo[playerid][pMember];
    if(servernumber == 2)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This command is disabled!");
	    return 1;
	}
    if(PlayerInfo[playerid][pRank] >= arrGroupData[iGroupID][g_iCrateIsland])
    {
		new string[128];
		new moneys;
	    if(sscanf(params, "d", moneys)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cratelimit [5-20] (Limits the total production of crates)");
		if(moneys < 5 || moneys > MAX_CRATES) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cratelimit [5-20] (Limits the total production of crates)");
		MAXCRATES = moneys;
		format(string, sizeof(string), "* You have restricted weapon crate production to %d", moneys);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "** %s has restricted weapon crate production to %d", GetPlayerNameEx(playerid), moneys);
		SendGroupMessage(1, DEPTRADIO, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " Only the SAAS has the authority to do this! ");
	}
	return 1;
}

CMD:igps(playerid, params[]) {
	return cmd_islandgps(playerid, params);
}

CMD:islandgps(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(DynVeh[vehicleid] != -1 && DynVehicleInfo[DynVeh[vehicleid]][gv_iType] == 1 && IsAPlane(vehicleid) || IsACop(playerid))
	{
	    SetPVarInt(playerid,"igps", 1);
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, -1173.3702,4491.6836,4.4765, 15.0);
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD2, " You do not have access to the GPS co-ordinates");
	}
	return 1;
}

CMD:announcetakeoff(playerid, params[]) {
	new engine,lights,alarm,doors,bonnet,boot,objective,vehicleid, callsign[24], string[128], zone[64],
	Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	vehicleid = GetPlayerVehicleID(playerid);
	if(DynVeh[vehicleid] != -1 && DynVehicleInfo[DynVeh[vehicleid]][gv_iType] == 1 && GetVehicleModel(vehicleid) == 592)
	{
		format(callsign, sizeof(callsign), "SANAN%d", vehicleid);
	    Get3DZone(X, Y, Z,zone, sizeof(zone));
 		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	    if((IslandGateStatus == 0 || !IsInRangeOfPoint(-1105.8833,4428.3745,4.4000, X, Y, Z, 800.0)) && (engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
	    {
			if((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
			{
				format(string, sizeof(string), "** Pilot %s: Tower, %s requesting permission to take off from %s, over. **", GetPlayerNameEx(playerid), callsign, zone);
				SendGroupMessage(1, DEPTRADIO, string);
				if(!IsACop(playerid)) SendClientMessage(playerid, DEPTRADIO, string);
		        format(string, sizeof(string), "** Air Traffic Control: %s, you are cleared for takeoff, over. **", callsign);
				SendGroupMessage(1, DEPTRADIO, string);
				if(!IsACop(playerid)) SendClientMessage(playerid, DEPTRADIO, string);
				SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle engine starting, please wait...[10 seconds]");
				SetTimerEx("SetVehicleEngine", 10000, 0, "dd",  vehicleid, playerid);
			}
		}
		else if(engine == VEHICLE_PARAMS_ON)
		{
			SetVehicleEngine(vehicleid, playerid);
		}
		else
		{
		    format(string, sizeof(string), "** Pilot %s: Tower, %s ready for takeoff, over. **", GetPlayerNameEx(playerid), callsign);
			SendGroupMessage(1, DEPTRADIO, string);
			if(!IsACop(playerid)) SendClientMessage(playerid, DEPTRADIO, string);
	        format(string, sizeof(string), "** Air Traffic Control: %s, denied takeoff. Island is under lockdown, over. **", callsign);
			SendGroupMessage(1, DEPTRADIO, string);
			if(!IsACop(playerid)) SendClientMessage(playerid, DEPTRADIO, string);
		}
	}
	return 1;
}

CMD:cgun(playerid, params[]) {
    if(servernumber == 2)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This command is disabled!");
	    return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't reach into the crate from inside your vehicle! ");
	}
    new Float:cX, Float: cY, Float: cZ, CrateFound;
	for(new i = 0; i < sizeof(CrateInfo); i++)
    {
    	if(CrateInfo[i][crActive])
    	{
    		GetDynamicObjectPos(CrateInfo[i][crObject], cX, cY, cZ);
    		if(IsPlayerInRangeOfPoint(playerid, 3.0, cX, cY, cZ))
    		{
		        if(IsInRangeOfPoint(-1105.8833,4428.3745,4.4000, CrateInfo[i][crX],CrateInfo[i][crY],CrateInfo[i][crZ], 1000.0))
			    {
			        return SendClientMessageEx(playerid, COLOR_GRAD2, "ERROR:  This crate has been sealed shut by the Crate Island's security system! ");
			    }
    		    if(CrateInfo[i][GunQuantity] < 1)
    		    {
    		        SendClientMessageEx(playerid, COLOR_GRAD2, "The crate is empty! ");
    		        DestroyDynamicObject(CrateInfo[i][crObject]);
    		        DestroyDynamic3DTextLabel(CrateInfo[i][crLabel]);
	    		    CrateInfo[i][crActive] = 0;
	    		    CrateInfo[i][InVehicle] = INVALID_VEHICLE_ID;
				    CrateInfo[i][crObject] = 0;
				    CrateInfo[i][crX] = 0;
				    CrateInfo[i][crY] = 0;
				    CrateInfo[i][crZ] = 0;
					CrateFound = 1;
					mysql_SaveCrates();
					break;
    		    }
    		    else
    		    {
	    		    SetPVarInt(playerid, "CrateGuns_CID", i);
	    		    ShowPlayerDialog(playerid, CRATE_GUNMENU, DIALOG_STYLE_LIST, "Select a gun from the Crate",	"Desert Eagle - 4 HG Mats\nSPAS-12 - 8 HG Mats\nMP5 - 5 HG Mats\nM4A1 - 6 HG Mats\nAK-47 - 5 HG Mats\nSniper Rifle - 5 HG Mats\nShotgun - 3 HG Mats\n9mm - 1 HG Mats", "Select", "Cancel");
					CrateFound = 1;
					break;
				}
    		}
    	}
    }
    if(!CrateFound)
    {
    	SendClientMessageEx(playerid, COLOR_GRAD2, "You're not near a crate! ");
    }
    return 1;
}

/*CMD:lockdown(playerid, params[]) {
	new iGroupID = PlayerInfo[playerid][pMember];
    if(PlayerInfo[playerid][pRank] >= arrGroupData[iGroupID][g_iCrateIsland])
    {
		new string[128];
		if(IslandGateStatus == 0)
		{
		    MoveDynamicObject(IslandGate, -1083.90002441,4289.70019531,7.59999990, 0.5);
		    foreach(new i: Player)
		    {
		        if(IsPlayerInRangeOfPoint(i, 500, -1083.90002441,4289.70019531,7.59999990))
		        {
		            SendClientMessageEx(i, COLOR_YELLOW, " UNAUTHORISED INTRUDERS!! LOCKDOWN SEQUENCE INITIATED!!");
					PlayAudioStreamForPlayer(i, "http://sampweb.ng-gaming.net/brendan/siren.mp3", -1083.90002441,4289.70019531,7.59999990, 500, 1);
		        }
		    }
			format(string, sizeof(string), "** %s has initiated a lockdown sequence at the Weapons Manufacturing Facility. **", GetPlayerNameEx(playerid));
			SendGroupMessage(1, DEPTRADIO, string);
			IslandGateStatus = gettime();
			IslandThreatElimTimer = SetTimer("IslandThreatElim", 1800000, 0);
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, " The facility is already locked down! ");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " Only the SAAS has the authority to do this! ");
	}
	return 1;
}*/

CMD:alockdown(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 4)
    {
        new string[128];
		if(IslandGateStatus == 0)
		{
		    MoveDynamicObject(IslandGate, -1083.90002441,4289.70019531,7.59999990, 0.5);
		    //foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(IsPlayerInRangeOfPoint(i, 500, -1083.90002441,4289.70019531,7.59999990))
					{
						SendClientMessageEx(i, COLOR_YELLOW, "** MEGAPHONE **  UNAUTHORISED INTRUDERS!! LOCKDOWN SEQUENCE INITIATED!!");
						PlayAudioStreamForPlayer(i, "http://sampweb.ng-gaming.net/brendan/siren.mp3", -1083.90002441,4289.70019531,7.59999990, 500, 1);
					}
				}	
		    }
		  	format(string, sizeof(string), "** %s has initiated a lockdown sequence at the Weapons Manufacturing Facility. **", GetPlayerNameEx(playerid));
			SendGroupMessage(1, DEPTRADIO, string);
			IslandGateStatus = gettime();
			IslandThreatElimTimer = SetTimer("IslandThreatElim", 900000, 0);
		}
		else
		{
		    KillTimer(IslandThreatElimTimer);
		    IslandThreatElim();
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD3, " You're not authorised to use this command! ");
	}
	return 1;
}

CMD:areloadpb(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337)
    {
		LoadPaintballArenas();
		SendClientMessageEx(playerid, COLOR_RED, " Paintball Arenas Loaded from the database. ");
    }
}

CMD:viewflags(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128];

		SendClientMessageEx(playerid, COLOR_YELLOW, "Player Flag Count List (/viewflag [player] to view):");
		new fCounter;
		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pFlagged] > 0)
				{
					format(string, sizeof(string), "%s(%d) Flag Count: %d.",GetPlayerNameEx(i),i,PlayerInfo[i][pFlagged]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					fCounter += 1;
				}
			}	
		}
		if(fCounter <= 0)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "None.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:viewflag(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new giveplayerid;
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /viewflag [player]");
	    if(IsPlayerConnected(giveplayerid))
	    {
			DisplayFlags(playerid, giveplayerid);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:businessdate(playerid, params[]) {
	new giveplayerid;
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    giveplayerid = playerid;
	}
	else
	{
	    if(sscanf(params, "u", giveplayerid)) giveplayerid = playerid;
	}
	if(IsValidBusinessID(PlayerInfo[playerid][pBusiness]))
	{
	    new string[128];
	    new datestring[32];
		datestring = date(Businesses[PlayerInfo[giveplayerid][pBusiness]][bMonths], 4);
		if(Businesses[PlayerInfo[giveplayerid][pBusiness]][bMonths] == 0) format(string, sizeof(string), "* Your business subscription is not set to expire.");
		else format(string, sizeof(string), "* Your business subscription expires on %s.", datestring);
	    SendClientMessageEx(playerid, COLOR_VIP, string);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a business subscription.");
	return 1;
}

CMD:vipdate(playerid, params[]) {
	new giveplayerid;
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    giveplayerid = playerid;
	}
	else
	{
	    if(sscanf(params, "u", giveplayerid)) giveplayerid = playerid;
	}
	if(1 <= PlayerInfo[giveplayerid][pDonateRank] <= 3 && !PlayerInfo[giveplayerid][pBuddyInvited])
	{
	    new string[128];
	    new drank[20];
		switch(PlayerInfo[giveplayerid][pDonateRank])
		{
			case 1: drank = "Bronze";
			case 2: drank = "Silver";
			case 3: drank = "Gold";
		}
	    new datestring[32];
		datestring = date(PlayerInfo[giveplayerid][pVIPExpire], 4);
		if(PlayerInfo[giveplayerid][pVIPExpire] == 0) format(string, sizeof(string), "* Your %s VIP subscription is not set to expire.", drank);
		else format(string, sizeof(string), "* Your %s VIP subscription expires on %s.", drank, datestring);
	    SendClientMessageEx(playerid, COLOR_VIP, string);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a VIP subscription.");
	return 1;
}

CMD:rewards(playerid, params[]) {
	new string[128];
	SendClientMessageEx(playerid, COLOR_GREEN, "Reward Information:");
	format(string, sizeof(string), "Total Reward Hours: %d", floatround(PlayerInfo[playerid][pRewardHours]));
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "Chances in #FallIntoFun Prize Drawing: %d", PlayerInfo[playerid][pRewardDrawChance]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "Gold Giftbox Tokens: %d", PlayerInfo[playerid][pGoldBoxTokens]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	if(!iRewardBox)
	{
		SendClientMessageEx(playerid, COLOR_RED, "Note: The gold gift box is currently disabled.");
	}
	return 1;
}

CMD:hhc(playerid, params[]) {
	return cmd_hhcheck(playerid, params);
}

CMD:hhcheck(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hhcheck [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
		    if(HHcheckFloats[giveplayerid][0] != 0)
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "That player is currently being checked for health hacks!");
		        return 1;
		    }
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && giveplayerid != playerid)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}
   			if(playerTabbed[giveplayerid] != 0)
   			{
      			SendClientMessageEx(playerid, COLOR_WHITE, "That player is currently alt-tabbed!");
		        return 1;
   			}
			if(HHcheckUsed != 0)
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "The health hack check is being used by another admin, please try again in a moment!");
		        return 1;
		    }

   			HHcheckUsed = 1;

        	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has initiated a health hack check on %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
        	ABroadCast(COLOR_YELLOW, string, 2);

  			format(string, sizeof(string), "Checking %s for health hacks, please wait....", GetPlayerNameEx(giveplayerid));
		    SendClientMessageEx(playerid, COLOR_YELLOW, string);

			GetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
			GetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
			GetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
			GetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
			HHcheckVW[giveplayerid] = GetPlayerVirtualWorld(giveplayerid);
			HHcheckInt[giveplayerid] = GetPlayerInterior(giveplayerid);

			DeletePVar(giveplayerid, "IsFrozen");
			TogglePlayerControllable(giveplayerid, 1);

            SetPlayerCameraPos(giveplayerid, 785.1896,1692.6887,5.2813);
			SetPlayerCameraLookAt(giveplayerid, 785.1896,1692.6887,0);
            SetPlayerVirtualWorld(giveplayerid, 0);
		    SetPlayerInterior(giveplayerid, 1);
		    SetPlayerHealth(giveplayerid, 100);
		    RemoveArmor(giveplayerid);
			SetPlayerPos(giveplayerid, -1400.994873, 106.899650, 1032.273437);
			SetPlayerFacingAngle(giveplayerid, 90.66);
			CreateExplosion(-1400.994873, 106.899650 , 1032.273437, 8, 20);

			SetTimerEx("HealthHackCheck", 1250, 0, "dd", playerid, giveplayerid);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:setboombox(playerid, params[])
{
	if(GetPVarType(playerid, "pBoomBox"))
	{
		ShowPlayerDialog(playerid,SETSTATION,DIALOG_STYLE_LIST,"Radio Menu","Genres\nTop 50 Stations\nSearch\nK-LSR\nNick's Radio\nCustom Audio URL\nTurn radio off","Select", "Close");
    }
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You don't have a boombox out!");
	}
	return 1;
}

CMD:setstation(playerid, params[]) {
    if(!IsPlayerInAnyVehicle(playerid)) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You must be in a car to use a car radio.");
	}
	ShowPlayerDialog(playerid,SETSTATION,DIALOG_STYLE_LIST,"Radio Menu","Genres\nTop 50 Stations\nSearch\nK-LSR\nNick's Radio\nCustom Audio URL\nTurn radio off","Select", "Close");
    return 1;
}

CMD:audiostopurl(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4) {
    	if(IsValidDynamicArea(audiourlid))
    	{
	        new string[128];

	        //foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(IsPlayerInRangeOfPoint(i, audiourlparams[3], audiourlparams[0], audiourlparams[1], audiourlparams[2]))
					{
						StopAudioStreamForPlayerEx(i);
					}
				}	
	        }
	        DestroyDynamicArea(audiourlid);
	        format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has stopped the audiourl",GetPlayerNameEx(playerid));
	        ABroadCast(COLOR_YELLOW, string, 4);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "There is no audiourl to stop");
		}
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not authorized to use that command !");
        return 1;
    }
    return 1;
}

CMD:audiourl(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4) {

        new range;
        if(sscanf(params, "d", range)) {
            SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /audiourl [range].");
            return 1;
        }

        SetPVarInt(playerid, "aURLrange", range);
        ShowPlayerDialog(playerid, AUDIO_URL, DIALOG_STYLE_INPUT, "Audio URL", "Enter Audio URL", "OK", "Cancel");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not authorized to use that command !");
        return 1;
    }
    return 1;
}

CMD:id(playerid, params[]) {
	if(isnull(params)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /id [player name]");
	}

	new
		szMessage[128],
		szPlayerName[MAX_PLAYER_NAME],
		iTargetID = strval(params);

	if(IsNumeric(params) && IsPlayerConnected(strval(params)))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 2) format(szMessage, sizeof szMessage, "%s (ID: %d) - (Level: %d) - (Ping: %d) - (FPS: %d)", GetPlayerNameEx(iTargetID), iTargetID, PlayerInfo[iTargetID][pLevel], GetPlayerPing(iTargetID), pFPS[iTargetID]);
		else format(szMessage, sizeof szMessage, "%s (ID: %d) - (Level: %d) - (Ping: %d)", GetPlayerNameEx(iTargetID), iTargetID, PlayerInfo[iTargetID][pLevel], GetPlayerPing(iTargetID));
		return SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	}
	else if(strlen(params) < 3) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Input at least 3 characters to search.");
	}
	//else foreach(new i: Player)
	else for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerName(i, szPlayerName, sizeof szPlayerName);
			if(strfind(szPlayerName, params, true) != -1) {
				if(PlayerInfo[playerid][pAdmin] >= 2) format(szMessage, sizeof szMessage, "%s (ID: %d) - (Level: %d) - (Ping: %d) - (FPS: %d)", GetPlayerNameEx(i), i, PlayerInfo[i][pLevel], GetPlayerPing(i), pFPS[i]);
				else format(szMessage, sizeof szMessage, "%s (ID: %d) - (Level: %d) - (Ping: %d)", GetPlayerNameEx(i), i, PlayerInfo[i][pLevel], GetPlayerPing(i));
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			}
		}	
	}
	return 1;
}

CMD:near(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new radius, string[128];
		if(sscanf(params, "d", radius)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /near [radius]");
		if(radius < 1 || radius > 100) return SendClientMessageEx(playerid, COLOR_GREY, "Radius must be higher than 0 and lower than 100!");

		format(string, sizeof(string), "Players within a %d block radius", radius);
		SendClientMessageEx(playerid, COLOR_GRAD5, string);
        //foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(i != playerid && ProxDetectorS(radius, playerid, i))
				{
					format(string, sizeof(string), "%s (ID: %d - Level: %d)", GetPlayerNameEx(i), i, PlayerInfo[i][pLevel]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
			}	
        }
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:givegun(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 4) {
        new sstring[128], playa, gun;

        if(sscanf(params, "ud", playa, gun)) {
            SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givegun [player] [weaponid]");
            SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
            SendClientMessageEx(playerid, COLOR_GRAD4, "(1)Brass Knuckles (2)Golf Club (3)Nite Stick (4)Knife (5)Baseball Bat (6)Shovel (7)Pool Cue (8)Katana (9)Chainsaw");
            SendClientMessageEx(playerid, COLOR_GRAD4, "(10)Purple Dildo (11)Small White Vibrator (12)Large White Vibrator (13)Silver Vibrator (14)Flowers (15)Cane (16)Frag Grenade");
            SendClientMessageEx(playerid, COLOR_GRAD3, "(17)Tear Gas (18)Molotov Cocktail (21)Jetpack (22)9mm (23)Silenced 9mm (24)Desert Eagle (25)Shotgun (26)Sawnoff Shotgun");
            SendClientMessageEx(playerid, COLOR_GRAD4, "(27)Combat Shotgun (28)Micro SMG (Mac 10) (29)SMG (MP5) (30)AK-47 (31)M4 (32)Tec9 (33)Rifle (34)Sniper Rifle");
            SendClientMessageEx(playerid, COLOR_GRAD4, "(35)Rocket Launcher (36)HS Rocket Launcher (37)Flamethrower (38)Minigun (39)Satchel Charge (40)Detonator");
            SendClientMessageEx(playerid, COLOR_GRAD4, "(41)Spraycan (42)Fire Extinguisher (43)Camera (44)Nightvision Goggles (45)Infared Goggles (46)Parachute");
            SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
            return 1;
        }

        format(sstring, sizeof(sstring), "You have given %s gun ID %d!",GetPlayerNameEx(playa),gun);
        if(gun < 1||gun > 47)
            { SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid weapon ID!"); return 1; }
        if(IsPlayerConnected(playa)) 
		{	
            if((PlayerInfo[playa][pConnectHours] < 2 || PlayerInfo[playa][pWRestricted] > 0) && gun != 46 && gun != 43) return SendClientMessageEx(playerid, COLOR_GRAD2, "That person is currently restricted from carrying weapons");
			if(PlayerInfo[playa][pAccountRestricted] != 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot do this to someone that has his account restricted!");
		    if(playa != INVALID_PLAYER_ID && gun <= 20 || gun >= 22) {
                PlayerInfo[playa][pAGuns][GetWeaponSlot(gun)] = gun;
                GivePlayerValidWeapon(playa, gun, 60000);
                SendClientMessageEx(playerid, COLOR_GRAD1, sstring);
            }
            else if(playa != INVALID_PLAYER_ID && gun == 21) {
                JetPack[playa] = 1;
                SetPlayerSpecialAction(playa, SPECIAL_ACTION_USEJETPACK);
                SendClientMessageEx(playerid, COLOR_GRAD1, sstring);
            }
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:jetpack(playerid, params[])
{
	new string[128], plo;
	if((PlayerInfo[playerid][pAdmin] >= 2) && sscanf(params, "u", plo)) {
        JetPack[playerid] = 1;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
        return 1;
    }
	else if(PlayerInfo[playerid][pAdmin] >= 4 && !sscanf(params, "u", plo))
	{
		if (IsPlayerConnected(plo))
		{
			if(plo != INVALID_PLAYER_ID)
			{
				SendClientMessageEx(plo, COLOR_GRAD1, "Enjoy your new jetpack!");
				JetPack[plo] = 1;
				SetPlayerSpecialAction(plo, SPECIAL_ACTION_USEJETPACK);
				format(string, sizeof(string), "AdmCmd: %s has received a jetpack from %s", GetPlayerNameEx(plo), GetPlayerNameEx(playerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				format(string, sizeof(string), "[Admin] %s (IP:%s) has given %s (IP:%s) a Jetpack.", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), GetPlayerNameEx(plo), GetPlayerIpEx(plo));
				Log("logs/admingive.log", string);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    return 1;
}

CMD:sethp(playerid, params[])
{
	new string[128], playa, health;
	if(sscanf(params, "ud", playa, health)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sethp [player] [health]");
	if(PlayerInfo[playa][pJailTime] >= 1) return SendClientMessage(playerid, COLOR_WHITE, "You can't set a OOC Prisoner Health!");
	if((PlayerInfo[playa][pAdmin] >= PlayerInfo[playerid][pAdmin]) && playa != playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on the same/greater level admin than you!");
	if(PlayerInfo[playerid][pAdmin] >= 4) {
		if(IsPlayerConnected(playa)) {
			if(playa != INVALID_PLAYER_ID)
			{
				SetPlayerHealth(playa, health);
				format(string, sizeof(string), "You have set %s's health to %d.", GetPlayerNameEx(playa), health);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:setmyhp(playerid, params[])
{
    new string[128], health;
    if(sscanf(params, "d", health)) {
        SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setmyhp [health]");
        return 1;
    }
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pUndercover] >= 1) {
        SetPlayerHealth(playerid, health);
        format(string, sizeof(string), "You have set your health to %d.", health);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:setarmor(playerid, params[])
{
    new string[128], playa, health;
    if(sscanf(params, "ud", playa, health))
	{
        SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setarmor [player] [armor]");
        return 1;
    }
    if (PlayerInfo[playerid][pAdmin] >= 4)
	{
        if(IsPlayerConnected(playa))
		{
            if(playa != INVALID_PLAYER_ID)
			{
                SetPlayerArmor(playa, health);
                format(string, sizeof(string), "You have set %s's armor to %d.", GetPlayerNameEx(playa), health);
                SendClientMessageEx(playerid, COLOR_WHITE, string);
            }
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:hackwarnings(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(GetPVarType(i, "ArmorWarning"))
				{
					new Float: armor, szMessage[128];
					GetPlayerArmour(i, armor);
					if(armor > CurrentArmor[i])
					{
						format(szMessage, sizeof(szMessage), "%s (ID: %i, Level: %d) - Armor Hacking - Recorded: %f - Current: %f", GetPlayerNameEx(i), i, PlayerInfo[i][pLevel], CurrentArmor[i], armor);
						SendClientMessage(playerid, COLOR_WHITE, szMessage);
					}
				}
			}	
		}
	}
	return 1;
}

CMD:setmyarmor(playerid, params[])
{
    new string[128], armor;
    if(sscanf(params, "d", armor))
	{
        SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setmyarmor [amount]");
        return 1;
    }
    if (PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pUndercover] >= 1)
	{
        SetPlayerArmor(playerid, armor);
        format(string, sizeof(string), "You have set your armor to %d.", armor);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:setarmorall(playerid, params[])
{
    new armor;
    if(sscanf(params, "d", armor)) {
        SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setarmorall [armor]");
        return 1;
    }

    if (PlayerInfo[playerid][pAdmin] >= 1337) {
        //foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				SetPlayerArmor(i, armor);
			}	
        }
    }

    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}
#if defined zombiemode
CMD:zombiehelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GREY, "Commands: /buycure /bite /curevirus /getvials (For Medics)");
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Admin Commands: /zombieweather /zombieevent /makezombie /setvials /zombieannounce /unzombie");
	}
	return 1;
}

CMD:buycure(playerid, params[])
{
	if(IsAtDeliverPatientPoint(playerid))
	{
		if(gettime() - 900 > PlayerInfo[playerid][pBoughtCure] || PlayerInfo[playerid][pBoughtCure] == 0)
		{
			if(GetPVarInt(playerid, "PinConfirmed"))
			{
				if(PlayerInfo[playerid][pCredits] < 20)
					return SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough credits to purchase this item. Visit shop.ng-gaming.net to purchase credits.");
				
				

				new string[128];
				format(string, sizeof(string), "[BUYCURE] [User: %s(%i)] [IP: %s] [Credits: %s] [Zombie Cure] [Price: %s]", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), GetPlayerIpEx(playerid), number_format(PlayerInfo[playerid][pCredits]), number_format(20));
				Log("logs/zombiecure.log", string), print(string);

				GivePlayerCredits(playerid, -20, 1);

				PlayerInfo[playerid][pVials] += 5;
				PlayerInfo[playerid][pBoughtCure] = gettime();
				
				g_mysql_SaveAccount(playerid);
				
				format(string, sizeof(string), "[BUYCURE] [User: %s(%i)] [IP: %s] [Credits: %s] [Zombie Cure] [Price: %s]", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), GetPlayerIpEx(playerid), number_format(PlayerInfo[playerid][pCredits]), number_format(20));
				Log("logs/credits.log", string), print(string);

				format(string, sizeof(string), "You have purchased a vial of the cure for %s credits. Use it with /curevirus.", number_format(20));
				SendClientMessageEx(playerid, COLOR_CYAN, string);	
			}
			else
			{
				PinLogin(playerid);
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You must wait 15 minutes between purchasing cures!");
		}
	}
	else {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You must be at a hospital delivery point to purchase a cure!");
	}
	return 1;
}

CMD:zombieweather(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
    	SetWeather(9);
    	SyncMinTime();
    	SendRconCommand("loadfs zombie_mapping");
    	SendClientMessageEx(playerid, COLOR_WHITE, "Zombie weather loaded.");
	}
	return 1;
}

//Zombie Event Commands
CMD:zombieevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
	    if(zombieevent == 0)
	    {
	        //foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					PlayerInfo[i][pVials]++;
				}	
	        }
	        zombieevent=1;
	        //SendAudioToRange(70, 100, 0.0, 0.0, 0.0, 10000); RESCRIPT NEW SOUND
			SendGroupMessage(3, TEAM_MED_COLOR, "Attention FDSA, the zombie event has started, you can now use /curevirus to cure the virus");
	        SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled zombie mode.");
	        mysql_function_query(MainPipeline, "DELETE FROM zombie", false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
	    }
	    else
	    {
	        zombieevent=0;
			SendRconCommand("unloadfs zombie_mapping");
	        SyncMinTime();
			SetWeather(5);
			mysql_function_query(MainPipeline, "DELETE FROM zombie", false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
			//foreach(Player, i)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
			    UnZombie(i);
			}
	        SendClientMessageEx(playerid, COLOR_WHITE, "Nothing to see here, folks.");
		}
	}
	return 1;
}

CMD:zombieannounce(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
	    if(zombieevent == 1)
	    {
	        //SendAudioToRange(65, 100, 0.0, 0.0, 0.0, 10000); RESCRIPT NEW SOUND
			SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
			SendClientMessageToAllEx(COLOR_DBLUE, "** Unknown Spokesman: Attention, attention. This is a government announcement.");
			SendClientMessageToAllEx(COLOR_DBLUE, "** Unknown Spokesman: A state of emergency has been declared by the President of San Andreas");
			SendClientMessageToAllEx(COLOR_DBLUE, "** Unknown Spokesman: The City of Los Santos has been quarantined under executive order 133B.");
			SendClientMessageToAllEx(COLOR_DBLUE, "** Unknown Spokesman: Please direct yourself to government services for assistance. May god help us all.");
	    }
	}
	return 1;
}

CMD:makezombie(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
 		if(zombieevent == 1)
	    {
    		new giveplayerid;
			if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /makezombie [player]");
			MakeZombie(giveplayerid);
	    }
	}
	return 1;
}

CMD:getvials(playerid, params[])
{
	if(zombieevent == 1)
	{
      	if(IsAMedic(playerid) && IsAnAmbulance(GetPlayerVehicleID(playerid)))
		{
		    if(PlayerInfo[playerid][pVials] > 0)
				return SendClientMessageEx(playerid, COLOR_GREY, "You already have vials.");

			new string[128];
		    PlayerInfo[playerid][pVials] += 5;
		    SendClientMessageEx(playerid, COLOR_GREEN, "You have received 5 vials.");
		    format(string, sizeof(string), "* %s takes 5 vials from the vehicle.", GetPlayerNameEx(playerid));
			ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "You aren't in a medic or in an ambulance.");
		}
	}
	return 1;
}

CMD:setvials(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new giveplayerid, vials;
		if(sscanf(params, "ui", giveplayerid, vials)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setvials [player] [number]");
		if(vials < 0) return 1;
		new string[128];

		PlayerInfo[giveplayerid][pVials] += vials;
		format(string, sizeof(string), "You gave %s %d vials of the cure!", GetPlayerNameEx(giveplayerid), vials);
		SendClientMessageEx(playerid, COLOR_WHITE,string);
		format(string, sizeof(string), "You received %d vials of the cure - use them with /curevirus.", vials);
		SendClientMessageEx(giveplayerid, COLOR_WHITE,string);
	}
	return 1;
}

CMD:unzombie(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
 		if(zombieevent == 1)
	    {
    		new giveplayerid;
			if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /unzombie [player]");
			SendClientMessageEx(playerid, COLOR_GREY, "Done!");
			UnZombie(giveplayerid);
	    }
	}
	return 1;
}

CMD:bite(playerid, params[])
{
	if(zombieevent == 1)
	{
		if(GetPVarType(playerid, "pIsZombie"))
		{
		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid, X, Y, Z);
			//foreach(Player, i)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
			    if(!GetPVarType(i, "pIsZombie") && !IsPlayerInAnyVehicle(i) && IsPlayerInRangeOfPoint(i, 2, X, Y, Z))
			    {


					/*if(GetPVarType(i, "pZombieBit")) {
						return SendClientMessageEx(playerid, COLOR_GREY, "This player is already infected - find somebody else!");
					} */
					new Float:hp, string[128];
					if(GetPVarInt(i, "LastBiteTime"))
					{
						if(gettime() < GetPVarInt(i, "LastBiteTime"))
						{
			    			format(string, sizeof(string), "You must wait %d seconds before you can bite that player.", (GetPVarInt(i, "LastBiteTime") - gettime()));
			    			SendClientMessageEx(playerid, COLOR_GREY, string);
			    			return 1;
						}
					}
					GetPlayerHealth(i, hp);
					SetPlayerHealth(i, hp - 30);
					SetPVarInt(i, "pZombieBit", 1);
					SetPVarInt(i, "pZombieBiter", playerid);
					SetPVarInt(i, "LastBiteTime", gettime()+15);

					SetPVarInt(playerid, "LastBiteID", i);
					SetPlayerToTeamColor(i);
					format(string, sizeof(string), "* %s clamps down onto %s's skin, biting into it.", GetPlayerNameEx(playerid), GetPlayerNameEx(i));
					ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					//SendAudioToRange(66, 100, X, Y, Z, 5); RESCRIPT NEW SOUND
					return 1;
			    }
			}
			SendClientMessageEx(playerid, COLOR_GREY, "No one is near you to bite!");
		}
	}
	else
	{
	    if(EventKernel[EventType] == 4 && (GetPVarInt(playerid, "EventToken") == 1) && GetPVarType(playerid, "pEventZombie"))
		{
		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid, X, Y, Z);
			//foreach(Player, i)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
			    if((GetPVarInt(i, "EventToken") == 1) && !GetPVarType(i, "pEventZombie"))
			    {
				    if(IsPlayerInRangeOfPoint(i, 2, X, Y, Z))
				    {
						new Float:hp, string[128];
						GetPlayerHealth(i, hp);
						SetPlayerHealth(i, hp-20);
						format(string, sizeof(string), "* %s clamps down onto %s's skin, biting into it.", GetPlayerNameEx(playerid), GetPlayerNameEx(i));
						ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						//SendAudioToRange(65, 100, X, Y, Z, 5);
						return 1;
				    }
				}
			}
			SendClientMessageEx(playerid, COLOR_GREY, "No one is near you to bite!");
		}
	}
	return 1;
}

CMD:curevirus(playerid, params[])
{
	if(zombieevent == 1 && PlayerInfo[playerid][pVials])
	{
		new giveplayerid, string[128];
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /curevirus [player]");
		if(!GetPVarType(giveplayerid, "pZombieBit")) return SendClientMessageEx(playerid, COLOR_GREY, "That person does not have the virus, or they're already a zombie!");
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(giveplayerid, X, Y, Z);
		if(!IsPlayerInRangeOfPoint(playerid, 5, X, Y, Z)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not near that patient.");

		if(GetPVarInt(playerid, "pZombieHealTime"))
		{
			if(gettime() < GetPVarInt(playerid, "pZombieHealTime"))
			{
			    format(string, sizeof(string), "You must wait %d seconds before you can heal again.", (GetPVarInt(playerid, "pZombieHealTime") - gettime()));
			    SendClientMessageEx(playerid, COLOR_GREY, string);
			    return 1;
			}
		}

		format(string, sizeof(string), "* %s injects %s with an antidote.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
        ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		DeletePVar(giveplayerid, "pZombieBit");
		SetPVarInt(playerid, "pZombieHealTime", gettime()+15);
		SetPlayerToTeamColor(giveplayerid);

		PlayerInfo[playerid][pVials]--;
		if(PlayerInfo[playerid][pVials] == 0)
		{
      		SendClientMessageEx(playerid, COLOR_GREY, "You've ran out of vials!");
		}
		else
		{
  			format(string, sizeof(string), "You now have %d vials left.", PlayerInfo[playerid][pVials]);
			SendClientMessageEx(playerid, COLOR_GREY, string);
		}

  		format(string, sizeof(string), "INSERT INTO zombieheals (id,num) VALUES (%d,1) ON DUPLICATE KEY UPDATE num = num + 1", GetPlayerSQLId(playerid));
		mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
	}
	return 1;
}
#endif

CMD:fix(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7 || PlayerInfo[playerid][pJob3] == 7 ||
	(PlayerInfo[playerid][pBusiness] != INVALID_BUSINESS_ID && Businesses[PlayerInfo[playerid][pBusiness]][bType] == BUSINESS_TYPE_MECHANIC && InBusiness(playerid) == PlayerInfo[playerid][pBusiness]))
	{
    	new string[32 + MAX_PLAYER_NAME];
        if(IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessageEx(playerid, COLOR_GRAD1, "You can not repair while inside the vehicle.");
		    return 1;
		}

  		if(gettime() < PlayerInfo[playerid][pMechTime])
		{
  			format(string, sizeof(string), "You must wait %d seconds!", PlayerInfo[playerid][pMechTime]-gettime());
     		SendClientMessageEx(playerid, COLOR_GRAD1,string);
     	}
		else if(GetPVarInt(playerid, "EventToken"))
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this while in an event.");
		}
  		else
		{
			new closestcar = GetClosestCar(playerid);

  			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 10.0))
  			{
				new engine,lights,alarm,doors,bonnet,boot,objective;
				GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
				if(!IsABike(closestcar) && !IsAPlane(closestcar)) {
					if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "The vehicle hood must be opened in order to repair it.");
						return 1;
					}
				}
  				PlayerInfo[playerid][pMechTime] = gettime()+60;
   				SetVehicleHealth(closestcar, 1000.0);
				Vehicle_Armor(closestcar);
				if(GetVehicleModel(closestcar) == 481 && GetVehicleModel(closestcar) == 509 && GetVehicleModel(closestcar) == 510)
				{
					SetVehicleParamsEx(closestcar, VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
					arr_Engine{closestcar} = 1;
				}
    			format(string, sizeof(string), "* %s has repaired the vehicle.", GetPlayerNameEx(playerid));
    			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not close enough to any vehicle.");
  		}
    }
    else return SendClientMessageEx(playerid, COLOR_WHITE, "You are not a Mechanic!" );
    return 1;
}

CMD:turfinfo(playerid, params[])
{
    if(GetPlayerTurfWarsZone(playerid) != -1) {
        new string[128];
        new tw = GetPlayerTurfWarsZone(playerid);
        format(string,sizeof(string),"|___________ (ID: %d) %s ___________|",tw,TurfWars[tw][twName]);
        SendClientMessageEx(playerid, COLOR_GREEN, string);
        if(TurfWars[tw][twOwnerId] != -1) {
            format(string,sizeof(string),"Owner: %s.",FamilyInfo[TurfWars[tw][twOwnerId]][FamilyName]);
        }
        else {
            format(string,sizeof(string),"Owner: Vacant.");
        }
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        format(string,sizeof(string),"Vulnerable: %d Hours.",TurfWars[tw][twVulnerable]);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        format(string,sizeof(string),"Locked: %d.",TurfWars[tw][twLocked]);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        format(string,sizeof(string),"Active: %d.",TurfWars[tw][twActive]);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        if(TurfWars[tw][twActive] != 0) {
            format(string,sizeof(string),"Time Left: %d Secs.",TurfWars[tw][twTimeLeft]);
            SendClientMessageEx(playerid, COLOR_WHITE, string);
            if(TurfWars[tw][twAttemptId] == -2) {
                format(string,sizeof(string),"Takeover Faction: Law Enforcement.");
                SendClientMessageEx(playerid, COLOR_WHITE, string);
            }
            else {
                format(string,sizeof(string),"Takeover Family: %s.",FamilyInfo[TurfWars[tw][twAttemptId]][FamilyName]);
                SendClientMessageEx(playerid, COLOR_WHITE, string);
            }
        }
        switch(TurfWars[tw][twSpecial]) {
            case 1:
            {
                format(string,sizeof(string),"Special Perks: Extortion.");
            }
            default:
            {
                format(string,sizeof(string),"Special Perks: None.");
            }
        }
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a turf!");
    }
    return 1;
}

CMD:unlockarenas(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
        return 1;
    }
    for(new i = 0; i < MAX_ARENAS; i++) {
        if(PaintBallArena[i][pbLocked] == 2) {
            ResetPaintballArena(i);
        }
    }
    new string[128];
    format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has unlocked all Paintball Arenas.", GetPlayerNameEx(playerid));
    ABroadCast(COLOR_YELLOW, string, 2);
    format(string, sizeof(string), "* Admin %s has unlocked all Paintball Arenas, you may join/create them now.", GetPlayerNameEx(playerid));
    SendClientMessageToAllEx(COLOR_LIGHTBLUE, string);
    return 1;
}

CMD:lockarenas(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
        return 1;
    }
    new string[128];
    for(new i = 0; i < MAX_ARENAS; i++) {
        //foreach(new p: Player) {
		for(new p = 0; p < MAX_PLAYERS; ++p)
		{
			if(IsPlayerConnected(p))
			{		
				new arenaid = GetPVarInt(p, "IsInArena");
				if(arenaid == i) {
					if(PaintBallArena[arenaid][pbBidMoney] > 0) {
						GivePlayerCash(p,PaintBallArena[GetPVarInt(p, "IsInArena")][pbBidMoney]);
						format(string,sizeof(string),"You have been refunded a total of $%d because of premature closure.",PaintBallArena[GetPVarInt(p, "IsInArena")][pbBidMoney]);
						SendClientMessageEx(p, COLOR_WHITE, string);
					}
					if(arenaid == GetPVarInt(p, "ArenaNumber")) {
						switch(PaintBallArena[arenaid][pbGameType]) {
							case 1:
							{
								if(PlayerInfo[p][pDonateRank] < 3) {
									PlayerInfo[p][pPaintTokens] += 3;
									format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",3);
									SendClientMessageEx(p, COLOR_WHITE, string);
								}
							}
							case 2:
							{
								if(PlayerInfo[p][pDonateRank] < 3) {
									PlayerInfo[p][pPaintTokens] += 4;
									format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",4);
									SendClientMessageEx(p, COLOR_WHITE, string);
								}
							}
							case 3:
							{
								if(PlayerInfo[p][pDonateRank] < 3) {
									PlayerInfo[p][pPaintTokens] += 5;
									format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",5);
									SendClientMessageEx(p, COLOR_WHITE, string);
								}
							}
							case 4:
							{
								if(PlayerInfo[p][pDonateRank] < 3) {
									PlayerInfo[p][pPaintTokens] += 5;
									format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",5);
									SendClientMessageEx(p, COLOR_WHITE, string);
								}
							}
							case 5:
							{
								if(PlayerInfo[p][pDonateRank] < 3) {
									PlayerInfo[p][pPaintTokens] += 6;
									format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",6);
									SendClientMessageEx(p, COLOR_WHITE, string);
								}
							}
						}
					}
					LeavePaintballArena(p, arenaid);
				}
			}	
        }
        ResetPaintballArena(i);
        PaintBallArena[i][pbLocked] = 2;
    }
    format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has locked all Paintball Arenas.", GetPlayerNameEx(playerid));
    ABroadCast(COLOR_YELLOW, string, 2);
    format(string, sizeof(string), "* Admin %s has locked all Paintball Arenas for some short maintenance.", GetPlayerNameEx(playerid));
    SendClientMessageToAllEx(COLOR_LIGHTBLUE, string);
    return 1;
}

CMD:savetwpos(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] > 3 || PlayerInfo[playerid][pGangModerator] >= 1) {
        new string[128];
        new tw = GetPVarInt(playerid, "EditingTurfs");
        new stage = GetPVarInt(playerid, "EditingTurfsStage");
        new Float:x, Float: y, Float: z;
        new Float:tminx, Float: tminy, Float: tmaxx, Float: tmaxy;
        GetPlayerPos(playerid, x, y, z);
        if(stage == -1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are not editing any Turf Dimensions right now!");
            return 1;
        }
        else {
            switch(stage) {
                case 1:
                {
                    SetPVarFloat(playerid, "EditingTurfsMinX", x);
                    format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                    SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Turf West Wall.");
                    SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    SendClientMessageEx(playerid, COLOR_WHITE, "Goto a location and type (/savetwpos) to edit the South Wall.");
                    SetPVarInt(playerid, "EditingTurfsStage", 2);
                }
                case 2:
                {
                    SetPVarFloat(playerid, "EditingTurfsMinY", y);
                    format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                    SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Turf South Wall.");
                    SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    SendClientMessageEx(playerid, COLOR_WHITE, "Goto a location and type (/savetwpos) to edit the East Wall.");
                    SetPVarInt(playerid, "EditingTurfsStage", 3);
                }
                case 3:
                {
                    SetPVarFloat(playerid, "EditingTurfsMaxX", x);
                    format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                    SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Turf East Wall.");
                    SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    SendClientMessageEx(playerid, COLOR_WHITE, "Goto a location and type (/savetwpos) to edit the North Wall.");
                    SetPVarInt(playerid, "EditingTurfsStage", 4);
                }
                case 4:
                {
                    SetPVarFloat(playerid, "EditingTurfsMaxY", y);
                    format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                    SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Turf North Wall.");
                    SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    format(string,sizeof(string),"You have successfully re-created (TurfID: %d) %s.",tw,TurfWars[tw][twName]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    SetPVarInt(playerid, "EditingTurfsStage", -1);

                    DestroyTurfWarsZone(tw);

                    tminx = GetPVarFloat(playerid, "EditingTurfsMinX");
                    tminy = GetPVarFloat(playerid, "EditingTurfsMinY");
                    tmaxx = GetPVarFloat(playerid, "EditingTurfsMaxX");
                    tmaxy = GetPVarFloat(playerid, "EditingTurfsMaxY");

                    TurfWars[tw][twMinX] = tminx;
                    TurfWars[tw][twMinY] = tminy;
                    TurfWars[tw][twMaxX] = tmaxx;
                    TurfWars[tw][twMaxY] = tmaxy;

                    SetPVarFloat(playerid, "EditingTurfsMinX", 0.0);
                    SetPVarFloat(playerid, "EditingTurfsMinY", 0.0);
                    SetPVarFloat(playerid, "EditingTurfsMaxX", 0.0);
                    SetPVarFloat(playerid, "EditingTurfsMaxY", 0.0);

                    CreateTurfWarsZone(1,tw);
                    ShowPlayerDialog(playerid,TWEDITTURFSMENU,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Menu:","Edit Dimensions...\nEdit Owners...\nEdit Vulnerable Time...\nEdit Locked...\nEdit Perks...\nReset War...\nDestroy Turf","Select","Back");
                }
            }
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
    }
    return 1;
}

CMD:savedmpos(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337) {
        if(GetPVarInt(playerid, "EditingDMPos") == 0) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any spawn positions.");
            return 1;
        }
        if(GetPVarInt(playerid, "ArenaNumber") == -1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any arenas.");
            return 1;
        }
        new string[128];
        new arenaid = GetPVarInt(playerid, "ArenaNumber");
        new dmposid = GetPVarInt(playerid, "EditingDMPos");
        new Float:x, Float: y, Float: z, Float: angle;
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        switch(dmposid) {
            case 1:
            {
                PaintBallArena[arenaid][pbDeathmatch1][0] = x;
                PaintBallArena[arenaid][pbDeathmatch1][1] = y;
                PaintBallArena[arenaid][pbDeathmatch1][2] = z;
                PaintBallArena[arenaid][pbDeathmatch1][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited DM Spawn Position 1.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingDMPos", 0);
                PaintballEditArenaDMSpawns(playerid);
            }
            case 2:
            {
                PaintBallArena[arenaid][pbDeathmatch2][0] = x;
                PaintBallArena[arenaid][pbDeathmatch2][1] = y;
                PaintBallArena[arenaid][pbDeathmatch2][2] = z;
                PaintBallArena[arenaid][pbDeathmatch2][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited DM Spawn Position 2.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingDMPos", 0);
                PaintballEditArenaDMSpawns(playerid);
            }
            case 3:
            {
                PaintBallArena[arenaid][pbDeathmatch3][0] = x;
                PaintBallArena[arenaid][pbDeathmatch3][1] = y;
                PaintBallArena[arenaid][pbDeathmatch3][2] = z;
                PaintBallArena[arenaid][pbDeathmatch3][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited DM Spawn Position 3.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingDMPos", 0);
                PaintballEditArenaDMSpawns(playerid);
            }
            case 4:
            {
                PaintBallArena[arenaid][pbDeathmatch4][0] = x;
                PaintBallArena[arenaid][pbDeathmatch4][1] = y;
                PaintBallArena[arenaid][pbDeathmatch4][2] = z;
                PaintBallArena[arenaid][pbDeathmatch4][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited DM Spawn Position 4.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingDMPos", 0);
                PaintballEditArenaDMSpawns(playerid);
            }
        }

    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    }
    return 1;
}

CMD:saveteampos(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337) {
        if(GetPVarInt(playerid, "EditingTeamPos") == 0) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any spawn positions.");
            return 1;
        }
        if(GetPVarInt(playerid, "ArenaNumber") == -1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any arenas.");
            return 1;
        }
        new string[128];
        new arenaid = GetPVarInt(playerid, "ArenaNumber");
        new teamposid = GetPVarInt(playerid, "EditingTeamPos");
        new Float:x, Float: y, Float: z, Float: angle;
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        switch(teamposid) {
            case 1:
            {
                PaintBallArena[arenaid][pbTeamRed1][0] = x;
                PaintBallArena[arenaid][pbTeamRed1][1] = y;
                PaintBallArena[arenaid][pbTeamRed1][2] = z;
                PaintBallArena[arenaid][pbTeamRed1][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Red Team Spawn Position 1.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingTeamPos", 0);
                PaintballEditArenaTeamSpawns(playerid);
            }
            case 2:
            {
                PaintBallArena[arenaid][pbTeamRed2][0] = x;
                PaintBallArena[arenaid][pbTeamRed2][1] = y;
                PaintBallArena[arenaid][pbTeamRed2][2] = z;
                PaintBallArena[arenaid][pbTeamRed2][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Red Team Spawn Position 2.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingTeamPos", 0);
                PaintballEditArenaTeamSpawns(playerid);
            }
            case 3:
            {
                PaintBallArena[arenaid][pbTeamRed3][0] = x;
                PaintBallArena[arenaid][pbTeamRed3][1] = y;
                PaintBallArena[arenaid][pbTeamRed3][2] = z;
                PaintBallArena[arenaid][pbTeamRed3][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Red Team Spawn Position 3.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingTeamPos", 0);
                PaintballEditArenaTeamSpawns(playerid);
            }
            case 4:
            {
                PaintBallArena[arenaid][pbTeamBlue1][0] = x;
                PaintBallArena[arenaid][pbTeamBlue1][1] = y;
                PaintBallArena[arenaid][pbTeamBlue1][2] = z;
                PaintBallArena[arenaid][pbTeamBlue1][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Blue Team Spawn Position 1.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingTeamPos", 0);
                PaintballEditArenaTeamSpawns(playerid);
            }
            case 5:
            {
                PaintBallArena[arenaid][pbTeamBlue2][0] = x;
                PaintBallArena[arenaid][pbTeamBlue2][1] = y;
                PaintBallArena[arenaid][pbTeamBlue2][2] = z;
                PaintBallArena[arenaid][pbTeamBlue2][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Blue Team Spawn Position 2.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingTeamPos", 0);
                PaintballEditArenaTeamSpawns(playerid);
            }
            case 6:
            {
                PaintBallArena[arenaid][pbTeamBlue3][0] = x;
                PaintBallArena[arenaid][pbTeamBlue3][1] = y;
                PaintBallArena[arenaid][pbTeamBlue3][2] = z;
                PaintBallArena[arenaid][pbTeamBlue3][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Blue Team Spawn Position 3.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingTeamPos", 0);
                PaintballEditArenaTeamSpawns(playerid);
            }
        }

    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    }
    return 1;
}

CMD:saveflagpos(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337) {
        if(GetPVarInt(playerid, "EditingFlagPos") == 0) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any flag positions.");
            return 1;
        }
        if(GetPVarInt(playerid, "ArenaNumber") == -1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any arenas.");
            return 1;
        }
        new string[128];
        new arenaid = GetPVarInt(playerid, "ArenaNumber");
        new flagposid = GetPVarInt(playerid, "EditingFlagPos");
        new Float:x, Float: y, Float: z;
        GetPlayerPos(playerid, x, y, z);

        switch(flagposid) {
            case 1:                               // Red Flag Spawn Position
            {
                PaintBallArena[arenaid][pbFlagRedSpawn][0] = x;
                PaintBallArena[arenaid][pbFlagRedSpawn][1] = y;
                PaintBallArena[arenaid][pbFlagRedSpawn][2] = z;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Red Team Flag Position.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingFlagPos", 0);
                PaintballEditArenaFlagSpawns(playerid);
            }
            case 2:                               // Blue Flag Spawn Position
            {
                PaintBallArena[arenaid][pbFlagBlueSpawn][0] = x;
                PaintBallArena[arenaid][pbFlagBlueSpawn][1] = y;
                PaintBallArena[arenaid][pbFlagBlueSpawn][2] = z;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Blue Team Flag Position.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingFlagPos", 0);
                PaintballEditArenaFlagSpawns(playerid);
            }
        }

    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    }
    return 1;
}

CMD:savehillpos(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337) {
        if(GetPVarInt(playerid, "ArenaNumber") == -1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any arenas.");
            return 1;
        }
        new string[128];
        new arenaid = GetPVarInt(playerid, "ArenaNumber");
        new stage = GetPVarInt(playerid, "EditingHillStage");
        new Float:x, Float: y, Float: z;
        GetPlayerPos(playerid, x, y, z);

        if(stage == -1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are not editing any Hill Positions right now!");
            return 1;
        }
        else {
            switch(stage) {
                case 1:
                {
                    PaintBallArena[arenaid][pbHillX] = x;
                    PaintBallArena[arenaid][pbHillY] = y;
                    PaintBallArena[arenaid][pbHillZ] = z;

                    format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                    SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited the Hill Position.");
                    SendClientMessageEx(playerid, COLOR_GRAD2, string);

                    SetPVarInt(playerid, "EditingHillStage", -1);
                    PaintballEditArenaMenu(playerid);
                }
            }
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    }
    return 1;
}

CMD:twmenu(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] > 3 || PlayerInfo[playerid][pGangModerator] >= 1)
	{
        ShowPlayerDialog(playerid,TWADMINMENU,DIALOG_STYLE_LIST,"Turf Wars - Admin Menu:","Edit Turfs...\nEdit Family Colors...","Select","Exit");
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
    }
    return 1;
}

CMD:switchteam(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") == -1) {
        SendClientMessageEx(playerid,COLOR_WHITE,"You are not in a arena, you can not switch teams!");
        return 1;
    }
    if(GetPVarInt(playerid, "AOSlotPaintballFlag") != -1) {
        SendClientMessageEx(playerid,COLOR_WHITE,"You can not switch teams while holding the flag!");
        return 1;
    }

    new arenaid = GetPVarInt(playerid, "IsInArena");
    if(PaintBallArena[arenaid][pbGameType] == 2 || PaintBallArena[arenaid][pbGameType] == 3 || PaintBallArena[arenaid][pbGameType] == 5) {
        PaintballSwitchTeam(playerid);
    }
    else {
        SendClientMessageEx(playerid,COLOR_WHITE,"You can not switch teams in this gamemode!");
    }
    return 1;
}

CMD:joinarena(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") == -1) {
        if(PlayerInfo[playerid][pConnectHours] < 2) {
            SendClientMessageEx(playerid, COLOR_WHITE, "You are unable to join a Paintball Match due to your weapon restriction.");
            return 1;
        }
        if(GetPVarInt(playerid, "Packages") >= 1 || TaxiAccepted[playerid] != INVALID_PLAYER_ID || EMSAccepted[playerid] != INVALID_PLAYER_ID || BusAccepted[playerid] != INVALID_PLAYER_ID || MedicAccepted[playerid] != INVALID_PLAYER_ID || MechanicCallTime[playerid] >= 1) {
            SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
            return 1;
        }
		if(PlayerCuffed[playerid] >= 1 || PlayerInfo[playerid][pJailTime] > 0 || GetPVarInt(playerid, "Injured")) return SendClientMessageEx( playerid, COLOR_WHITE, "You can't do this right now." );
        if(PlayerInfo[playerid][pAdmin] > 2) {
            ShowPlayerDialog(playerid,PBMAINMENU,DIALOG_STYLE_LIST,"Paintball Arena - Main Menu:","Choose an Arena\nPaintball Tokens\nAdmin Menu","Select","Leave");
            return 1;
        }
        if(IsPlayerInRangeOfPoint(playerid,10.0,1294.5062,-1445.0599,0.4403)) {
            ShowPlayerDialog(playerid,PBMAINMENU,DIALOG_STYLE_LIST,"Paintball Arena - Main Menu:","Choose an Arena\nPaintball Tokens\nAdmin Menu","Select","Leave");
        }
        else {
            SendClientMessageEx(playerid, COLOR_WHITE, "You are not near the Paintball Arena!");
        }

    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "You are already in a arena!");
    }
    return 1;
}

CMD:killcheckpoint(playerid, params[])
{
	ClearCheckpoint(playerid);
	SendClientMessageEx(playerid,COLOR_WHITE,"All current checkpoints, trackers and accepted fares have been reset.");
	return 1;
}

CMD:exitarena(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") >= 0) {
        if(GetPlayerState(playerid) == PLAYER_STATE_WASTED) {
            SendClientMessageEx(playerid, COLOR_WHITE, "You cannot do that at this time.");
            return 1;
        }
        if(PaintBallArena[GetPVarInt(playerid, "IsInArena")][pbTimeLeft] <= 30) {
            SendClientMessageEx(playerid, COLOR_WHITE, "You cannot leave when there is less than 30 seconds left!");
            return 1;
        }
        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a arena!");
    }
    return 1;
}

CMD:savecfgs(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1337) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
        return 1;
    }
    SendClientMessageEx(playerid, COLOR_WHITE, "* Saving CFG Files..");
    SaveTurfWars();
    SaveFamilies();
    SendClientMessageEx(playerid, COLOR_WHITE, "* Done");
    return 1;
}


CMD:loadcfgs(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1337) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
        return 1;
    }
    SendClientMessageEx(playerid, COLOR_WHITE, "* Reloading CFG Files..");
    g_mysql_LoadMOTD();
	// Local Configs
	Misc_Load();
    SendClientMessageEx(playerid, COLOR_WHITE, "* Done");
    return 1;
}

CMD:admins(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2) {
        SendClientMessageEx(playerid, COLOR_GRAD1, "Admins Online:");
        //foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pAdmin] >= 2 && PlayerInfo[i][pAdmin] <= PlayerInfo[playerid][pAdmin]) {
					new string[128], tdate[11], thour[9], i_timestamp[3];
					getdate(i_timestamp[0], i_timestamp[1], i_timestamp[2]);
					format(tdate, sizeof(tdate), "%d-%02d-%02d", i_timestamp[0], i_timestamp[1], i_timestamp[2]);
					format(thour, sizeof(thour), "%02d:00:00", hour);

					if(PlayerInfo[playerid][pAdmin] >= 4)
					{
						if(PlayerInfo[i][pAdmin] == 2) format(string, sizeof(string), "%s{BFC0C2}: %s (RTH: %d | RT: %d)", GetStaffRank(i), GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
						else if(PlayerInfo[i][pAdmin] == 3) format(string, sizeof(string), "%s{BFC0C2}: %s (RTH: %d | RT: %d)", GetStaffRank(i), GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
						else if(PlayerInfo[i][pAdmin] == 4) format(string, sizeof(string), "%s{BFC0C2}: %s (RTH: %d | RT: %d)", GetStaffRank(i), GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
						else if(PlayerInfo[i][pAdmin] == 1337) format(string, sizeof(string), "%s{BFC0C2}: %s (RTH: %d | RT: %d)", GetStaffRank(i), GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
						else if(PlayerInfo[i][pAdmin] == 1338) format(string, sizeof(string), "%s{BFC0C2}: %s (RTH: %d | RT: %d)", GetStaffRank(i), GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
						else if(PlayerInfo[i][pAdmin] == 99999) format(string, sizeof(string), "%s{BFC0C2}: %s (RTH: %d | RT: %d)", GetStaffRank(i), GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
						else format(string, sizeof(string), "%s{BFC0C2}: %s", GetStaffRank(i), PlayerInfo[i][pAdmin], GetPlayerNameEx(i));
					}
					else
					{
						if(PlayerInfo[i][pAdmin] == 2) format(string, sizeof(string), "%s{BFC0C2}: %s", GetStaffRank(i), GetPlayerNameEx(i));
						else if(PlayerInfo[i][pAdmin] == 3) format(string, sizeof(string), "%s{BFC0C2}: %s", GetStaffRank(i), GetPlayerNameEx(i));
						else if(PlayerInfo[i][pAdmin] == 4) format(string, sizeof(string), "%s{BFC0C2}: %s", GetStaffRank(i), GetPlayerNameEx(i));
						else if(PlayerInfo[i][pAdmin] == 1337) format(string, sizeof(string), "%s{BFC0C2}: %s", GetStaffRank(i), GetPlayerNameEx(i));
						else if(PlayerInfo[i][pAdmin] == 1338) format(string, sizeof(string), "%s{BFC0C2}: %s", GetStaffRank(i), GetPlayerNameEx(i));
						else if(PlayerInfo[i][pAdmin] == 99999) format(string, sizeof(string), "%s{BFC0C2}: %s", GetStaffRank(i), GetPlayerNameEx(i));
						else format(string, sizeof(string), "%s{BFC0C2}: %s", PlayerInfo[i][pAdmin], GetPlayerNameEx(i));
					}

					if(PlayerInfo[i][pBanAppealer] == 1) strcat(string, " [BA]");
					if(PlayerInfo[i][pBanAppealer] == 2) strcat(string, " [DOBA]");
					if(PlayerInfo[i][pShopTech] == 1) strcat(string, " [ST]");
					if(PlayerInfo[i][pShopTech] == 2) strcat(string, " [SST]");
					if(PlayerInfo[i][pShopTech] == 3) strcat(string, " [DOCR]");
					if(PlayerInfo[i][pUndercover] == 1) strcat(string, " [UC]");
					if(PlayerInfo[i][pUndercover] == 2) strcat(string, " [DOSO]");
					if(PlayerInfo[i][pFactionModerator] == 1) strcat(string, " [FMOD]");
					if(PlayerInfo[i][pFactionModerator] == 2) strcat(string, " [DOFM]");
					if(PlayerInfo[i][pGangModerator] == 1) strcat(string, " [GMOD]");
					if(PlayerInfo[i][pGangModerator] == 2) strcat(string, " [DOGM]");
					if(PlayerInfo[i][pTogReports]) strcat(string, " [SPEC MODE]");
					if(PlayerInfo[i][pPR] == 1) strcat(string, " [PR]");
					if(PlayerInfo[i][pPR] == 2) strcat(string, " [DOPR]");
					if(PlayerInfo[i][pHR] >= 1) strcat(string, " [HR]");
					if(PlayerInfo[i][pAP] >= 1) strcat(string, " [AP]");
					if(PlayerInfo[i][pWatchdog] == 4) strcat(string, " [DoRPI]");
					if(PlayerInfo[i][pSecurity] >= 1) strcat(string, " [Sec]");
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
			}	
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "If you have questions regarding gameplay or the server, use /requesthelp or /newb");
        SendClientMessageEx(playerid, COLOR_GRAD1, "If you see a player breaking rules or need Admin assistance, use /report");
    }
    return 1;
}

CMD:advisors(playerid, params[])
{
    new string[128];
    if(PlayerInfo[playerid][pHelper] >= 1) {
        SendClientMessageEx(playerid, COLOR_GRAD1, "Advisors Online:");
        //foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				new tdate[11], thour[9], i_timestamp[3];
				getdate(i_timestamp[0], i_timestamp[1], i_timestamp[2]);
				format(tdate, sizeof(tdate), "%d-%02d-%02d", i_timestamp[0], i_timestamp[1], i_timestamp[2]);
				format(thour, sizeof(thour), "%02d:00:00", hour);

				if(PlayerInfo[i][pHelper] != 0 && PlayerInfo[i][pHelper] <= PlayerInfo[playerid][pHelper]) {
					if(PlayerInfo[i][pHelper] == 1 && PlayerInfo[i][pAdmin] < 2) {
						format(string, sizeof(string), "** Helper: %s	(Requests This Hour: %d | Requests Today: %d)", GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
					}
					if(PlayerInfo[i][pHelper] == 2&&PlayerInfo[i][pAdmin]<2) {
						format(string, sizeof(string), "** Community Advisor: %s	(Requests This Hour: %d | Requests Today: %d)", GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
					}
					if(PlayerInfo[i][pHelper] == 3&&PlayerInfo[i][pAdmin]<2) {
						format(string, sizeof(string), "** Senior Advisor: %s	(Requests This Hour: %d | Requests Today: %d)", GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
					}
					if(PlayerInfo[i][pHelper] >= 4&&PlayerInfo[i][pAdmin]<2) {
						format(string, sizeof(string), "** Chief Advisor: %s	(Requests This Hour: %d | Requests Today: %d)", GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
					}
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
			}	
        }
    }
    else if(PlayerInfo[playerid][pAdmin] >= 2) {
        SendClientMessageEx(playerid, COLOR_GRAD1, "Advisors Online:");
        //foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pHelper] >= 1) {
					new tdate[11], thour[9], i_timestamp[3];
					getdate(i_timestamp[0], i_timestamp[1], i_timestamp[2]);
					format(tdate, sizeof(tdate), "%d-%02d-%02d", i_timestamp[0], i_timestamp[1], i_timestamp[2]);
					format(thour, sizeof(thour), "%02d:00:00", hour);

					if(PlayerInfo[i][pHelper] == 1&&PlayerInfo[i][pAdmin]<2) {
						format(string, sizeof(string), "** Helper: %s	(Requests This Hour: %d | Requests Today: %d)", GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
					}
					if(PlayerInfo[i][pHelper] == 2&&PlayerInfo[i][pAdmin]<2) {
						if(GetPVarInt(i, "AdvisorDuty") == 1) {
							format(string, sizeof(string), "** Community Advisor: %s (On Duty)	(Requests This Hour: %d | Requests Today: %d)", GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
						}
						else {
							format(string, sizeof(string), "** Community Advisor: %s	(Requests This Hour: %d | Requests Today: %d)", GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
						}
					}
					if(PlayerInfo[i][pHelper] == 3&&PlayerInfo[i][pAdmin]<2) {
						if(GetPVarInt(i, "AdvisorDuty") == 1) {
							format(string, sizeof(string), "** Senior Advisor: %s (On Duty)	(Requests This Hour: %d | Requests Today: %d)", GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
						}
						else {
							format(string, sizeof(string), "** Senior Advisor: %s	(Requests This Hour: %d | Requests Today: %d)", GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
						}
					}
					if(PlayerInfo[i][pHelper] >= 4&&PlayerInfo[i][pAdmin]<2) {
						if(GetPVarInt(i, "AdvisorDuty") == 1) {
							format(string, sizeof(string), "** Chief Advisor: %s (On Duty)	(Requests This Hour: %d | Requests Today: %d)", GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
						}
						else {
							format(string, sizeof(string), "** Chief Advisor: %s	(Requests This Hour: %d | Requests Today: %d)", GetPlayerNameEx(i), ReportHourCount[i], ReportCount[i]);
						}
					}
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
			}	
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "If you have questions regarding gameplay, or the server use /newb.");
        SendClientMessageEx(playerid, COLOR_GRAD1, "If you see suspicious happenings/players /report [id] [reason].");
    }
    return 1;
}

/*CMD:storagehelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** HELP *** - type a command for more infomation.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** STORAGE *** /(vs)viewstorage /(es)equipstorage /personalwithdraw /personaldeposit /storagegive");
	SendClientMessageEx(playerid, COLOR_GRAD3,"*** STORAGE *** /transferstorage");
    return 1;
}*/

CMD:cellphonehelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    if (PlayerInfo[playerid][pPnumber] != 0) {
        SendClientMessageEx(playerid, COLOR_WHITE,"*** HELP *** - type a command for more infomation.");
        SendClientMessageEx(playerid, COLOR_GRAD3,"*** CELLPHONE *** /call 'eg: /call 911' /sms (/p)ickup (/h)angup /speakerphone /number");
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE,"You can buy a cell phone in any 24-7");
    }
    return 1;
}

CMD:househelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** HOUSE HELP *** - type a command for more infomation.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** HOUSE *** /lockhouse /setrentable /setrent /evict /evictall /sellmyhouse /ringbell");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** HOUSE *** /hwithdraw /hdeposit /hbalance /getgun /storegun /closet(add/remove) /houseinvite");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** HOUSE *** /movegate /setgatepass /placemailbox /destroymailbox /getmail /sendmail");
    return 1;
}

CMD:carhelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** CAR OWNERSHIP HELP *** - type a command for more infomation.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** CAR OWNERSHIP *** /lock /pvlock /park /parktrailer /unmodcar /deletecar /sellmycar /trackcar");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** CAR OWNERSHIP *** /dmvmenu /givekeys /carkeys /trunkput /trunktake /car /refuel");
    return 1;
}

CMD:renthelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** RENTING HELP *** - type a command for more infomation.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** RENT *** /unrent /enter /exit /lock /home");
    return 1;
}

CMD:tokenhelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** TOKEN HELP ***");
    SendClientMessageEx(playerid, COLOR_GRAD3,"VIP tokens can be traded for weapons at the VIP Locker.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"VIP tokens can be won at events or gifts.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"Weapons cost 1-5 tokens each, from melee weapons to high-powered firearms.");

    SendClientMessageEx(playerid, COLOR_GRAD3,"If you wish to give other VIPs your tokens, use /givetokens.");
    return 1;
}

CMD:insurehelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** INSURANCE HELP *** - type a command for more infomation.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** INSURANCE *** /buyinsurance");
    SendClientMessageEx(playerid, COLOR_LIGHTRED,"*** INSURANCE *** ALL SAINTS: $1,500 + Transfer (One Time) Fee of $2,500");
    SendClientMessageEx(playerid, COLOR_LIGHTRED,"*** INSURANCE *** COUNTY: $1,500 + Transfer (One Time) Fee of $2,500");
    SendClientMessageEx(playerid, COLOR_LIGHTRED,"*** INSURANCE *** RED COUNTY: $500 + Transfer (One Time) Fee of $2,500");
    SendClientMessageEx(playerid, COLOR_LIGHTRED,"*** INSURANCE *** SAN FIERRO: $500 + Transfer (One Time) Fee of $2,500");
    SendClientMessageEx(playerid, COLOR_LIGHTRED,"*** INSURANCE *** FORT CARSON: $250");
    return 1;
}

CMD:fishhelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** FISH HELP *** - type a command for more infomation.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** FISHING *** /fish (Try to catch a fish)   /fishes (Show the fishes you have caught)");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** FISHING *** /throwback (Throw the last fish you caught back)   /throwbackall");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** FISHING *** /releasefish (Release one of your fishes)");
    return 1;
}

CMD:businesshelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** BUSINESS HELP *** - type a command for more infomation.");
	SendClientMessageEx(playerid, COLOR_GRAD3,"*** BUSINESS *** /buybizlevel /binvite /buninvite /bouninvite /bgiverank /resign /bsafe");
	SendClientMessageEx(playerid, COLOR_GRAD3,"*** BUSINESS *** /binventory /offeritem /resupply /checkresupply /cancelresupply /minrank");
	SendClientMessageEx(playerid, COLOR_GRAD3,"*** BUSINESS *** /employeepayset /employeeautopay /editgasprice /editprices /bizlock");
	SendClientMessageEx(playerid, COLOR_GRAD3,"*** BUSINESS *** /bauto /bonline /bpanic /sellbiz /buybiz /b(iz)r(adio)");
	if(IsValidBusinessID(PlayerInfo[playerid][pBusiness]))
	{
		if(Businesses[PlayerInfo[playerid][pBusiness]][bType] == BUSINESS_TYPE_NEWCARDEALERSHIP || Businesses[PlayerInfo[playerid][pBusiness]][bType] == BUSINESS_TYPE_OLDCARDEALERSHIP) {
			SendClientMessageEx(playerid, COLOR_GRAD3, "*** BUSINESS *** /editcarprice /editcarspawn");
		}
		else if(Businesses[PlayerInfo[playerid][pBusiness]][bType] == BUSINESS_TYPE_GUNSHOP) {
		    SendClientMessageEx(playerid, COLOR_GRAD3, "*** BUSINESS *** /offergun /addmat(erial)s");
		}
		else if(Businesses[PlayerInfo[playerid][pBusiness]][bType] == BUSINESS_TYPE_STORE) {
		    SendClientMessageEx(playerid, COLOR_GRAD3, "*** BUSINESS *** /offeritem /editprices");
		}
		else if (Businesses[PlayerInfo[playerid][pBusiness]][bType] == BUSINESS_TYPE_BAR || Businesses[PlayerInfo[playerid][pBusiness]][bType] == BUSINESS_TYPE_CLUB || Businesses[PlayerInfo[playerid][pBusiness]][bType] == BUSINESS_TYPE_RESTAURANT) {
	        SendClientMessageEx(playerid, COLOR_GRAD3, "*** BUSINESS *** /offermenu");
	    }
	}
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD3, "*** BIZ ADMIN *** /bedit /bname (ST) /bnext (ST) /bnear (ST) /gotobiz (ST) /goinbiz (ST)");
		SendClientMessageEx(playerid, COLOR_GRAD3, "*** BIZ ADMIN *** /deletegaspump /asellbiz /creategaspump /editgaspump");
	}
    return 1;
}

CMD:bhelp(playerid, params[]) {
	return cmd_businesshelp(playerid, params);
}

CMD:dn(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(playerid, slx, sly, slz);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, slx, sly, slz-2);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, slx, sly, slz-2);
		}
        return 1;
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:up(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, slx, sly, slz+5);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, slx, sly, slz+5);
		}
        return 1;
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:fly(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 2) {
        new Float:px, Float:py, Float:pz, Float:pa;
        GetPlayerFacingAngle(playerid,pa);
        if(pa >= 0.0 && pa <= 22.5) {             //n1
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px, py+30, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px, py+30, pz+5);
			}
        }
        if(pa >= 332.5 && pa < 0.0) {             //n2
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px, py+30, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px, py+30, pz+5);
			}
        }
        if(pa >= 22.5 && pa <= 67.5) {            //nw
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px-15, py+15, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px-15, py+15, pz+5);
			}
        }
        if(pa >= 67.5 && pa <= 112.5) {           //w
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px-30, py, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px-30, py, pz+5);
			}
        }
        if(pa >= 112.5 && pa <= 157.5) {          //sw
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px-15, py-15, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px-15, py-15, pz+5);
			}
        }
        if(pa >= 157.5 && pa <= 202.5) {          //s
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px, py-30, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px, py-30, pz+5);
			}
        }
        if(pa >= 202.5 && pa <= 247.5) {          //se
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px+15, py-15, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px+15, py-15, pz+5);
			}
        }
        if(pa >= 247.5 && pa <= 292.5) {          //e
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px+30, py, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px+30, py, pz+5);
			}
        }
        if(pa >= 292.5 && pa <= 332.5) {          //e
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px+15, py+15, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px+15, py+15, pz+5);
			}
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:lt(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, slx-2, sly, slz);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, slx-2, sly, slz);
		}
        return 1;
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:rt(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, slx+2, sly, slz);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, slx+2, sly, slz);
		}
        return 1;
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:fd(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, slx, sly+2, slz);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, slx, sly+2, slz);
		}
        return 1;
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:bk(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, slx, sly-2, slz);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, slx, sly-2, slz);
		}
        return 1;
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:searchcar(playerid, params[])
{
    new string[128];
    if (!IsACop(playerid))
	{
        SendClientMessageEx(playerid, COLOR_GREY, "   You are not a law enforcement officer!");
        return 1;
    }
    if(GetPVarInt(playerid, "Injured") != 0) {
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
		return 1;
	}
    new carid = GetPlayerVehicleID(playerid);
    new closestcar = GetClosestCar(playerid,carid);
    if(!IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0))
	{
        SendClientMessageEx(playerid,COLOR_GREY,"You are not near any vehicles.");
        return 1;
    }
	if(!IsABike(closestcar) && !IsAPlane(closestcar)) {
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
		if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "The vehicle's trunk must be opened in order to search it.");
			return 1;
		}
	}
    //foreach(new i: Player)
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			new v = GetPlayerVehicle(i, closestcar);
			if(v != -1)
			{
				string[0] = 0;
				for(new x = 0; x < 3; x++)
				{
					if(PlayerVehicleInfo[i][v][pvWeapons][x] != 0)
					{
						new
							szWep[20];

						GetWeaponName(PlayerVehicleInfo[i][v][pvWeapons][x], szWep, sizeof(szWep));
						if(isnull(string)) format(string, sizeof(string), "* Trunk contains: %s", szWep);
						else format(string, sizeof(string), "%s, %s", string, szWep);
					}
				}
				if(!isnull(string)) {
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					if(CrateVehicleLoad[closestcar][vCarVestKit]) {
						SendClientMessageEx(playerid, COLOR_WHITE, "* Trunk contains:");
						SendClientMessageEx(playerid, COLOR_WHITE, "* Kevlar Vest.");
						SendClientMessageEx(playerid, COLOR_WHITE, "* First Aid Kit.");
					}
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "* Trunk contains: nothing.");
			}
		}	
    }
    if(isnull(string))
    {
        if(CrateVehicleLoad[closestcar][vCarVestKit] > 0) {
            new str[84];
            SendClientMessageEx(playerid, COLOR_WHITE, "* Trunk contains:");
            format(str, sizeof(str), "* Kevlar Vest (x%d).", CrateVehicleLoad[closestcar][vCarVestKit]);
            SendClientMessageEx(playerid, COLOR_WHITE, str);
            format(str, sizeof(str), "* First Aid Kit(x%d).", CrateVehicleLoad[closestcar][vCarVestKit]);
            SendClientMessageEx(playerid, COLOR_WHITE, str);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "* Trunk contains: nothing.");
    }
    return 1;
}

CMD:takecarweapons(playerid, params[])
{
    if (!IsACop(playerid))
	{
        SendClientMessageEx(playerid,COLOR_GREY,"You're not a law enforcement officer.");
        return 1;
    }
    new carid = GetPlayerVehicleID(playerid);
    new closestcar = GetClosestCar(playerid,carid);
    if(!IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0))
	{
        SendClientMessageEx(playerid,COLOR_GREY,"You are not near any vehicles.");
        return 1;
    }
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
	if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "The vehicle's trunk must be opened in order to search it.");
		return 1;
	}
    //foreach(new i: Player)
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			new v = GetPlayerVehicle(i, closestcar);
			if(v != -1)
			{
				if (!PlayerVehicleInfo[i][v][pvWeapons][0] && !PlayerVehicleInfo[i][v][pvWeapons][1] && !PlayerVehicleInfo[i][v][pvWeapons][2])
				{
					SendClientMessageEx(playerid, COLOR_WHITE,  "No weapons in the trunk.");
					return 1;
				}
				else
				{
					PlayerVehicleInfo[i][v][pvWeapons][0] = 0;
					PlayerVehicleInfo[i][v][pvWeapons][1] = 0;
					PlayerVehicleInfo[i][v][pvWeapons][2] = 0;
					SendClientMessageEx(playerid, COLOR_WHITE,  "All weapons have been removed from this vehicle.");
					new string[MAX_PLAYER_NAME + 44];
					format(string, sizeof(string), "* %s has taken the weapons away from the trunk.", GetPlayerNameEx(playerid));
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
			}
		}	
    }
    return 1;
}

CMD:phoneprivacy(playerid, params[])
{
    if(PlayerInfo[playerid][pPnumber] != 0 && PlayerInfo[playerid][pDonateRank] >= 2)
	{
        if(PlayerInfo[playerid][pPhonePrivacy] == 1)
		{
            PlayerInfo[playerid][pPhonePrivacy] = 0;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the phone privacy feature.");
        }
        else
		{
            PlayerInfo[playerid][pPhonePrivacy] = 1;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled the phone privacy feature.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a phone or you aren't a Silver VIP.");
    }
    return 1;
}

CMD:speakerphone(playerid, params[])
{
    if(PlayerInfo[playerid][pPnumber] != 0)
	{
        if(PlayerInfo[playerid][pSpeakerPhone] == 1)
		{
            PlayerInfo[playerid][pSpeakerPhone] = 0;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the speakerphone feature on your phone.");
        }
        else
		{
            PlayerInfo[playerid][pSpeakerPhone] = 1;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled the speakerphone feature on your phone.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a phone.");
    }
    return 1;
}

CMD:lawyerduty(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 2 || PlayerInfo[playerid][pJob2] == 2 || PlayerInfo[playerid][pJob3] == 2)
	{
        if(GetPVarInt(playerid, "LawyerDuty") == 1)
		{
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now off duty on your lawyer job and will not receive calls anymore.");
			SetPVarInt(playerid, "LawyerDuty", 0);
            Lawyers -= 1;
        }
        else if(GetPVarInt(playerid, "LawyerDuty") == 0)
		{
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now on duty on your lawyer job and will receive calls from people in need.");
			SetPVarInt(playerid, "LawyerDuty", 1);
            Lawyers += 1;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not a lawyer!");
    }
    return 1;
}

CMD:mechduty(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7 || PlayerInfo[playerid][pJob3] == 7)
	{
        if(GetPVarInt(playerid, "MechanicDuty") == 1)
		{
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now off duty from your Car Mechanic job and will not receive calls anymore.");
			SetPVarInt(playerid, "MechanicDuty", 0);
            Mechanics -= 1;
        }
        else if(GetPVarInt(playerid, "MechanicDuty") == 0)
		{
            if (TransportDuty[playerid] != 0) return SendClientMessageEx(playerid,COLOR_GREY,"You need to get off duty as a transport driver first.");
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now on duty with your Car Mechanic job and will receive calls from people in need.");
			SetPVarInt(playerid, "MechanicDuty", 1);
            ++Mechanics;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not a mechanic!");
    }
    return 1;
}

CMD:cduty(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] >= 2)
	{
        if(GetPVarInt(playerid, "AdvisorDuty") == 1)
		{
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now off duty as a Community Advisor and will not receive calls anymore.");
            DeletePVar(playerid, "AdvisorDuty");
            Advisors -= 1;
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now on duty as a Community Advisor and will receive calls from people in need.");
            SetPVarInt(playerid, "AdvisorDuty", 1);
            Advisors += 1;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not a Community Advisor!");
    }
    return 1;
}

CMD:contracts(playerid, params[])
{
    if(IsAHitman(playerid) || PlayerInfo[playerid][pAdmin] >= 4)
	{
        SearchingHit(playerid);
    }
    return 1;
}

CMD:gate(playerid, params[])
{
	new Float:X, Float:Y, Float:Z;
	for(new i = 0; i < sizeof(GateInfo); i++)
	{
		GetDynamicObjectPos(GateInfo[i][gGATE], X, Y, Z);
		if(GateInfo[i][gFamilyID] != -1 && PlayerInfo[playerid][pFMember] == GateInfo[i][gFamilyID] && IsPlayerInRangeOfPoint(playerid,GateInfo[i][gRange], X, Y, Z) && GetPlayerVirtualWorld(playerid) == GateInfo[i][gVW] && GetPlayerInterior(playerid) == GateInfo[i][gInt])
		{
			if(GateInfo[i][gLocked] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "This gate is currently locked.");
			if(GateInfo[i][gAutomate] == 1) return 1;
			MoveGate(playerid, i);
		}
		else if(GateInfo[i][gGroupID] != -1 && (0 <= PlayerInfo[playerid][pMember] < MAX_GROUPS) && PlayerInfo[playerid][pMember] == GateInfo[i][gGroupID] && IsPlayerInRangeOfPoint(playerid,GateInfo[i][gRange], X, Y, Z) && GetPlayerVirtualWorld(playerid) == GateInfo[i][gVW] && GetPlayerInterior(playerid) == GateInfo[i][gInt])
		{
			if(GateInfo[i][gLocked] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "This gate is currently locked.");
			if(GateInfo[i][gAutomate] == 1) return 1;
			MoveGate(playerid, i);
		}
		else if(GateInfo[i][gAllegiance] != 0 && GateInfo[i][gGroupType] != 0 && (0 <= PlayerInfo[playerid][pMember] < MAX_GROUPS) && arrGroupData[PlayerInfo[playerid][pMember]][g_iAllegiance] == GateInfo[i][gAllegiance] && arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] == GateInfo[i][gGroupType] && IsPlayerInRangeOfPoint(playerid,GateInfo[i][gRange], X, Y, Z) && GetPlayerVirtualWorld(playerid) == GateInfo[i][gVW] && GetPlayerInterior(playerid) == GateInfo[i][gInt])
		{
			if(GateInfo[i][gLocked] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "This gate is currently locked.");
			if(GateInfo[i][gAutomate] == 1) return 1;
			MoveGate(playerid, i);
		}
		else if(GateInfo[i][gAllegiance] != 0 && GateInfo[i][gGroupType] == 0 && (0 <= PlayerInfo[playerid][pMember] < MAX_GROUPS) && arrGroupData[PlayerInfo[playerid][pMember]][g_iAllegiance] == GateInfo[i][gAllegiance] && IsPlayerInRangeOfPoint(playerid,GateInfo[i][gRange], X, Y, Z) && GetPlayerVirtualWorld(playerid) == GateInfo[i][gVW] && GetPlayerInterior(playerid) == GateInfo[i][gInt])
		{
			if(GateInfo[i][gLocked] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "This gate is currently locked.");
			if(GateInfo[i][gAutomate] == 1) return 1;
			MoveGate(playerid, i);
		}
		else if(GateInfo[i][gAllegiance] == 0 && GateInfo[i][gGroupType] != 0 && (0 <= PlayerInfo[playerid][pMember] < MAX_GROUPS) && arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] == GateInfo[i][gGroupType] && IsPlayerInRangeOfPoint(playerid,GateInfo[i][gRange], X, Y, Z) && GetPlayerVirtualWorld(playerid) == GateInfo[i][gVW] && GetPlayerInterior(playerid) == GateInfo[i][gInt])
		{
			if(GateInfo[i][gLocked] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "This gate is currently locked.");
			if(GateInfo[i][gAutomate] == 1) return 1;
			MoveGate(playerid, i);
		}
	}
    return 1;
}

CMD:gsave(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
        SendClientMessageEx(playerid, COLOR_YELLOW, "You have force saved the Gate database.");
        SaveGates();
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:editauctions(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {
		new
		    szDialog[700];

		for (new i; i < sizeof(Auctions); i++)
    	{
            format(szDialog, sizeof(szDialog), "%s\n Auction: %i | Item: %s | Highest Bid: $%i | Wining: %s(%i)", szDialog, i+1, Auctions[i][BiddingFor], Auctions[i][Bid], Auctions[i][Wining], Auctions[i][Bidder]);
    	}
    	ShowPlayerDialog(playerid, DIALOG_ADMINAUCTIONS, DIALOG_STYLE_LIST, "Auctions", szDialog, "Edit", "Close");
	}
	return 1;
}

CMD:auctions(playerid, params[]) {

	new
		szDialog[500];

    for (new i; i < sizeof(Auctions); i++)
    {
    	format(szDialog, sizeof(szDialog), "%s\n Auction: %i | Item: %s | Highest Bid: $%i", szDialog, i+1, Auctions[i][BiddingFor], Auctions[i][Bid]);
    }
	ShowPlayerDialog(playerid, DIALOG_AUCTIONS, DIALOG_STYLE_LIST, "Auctions", szDialog, "More Info", "Close");
	return 1;
}

CMD:online(playerid, params[]) {
    if(PlayerInfo[playerid][pLeader] >= 0)
	{

		new
			szDialog[1024];

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(IsATaxiDriver(playerid) && IsATaxiDriver(i)) switch(TransportDuty[i]) {
					case 1: format(szDialog, sizeof(szDialog), "%s\n* %s (on duty), %i calls accepted", szDialog, GetPlayerNameEx(i), PlayerInfo[i][pCallsAccepted]);
					default: format(szDialog, sizeof(szDialog), "%s\n* %s (off duty), %i calls accepted", szDialog, GetPlayerNameEx(i), PlayerInfo[i][pCallsAccepted]);
				}
				else if(IsAMedic(playerid) && IsAMedic(i) && (arrGroupData[PlayerInfo[playerid][pMember]][g_iAllegiance] == arrGroupData[PlayerInfo[i][pMember]][g_iAllegiance])) switch(PlayerInfo[i][pDuty]) {
					case 1: format(szDialog, sizeof(szDialog), "%s\n* %s (on duty), %i calls accepted, %i patients delivered.", szDialog, GetPlayerNameEx(i), PlayerInfo[i][pCallsAccepted], PlayerInfo[i][pPatientsDelivered]);
					default: format(szDialog, sizeof(szDialog), "%s\n* %s (off duty), %i calls accepted, %i patients delivered.", szDialog, GetPlayerNameEx(i), PlayerInfo[i][pCallsAccepted], PlayerInfo[i][pPatientsDelivered]);
				}
				else if(PlayerInfo[i][pMember] == PlayerInfo[playerid][pLeader]) switch(PlayerInfo[i][pDuty]) {
					case 1: format(szDialog, sizeof(szDialog), "%s\n* %s (on duty)", szDialog, GetPlayerNameEx(i));
					default: format(szDialog, sizeof(szDialog), "%s\n* %s (off duty)", szDialog, GetPlayerNameEx(i));
				}
			}	
		}
		if(!isnull(szDialog)) {
		    strdel(szDialog, 0, 1);
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Online Members", szDialog, "Select", "Cancel");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "No members are online at this time.");

    }  else SendClientMessageEx(playerid, COLOR_GREY, "Only group leaders may use this command.");
    return 1;
}

CMD:bonline(playerid, params[]) {
	new iBusinessID = PlayerInfo[playerid][pBusiness];
    if((0 <= iBusinessID < MAX_BUSINESSES) && PlayerInfo[playerid][pBusinessRank] >= Businesses[iBusinessID][bMinInviteRank])
	{
		new szDialog[1024];
		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pBusiness] == PlayerInfo[playerid][pBusiness] && (PlayerInfo[i][pTogReports] == 1 || PlayerInfo[i][pAdmin] < 2))
				{
					format(szDialog, sizeof(szDialog), "%s\n* %s (%s)", szDialog, GetPlayerNameEx(i), GetBusinessRankName(PlayerInfo[i][pBusinessRank]));
				}
			}	
		}
		if(!isnull(szDialog)) {
		    strdel(szDialog, 0, 1);
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Online Members", szDialog, "Select", "Cancel");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "No members are online at this time.");
    }
	else SendClientMessageEx(playerid, COLOR_GREY, "Only business leaders may use this command.");
    return 1;
}

CMD:mdc(playerid, params[])
{
    if(IsMDCPermitted(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            ShowPlayerDialog(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "MDC - Logged in", "*Civilian Information\n*Find LEO\n*Law Enforcement Agencies\n*MDC Message\n*SMS", "OK", "Cancel");
            ConnectedToPC[playerid] = 1337;
        }
        else SendClientMessageEx(playerid, COLOR_GREY, "You are not in a vehicle.");
    }
    return 1;
}

CMD:flipcoin(playerid, params[]) {

    new
		szMessage[124];

    switch(random(200)) {
        case 0 .. 98: format(szMessage, sizeof(szMessage), "* %s flips a coin that lands on heads.", GetPlayerNameEx(playerid));
		case 100 .. 198: format(szMessage, sizeof(szMessage), "* %s flips a coin that lands on tails.", GetPlayerNameEx(playerid));
		default: cmd_flipcoin(playerid, params);
    }
    return ProxDetector(5.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
}

CMD:dice(playerid, params[])
{
    new string[84];
    if (PlayerInfo[playerid][pDice])
	{
        new rand = Random(1, 7); format(string, sizeof(string), "{FF8000}** {C2A2DA}%s rolls a dice that lands on %d.", GetPlayerNameEx(playerid), rand);
        ProxDetector(9.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a dice.");
        return 1;
    }
    return 1;
}

CMD:buy(playerid, params[])
{
   	if (!IsAt247(playerid)) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in a 24/7!");
        return 1;
    }

	new iBusiness = InBusiness(playerid);

    if (Businesses[iBusiness][bAutoSale]) {
		if (Businesses[iBusiness][bInventory] < 1) {
			SendClientMessageEx(playerid, COLOR_WHITE, "This store does not have any items at the moment!");
			return 1;
		}
		if (!Businesses[iBusiness][bStatus]) {
			SendClientMessageEx(playerid, COLOR_WHITE, "This store is closed!");
			return 1;
		}
	} else return SendClientMessageEx(playerid, COLOR_WHITE, "You need to interact with the business employees to buy.");

	DisplayItemPricesDialog(iBusiness, playerid);

    return 1;
}

CMD:beginswimming(playerid, params[])
{
	if (!IsAtGym(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are not in a gym!");
		return 1;
	}

	new iBusiness = InBusiness(playerid);
	if(CheckPointCheck(playerid))
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD2, "You must kill your current checkpoint first. (/killcheckpoint)");
	}
	if (Businesses[iBusiness][bGymType] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You can not /beginswimming in this type of gym!");
		return 1;
	}

	if (GetPVarInt(playerid, "_BoxingQueue") == 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You must leave the boxing queue first! (/leaveboxing)");
		return 1;
	}

	if (GetPVarInt(playerid, "_SwimmingActivity") >= 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are already swimming! Use /stopswimming first.");
		return 1;
	}

	SetPVarInt(playerid, "_SwimmingActivity", 1);
	SetPlayerCheckpoint(playerid, 2892.5071, -2261.9607, 1.4645, 2.0);
	SendClientMessageEx(playerid, COLOR_WHITE, "Proceed to the first checkpoint to begin exercising.");
	SendClientMessageEx(playerid, COLOR_WHITE, "Type /stopswimming to exit your current activity.");

	return 1;
}

CMD:stopswimming(playerid, params[])
{
	if (!IsAtGym(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are not in a gym!");
		return 1;
	}

	if (GetPVarInt(playerid, "_SwimmingActivity") < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "  You are not swimming!");
		return 1;
	}

	DeletePVar(playerid, "_SwimmingActivity");
	DisablePlayerCheckpoint(playerid);

	SendClientMessageEx(playerid, COLOR_GREY, "You have stopped exercising.");

	return 1;
}

CMD:joinboxing(playerid, params[])
{
	if (!IsAtGym(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are not in a gym!");
		return 1;
	}

	new iBusiness = InBusiness(playerid);
	if (Businesses[iBusiness][bGymType] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You can not /joinboxing in this type of gym!");
		return 1;
	}

	if (GetPVarInt(playerid, "_SwimmingActivity") >= 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You must stop swimming first! (/stopswimming)");
		return 1;
	}

	if (GetPVarInt(playerid, "_BoxingQueue") == 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are already in the boxing queue!");
		return 1;
	}

	if (GetPVarInt(playerid, "_BoxingFight") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are already in a boxing match!");
		return 1;
	}

	SetPVarInt(playerid, "_BoxingQueue", 1);
	SetPVarInt(playerid, "_BoxingQueueTick", 1);

	SendClientMessageEx(playerid, COLOR_WHITE, "You have joined the boxing queue.");

	return 1;
}

CMD:leaveboxing(playerid, params[])
{
	if (!IsAtGym(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are not in a gym!");
		return 1;
	}

	if (GetPVarInt(playerid, "_BoxingQueue") != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are not in the boxing queue.");
		return 1;
	}

	DeletePVar(playerid, "_BoxingQueue");
	DeletePVar(playerid, "_BoxingQueueTick");

	SendClientMessageEx(playerid, COLOR_WHITE, "You have left the boxing queue.");

	return 1;
}

CMD:beginparkour(playerid, params[])
{
	if (!IsAtGym(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are not in a gym!");
		return 1;
	}

	new iBusiness = InBusiness(playerid);
	if (Businesses[iBusiness][bGymType] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You can not /beginparkour in this type of gym!");
		return 1;
	}

	if (GetPVarInt(playerid, "_BikeParkourStage") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are already participating in that activity!");
		return 1;
	}

	new bool:available = false;
	new pos;

	for (new it = 0; it < 9; ++it)
	{
		if (Businesses[iBusiness][bGymBikePlayers][it] == INVALID_PLAYER_ID)
		{
			available = true;
			Businesses[iBusiness][bGymBikePlayers][it] = playerid;
			pos = it;
			break;
		}
	}

	if (available == false)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  Too many people are on this track, try again later.");
		return 1;
	}

	SendClientMessage(playerid, COLOR_WHITE, "Proceed to the pickup point to collect your bike.");
	SetPVarInt(playerid, "_BikeParkourStage", 1);
	SetPVarInt(playerid, "_BikeParkourSlot", pos);
	new pickup = CreateDynamicPickup(1318, 23, 2833.8757, -2256.8293, 95.9497, .playerid = playerid, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = 0);
	SetPVarInt(playerid, "_BikeParkourPickup", pickup);

	return 1;
}

CMD:leaveparkour(playerid, params[])
{
	if (!IsAtGym(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are not in a gym!");
		return 1;
	}

	if (GetPVarInt(playerid, "_BikeParkourStage") == 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are not participating in that activity.");
		return 1;
	}

	new iBusiness = InBusiness(playerid);
	Businesses[iBusiness][bGymBikePlayers][GetPVarInt(playerid, "_BikeParkourSlot")] = INVALID_PLAYER_ID;

	SendClientMessageEx(playerid, COLOR_WHITE, "You have left the biking activity.");

	new vehicle = Businesses[iBusiness][bGymBikeVehicles][GetPVarInt(playerid, "_BikeParkourSlot")];

	if (vehicle != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(vehicle);
		Businesses[iBusiness][bGymBikeVehicles][GetPVarInt(playerid, "_BikeParkourSlot")] = INVALID_VEHICLE_ID;
	}

	DeletePVar(playerid, "_BikeParkourStage");
	DeletePVar(playerid, "_BikeParkourSlot");

	new pickup = GetPVarInt(playerid, "_BikeParkourPickup");
	if (pickup != 0)
	{
		DestroyDynamicPickup(pickup);
		DeletePVar(playerid, "_BikeParkourPickup");
	}

	return 1;
}

CMD:bauto(playerid, params[])
{
   	new
	   iBusiness = PlayerInfo[playerid][pBusiness],
	   iRank     = PlayerInfo[playerid][pBusinessRank];

	if (iBusiness != INVALID_BUSINESS_ID && iRank >= 5)
	{
	    new iType = Businesses[iBusiness][bType];
	    if (iType == BUSINESS_TYPE_GASSTATION || iType == BUSINESS_TYPE_STORE || iType == BUSINESS_TYPE_CLOTHING) {
			if (Businesses[iBusiness][bAutoSale])	{
				Businesses[iBusiness][bAutoSale] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have toggled off the automatic sales mode!");
				SaveBusiness(iBusiness);
			}
			else {
				Businesses[iBusiness][bAutoSale] = 1;
		       	SendClientMessageEx(playerid, COLOR_WHITE, "You have toggled on the automatic sales mode!");
		       	SendClientMessageEx(playerid, COLOR_GREY, "Note that this will cause decrease in profits!");
		       	SaveBusiness(iBusiness);
			}
	    }  else SendClientMessageEx(playerid, COLOR_WHITE, "Command not available for your business type!");
	} else SendClientMessageEx(playerid, COLOR_WHITE, "Only business owners can use this command!");
	return 1;
}

CMD:shop(playerid, params[])
{

	new iBusiness = InBusiness(playerid);

   	if (iBusiness == INVALID_BUSINESS_ID || Businesses[iBusiness][bType] != BUSINESS_TYPE_SEXSHOP) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in a sex shop!");
        return 1;
    }
    if (Businesses[iBusiness][bAutoSale]) {
		if (Businesses[iBusiness][bInventory] < 1) {
		    SendClientMessageEx(playerid, COLOR_WHITE, "This sex shop does not have any items at the moment!");
		    return 1;
		}
		if (!Businesses[iBusiness][bStatus]) {
		    SendClientMessageEx(playerid, COLOR_WHITE, "This sex shop is closed!");
		    return 1;
		}
	} else return SendClientMessageEx(playerid, COLOR_WHITE, "You need to interact with the business employees to buy.");

	DisplayItemPricesDialog(iBusiness, playerid);

    return 1;
}

CMD:buyhouse(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 100.0, 1109.0, 1537.0, 5.0) && PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_WHITE, "You cannot use this command in this area!");
    new string[128];
    new Float:oldposx, Float:oldposy, Float:oldposz;
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    for(new h = 0; h < sizeof(HouseInfo); h++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) && GetPlayerInterior(playerid) == HouseInfo[h][hExtIW] && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hExtVW])
		{
		    if(PlayerInfo[playerid][pFreezeHouse] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: Your house assets are frozen, you cannot buy a house!");
            if(HouseInfo[h][hOwned] == 0)
			{
                if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
				{
                    format(string, sizeof(string), "   You must be Level %d to purchase this!", HouseInfo[h][hLevel]);
                    SendClientMessageEx(playerid, COLOR_GRAD5, string);
                    return 1;
                }
				if(Homes[playerid] >= 2 && PlayerInfo[playerid][pDonateRank] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot own another home.");
				else if(Homes[playerid] >= 3 && PlayerInfo[playerid][pDonateRank] >= 4) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot own another home.");
				if(GetPlayerCash(playerid) > HouseInfo[h][hValue])
				{
					if(PlayerInfo[playerid][pPhousekey] == INVALID_HOUSE_ID) PlayerInfo[playerid][pPhousekey] = h;
					else if(PlayerInfo[playerid][pPhousekey2] == INVALID_HOUSE_ID) PlayerInfo[playerid][pPhousekey2] = h;
					else if(PlayerInfo[playerid][pPhousekey3] == INVALID_HOUSE_ID && PlayerInfo[playerid][pDonateRank] >= 4) PlayerInfo[playerid][pPhousekey3] = h;
					else return SendClientMessageEx(playerid, COLOR_GREY, "You have no free house slot left.");
					HouseInfo[h][hOwned] = 1;
					HouseInfo[h][hOwnerID] = GetPlayerSQLId(playerid);
					strcat((HouseInfo[h][hOwnerName][0] = 0, HouseInfo[h][hOwnerName]), GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
					Homes[playerid]++;
					GivePlayerCash(playerid,-HouseInfo[h][hValue]);
					SetPlayerInterior(playerid,HouseInfo[h][hIntIW]);
					SetPlayerPos(playerid, HouseInfo[h][hInteriorX], HouseInfo[h][hInteriorY], HouseInfo[h][hInteriorZ]);
					GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and typing /exit.", 5000, 3);
					PlayerInfo[playerid][pInt] = HouseInfo[h][hIntIW];
					SendClientMessageEx(playerid, COLOR_WHITE, "Congratulations on your new purchase!");
					SendClientMessageEx(playerid, COLOR_WHITE, "Type /help to review the property help section!");
					SaveHouse(h);
					OnPlayerStatsUpdate(playerid);
					PlayerInfo[playerid][pVW] = HouseInfo[h][hIntVW];
					SetPlayerVirtualWorld(playerid,HouseInfo[h][hIntVW]);
					ReloadHouseText(h);
					format(string,sizeof(string),"%s (IP: %s) has bought house ID %d for $%d.",GetPlayerNameEx(playerid),GetPlayerIpEx(playerid),h,HouseInfo[h][hValue]);
					Log("logs/house.log", string);
					if(HouseInfo[h][hCustomInterior] == 1) Player_StreamPrep(playerid, HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ], FREEZE_TIME);
					return 1;
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "   You don't have the cash for that!");
            }
            else return SendClientMessageEx(playerid, COLOR_GREY, "This house is owned.");
        }
    }
    return 1;
}

CMD:rentroom(playerid, params[])
{
    //new string[128];
    new Float:oldposx, Float:oldposy, Float:oldposz;
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    for(new h = 0; h < sizeof(HouseInfo); h++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) && GetPlayerInterior(playerid) == HouseInfo[h][hExtIW] && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hExtVW] && HouseInfo[h][hRentFee] >= 1)
		{
            if(!strcmp(HouseInfo[h][hOwnerName], "Nobody", true))
			{
                SendClientMessageEx( playerid, COLOR_WHITE, "You can't rent an unowned house." );
            }
            else
			{
                if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwnerID] == GetPlayerSQLId(playerid))
				{
                    SendClientMessageEx(playerid, COLOR_WHITE, "   You already own a house, type /sellmyhouse if you want to rent this one.");
                    return 1;
                }
                if(GetPlayerCash(playerid) > HouseInfo[h][hRentFee])
				{
                    if( HouseInfo[h][hRentable] == 0 )
					{
                        SendClientMessageEx(playerid, COLOR_WHITE, "This house is not rentable.");
                        return 1;
                    }
                    else
					{
                        PlayerInfo[playerid][pRenting] = h;
                        GivePlayerCash(playerid,-HouseInfo[h][hRentFee]);
                        HouseInfo[h][hSafeMoney] = HouseInfo[h][hSafeMoney]+HouseInfo[h][hRentFee];
                        SetPlayerInterior(playerid,HouseInfo[h][hIntIW]);
                        SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
                        GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and typing /exit.", 5000, 3);
                        PlayerInfo[playerid][pInt] = HouseInfo[h][hIntIW];
                        PlayerInfo[playerid][pVW] = HouseInfo[h][hIntVW];
                        SetPlayerVirtualWorld(playerid,HouseInfo[h][hIntVW]);
                        SendClientMessageEx(playerid, COLOR_WHITE, "Congratulations. You can enter and exit here any time you want.");
                        SendClientMessageEx(playerid, COLOR_WHITE, "Type /help to review the property help section.");
                        OnPlayerStatsUpdate(playerid);
                        //new ip[32];
                        //GetPlayerIp(playerid,ip,sizeof(ip));
                        //format(string,sizeof(string),"%s (IP: %s) has rented house ID %d (owned by %s) for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hOwnerID],HouseInfo[h][hRentFee]);
                        //Log("logs/house.log", string);
						if(HouseInfo[h][hCustomInterior] == 1) Player_StreamPrep(playerid, HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ], FREEZE_TIME);
                        return 1;
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_WHITE, "You don't have the cash for that.");
                    return 1;
                }
            }
        }
    }
    return 1;
}

CMD:unrent(playerid, params[])
{
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwnerID] == GetPlayerSQLId(playerid))
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "   You own this house!");
        return 1;
    }
    if( PlayerInfo[playerid][pRenting] != INVALID_HOUSE_ID )
	{
        PlayerInfo[playerid][pRenting] = INVALID_HOUSE_ID;
        SendClientMessageEx(playerid, COLOR_WHITE, "You are now homeless.");
    }
    return 1;
}

CMD:spawnathome(playerid, params[])
{
    if( PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID )
	{
        if(PlayerInfo[playerid][pDonateRank] >= 4)
		{
            PlayerInfo[playerid][pInsurance] = 7;
            SendClientMessageEx( playerid, COLOR_YELLOW, "Platinum VIP: You will now spawn at your house after deaths." );
        }
        else
		{
            SendClientMessageEx( playerid, COLOR_WHITE, "You are not Platinum VIP!" );
        }
    }
    else
	{
        SendClientMessageEx( playerid, COLOR_WHITE, "You do not own a house." );
    }
    return 1;
}

CMD:mailhelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Mail System Help");
	SendClientMessageEx(playerid, COLOR_GRAD2, "You can purchase writing paper from any 24/7 and send letters to your friends");
	SendClientMessageEx(playerid, COLOR_GRAD2, "and colleagues regardless of whether they are online or not. Letters can be sent");
	SendClientMessageEx(playerid, COLOR_GRAD2, "from your nearest Street Posting Box, or from your own mail box (at your own house)");
	SendClientMessageEx(playerid, COLOR_GRAD2, "and these will be delivered; time depending on which service you have purchased.");
	SendClientMessageEx(playerid, COLOR_GRAD3, "Mail System Commands: /sendmail /getmail /placemailbox /movemailbox /destroymailbox /postdirectory");
	if(PlayerInfo[playerid][pAdmin] > 3)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Admin Commands");
	    SendClientMessageEx(playerid, COLOR_GRAD1, "/createmailbox (Creates a street posting box)   /removemailbox [id] (Removes a street posting box)");
	    SendClientMessageEx(playerid, COLOR_GRAD1, "/gotomailbox [id] (Teleports to a street posting box)    /adestroymailbox [houseid] (Deletes a players mailbox)");
	}
	return 1;
}

CMD:sendmail(playerid, params[])
{
	if (!IsNearHouseMailbox(playerid) && !IsAtPostOffice(playerid) && !IsNearPublicMailbox(playerid)) {
    	return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at a post office, near a street mailbox, or your house mailbox.");
    }
	if (PlayerInfo[playerid][pPaper] < 1) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You don't have any papers left. You can buy some at a 24/7.");
	}
	if(GetPVarInt(playerid, "MailTime") > 0) {
	    new string[64];
		format(string, sizeof(string), "You must wait %d seconds before sending more mail.", GetPVarInt(playerid, "MailTime"));
		return SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	DisplayStampDialog(playerid);
	return 1;
}

CMD:getmail(playerid, params[])
{
	if (!IsNearHouseMailbox(playerid) && !IsAtPostOffice(playerid)) {
	 	return SendClientMessageEx(playerid, COLOR_GREY, "You need to be near at a post office or near your house mailbox.");
	}
	DeletePVar(playerid, "UnreadMails");
	DisplayMails(playerid);
 	return 1;
}

CMD:createmailbox(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4) {
        return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    }

	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)	{
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You can not do this while spectating.");
	}

    new i = GetFreeMailboxId();
	if (i == -1) return	SendClientMessageEx(playerid, COLOR_GRAD1, "The maximum number of street mailboxes has been reached.");

	GetPlayerPos(playerid, MailBoxes[i][mbPosX], MailBoxes[i][mbPosY], MailBoxes[i][mbPosZ]);
	GetPlayerFacingAngle(playerid, MailBoxes[i][mbAngle]);
	MailBoxes[i][mbPosZ] -= 0.30;
	MailBoxes[i][mbInt] = GetPlayerInterior(playerid);
	MailBoxes[i][mbVW] = GetPlayerVirtualWorld(playerid);

	SaveMailbox(i);
	RenderStreetMailbox(i);

	new string[128], area[MAX_ZONE_NAME];
	format(string,sizeof(string),"You have successfully created a street mailbox with ID %d.", i);
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	GetPlayer2DZone(playerid, area, MAX_ZONE_NAME);
	format(string, sizeof(string), "Admin %s has placed street mailbox %d at %s", GetPlayerNameEx(playerid), i, area);
	Log("logs/mail.log", string);

	Streamer_UpdateEx(playerid, MailBoxes[i][mbPosX], MailBoxes[i][mbPosY], MailBoxes[i][mbPosZ]);

	return 1;

}

CMD:removemailbox(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4) {
        return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    }
	new id;
	if(sscanf(params, "d", id)) {
        return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /removemailbox [street mailbox id]");
    }
    if(id < 0 || id >= MAX_MAILBOXES) {
        return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid street mailbox ID.");
    }
    if(MailBoxes[id][mbPosX] == 0.0) {
        return SendClientMessageEx(playerid, COLOR_GRAD2, "No street mailbox found with that ID.");
    }

	ClearStreetMailbox(id);
	RenderStreetMailbox(id);

	new string[128], area[MAX_ZONE_NAME];
	format(string,sizeof(string),"You have successfully removed the street mailbox with ID %d.", id);
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	GetPlayer2DZone(playerid, area, MAX_ZONE_NAME);
	format(string, sizeof(string), "Administrator %s has removed a street mailbox %d, at %s", GetPlayerNameEx(playerid), id, area);
	Log("logs/mail.log", string);

    return 1;
}

CMD:gotomailbox(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4) {
        return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    }
	new id;
	if(sscanf(params, "d", id)) {
        SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotomailbox [street mailbox id]");
        return 1;
    }
    if(id < 0 || id >= MAX_MAILBOXES) {
        return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid street mailbox ID.");
    }
    if(MailBoxes[id][mbPosX] == 0.0) {
        return SendClientMessageEx(playerid, COLOR_GRAD2, "No street mailbox found with that ID.");
    }

	GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
	SetPlayerVirtualWorld(playerid, MailBoxes[id][mbVW]);
	SetPlayerInterior(playerid, MailBoxes[id][mbInt]);
	SetPlayerPos(playerid,MailBoxes[id][mbPosX],MailBoxes[id][mbPosY] - 2.5,MailBoxes[id][mbPosZ]);
	PlayerInfo[playerid][pVW] = MailBoxes[id][mbVW];
	PlayerInfo[playerid][pInt] = MailBoxes[id][mbInt];

    return 1;
}

CMD:placemailbox(playerid, params[])
{
	if (PlayerInfo[playerid][pPhousekey] == INVALID_HOUSE_ID && PlayerInfo[playerid][pPhousekey2] == INVALID_HOUSE_ID && PlayerInfo[playerid][pPhousekey3] == INVALID_HOUSE_ID) {
	    return SendClientMessageEx(playerid, COLOR_GRAD2, "You don't own a house!");
	}
	if (PlayerInfo[playerid][pMailbox] < 1) {
	    return SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a mailbox item!");
	}
	new style;
	if (sscanf(params, "d", style)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /placemailbox [1 or 2] (1=wooden 2=steel)");
    }
	if (HasMailbox(playerid)) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You already have a mailbox placed. You cannot place more.");
	}
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You must be on foot to use this command!");
	}
	new h = InRangeOfWhichHouse(playerid, Mailbox_Range);
	if (h == INVALID_HOUSE_ID) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not at your house!");
	}

	new Float: f_ZOffset;
	if (style == 1) f_ZOffset = -0.38; else if (style == 2) f_ZOffset = -0.95;
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid number!");

	PlayerInfo[playerid][pMailbox]--;

	GetPlayerPos(playerid, HouseInfo[h][hMailX], HouseInfo[h][hMailY], HouseInfo[h][hMailZ]);
	GetPlayerFacingAngle(playerid, HouseInfo[h][hMailA]);
	HouseInfo[h][hMailZ] += f_ZOffset;
	HouseInfo[h][hMailType] = style;
	SaveHouse(h);

	RenderHouseMailbox(h);

	SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully placed your mailbox!");
	SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: If you need to change the location of your mailbox, you can type /movemailbox" );

	new szLog[128];
	format(szLog, sizeof(szLog), "%s has placed a mailbox for their house (House ID: %d)", GetPlayerNameEx(playerid), h);
	Log("logs/house.log", szLog);

	return 1;
}

CMD:destroymailbox(playerid, params[])
{
	if (!HasMailbox(playerid)) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a placed mailbox.");
	}
	new h;
	if (PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[PlayerInfo[playerid][pPhousekey]][hMailX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hMailY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hMailZ])) h = PlayerInfo[playerid][pPhousekey];
	else if (PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[PlayerInfo[playerid][pPhousekey2]][hMailX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hMailY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hMailZ])) h = PlayerInfo[playerid][pPhousekey2];
	else if (PlayerInfo[playerid][pPhousekey3] != INVALID_HOUSE_ID && IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[PlayerInfo[playerid][pPhousekey3]][hMailX], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hMailY], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hMailZ])) h = PlayerInfo[playerid][pPhousekey3];
	else return SendClientMessageEx(playerid, COLOR_GREY, "You need to be near your mailbox.");

	ClearHouseMailbox(h);
	RenderHouseMailbox(h);
	SendClientMessageEx(playerid, COLOR_WHITE, "You have destroyed your mailbox.");

	new szLog[128];
	format(szLog, sizeof(szLog), "%s has destroyed their house mailbox (House ID: %d)", GetPlayerNameEx(playerid), h);
	Log("logs/house.log", szLog);

	return 1;
}

CMD:movemailbox(playerid, params[])
{
	if (!HasMailbox(playerid)) {
   		return SendClientMessageEx(playerid, COLOR_GREY, "You don't have a placed mailbox!");
   	}
	new h = InRangeOfWhichHouse(playerid, Mailbox_Range);
	if (h == INVALID_HOUSE_ID || HouseInfo[h][hMailX] == 0.0) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You are too far away from your house door for the new location of your mailbox!");
	}
	GetPlayerPos(playerid, HouseInfo[h][hMailX], HouseInfo[h][hMailY], HouseInfo[h][hMailZ]);
	GetPlayerFacingAngle(playerid, HouseInfo[h][hMailA]);
	new Float: f_ZOffset;
	if (HouseInfo[h][hMailType] == 1) f_ZOffset = -0.38; else if (HouseInfo[h][hMailType] == 2) f_ZOffset = -0.95;
	HouseInfo[h][hMailZ] += f_ZOffset;
	SaveHouse(h);
    RenderHouseMailbox(h);
	SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully moved your mailbox to its new position!");
	return 1;
}

CMD:adestroymailbox(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4) {
        return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    }
    new houseid;
    if(sscanf(params,"d",houseid)) {
        return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adestroymailbox [houseid]");
    }
    if (houseid < 0 || houseid >= MAX_HOUSES) {
    	return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid house ID!");
	}
    if (HouseInfo[houseid][hMailX] == 0.0) {
    	return SendClientMessageEx(playerid, COLOR_GRAD2, "That house does not have a mailbox.");
	}

    ClearHouseMailbox(houseid);
	RenderHouseMailbox(houseid);

	new string[64];
	format(string, sizeof(string), "You have destroyed the mailbox of house %d.", houseid);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	//foreach(new i: Player)
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pPhousekey] == houseid || PlayerInfo[i][pPhousekey2] == houseid || PlayerInfo[i][pPhousekey3] == houseid)	{
				format(string, sizeof(string), "Administrator %s has destroyed your mailbox.", GetPlayerNameEx(playerid));
				SendClientMessageEx(i, COLOR_GREY, string);
				break;
			}
		}	
	}

	format(string, sizeof(string), "Administrator %s has destroyed the mailbox of house %d.", GetPlayerNameEx(playerid), houseid);
	Log("logs/house.log", string);

	return 1;
}

CMD:postdirectory(playerid, params[])
{
	if (!IsAtPostOffice(playerid)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You're not at a post office!");
	}
	if(strcmp(params, "on", true) == 0)	{
	    PlayerInfo[playerid][pMailEnabled] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "You have enabled look up in the postal directory.");
    }
    else if(strcmp(params, "off", true) == 0)	{
	    PlayerInfo[playerid][pMailEnabled] = 0;
        SendClientMessage(playerid, COLOR_WHITE, "You have disabled look up in the postal directory.");
    }
    else {
	    SendClientMessage(playerid, COLOR_GREY, "USAGE: /postdirectory [on/off]");
    }
	return 1;
}

CMD:buyinsurance(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 1) {
        if (GetPlayerCash(playerid) >= 4000) {
            if (PlayerInfo[playerid][pInsurance] != 1) {
                GivePlayerCash(playerid, -4000);
                PlayerInfo[playerid][pInsurance] = 1;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $1,500 + a one-time transfer fee of $2,500, you will now be healed at County General Hospital for $1,500.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at County General Hospital!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 2) {
        if (GetPlayerCash(playerid) >= 4000) {
            if (PlayerInfo[playerid][pInsurance] != 2) {
                GivePlayerCash(playerid, -4000);
                PlayerInfo[playerid][pInsurance] = 2;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $1,500 + a one-time transfer fee of $2,500, you will now be healed at All Saints Hospital for $1,500.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at All Saints Hospital!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 5) {
        if (GetPlayerCash(playerid) >= 3000) {
            if (PlayerInfo[playerid][pInsurance] != 3) {
                GivePlayerCash(playerid, -3000);
                PlayerInfo[playerid][pInsurance] = 3;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $500 + a one-time transfer fee of $2,500, you will now be healed at Montgomery Hospital for $500.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at Montgomery Hospital!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 4) {

        if (GetPlayerCash(playerid) >= 3000) {
            if (PlayerInfo[playerid][pInsurance] != 4) {
                if(PlayerInfo[playerid][pInsurance] >= 1) {
                    PlayerInfo[playerid][pInsurance] = 4;
                    SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance switched, you have switched to Fort Carson Insurance for free.");
                    return 1;
                }
                GivePlayerCash(playerid, -250);
                PlayerInfo[playerid][pInsurance] = 4;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased. You have paid $250, and will now be healed at Fort Carson for $250.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at Fort Carson!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }

    }
    else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 6) {
        if (GetPlayerCash(playerid) >= 3000) {
            if (PlayerInfo[playerid][pInsurance] != 5) {
                GivePlayerCash(playerid, -3000);
                PlayerInfo[playerid][pInsurance] = 5;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $500 + a one-time transfer fee of $2,500, you will now be healed at San Fierro Medical Center for $500.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at San Fierro Medical Center!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid,3.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 99) {
        if (GetPlayerCash(playerid) >= 3000) {
            if (PlayerInfo[playerid][pInsurance] != 9) {
                GivePlayerCash(playerid, -3000);
                PlayerInfo[playerid][pInsurance] = 9;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $500 + a one-time transfer fee of $2,500, you will now be healed at El Quebrados Hospital for $250.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at El Quabrados Medical Center!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
   	else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1169.5385, -1348.0225, 2423.0461) && PlayerInfo[playerid][pVW] == 8) {
   	    if(PlayerInfo[playerid][pMember] == 11) // SAAS
   	    {
	    	if (GetPlayerCash(playerid) >= 0) {
	    	    if (PlayerInfo[playerid][pInsurance] != 10) {
	        	    PlayerInfo[playerid][pInsurance] = 10;
	        	    SendClientMessageEx(playerid, COLOR_WHITE, "Insurance free of charge, you will now be healed at the SAAS Base Hospital.");
	        	    return 1;
	        	}
	        	else {
	        	    SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at SAAS Base Hospital!");
	        	}
			}
	    	else {
	    	    SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
	    	}
		}
    }
    /*else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 7 &&
    (PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)) {
        if (PlayerInfo[playerid][pInsurance] != 8) {
            PlayerInfo[playerid][pInsurance] = 8;
            SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance changed, you will now be healed at the USS Nimitz.");
            return 1;
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at the USS Nimitz!");
        }
    }*/
    else if(IsPlayerInRangeOfPoint(playerid,4.0,2785.586914, 2400.224853, 1240.531127) && PlayerInfo[playerid][pDonateRank] >= 3) {
        if (GetPlayerCash(playerid) >= 3000) {
            if (PlayerInfo[playerid][pInsurance] != 6) {
                GivePlayerCash(playerid, -3000);
                PlayerInfo[playerid][pInsurance] = 6;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $500 + a one-time transfer fee of $2,500, you will now be healed at Club VIP for $500.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at Club VIP!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1169.6624, -1348.2397, 2423.0461) && PlayerInfo[playerid][pVW] == 11720)
	{
	    if(GetPlayerCash(playerid) >= 3000)
		{
            if(PlayerInfo[playerid][pInsurance] != 11)
			{
                GivePlayerCash(playerid, -3000);
                PlayerInfo[playerid][pInsurance] = 11;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $500 + a one-time transfer fee of $2,500, you will now be healed at Las Venturas Hospital for $500.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at Las Venturas Hospital!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 912.1003, 1429.9298, -81.1762))
	{
		if(PlayerInfo[playerid][pFamed] >= 2)
		{
			if(GetPlayerCash(playerid) >= 3000)
			{
				if(PlayerInfo[playerid][pInsurance] != 12)
				{
					GivePlayerCash(playerid, -3000);
					PlayerInfo[playerid][pInsurance] = 12;
					SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $500 + a one-time transfer fee of $2,500, you will now be healed at the Famed Room for $500.");
					return 1;
				}
				else {
					SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at the Famed Room!");
				}
			}
			else {
				SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD4, "You must be COS+ to get insurance in the famed room!");
    }
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1169.6624, -1348.2397, 2423.0461) && PlayerInfo[playerid][pVW] == 13) { // DeMorgan
		if(PlayerInfo[playerid][pMember] == 11) // SAAS
		{
			if (GetPlayerCash(playerid) >= 0) {
				if (PlayerInfo[playerid][pInsurance] != 13) {
					PlayerInfo[playerid][pInsurance] = 13;
					SendClientMessageEx(playerid, COLOR_WHITE, "Insurance free of charge, you will now be healed at DeMorgan Hospital.");
					return 1;
				}
				else {
					SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at Demorgan Hospital!");
				}
			}
			else {
				SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
			}
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1169.6624, -1348.2397, 2423.0461) && PlayerInfo[playerid][pVW] == 14) // TR - Bayside
	{
		if(GetPlayerCash(playerid) >= 3000)
		{
			if(PlayerInfo[playerid][pInsurance] != 14)
			{
				GivePlayerCash(playerid, -3000);
				PlayerInfo[playerid][pInsurance] = 14;
				SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $500 + a one-time transfer fee of $2,500, you will now be healed at Bayside Hospital for $500.");
				return 1;
			}
			else {
				SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at Bayside Hospital!");
			}
		}
		else {
			SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
		}
	}
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not at any hospital!");
    }
    return 1;
}

CMD:fixr(playerid, params[])
{
	PlayerFixRadio(playerid);
	return 1;
}

CMD:time(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do that right now.");
	
	new string[128], mtext[20], thour, suffix[3], year, month,day;
    getdate(year, month, day);
    if(month == 1) { mtext = "January"; }
    else if(month == 2) { mtext = "February"; }
    else if(month == 3) { mtext = "March"; }
    else if(month == 4) { mtext = "April"; }
    else if(month == 5) { mtext = "May"; }
    else if(month == 6) { mtext = "June"; }
    else if(month == 7) { mtext = "July"; }
    else if(month == 8) { mtext = "August"; }
    else if(month == 9) { mtext = "September"; }
    else if(month == 10) { mtext = "October"; }
    else if(month == 11) { mtext = "November"; }
    else if(month == 12) { mtext = "December"; }
	if(hour > 12 && hour < 24)
	{
		thour = hour - 12;
		suffix = "PM";
	}
	else if(hour == 12)
	{
		thour = 12;
		suffix = "PM";
	}
	else if(hour > 0 && hour < 12)
	{
		thour = hour;
		suffix = "AM";
	}
	else if(hour == 0)
	{
		thour = 12;
		suffix = "AM";
	}

	if (PlayerInfo[playerid][pJailTime] > 0)
	{
		format(string, sizeof(string), "~y~%s %d, %d~n~~g~|~w~%d:%02d~g~%s|~n~~w~Jail Time Left: ~r~%s", mtext, day, year, thour, minuite, suffix, TimeConvert(PlayerInfo[playerid][pJailTime]));
	}
	else
	{
		format(string, sizeof(string), "~y~%s %d, %d~n~~g~|~w~%d:%02d~g~%s|", mtext, day, year, thour, minuite, suffix);
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch", 4.0, 0, 0, 0, 0, 0, 1);
	}
    GameTextForPlayer(playerid, string, 5000, 1);
    return 1;
}

CMD:cashchecks(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
 	{
  		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
    	return 1;
	}
 	if(PlayerInfo[playerid][pCheckCash] > 0)
    {
    	GivePlayerCash(playerid,PlayerInfo[playerid][pCheckCash]);
     	PlayerInfo[playerid][pCheckCash] = 0;
      	SendClientMessageEx(playerid, COLOR_GRAD1, "You have successfully deposited all of your checks.");
       	return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You did not have any undeposited checks on hand.");
	}
	return 1;
}

CMD:mjail(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] == 1 || PlayerInfo[playerid][pHelper] >= 2) {

		new
			iTargetID,
			szReason[64];

		if(sscanf(params, "us[64]", iTargetID, szReason)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /mjail [player] [reason]");
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(PlayerInfo[iTargetID][pAdmin] == 1) {
				return SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on moderators.");
			}
			if(PlayerInfo[iTargetID][pAdmin] > PlayerInfo[playerid][pAdmin]) {
				return SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on administrators.");
			}
			if(PlayerInfo[iTargetID][pHelper] >= 2) {
				return SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on community advisors.");
			}
            if(PlayerInfo[iTargetID][pJailTime] > 0) {
			    return SendClientMessageEx(playerid, COLOR_GREY, "You can't perform this action on someone in jail already.");
			}
			if(GetPVarInt(iTargetID, "IsInArena") >= 0) LeavePaintballArena(iTargetID, GetPVarInt(iTargetID, "IsInArena"));

			new
				szMessage[128];
			if(GetPVarInt(iTargetID, "Injured") == 1)
			{
				KillEMSQueue(iTargetID);
				ClearAnimations(iTargetID);
			}
			ResetPlayerWeaponsEx(iTargetID);

			PhoneOnline[iTargetID] = 1;
			PlayerInfo[iTargetID][pJailTime] = 20*60;
			SetPVarInt(iTargetID, "_rAppeal", gettime()+60);
			SetPlayerInterior(iTargetID, 1);
			PlayerInfo[iTargetID][pInt] = 1;
        	SetPlayerHealth(iTargetID, 0x7FB00000);
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(iTargetID, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPos(iTargetID, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(iTargetID, 50);

			PlayerInfo[iTargetID][pVW] = 0;
			SetPlayerVirtualWorld(iTargetID, 0);
			SetPlayerColor(iTargetID, TEAM_APRISON_COLOR);

			Player_StreamPrep(iTargetID, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			format(szMessage, sizeof(szMessage), "AdmCmd: %s has been jailed by %s, reason: %s", GetPlayerNameEx(iTargetID), GetPlayerNameEx(playerid), szReason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);

			format(szMessage, sizeof(szMessage), "AdmCmd: %s has been jailed by %s, reason: %s", GetPlayerNameEx(iTargetID), GetPlayerNameEx(playerid), szReason);
			Log("logs/moderator.log", szMessage);

			format(szMessage, sizeof(szMessage), "You have been jailed by Server Moderator %s for 20 minutes for violation of server rules.", GetPlayerNameEx(playerid));
			SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szMessage);

			format(szMessage, sizeof(szMessage), "Reason: %s", szReason);
			SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szMessage);

            format(szReason, sizeof(szReason), "[OOC] %s", szReason);
			strcpy(PlayerInfo[iTargetID][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			strcpy(PlayerInfo[iTargetID][pPrisonReason], szReason, 128);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		}
	}
	return 1;
}

CMD:ringbell(playerid, params[])
{
	for(new h; h < sizeof(HouseInfo); h++) if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ])) {

		new
			string[75 + MAX_PLAYER_NAME];

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if((IsPlayerInRangeOfPoint(i, 15.0, HouseInfo[h][hInteriorX], HouseInfo[h][hInteriorY], HouseInfo[h][hInteriorZ])) && GetPlayerVirtualWorld(i) == HouseInfo[h][hIntVW] && GetPlayerInterior(i) == HouseInfo[h][hIntIW]) {
					format(string,sizeof(string),"%s's doorbell rings.", StripUnderscore(HouseInfo[h][hOwnerName]));
					SendClientMessageEx(i,COLOR_PURPLE,string);
					GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~w~The doorbell rings...", 4000,3);
				}
			}	
		}
		format(string,sizeof(string),"* %s presses a button next to the door, ringing the doorbell of %s's house.", GetPlayerNameEx(playerid), StripUnderscore(HouseInfo[h][hOwnerName]));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

CMD:togbr(playerid, params[])
{
	if(PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iBugAccess]) {
		if (gBug{playerid} == 0)
		{
			gBug{playerid} = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Bug chat channel enabled. You will now be able to hear transmissions from all active bugs.");
		}
		else
		{
			gBug{playerid} = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Bug chat channel disabled.");
		}
	}
	return 1;
}

CMD:togpr(playerid, params[])
{
	if(PlayerInfo[playerid][pRadio] == 1)
	{
 		if (gRadio{playerid} == 0)
   		{
   		    new string[128];
     		gRadio{playerid} = 1;
       		format(string,sizeof(string),"You have switched your portable radio on, and it is now broadcasting at %d khz.",PlayerInfo[playerid][pRadioFreq]);
	        SendClientMessageEx(playerid,COLOR_WHITE,string);
	    }
	    else
	    {
     		gRadio{playerid} = 0;
       		SendClientMessageEx(playerid,COLOR_WHITE,"You have switched off your portable radio.");
	    }
	}
	else
	{
 		SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have a portable radio!");
	}
  	return 1;
}

CMD:prisoners(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
 	{
  		new Count;
		new string[128];

		SendClientMessageEx(playerid, COLOR_WHITE, "----------------------------------------");
  		SendClientMessageEx(playerid, COLOR_WHITE, "Name | Prisoned By | Time Left | Reason");

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pJailTime] >= 1)
				{
					if(strlen(PlayerInfo[i][pPrisonReason]) >= 1 && strlen(PlayerInfo[i][pPrisonedBy]) >= 1)
					{
							Count++;
							format(string, sizeof(string), "%s (%d) | %s | %s | %s", GetPlayerNameEx(i), i, PlayerInfo[i][pPrisonedBy], TimeConvert(PlayerInfo[i][pJailTime]), PlayerInfo[i][pPrisonReason]);
							SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					else
					{
						format(string, sizeof(string), "%s (%d) | Unavailable | %s | Unavailable", GetPlayerNameEx(i), i, TimeConvert(PlayerInfo[i][pJailTime]));
						SendClientMessageEx(playerid, COLOR_GREY, string);
					}
				}
			}	
      	}
      	SendClientMessageEx(playerid, COLOR_WHITE, "----------------------------------------");
	}
	return 1;
}

CMD:tow(playerid, params[]) {
 	if(IsACop(playerid) || IsATowman(playerid) || IsAMedic(playerid)) {
   		if(IsPlayerInAnyVehicle(playerid))
     	{
			new
				carid = GetPlayerVehicleID(playerid);

			if(IsATowTruck(carid))
			{
   				new
					closestcar = GetClosestCar(playerid, carid);

				//foreach(new i: Player)
				for(new i = 0; i < MAX_PLAYERS; ++i)
				{
					if(IsPlayerConnected(i))
					{
						if(arr_Towing[i] == closestcar || (GetPlayerVehicleID(i) == closestcar && GetPlayerState(i) == 2)) return SendClientMessageEx(playerid, COLOR_GREY, "You can't tow a vehicle which is occupied, or in tow.");
					}
				}

       			if(GetDistanceToCar(playerid,closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid)) {
					//foreach(new i: Player)
					for(new i = 0; i < MAX_PLAYERS; ++i)
					{
						if(IsPlayerConnected(i))
						{
							if(IsAPlane(closestcar) || IsABike(closestcar) || IsASpawnedTrain(closestcar) || IsATrain(closestcar) || IsAHelicopter(closestcar)) {
								return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot tow this type of vehicle.");
							}
							if(GetPlayerVehicle(i, closestcar) != -1) {

								new
									hKey;

								if(((hKey = PlayerInfo[i][pPhousekey]) != INVALID_HOUSE_ID) && IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hKey][hExteriorX], HouseInfo[hKey][hExteriorY], HouseInfo[hKey][hExteriorZ])
								||((hKey = PlayerInfo[i][pPhousekey2]) != INVALID_HOUSE_ID) && IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hKey][hExteriorX], HouseInfo[hKey][hExteriorY], HouseInfo[hKey][hExteriorZ])
								||((hKey = PlayerInfo[i][pPhousekey3]) != INVALID_HOUSE_ID) && IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hKey][hExteriorX], HouseInfo[hKey][hExteriorY], HouseInfo[hKey][hExteriorZ])) {
									return SendClientMessageEx(playerid, COLOR_GREY, "This vehicle doesn't need to be towed.");
								}

								arr_Towing[playerid] = closestcar;
								SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle is available for impounding.");
								return AttachTrailerToVehicle(closestcar,carid);
							}
						}	
					}
					SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle has no registration, it is available for impounding.");
					AttachTrailerToVehicle(closestcar,carid);
					arr_Towing[playerid] = closestcar;
					return 1;
     			}
			}
			else if(IsAAircraftTowTruck(carid)) //Tug
			{
				new
				    closestcar = GetClosestCar(playerid, carid);
				    
                //foreach(new i: Player)
				for(new i = 0; i < MAX_PLAYERS; ++i)
				{
					if(IsPlayerConnected(i))
					{
						if(arr_Towing[i] == closestcar || (GetPlayerVehicleID(i) == closestcar && GetPlayerState(i) == 2)) return SendClientMessageEx(playerid, COLOR_GREY, "You can't tow a vehicle which is occupied, or in tow.");
					}
				}
				
				if(GetDistanceToCar(playerid,closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid))
				{
					//foreach(new i: Player)
					for(new i = 0; i < MAX_PLAYERS; ++i)
					{
						if(IsPlayerConnected(i))
						{
							if(IsAPlane(closestcar))
							{
								if(GetPlayerVehicle(i, closestcar) != -1)
								{
									arr_Towing[playerid] = closestcar;
									SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle is available for impounding.");
									return AttachTrailerToVehicle(closestcar,carid);
								}
							}
							else return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only tow aircrafts with this vehicle!");
						}	
	      			}
					SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle has no registration, it is available for impounding.");
					AttachTrailerToVehicle(closestcar,carid);
					arr_Towing[playerid] = closestcar;
	      		}
	      	}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to tow with this vehicle.");
   		}
     	else SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be inside a vehicle to use this command!");
	}
   	else SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	return 1;
}

CMD:untow(playerid, params[])
{
 	if(IsACop(playerid) || IsATowman(playerid) || IsAMedic(playerid))
	{
   		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
     	{
      		SendClientMessageEx(playerid, COLOR_GRAD1,"You have unhooked the vehicle that you were towing.");
			arr_Towing[playerid] = INVALID_VEHICLE_ID;
			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
     	}
      	else
       	{
        	SendClientMessageEx(playerid, COLOR_GRAD1,"You are currently not towing anything.");
        }
  	}
   	else
	{
 		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:impoundedit(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1)
	{
		new string[128], choice[32], id, amount;
		if(sscanf(params, "s[32]dD", choice, id, amount))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /impoundedit [name] [id] [amount]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Position, Delete");
			return 1;
		}

		if(id >= MAX_IMPOUNDPOINTS)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Invalid Impound Points ID!");
			return 1;
		}

		if(strcmp(choice, "position", true) == 0)
		{
			GetPlayerPos(playerid, ImpoundPoints[id][impoundPosX], ImpoundPoints[id][impoundPosY], ImpoundPoints[id][impoundPosZ]);
			ImpoundPoints[id][impoundInt] = GetPlayerInterior(playerid);
			ImpoundPoints[id][impoundVW] = GetPlayerVirtualWorld(playerid);
			format(string, sizeof(string), "You have changed the position on impound Point #%d.", id);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			DestroyDynamic3DTextLabel(ImpoundPoints[id][impoundTextID]);
			format(string, sizeof(string), "Impound Yard #%d\nType /impound to impound a vehicle", id);
			ImpoundPoints[id][impoundTextID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, ImpoundPoints[id][impoundPosX], ImpoundPoints[id][impoundPosY], ImpoundPoints[id][impoundPosZ]+0.6, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ImpoundPoints[id][impoundVW], ImpoundPoints[id][impoundInt], -1);
			SaveImpoundPoint(id);
			format(string, sizeof(string), "%s has edited Impound Point ID %d's position.", GetPlayerNameEx(playerid), id);
			Log("logs/impoundedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "delete", true) == 0)
		{
			if(ImpoundPoints[id][impoundPosX] == 0)
			{
				format(string, sizeof(string), "Impound Point #%d does not exist.", id);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				return 1;
			}
			DestroyDynamic3DTextLabel(ImpoundPoints[id][impoundTextID]);
			ImpoundPoints[id][impoundPosX] = 0.0;
			ImpoundPoints[id][impoundPosY] = 0.0;
			ImpoundPoints[id][impoundPosZ] = 0.0;
			ImpoundPoints[id][impoundVW] = 0;
			ImpoundPoints[id][impoundInt] = 0;
			SaveImpoundPoint(id);
			format(string, sizeof(string), "You have deleted Impound Point #%d.", id);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has deleted Impound Point ID %d.", GetPlayerNameEx(playerid), id);
			Log("logs/impoundedit.log", string);
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:impoundstatus(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /impoundstatus [id]");
		return 1;
	}
	if (PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1)
	{
		new string[128];
		format(string,sizeof(string),"|___________ Impound Point Status (ID: %d) ___________|", id);
		SendClientMessageEx(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "[Position] X: %f | Y: %f | Z: %f | VW: %d | Int: %d", ImpoundPoints[id][impoundPosX], ImpoundPoints[id][impoundPosY], ImpoundPoints[id][impoundPosZ], ImpoundPoints[id][impoundVW], ImpoundPoints[id][impoundInt]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:impoundnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] == 2)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available Impound Point...");
		for(new x = 0; x < MAX_IMPOUNDPOINTS; x++)
		{
			if(ImpoundPoints[x][impoundPosX] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:gotoimpoundpoint(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1)
	{
		new id;
		if(sscanf(params, "d", id)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotoimpoundpoint [id]");

		SetPlayerPos(playerid, ImpoundPoints[id][impoundPosX], ImpoundPoints[id][impoundPosY], ImpoundPoints[id][impoundPosZ]);
		SetPlayerInterior(playerid, ImpoundPoints[id][impoundInt]);
		PlayerInfo[playerid][pInt] = ImpoundPoints[id][impoundInt];
		SetPlayerVirtualWorld(playerid, ImpoundPoints[id][impoundVW]);
		PlayerInfo[playerid][pVW] = ImpoundPoints[id][impoundVW];
	}
	return 1;
}

CMD:impound(playerid, params[]) {

	if (IsACop(playerid) || IsATowman(playerid))
	{
			if(!IsAtImpoundingPoint(playerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You are not near the impound point, you can't impound!");
				return 1;
			}
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{

				new
					iVehType,
					iVehIndex,
					iTargetOwner,
					iVehTowed = GetVehicleTrailer(GetPlayerVehicleID(playerid));

				if(!GetVehicleModel(iVehTowed)) {
					return SendClientMessageEx(playerid, COLOR_GREY, "The vehicle in tow has been desynced and therefore cannot be impounded.");
				}
				//foreach(new i: Player)
				for(new i = 0; i < MAX_PLAYERS; ++i)
				{
					if(IsPlayerConnected(i))
					{
						iVehIndex = GetPlayerVehicle(i, iVehTowed);
						if(iVehIndex != -1) {
							iVehType = 1;
							iTargetOwner = i;
							break;
						}
					}	
				}
				switch(iVehType) {
					case 0, 2: {
						SendClientMessageEx(playerid, COLOR_GRAD1, "The impound administration could not find any registration on the vehicle and has returned it.");
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0); // Attempted desync fix
						SetVehicleToRespawn(iVehTowed);
					}
					case 1: {

						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvImpounded] = 1;
						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvSpawned] = 0;
						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0); // Attempted desync fix
						DestroyVehicle(iVehTowed);
                        g_mysql_SaveVehicle(iTargetOwner, iVehIndex);
						VehicleSpawned[iTargetOwner]--;
						--PlayerCars;

						new
							szMessage[96];

						format(szMessage, sizeof(szMessage),"* You have impounded %s's %s.",GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

						format(szMessage, sizeof(szMessage), "Your %s has been impounded. You may release it at the DMV in Dillimore.", VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
						SendClientMessageEx(iTargetOwner, COLOR_LIGHTBLUE, szMessage);

						format(szMessage, sizeof(szMessage), "HQ: %s has impounded %s's %s ($%s unpaid tickets).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400], number_format(PlayerVehicleInfo[iTargetOwner][iVehIndex][pvTicket]));
						SendGroupMessage(1, RADIO, szMessage);
					}
					/*case 2: {

						new
							szMessage[29 + MAX_PLAYER_NAME];

						format(szMessage, sizeof(szMessage),"* You have impounded %s's %s.",FamilyInfo[iTargetOwner][FamilyName], GetVehicleNameEx(iVehTowed));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

						format(szMessage, sizeof(szMessage), "Your %s has been impounded. You may release it at the DMV in Dillimore.", GetVehicleNameEx(iVehTowed));
						SendNewFamilyMessage(iTargetOwner, COLOR_LIGHTBLUE, szMessage);

						FamilyVehicleInfo[iTargetOwner][iVehIndex][fvImpounded] = 1;
						FamilyVehicleInfo[iTargetOwner][iVehIndex][fvId] = INVALID_VEHICLE_ID;
						DestroyVehicle(iVehTowed);
					}*/
				}
				arr_Towing[playerid] = INVALID_VEHICLE_ID;
			}
		}
	return 1;
}

CMD:aimpound(playerid, params[]) {
    if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new
			iVehType,
			iVehIndex,
			iTargetOwner,
			iVehTowed;
        if(sscanf(params, "d", iVehTowed)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /aimpound [carid]");

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				iVehIndex = GetPlayerVehicle(i, iVehTowed);
				if(iVehIndex != -1) {
					iVehType = 1;
					iTargetOwner = i;
					break;
				}
			}
		}
		/*if(!iVehType) {
			for(new i=1; i < MAX_FAMILY; ++i) {
				iVehIndex = GetGangVehicle(i, iVehTowed);
				if(iVehIndex != -1) {
					iVehType = 2;
					iTargetOwner = i;
					break;
				}
			}
		} */
		switch(iVehType) {
			case 0, 2: {
				SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot impound this vehicle, it has been respawned instead.");
				DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
				SetVehicleToRespawn(iVehTowed);
			}
			case 1: {

				PlayerVehicleInfo[iTargetOwner][iVehIndex][pvImpounded] = 1;
				PlayerVehicleInfo[iTargetOwner][iVehIndex][pvSpawned] = 0;
				PlayerVehicleInfo[iTargetOwner][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
				DestroyVehicle(iVehTowed);
                g_mysql_SaveVehicle(iTargetOwner, iVehIndex);
				VehicleSpawned[iTargetOwner]--;
				--PlayerCars;

				new
					szMessage[96];

				format(szMessage, sizeof(szMessage),"* You have impounded %s's %s.",GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

				format(szMessage, sizeof(szMessage), "Your %s has been impounded by an admin. You may release it at the DMV in Dillimore.", VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
				SendClientMessageEx(iTargetOwner, COLOR_LIGHTBLUE, szMessage);

			}
			/*case 2: {

				new
					szMessage[29 + MAX_PLAYER_NAME];

				format(szMessage, sizeof(szMessage),"* You have impounded %s's %s.",FamilyInfo[iTargetOwner][FamilyName], GetVehicleNameEx(iVehTowed));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

				format(szMessage, sizeof(szMessage), "Your %s has been impounded. You may release it at the DMV in Dillimore.", GetVehicleNameEx(iVehTowed));
				SendNewFamilyMessage(iTargetOwner, COLOR_LIGHTBLUE, szMessage);

				FamilyVehicleInfo[iTargetOwner][iVehIndex][fvImpounded] = 1;
				FamilyVehicleInfo[iTargetOwner][iVehIndex][fvId] = INVALID_VEHICLE_ID;
				DestroyVehicle(iVehTowed);
			}*/
		}
		arr_Towing[playerid] = INVALID_VEHICLE_ID;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:nonewbie(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3 || PlayerInfo[playerid][pHelper] >= 4)
	{
		if (!nonewbie)
		{
			nonewbie = 1;
			SendClientMessageToAllEx(COLOR_GRAD2, "Newbie chat channel disabled by an Admin/Advisor!");
		}
		else
		{
			nonewbie = 0;
			SendClientMessageToAllEx(COLOR_GRAD2, "Newbie chat channel enabled by an Admin/Advisor!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:noooc(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if (!noooc)
		{
			noooc = 1;
			SendClientMessageToAllEx(COLOR_GRAD2, "   OOC chat channel disabled by an Admin!");
		}
		else
		{
			noooc = 0;
			SendClientMessageToAllEx(COLOR_GRAD2, "   OOC chat channel enabled by an Admin!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:togooc(playerid, params[])
{
	if (!gOoc[playerid])
	{
		gOoc[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled global OOC chat.");
	}
	else
	{
		gOoc[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled global OOC chat.");
	}
	return 1;
}

CMD:tognews(playerid, params[])
{
	if (!gNews[playerid])
	{
		gNews[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled news chat.");
	}
	else
	{
		gNews[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled news chat.");
	}
	return 1;
}

CMD:tognewbie(playerid, params[])
{
	if (PlayerInfo[playerid][pNewbieTogged] == 0)
	{
		PlayerInfo[playerid][pNewbieTogged] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled newbie chat.");
	}
	else
	{
		PlayerInfo[playerid][pNewbieTogged] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled newbie chat.");
	}
	return 1;
}

CMD:togfamily(playerid, params[])
{
	return cmd_togfam(playerid, params);
}

CMD:togfam(playerid, params[])
{
	if (!gFam[playerid])
	{
		gFam[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled family chat.");
	}
	else
	{
		gFam[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled family chat.");
	}
	return 1;
}

CMD:togwhisper(playerid, params[])
{
	if (!HidePM[playerid])
	{
		HidePM[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled whisper chat.");
	}
	else
	{
		HidePM[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled whisper chat.");
	}
	return 1;
}

CMD:togphone(playerid, params[])
{
	if(PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use your phone in jail/prison.");
		return 1;
	}
	if(Mobile[playerid] == INVALID_PLAYER_ID)
	{
		if (!PhoneOnline[playerid])
		{
			PhoneOnline[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Your phone is now switched off.");
		}
		else
		{
			PhoneOnline[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Your phone is now switched on.");
		}
		return 1;
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "First use /hangup.");
}

CMD:togstaff(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pDonateRank] == 5 || PlayerInfo[playerid][pWatchdog] >= 1)
	{
		if (!advisorchat[playerid])
		{
			advisorchat[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "   You can now see the /staff chat!");
		}
		else
		{
			advisorchat[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "   You will not see the /staff chat anymore!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not allowed to use this command!");
		return 1;
	}
	return 1;
}

CMD:vehname(playerid, params[]) {

	if(PlayerInfo[playerid][pAdmin] >= 2) {

		SendClientMessageEx(playerid, COLOR_YELLOW, "--------------------------------------------------------------------------------------------------------------------------------");
		SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle Search:");

		new
			string[128];

		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "No keyword specified.");
		if(!params[2]) return SendClientMessageEx(playerid, COLOR_GREY, "Search keyword too short.");

		for(new v; v < sizeof(VehicleName); v++) {
			if(strfind(VehicleName[v], params, true) != -1) {

				if(isnull(string)) format(string, sizeof(string), "%s (ID %d)", VehicleName[v], v+400);
				else format(string, sizeof(string), "%s | %s (ID %d)", string, VehicleName[v], v+400);
			}
		}

		if(!string[0]) SendClientMessageEx(playerid, COLOR_GREY, "No results found.");
		else if(string[127]) SendClientMessageEx(playerid, COLOR_GREY, "Too many results found.");
		else SendClientMessageEx(playerid, COLOR_WHITE, string);

		SendClientMessageEx(playerid, COLOR_YELLOW, "--------------------------------------------------------------------------------------------------------------------------------");
	}
	return 1;
}

CMD:joinevent(playerid, params[]) {
	if( EventKernel[ EventStatus ] == 0 ) {
		SendClientMessageEx( playerid, COLOR_WHITE, "There are currently no active events." );
	}
	else if( GetPVarInt( playerid, "EventToken" ) == 1 ) {
		SendClientMessageEx( playerid, COLOR_WHITE, "You are already in the event." );
	}
	else if(GetPVarInt(playerid, "IsInArena") >= 0) {
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
	}
	else if( PlayerCuffed[ playerid ] >= 1 || PlayerInfo[ playerid ][ pJailTime ] > 0 || PlayerInfo[playerid][pHospital] > 0 || GetPVarInt(playerid, "Injured")) {
		SendClientMessageEx( playerid, COLOR_WHITE, "You can't do this right now." );
	}
	else if(EventKernel[VipOnly] == 1 && PlayerInfo[playerid][pDonateRank] < 1) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "This event is restricted to VIP's only.");
	}
	else if(EventKernel[EventPlayers] >= EventKernel[EventLimit] && EventKernel[EventTime] == 0) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "This event has reached the max players limit.");
	}
	else if( EventKernel[ EventStatus ] == 2 || (EventKernel[ EventStatus ] == 1 && PlayerInfo[playerid][pDonateRank] >= 3)) {
		if(EventKernel[EventType] == 3)
		{
            new string[128];
			if(IsValidDynamic3DTextLabel(RFLTeamN3D[playerid])) {
				DestroyDynamic3DTextLabel(RFLTeamN3D[playerid]);
			}
			format(string, sizeof(string), "%s has joined the race event!", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			SendClientMessageEx( playerid, COLOR_WHITE, EventKernel[ EventInfo ] );
		    if(EventKernel[EventFootRace]) {
		    	SendClientMessageEx( playerid, COLOR_YELLOW, "You have joined an onfoot race event, you have been teleported to a random checkpoint." );
			}
			else {
			    SendClientMessageEx( playerid, COLOR_YELLOW, "You have joined a vehicle race event, you have been teleported to a random checkpoint." );
			}
			SetPVarInt( playerid, "EventToken", 1 );
			TotalJoinsRace++;
			SetPlayerPos( playerid, EventKernel[ EventPositionX ], EventKernel[ EventPositionY ], EventKernel[ EventPositionZ ] );
			RCPIdCurrent[playerid] = 0;
		    new randcpscount = -1;
		    for(new i = 0; i < 20; i++)
		    {
		        if(EventRCPU[i] && EventRCPT[i] == 1) randcpscount = i;
		    }
		    ResetPlayerWeapons( playerid );
			pTazer{playerid} = 0;
			GetPlayerHealth(playerid, EventFloats[playerid][4]);
			GetPlayerArmour(playerid, EventFloats[playerid][5]);
			EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
			EventLastInt[playerid] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
			GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
		    new randrcp = randcpscount;
		    //SetPlayerPos(playerid, EventRCPX[randrcp], EventRCPY[randrcp], EventRCPZ[randrcp]);
			SetPlayerInterior( playerid, EventKernel[ EventInterior ] );
			SetPlayerVirtualWorld( playerid, EventKernel[ EventWorld ] );
			if(PlayerInfo[playerid][pRFLTeam] != -1) {
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos( playerid, X, Y, Z );
				format(string, sizeof(string), "Team: %s", RFLInfo[PlayerInfo[playerid][pRFLTeam]][RFLname]);
				RFLTeamN3D[playerid] = CreateDynamic3DTextLabel(string,0x008080FF,X,Y,Z,10.0,.attachedplayer = playerid, .worldid = GetPlayerVirtualWorld(playerid));
			}
		    if(EventRCPT[randrcp] != 1)
		    {
				DisablePlayerCheckpoint(playerid);
		    	SetPlayerCheckpoint(playerid, EventRCPX[randrcp], EventRCPY[randrcp], EventRCPZ[randrcp], EventRCPS[randrcp]);
			}
			else
			{
			    DisablePlayerCheckpoint(playerid);
		    	SetPlayerCheckpoint(playerid, EventRCPX[randrcp], EventRCPY[randrcp], EventRCPZ[randrcp], EventRCPS[randrcp]);
			}
		}
		else
		{
			if(IsPlayerInAnyVehicle(playerid)) {
				return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't join while in a vehicle.");
			}

			SetPVarInt( playerid, "EventToken", 1 );
			ResetPlayerWeapons( playerid );
			pTazer{playerid} = 0;
			GetPlayerHealth(playerid, EventFloats[playerid][4]);
			GetPlayerArmour(playerid, EventFloats[playerid][5]);
			EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
			EventLastInt[playerid] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
			GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
			if(EventKernel[EventType] != 2)
			{
				SetPlayerPos( playerid, EventKernel[ EventPositionX ], EventKernel[ EventPositionY ], EventKernel[ EventPositionZ ] );
			}
			SetPlayerInterior( playerid, EventKernel[ EventInterior ] );
			SetPlayerVirtualWorld( playerid, EventKernel[ EventWorld ] );
			SendClientMessageEx( playerid, COLOR_WHITE, EventKernel[ EventInfo ] );
			
			if(EventKernel[EventCustomInterior] == 1)
			{
				Player_StreamPrep(playerid, EventKernel[EventPositionX], EventKernel[EventPositionY], EventKernel[EventPositionZ], FREEZE_TIME);
			}
			
			SetPlayerHealth( playerid, EventKernel[ EventHealth ] );
			if(EventKernel[EventArmor] > 0) {
				SetPlayerArmor( playerid, EventKernel[ EventArmor ]);
			}
			//if(PlayerInfo[playerid][pBEquipped]) PlayerInfo[playerid][pBEquipped] = 0;
			for(new x;x<MAX_PLAYERTOYS;x++) {
				if(IsPlayerAttachedObjectSlotUsed(playerid, x)) 
				{
					if(x == 9 && PlayerInfo[playerid][pBEquipped]) 
						break;
					RemovePlayerAttachedObject(playerid, x); 
				}
			}
			for(new i; i < 11; i++) {
				PlayerHoldingObject[playerid][i] = 0;
			}

			if(EventKernel[EventType] == 2)
			{
				SetPlayerSkin(playerid, EventKernel[EventTeamSkin][nextteam]);
				new color = EventKernel[EventTeamColor][nextteam];
				if (color==0) SetPlayerColor(playerid, 0x00000000);
				if (color==1) SetPlayerColor(playerid, 0xFFFFFF00);
				if (color==2) SetPlayerColor(playerid, 0x2641FE00);
				if (color==3) SetPlayerColor(playerid, 0xAA333300);
				if (color==16) SetPlayerColor(playerid, 0x33AA3300);
				if (color==5) SetPlayerColor(playerid, 0xC2A2DA00);
				if (color==6) SetPlayerColor(playerid, 0xFFFF0000);
				if (color==7) SetPlayerColor(playerid, 0x33CCFF00);
				//if (strcmp(clr, "navy", true)==0) color=94;
				//if (strcmp(clr, "beige", true)==0) color=102;
				if (color==51) SetPlayerColor(playerid, 0x2D6F0000);
				if (color==103) SetPlayerColor(playerid, 0x0B006F00);
				if (color==13) SetPlayerColor(playerid, 0x52525200);
				if (color==55) SetPlayerColor(playerid, 0xB46F0000);
				if (color==84) SetPlayerColor(playerid, 0x814F0000);
				if (color==74) SetPlayerColor(playerid, 0x750A0000);
				//if (strcmp(clr, "maroon", true)==0) color=115;
				if (color==126) SetPlayerColor(playerid, 0xFF51F100);
				if(nextteam == 0)
				{
					SetPlayerPos(playerid, EventKernel[EventTeamPosX1], EventKernel[EventTeamPosY1], EventKernel[EventTeamPosZ1]);
				}
				else
				{
					SetPlayerPos(playerid, EventKernel[EventTeamPosX2], EventKernel[EventTeamPosY2], EventKernel[EventTeamPosZ2]);
				}
				if(nextteam == 0) nextteam++;
				else if(nextteam == 1) nextteam--;
			}
			if(EventKernel[EventType] == 4)
			{
			    SetPlayerColor(playerid, 0xAA333300);
			}
		}
		EventKernel[EventPlayers] ++;
		if(EventKernel[EventPlayers] == EventKernel[EventLimit] && EventKernel[EventTime] == 0)
		{
			ABroadCast(COLOR_YELLOW, "The event has now reached the max players limit, you can now start it.", 2);
		}
	}

	else if( EventKernel[ EventStatus ] == 3 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "The event is already locked. You are unable to join." );
	}
	else if( EventKernel[ EventStatus ] == 4 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "The event is already started. You are unable to join." );
	}

	return 1;
}

CMD:colorcar(playerid, params[]) {
	new iColors[2];
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a vehicle.");
	else if(PlayerInfo[playerid][pSpraycan] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Your spraycan is empty.");
	if(sscanf(params, "ii", iColors[0], iColors[1])) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /colorcar [ID 1] [ID 2]. Colors must be an ID.");
	else if((PlayerInfo[playerid][pDonateRank] == 0) && (iColors[0] > 126 || iColors[1] > 126)) return SendClientMessageEx(playerid, COLOR_GREY, "Only VIPs can use special color IDs above 126.");
	else if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
	new szMessage[60];
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][i][pvId]))
		{
			PlayerVehicleInfo[playerid][i][pvColor1] = iColors[0], PlayerVehicleInfo[playerid][i][pvColor2] = iColors[1];
			ChangeVehicleColor(PlayerVehicleInfo[playerid][i][pvId], PlayerVehicleInfo[playerid][i][pvColor1], PlayerVehicleInfo[playerid][i][pvColor2]);
			PlayerInfo[playerid][pSpraycan]--;
			g_mysql_SaveVehicle(playerid, i);
			format(szMessage, sizeof(szMessage), "You have changed the colors of your vehicle to ID %d, %d.", iColors[0], iColors[1]);
			return SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
		}
	}
	for(new i = 0; i < sizeof(VIPVehicles); i++)
	{
		if(IsPlayerInVehicle(playerid, VIPVehicles[i]))
		{
			ChangeVehicleColor(VIPVehicles[i], iColors[0], iColors[1]);
			PlayerInfo[playerid][pSpraycan]--;
			format(szMessage, sizeof(szMessage), "You have changed the colors of this vehicle to ID %d, %d.", iColors[0], iColors[1]);
			return SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);			
		}
	}
	for(new i = 0; i < sizeof(FamedVehicles); i++)
	{
		if(IsPlayerInVehicle(playerid, FamedVehicles[i]))
		{
			ChangeVehicleColor(FamedVehicles[i], iColors[0], iColors[1]);
			PlayerInfo[playerid][pSpraycan]--;
			format(szMessage, sizeof(szMessage), "You have changed the colors of this vehicle to ID %d, %d.", iColors[0], iColors[1]);
			return SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);	
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "You can't spray other people's vehicles.");
	return 1;
}

CMD:number(playerid, params[]) {
	if(PlayerInfo[playerid][pPhoneBook] == 1) {

		new
			iTarget;

		if(sscanf(params, "u", iTarget)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /number [player]");
		}
		else if(IsPlayerConnected(iTarget)) {
			new
				szNumber[16 + MAX_PLAYER_NAME];

			format(szNumber, sizeof(szNumber), "* %s (%i)", GetPlayerNameEx(iTarget), PlayerInfo[iTarget][pPnumber]);
			SendClientMessageEx(playerid, COLOR_GRAD1, szNumber);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a phone book.");
	return 1;
}

CMD:resetupgrades(playerid, params[]) {
	if(gPlayerLogged{playerid} == 0) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not logged in.");
	}
	else if (GetPlayerCash(playerid) < 100000) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You need $100,000 to reset your upgrade points.");
	}
	else if (PlayerInfo[playerid][pLevel] < 2) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You must be at least level 2.");
	}
	else {
		PlayerInfo[playerid][gPupgrade] = (PlayerInfo[playerid][pLevel]-2)*2;
		PlayerInfo[playerid][pSHealth] = 0.0;

		if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID) {
			HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade] = 1;
			SaveHouse(PlayerInfo[playerid][pPhousekey]);
		}
		if(PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID) {
			HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade] = 1;
			SaveHouse(PlayerInfo[playerid][pPhousekey2]);
		}
		if(PlayerInfo[playerid][pPhousekey3] != INVALID_HOUSE_ID) {
			HouseInfo[PlayerInfo[playerid][pPhousekey3]][hGLUpgrade] = 1;
			SaveHouse(PlayerInfo[playerid][pPhousekey3]);
		}	
		for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
			PlayerVehicleInfo[playerid][d][pvWepUpgrade] = 0;
		}

		GivePlayerCash(playerid,-100000);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

		new	szMessage[73];

		format(szMessage, sizeof(szMessage), "You have reset your upgrades - you now have %i unspent upgrade points.",PlayerInfo[playerid][gPupgrade]);
		SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
	}
	return 1;
}

CMD:rules(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE,"*** Server Rules ***");
	SendClientMessageEx(playerid, COLOR_GRAD1,"Always roleplay - NGRP is a role-play server. Your character's behavior needs to be as realistic, and close to real life as possible!");
	SendClientMessageEx(playerid, COLOR_GRAD1,"No metagaming! Don't mix in-character (IC) and out-of-character (OOC) chat/information. IC chat is the default chat, OOC is used by typing /b!");
	SendClientMessageEx(playerid, COLOR_GRAD2,"No killing on sight (KOS). Killing a person on sight without a word or any attempt to roleplay is not allowed and is prisonable!");
	SendClientMessageEx(playerid, COLOR_GRAD2,"No revenge-killing (RK). If a person critically injured you, you are not allowed to go back to kill them! After hospital, you lose all memory of the last 30 minutes!");
	SendClientMessageEx(playerid, COLOR_GRAD3,"No powergaming! Impossible roleplay, meaning anything that is cannot be done in real life is forbidden! Do not force roleplay on others!");
	SendClientMessageEx(playerid, COLOR_GRAD3,"No driver drive-by (DDB). Shooting out the window as a driver is strictly against the rules! You may only shoot out the window as a passenger.");
	SendClientMessageEx(playerid, COLOR_GRAD4,"No car-ramming or car parking! Do not repeatedly ram other people with your car, and don't park on top of a person to kill them!");
	SendClientMessageEx(playerid, COLOR_GRAD4,"No logging to avoid! Never log out or alt-tab out of game to avoid death, arrest or prison!");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** This is a short version of our server rulebook. Please visit www.ng-gaming.net to see a full list of NGRP's server rules! ***");
	return 1;
}

CMD:faq(playerid, params[]) {
	return ShowPlayerDialog(playerid, FAQMENU, DIALOG_STYLE_LIST, "Frequently Asked Questions","Locks\nSkins & Toys\nATMs\nFactions\nGangs\nHitmen\nWebsite, Teamspeak and Other Information\nFurther Help", "Select", "Cancel");
}

CMD:mstats(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 4) {
		SendClientMessageEx(playerid, COLOR_GREY, "You're not authorised to use this command.");
		return 1;
	}
	else {
	    new stats[256];
		mysql_stat(stats, MainPipeline);
		SendClientMessageEx(playerid, COLOR_GREEN,"___________________________________________________________________________________________________");
		SendClientMessageEx(playerid, COLOR_GREY, stats);
		SendClientMessageEx(playerid, COLOR_GREEN,"___________________________________________________________________________________________________");
		#if defined SHOPAUTOMATED
		mysql_stat(stats, ShopPipeline);
		SendClientMessageEx(playerid, COLOR_GREEN,"___________________________________________________________________________________________________");
		SendClientMessageEx(playerid, COLOR_GREY, stats);
		SendClientMessageEx(playerid, COLOR_GREEN,"___________________________________________________________________________________________________");
		#endif
	}
	return 1;
}


CMD:stats(playerid, params[]) {
	if(gPlayerLogged{playerid} != 0) ShowStats(playerid, playerid);
	return 1;
}

CMD:netstats(playerid, params[]) {
	if(gPlayerLogged{playerid} != 0) {
		new strStats[401], szTitle[64];
		GetPlayerNetworkStats(playerid, strStats, sizeof(strStats));
		format(szTitle, sizeof(szTitle), "Network Stats (ID: %d) - %s", playerid, GetPlayerNameEx(playerid));
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, szTitle, strStats, "Close", "");
	}
	return 1;
}

CMD:anetstats(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 2) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}

	new giveplayerid, strStats[401], szTitle[64];
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /anetstats [player]");

	if(gPlayerLogged{giveplayerid} != 0) {
		GetPlayerNetworkStats(giveplayerid, strStats, sizeof(strStats));
		format(szTitle, sizeof(szTitle), "Network Stats (ID: %d) - %s", giveplayerid, GetPlayerNameEx(giveplayerid));
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, szTitle, strStats, "Close", "");
	}
	return 1;
}

CMD:inv(playerid, params[]) {
	return cmd_inventory(playerid, params);
}

CMD:inventory(playerid, params[])
{
	if(gPlayerLogged{playerid} != 0) ShowInventory(playerid, playerid);
	return 1;
}

CMD:myguns(playerid, params[])
{
	new string[128], myweapons[13][2], weaponname[50], encryption[256], name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));
	SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	format(string, sizeof(string), "Weapons on %s:", name);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	for (new i = 0; i < 13; i++)
	{
		GetPlayerWeaponData(playerid, i, myweapons[i][0], myweapons[i][1]);
		if(myweapons[i][0] > 0)
		{
			if(PlayerInfo[playerid][pGuns][i] == myweapons[i][0])
			{
				GetWeaponName(myweapons[i][0], weaponname, sizeof(weaponname));
				format(string, sizeof(string), "%s (%d)", weaponname, myweapons[i][0]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				format(encryption, sizeof(encryption), "%s%d", encryption, myweapons[i][0]);
			}
		}
	}
	new year, month, day;
	getdate(year, month, day);
	format(encryption, sizeof(encryption), "%s%s%d%d%d%d%d6524", encryption, name, month, day, year, hour, minuite);
	new encrypt = crc32(encryption);
	format(string, sizeof(string), "[%d/%d/%d %d:%d:%d] - [%d]", month, day, year, hour, minuite,second, encrypt);
	SendClientMessageEx(playerid, COLOR_GREEN, string);
	SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	return 1;
}

CMD:buylevel(playerid, params[])
{
	if (gPlayerLogged{playerid} != 0)
	{
		if(PlayerInfo[playerid][pLevel] >= 0)
		{
			new nxtlevel = PlayerInfo[playerid][pLevel]+1;
			new costlevel = nxtlevel*25000;
			new expamount = nxtlevel*4;

			if(GetPlayerCash(playerid) < costlevel)
			{
				new string[128];
				format(string, sizeof(string), "You don't have enough cash ($%d).",costlevel);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				return 1;
			}
			else if (PlayerInfo[playerid][pExp] < expamount)
			{
				new string[58];
				format(string, sizeof(string), "You need %d more respect points to buy your next level.", expamount - PlayerInfo[playerid][pExp]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				return 1;
			}
			else
			{
				new string[92];
				format(string, sizeof(string), "~g~LEVEL UP~n~~w~You Are Now Level %d", nxtlevel);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				GivePlayerCash(playerid, (-costlevel));
				PlayerInfo[playerid][pLevel]++;
				PlayerInfo[playerid][pExp] = PlayerInfo[playerid][pExp]-expamount;
				PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+2;
				GameTextForPlayer(playerid, string, 5000, 1);
				format(string, sizeof(string), "You have bought level %d for $%d, and gained %i upgrade points! /upgrade to use them.", nxtlevel, costlevel, PlayerInfo[playerid][gPupgrade]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
				if(PlayerInfo[playerid][pLevel] == 3)
				{
				    new szQuery[128],
						szString[128],
						szReferrer = ReturnUser(PlayerInfo[playerid][pReferredBy]);

					if(strcmp(PlayerInfo[playerid][pReferredBy], "Nobody") != 0)
					{
					    if(IsPlayerConnected(szReferrer))
					    {
					        if(PlayerInfo[szReferrer][pRefers] < 5 && PlayerInfo[szReferrer][pRefers] > 0)
					        {
					            PlayerInfo[szReferrer][pCredits] += CREDITS_AMOUNT_REFERRAL;
	            				PlayerInfo[szReferrer][pRefers] ++;
								format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Credits`=%d WHERE `Username` = '%s'", PlayerInfo[szReferrer][pCredits], GetPlayerNameExt(szReferrer));
								mysql_function_query(MainPipeline, szQuery, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
								format(szString, sizeof(szString), "%s has received %d credits for referring a player (The player reached level 3)", GetPlayerNameEx(szReferrer), CREDITS_AMOUNT_REFERRAL);
								Log("logs/referral.log", szString);
				        		format(string, sizeof(string), "Your friend '%s' that you referred to the server has reached level 3. Therefore you have received 100 credits.", GetPlayerNameEx(playerid));
						        SendClientMessageEx(szReferrer, COLOR_LIGHTBLUE, string);
						    }
					        else if(PlayerInfo[szReferrer][pRefers] == 5)
					        {
	            				PlayerInfo[szReferrer][pCredits] += CREDITS_AMOUNT_REFERRAL*5;
	            				PlayerInfo[szReferrer][pRefers] ++;
								format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Credits`=%d WHERE `Username` = '%s'", PlayerInfo[szReferrer][pCredits], GetPlayerNameExt(szReferrer));
								mysql_function_query(MainPipeline, szQuery, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
								format(szString, sizeof(szString), "%s has received %d credits for referring a player (The player reached level 3)", GetPlayerNameEx(szReferrer), CREDITS_AMOUNT_REFERRAL*5);
								Log("logs/referral.log", szString);
				        		format(string, sizeof(string), "Your friend '%s' that you referred to the server has reached level 3. Therefore you have received 500 credits.", GetPlayerNameEx(playerid));
						        SendClientMessageEx(szReferrer, COLOR_LIGHTBLUE, string);
							}
							else if(PlayerInfo[szReferrer][pRefers] < 10 && PlayerInfo[szReferrer][pRefers] > 5)
					        {
					            PlayerInfo[szReferrer][pCredits] += CREDITS_AMOUNT_REFERRAL;
	            				PlayerInfo[szReferrer][pRefers] ++;
								format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Credits`=%d WHERE `Username` = '%s'", PlayerInfo[szReferrer][pCredits], GetPlayerNameExt(szReferrer));
								mysql_function_query(MainPipeline, szQuery, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
								format(szString, sizeof(szString), "%s has received %d credits for referring a player (The player reached level 3)", GetPlayerNameEx(szReferrer), CREDITS_AMOUNT_REFERRAL);
								Log("logs/referral.log", szString);
				        		format(string, sizeof(string), "Your friend '%s' that you referred to the server has reached level 3. Therefore you have received 100 credits.", GetPlayerNameEx(playerid));
						        SendClientMessageEx(szReferrer, COLOR_LIGHTBLUE, string);
						    }
							else if(PlayerInfo[szReferrer][pRefers] == 10)
							{
							    PlayerInfo[szReferrer][pCredits] += CREDITS_AMOUNT_REFERRAL*10;
	            				PlayerInfo[szReferrer][pRefers] ++;
								format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Credits`=%d WHERE `Username` = '%s'", PlayerInfo[szReferrer][pCredits], GetPlayerNameExt(szReferrer));
								mysql_function_query(MainPipeline, szQuery, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
								format(szString, sizeof(szString), "%s has received %d credits for referring a player (The player reached level 3)", GetPlayerNameEx(szReferrer), CREDITS_AMOUNT_REFERRAL*10);
								Log("logs/referral.log", szString);
				        		format(string, sizeof(string), "Your friend '%s' that you referred to the server has reached level 3. Therefore you have received 1000 credits.", GetPlayerNameEx(playerid));
						        SendClientMessageEx(szReferrer, COLOR_LIGHTBLUE, string);
							}
							else if(PlayerInfo[szReferrer][pRefers] < 15 && PlayerInfo[szReferrer][pRefers] > 10)
					        {
					            PlayerInfo[szReferrer][pCredits] += CREDITS_AMOUNT_REFERRAL;
	            				PlayerInfo[szReferrer][pRefers] ++;
								format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Credits`=%d WHERE `Username` = '%s'", PlayerInfo[szReferrer][pCredits], GetPlayerNameExt(szReferrer));
								mysql_function_query(MainPipeline, szQuery, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
								format(szString, sizeof(szString), "%s has received %d credits for referring a player (The player reached level 3)", GetPlayerNameEx(szReferrer), CREDITS_AMOUNT_REFERRAL);
								Log("logs/referral.log", szString);
				        		format(string, sizeof(string), "Your friend '%s' that you referred to the server has reached level 3. Therefore you have received 100 credits.", GetPlayerNameEx(playerid));
						        SendClientMessageEx(szReferrer, COLOR_LIGHTBLUE, string);
						    }
							else if(PlayerInfo[szReferrer][pRefers] == 15)
							{
							    PlayerInfo[szReferrer][pCredits] += CREDITS_AMOUNT_REFERRAL*15;
	            				PlayerInfo[szReferrer][pRefers] ++;
								format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Credits`=%d WHERE `Username` = '%s'", PlayerInfo[szReferrer][pCredits], GetPlayerNameExt(szReferrer));
								mysql_function_query(MainPipeline, szQuery, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
								format(szString, sizeof(szString), "%s has received %d credits for referring a player (The player reached level 3)", GetPlayerNameEx(szReferrer), CREDITS_AMOUNT_REFERRAL*15);
								Log("logs/referral.log", szString);
				        		format(string, sizeof(string), "Your friend '%s' that you referred to the server has reached level 3. Therefore you have received 1500 credits.", GetPlayerNameEx(playerid));
						        SendClientMessageEx(szReferrer, COLOR_LIGHTBLUE, string);
							}
							else if(PlayerInfo[szReferrer][pRefers] < 20 && PlayerInfo[szReferrer][pRefers] > 15)
					        {
					            PlayerInfo[szReferrer][pCredits] += CREDITS_AMOUNT_REFERRAL;
	            				PlayerInfo[szReferrer][pRefers] ++;
								format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Credits`=%d WHERE `Username` = '%s'", PlayerInfo[szReferrer][pCredits], GetPlayerNameExt(szReferrer));
								mysql_function_query(MainPipeline, szQuery, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
								format(szString, sizeof(szString), "%s has received %d credits for referring a player (The player reached level 3)", GetPlayerNameEx(szReferrer), CREDITS_AMOUNT_REFERRAL);
								Log("logs/referral.log", szString);
				        		format(string, sizeof(string), "Your friend '%s' that you referred to the server has reached level 3. Therefore you have received 100 credits.", GetPlayerNameEx(playerid));
						        SendClientMessageEx(szReferrer, COLOR_LIGHTBLUE, string);
						    }
							else if(PlayerInfo[szReferrer][pRefers] == 20)
							{
							    PlayerInfo[szReferrer][pCredits] += CREDITS_AMOUNT_REFERRAL*20;
	            				PlayerInfo[szReferrer][pRefers] ++;
								format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Credits`=%d WHERE `Username` = '%s'", PlayerInfo[szReferrer][pCredits], GetPlayerNameExt(szReferrer));
								mysql_function_query(MainPipeline, szQuery, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
								format(szString, sizeof(szString), "%s has received %d credits for referring a player (The player reached level 3)", GetPlayerNameEx(szReferrer), CREDITS_AMOUNT_REFERRAL*20);
								Log("logs/referral.log", szString);
				        		format(string, sizeof(string), "Your friend '%s' that you referred to the server has reached level 3. Therefore you have received 2000 credits.", GetPlayerNameEx(playerid));
						        SendClientMessageEx(szReferrer, COLOR_LIGHTBLUE, string);
							}
							else if(PlayerInfo[szReferrer][pRefers] < 25 && PlayerInfo[szReferrer][pRefers] > 20)
					        {
					            PlayerInfo[szReferrer][pCredits] += CREDITS_AMOUNT_REFERRAL;
	            				PlayerInfo[szReferrer][pRefers] ++;
								format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Credits`=%d WHERE `Username` = '%s'", PlayerInfo[szReferrer][pCredits], GetPlayerNameExt(szReferrer));
								mysql_function_query(MainPipeline, szQuery, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
								format(szString, sizeof(szString), "%s has received %d credits for referring a player (The player reached level 3)", GetPlayerNameEx(szReferrer), CREDITS_AMOUNT_REFERRAL);
								Log("logs/referral.log", szString);
				        		format(string, sizeof(string), "Your friend '%s' that you referred to the server has reached level 3. Therefore you have received 100 credits.", GetPlayerNameEx(playerid));
						        SendClientMessageEx(szReferrer, COLOR_LIGHTBLUE, string);
						    }
							else if(PlayerInfo[szReferrer][pRefers] >= 25)
							{
							    PlayerInfo[szReferrer][pCredits] += CREDITS_AMOUNT_REFERRAL*25;
	            				PlayerInfo[szReferrer][pRefers] ++;
								format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Credits`=%d WHERE `Username` = '%s'", PlayerInfo[szReferrer][pCredits], GetPlayerNameExt(szReferrer));
								mysql_function_query(MainPipeline, szQuery, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
								format(szString, sizeof(szString), "%s has received %d credits for referring a player (The player reached level 3)", GetPlayerNameEx(szReferrer), CREDITS_AMOUNT_REFERRAL*25);
								Log("logs/referral.log", szString);
				        		format(string, sizeof(string), "Your friend '%s' that you referred to the server has reached level 3. Therefore you have received 2500 credits.", GetPlayerNameEx(playerid));
						        SendClientMessageEx(szReferrer, COLOR_LIGHTBLUE, string);
							}
					    }
					    else {
					        format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `PendingRefReward`=1 WHERE `Username`='%s'", PlayerInfo[playerid][pReferredBy]);
					        mysql_function_query(MainPipeline, szQuery, true, "OnQueryFinish", "iii", REWARD_REFERRAL_THREAD, playerid, g_arrQueryHandle{playerid});
						}
					}
				}
				if(PlayerInfo[playerid][pLevel] == 6)
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "Newbie chat will now be automatically togged off on login.");
				}
			}
		}
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not logged in.");
	}
	return 1;
}

CMD:upgrade(playerid, params[])
{
	if(isnull(params))
	{
		new string[64];
		format(string, sizeof(string), "USAGE: /upgrade [upgradename] (you have %d upgrade points).",PlayerInfo[playerid][gPupgrade]);
		SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessageEx(playerid, COLOR_WHITE,"*** UPGRADES ***");
		SendClientMessageEx(playerid, COLOR_GRAD2,string);
		SendClientMessageEx(playerid, COLOR_GRAD5, "armor gunlocker gunlocker2 gunlocker3 cargunlocker");
		SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
		return 1;
	}
	if( PlayerInfo[playerid][gPupgrade] >= 1 )
	{
		if (PlayerInfo[playerid][pLevel] >= 1 && strcmp(params, "armor", true) == 0)
		{
			if (PlayerInfo[playerid][pSHealth] < 100)
			{
				new string[51];
				++PlayerInfo[playerid][pSHealth];
				PlayerInfo[playerid][gPupgrade]--;
				format(string, sizeof(string), "New Upgrade: You will now spawn with %.2f armor.",PlayerInfo[playerid][pSHealth]);
				SendClientMessageEx(playerid, COLOR_GRAD6, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD6, "   You have maximum spawn armor.");
				return 1;
			}
		}
		else if(strcmp(params, "gunlocker", true) == 0)
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwnerID] == GetPlayerSQLId(playerid))
			{
				if( PlayerInfo[playerid][gPupgrade] < 2 )
				{
					SendClientMessageEx(playerid, COLOR_GRAD6, "   You need at least 2 upgrade points.");
					return 1;
				}
				switch(HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade])
				{
					case 0:
					{
						if(PlayerInfo[playerid][pCash] >= 50000)
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade] = 1;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][0] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 1 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 1:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][1] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 2 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 2:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][2] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 3 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 3:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][3] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 4 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 4:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][4] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 5 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 5:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Sorry, there are no more spaces available.");
						return 1;
					}
				}
				PlayerInfo[playerid][gPupgrade]--;
				SaveHouse(PlayerInfo[playerid][pPhousekey]);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, " You are not a house owner.");
				return 1;
			}
		}

		else if(strcmp(params, "gunlocker2", true) == 0)
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[playerid][pPhousekey2]][hOwnerID] == GetPlayerSQLId(playerid))
			{
				if( PlayerInfo[playerid][gPupgrade] < 2 )
				{
					SendClientMessageEx(playerid, COLOR_GRAD6, "   You need at least 2 upgrade points.");
					return 1;
				}
				switch( HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade] )
				{
					case 0:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade] = 1;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][0] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 1 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 1:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][1] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 2 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 2:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][2] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 3 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 3:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][3] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 4 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 4:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][4] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 5 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 5:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Sorry, there are no more spaces available.");
						return 1;
					}
				}
				PlayerInfo[playerid][gPupgrade]--;
				SaveHouse(PlayerInfo[playerid][pPhousekey2]);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, " You don't own a second house.");
				return 1;
			}
		}
		else if(strcmp(params, "gunlocker3", true) == 0)
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey3] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[playerid][pPhousekey3]][hOwnerID] == GetPlayerSQLId(playerid))
			{
				if( PlayerInfo[playerid][gPupgrade] < 2 )
				{
					SendClientMessageEx(playerid, COLOR_GRAD6, "   You need at least 2 upgrade points.");
					return 1;
				}
				switch( HouseInfo[PlayerInfo[playerid][pPhousekey3]][hGLUpgrade] )
				{
					case 0:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey3]][hGLUpgrade] = 1;
							HouseInfo[PlayerInfo[playerid][pPhousekey3]][hWeapons][0] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 1 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 1:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey3]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey3]][hWeapons][1] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 2 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 2:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey3]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey3]][hWeapons][2] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 3 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 3:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey3]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey3]][hWeapons][3] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 4 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 4:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey3]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey3]][hWeapons][4] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 5 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 5:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Sorry, there are no more spaces available.");
						return 1;
					}
				}
				PlayerInfo[playerid][gPupgrade]--;
				SaveHouse(PlayerInfo[playerid][pPhousekey3]);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, " You don't own a second house.");
				return 1;
			}
		}
		else if(strcmp(params, "cargunlocker", true) == 0)
		{
			new Float: x, Float: y, Float: z;
			for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
			{
				if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
				if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
				{
					if( PlayerInfo[playerid][gPupgrade] < 2 )
					{
						SendClientMessageEx(playerid, COLOR_GRAD6, "   You need at least 2 upgrade points.");
						return 1;
					}
					if(PlayerVehicleInfo[playerid][d][pvWepUpgrade] < 2)
					{
						new string[114];
						GameTextForPlayer(playerid,"~r~Vehicle Gunlocker Upgraded!",5000,6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						PlayerVehicleInfo[playerid][d][pvWepUpgrade]++;
						PlayerVehicleInfo[playerid][d][pvWeapons][PlayerVehicleInfo[playerid][d][pvWepUpgrade]] = 0;
						PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]-2;
						SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new car locker space.");
						format(string, sizeof(string), "HINT: To use your car lockers, the commands are /trunkput and /trunktake. You have %d locker spaces available.", PlayerVehicleInfo[playerid][d][pvWepUpgrade]+1);
						SendClientMessageEx(playerid, COLOR_GRAD2, string );
						return 1;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "You have already upgraded your car gunlocker slots.");
						return 1;
					}
				}
			}
			SendClientMessageEx(playerid, COLOR_GREY, " You are not near any vehicle that you own.");
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD6, "   Unrecognized upgrade.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD6, "   You have 0 Upgrade Points.");
		return 1;
	}
	return 1;
}

CMD:changepass(playerid, params[])
{
	if (gPlayerLogged{playerid})
	{
		ShowPlayerDialog(playerid, DIALOG_CHANGEPASS, DIALOG_STYLE_INPUT, "Password Change", "Please enter your new password!", "Change", "Exit" );
	}
	return 1;
}

/*
CMD:ringtone(playerid, params[])
{
    if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen")) {
   		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
	}

	if(!IsPlayerInAnyVehicle(playerid))
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SetPlayerAttachedObject(playerid, 9, 330, 6);
	}
	return ShowPlayerDialog(playerid,RTONEMENU,DIALOG_STYLE_LIST,"Ringtone - Change Your Ringtone:","Ringtone 1\nRingtone 2\nRingtone 3\nRingtone 4\nRingtone 5\nRingtone 6\nRingtone 7\nRingtone 8\nRingtone 9\nTurn Off","Select","Close");
}
*/

CMD:help(playerid, params[])
{
	new string[512];
	// Work in progress? - Akatony
	/*format(string, sizeof(string), "General Commands");
	if(PlayerInfo[playerid][pAdmin] == 1) format(string, sizeof(string), "%s\nModerator Commands", string);
	else if(PlayerInfo[playerid][pAdmin] > 1) format(string, sizeof(string), "%s\nAdministrator Commands", string);
	if(PlayerInfo[playerid][pHelper] == 1) format(string, sizeof(string), "%s\nHelper Commands", string);
	else if(PlayerInfo[playerid][pHelper] > 1) format(string, sizeof(string), "%s\nAdvisor Commands", string);
	if(PlayerInfo[playerid][pLeader] != INVALID_GROUP_ID) format(string, sizeof(string), "%s\nFaction Leader Commands", string);
	if(PlayerInfo[playerid][pMember] != INVALID_GROUP_ID) format(string, sizeof(string), "%s\nFaction Commands", string);
	if(PlayerInfo[playerid][pFMember] != INVALID_FAMILY_ID) format(string, sizeof(string), "%s\nGang Commands", string);
	if(PlayerInfo[playerid][pBusiness] != INVALID_BUSINESS_ID) format(string, sizeof(string), "%s\nBusiness Commands", string);
	ShowPlayerDialog(playerid, DIALOG_HELP1, DIALOG_STYLE_LIST, "Help Center", string, "Select", "Cancel");*/
	if(PlayerInfo[playerid][pLevel] <= 3)
	{
		SendClientMessageEx(playerid, TEAM_AZTECAS_COLOR,"*** HELP *** /report /requesthelp (/newb)ie /tognewbie");
	}
	SendClientMessageEx(playerid, COLOR_WHITE,"*** ACCOUNT *** /rules /faq /(net)stats /inventory /quickstats /myguns /buylevel /upgrade /changepass /killcheckpoint /resetupgrades(100k)");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** CHAT *** /w(hisper) /o(oc) /s(hout) /l(ow) /b /ad(vertisement)s /f(amily) /me /togooc /tognews /togfam /togwhisper /do /cancelcall");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** BANK *** /balance /withdraw /deposit /wiretransfer /abalance /awithdraw /adeposit /awiretransfer");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** GENERAL *** /pay /writecheck /cashchecks /charity /time /buy /(check)id /music /showlicenses /clothes /mywarrants");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** GENERAL *** /apply /skill /stopani /kill /buyclothes /droplicense /calculate /refuel /car /seatbelt /checkbelt, /defendtime");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** GENERAL *** /cancel /accept /eject /usepot /usecrack /contract /service /families /joinevent /checkplant /nextpaycheck, /nextgift, /pointtime");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** GENERAL *** /speedo /speedopos /viewmotd");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** SHOP *** /shophelp /credits");

	switch(PlayerInfo[playerid][pJob])
	{
		case 1: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /find");
		case 2: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /lawyerduty /free /defend /wanted /offerappeal /finishappeal");
		case 3: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sex");
		case 4: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sell /getcrack /getseeds /getopiumseeds /plantpotseeds /plantopiumseeds /pickplant /checkplant");
		case 5: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /dropcar");
		case 7: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fix /nos /hyd /repair /refill /mechduty");
		case 8: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /guard /frisk");
		case 9: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getmats /sell /sellgun");
		case 10: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sellnewcar");
		case 12: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fight");
		case 14: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getcrate");
		case 15: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /papers /bring /deliver");
		case 17: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fare");
		case 18: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getmats /sell /craft");
		case 19: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /selldrink");
		case 20: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /loadshipment /checkcargo /hijackcargo");
		case 21: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getpizza");
	}
	switch(PlayerInfo[playerid][pJob2])
	{
		case 1: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /find");
		case 2: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /lawyerduty /free /defend /wanted");
		case 3: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sex");
		case 4: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sell /getcrack /getseeds /plantpotseeds /pickweed /checkweed");
		case 5: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /dropcar");
		case 7: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fix /nos /hyd /repair /refill /mechduty");
		case 8: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /guard /frisk");
		case 9: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getmats /sell /sellgun");
		case 10: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sellnewcar");
		case 12: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fight");
		case 14: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getcrate");
		case 15: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /papers /bring /deliver");
		case 17: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fare");
		case 18: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getmats /sell /craft");
		case 19: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /selldrink");
		case 20: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /loadshipment /checkcargo /hijackcargo");
		case 21: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getpizza");
	}
	switch(PlayerInfo[playerid][pJob3])
	{
		case 1: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /find");
		case 2: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /lawyerduty /free /defend /wanted");
		case 3: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sex");
		case 4: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sell /getcrack /getseeds /plantpotseeds /pickweed /checkweed");
		case 5: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /dropcar");
		case 7: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fix /nos /hyd /repair /refill /mechduty");
		case 8: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /guard /frisk");
		case 9: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getmats /sell /sellgun");
		case 10: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sellnewcar");
		case 12: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fight");
		case 14: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getcrate");
		case 15: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /papers /bring /deliver");
		case 17: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fare");
		case 18: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getmats /sell /craft");
		case 19: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /selldrink");
		case 20: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /loadshipment /checkcargo /hijackcargo");
		case 21: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getpizza");	
	}	
	new iGroupID = PlayerInfo[playerid][pMember];
	if(iGroupID != INVALID_GROUP_ID)
	{
	    switch(arrGroupData[iGroupID][g_iGroupType])
	    {
			case 1:
			{
			    format(string, sizeof(string), "*** %s *** (/r)adio /dept (/m)egaphone (/su)spect /locker /mdc /detain /arrest /warrantarrest /wanted /cuff /tazer", arrGroupData[PlayerInfo[playerid][pMember]][g_szGroupName]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "*** %s ***  /frisk /take /ticket (/gov)ernment /clothes /ram /invite /giverank /deploy /destroy /pddoor /pdcell", arrGroupData[PlayerInfo[playerid][pMember]][g_szGroupName]);
                SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "*** %s ***  /spikes /revokelicense /vcheck /vmdc /vticket /tow /untow /impound /dmvrelease /gdonate /togradio /togdept", arrGroupData[PlayerInfo[playerid][pMember]][g_szGroupName]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "*** %s ***  /flares /cones /wants /docarrest /siren /destroyplant /radargun /searchcar /dvsiren /vradar", arrGroupData[PlayerInfo[playerid][pMember]][g_szGroupName]);
				if(PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iBugAccess]) format(string, sizeof(string), "%s /bug /listbugs /clearbugs /hfind",string);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				if(arrGroupData[PlayerInfo[playerid][pMember]][g_iCrateIsland] != INVALID_RANK) {
                    format(string, sizeof(string), "*** %s ***  /cratelimit /viewcrateorders", arrGroupData[PlayerInfo[playerid][pMember]][g_szGroupName]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
				format(string, sizeof(string), "*** %s ***  /placekit /usekit /backup (code2) /backupall /backupint /calls /a(ccept)c(all) /i(gnore)c(all)", arrGroupData[PlayerInfo[playerid][pMember]][g_szGroupName]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);

			}
			case 2:
			{
				format(string, sizeof(string), "*** %s *** (/f)amily /r /contracts /givemehit /order /ranks /profile /h(show)badge /hfind /togbr", arrGroupData[PlayerInfo[playerid][pMember]][g_szGroupName]);
                SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "*** %s *** /plantbomb /plantcarbomb /pickupbomb /myc4 /clothes /invite /giverank /showmehq /showmehq2 /showmehq3", arrGroupData[PlayerInfo[playerid][pMember]][g_szGroupName]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			case 3:
			{
				format(string, sizeof(string), "*** %s ***  (/r)adio /dept (/m)egaphone /heal /clothes /invite /giverank /locker /gdonate", arrGroupData[PlayerInfo[playerid][pMember]][g_szGroupName]);
                SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "*** %s ***  /getpt /movept /loadpt /deliverpt /destroyplant /calls /a(ccept)c(all) /i(gnore)c(all)", arrGroupData[PlayerInfo[playerid][pMember]][g_szGroupName]);
                SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			case 4:
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "*** NEWS AGENCY *** /live /news [text] /broadcast /cameraangle /clothes /invite /giverank /liveban");
   			}
			case 5:
			{
				if(PlayerInfo[playerid][pRank] < 3)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "*** GOVERNMENT *** (/r)adio /dept /locker /mdc /deploy /destroy /spikes /tazer /frisk /cuff");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "*** GOVERNMENT *** (/r)adio /dept /locker /settax /checktax /taxwithdraw /invite /giverank (/gov)ernment (/su)spect");
					SendClientMessageEx(playerid, COLOR_WHITE, "*** GOVERNMENT *** /mdc /detain /arrest /wanted /cuff /tazer /frisk /take /ticket /clothes /ram /invite /giverank /setbudget");
					SendClientMessageEx(playerid, COLOR_WHITE, "*** GOVERNMENT *** /spikes /destroyplant /radargun /warrantarrest /pardon /commute /wants /deploy /destroy");
				}
			}
			case 6:
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "*** JUDICIAL SYSTEM *** (/r)adio /dept /warrant /warrantwd /judgefine /judgejail /judgeprison /probation /wants /subpoena");
				SendClientMessageEx(playerid, COLOR_WHITE, "*** JUDICIAL SYSTEM *** /invite /uninvite /giverank /trial /adjourn /sentence /reward /checkjudgements /reversejudgement");
				SendClientMessageEx(playerid, COLOR_WHITE, "*** JUDICIAL SYSTEM *** /present /freezebank /freezeassets /probation /gdonate /viewassets");
			}
			case 7:
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "*** TRANSPORT *** /fare /ataxi /tonline /r /invite /giverank /eba /gdonate");
			}
			case 8:
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "*** TOWING *** (/r)adio /dept /locker /(un)tow /impound /vcheck /vmdc /vticket /gdonate /calls /a(ccept)c(all) /i(gnore)c(all)");
			}
			case 9:
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "*** URL *** /countdown");
			}
		}
		if (0 <= PlayerInfo[playerid][pLeader] < MAX_GROUPS)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** GROUP LEADER *** /invite /uninvite /ouninvite /setdiv /giverank /online");
			if(arrGroupData[iGroupID][g_iGroupType] == 1 || arrGroupData[iGroupID][g_iGroupType] == 3 || arrGroupData[iGroupID][g_iGroupType] == 6 || arrGroupData[iGroupID][g_iGroupType] == 7)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "*** GROUP LEADER *** /viewbudget /grepocars /gvbuyback /gdonate /ordercrates /dvtrackcar /gwithdraw, /dvstorage");
			}
			else if(arrGroupData[iGroupID][g_iGroupType] == 5)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "*** GROUP LEADER *** /checkapps /deport");
			}
		}
	}
	if (PlayerInfo[playerid][pFMember] != INVALID_FAMILY_ID)
	{
		if(PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** FAMILY *** (/f)amily /clothes /safehelp /movegate /taginfo");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** FAMILY *** (/f)amily /clothes /safehelp /movegate /fdeposit /fwithdraw /fbalance /claim /capture /adjust, /adjustdiv");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** FAMILY *** /dvtrackcar /dvpark /adjustdvrank /spraytag /fmotd");
		}
	}
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "*** ADMIN *** (/a)dmin (/ah)elp");
	}
	if (PlayerInfo[playerid][pHelper] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "*** COMMUNITY ADVISOR *** (/ch)elp");
	}
	if(PlayerInfo[playerid][pDonateRank] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_PURPLE, "*** VIP *** /travel /viplocker /tokenhelp /buddyinvite /phoneprivacy /setautoreply");
	}
	if(PlayerInfo[playerid][pDonateRank] >= 2)
	{
		format(string, sizeof(string), "*** VIP *** /spawnatvip (%s credits)", number_format(ShopItems[30][sItemPrice]));
		SendClientMessageEx(playerid, COLOR_PURPLE, string);
	}
	if(PlayerInfo[playerid][pDonateRank] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_PURPLE, "*** VIP *** /freeads /pvipjob /vipplate");
	}
	if(PlayerInfo[playerid][pDonateRank] == 5)
	{
		SendClientMessageEx(playerid, COLOR_PURPLE, "*** VIP Moderator *** /vipparty /vto /vtoreset /vmute /vsuspend /vipm");
	}
	SendClientMessageEx(playerid, COLOR_WHITE,"*** OTHER *** /cellphonehelp /carhelp /househelp /toyhelp /renthelp /jobhelp /animhelp /fishhelp /insurehelp");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** OTHER *** /mailhelp /businesshelp /voucherhelp /backpackhelp");
	
	//Start of Famed Commands
	if(PlayerInfo[playerid][pFamed] >= 1)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "*** Old-School *** /fc /famedlocker /togfamed /famedplate [os/removed] /travel famed");
	}
	if(PlayerInfo[playerid][pFamed] >= 2)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "*** Chartered Old-School *** /famedplate [os/cos/removed]");
	}
    if(PlayerInfo[playerid][pFamed] >= 3)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "*** Famed *** /buyinsurance /famedplate [os/cos/famed/removed]");
	}
	if(PlayerInfo[playerid][pFamed] >= 4)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "*** Famed Commissioner *** /fmute /funmute, /fmembers");
	}
	if(PlayerInfo[playerid][pFamed] >= 6)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "*** Famed Vice-Chairman *** /osetfamed /setfamed");
	}
	//end of famed commands
	return 1;
}

CMD:badge(playerid, params[]) {
    if(PlayerInfo[playerid][pMember] >= 0 && arrGroupData[PlayerInfo[playerid][pMember]][g_hDutyColour] != 0xFFFFFF)
	{
		if(GetPVarInt(playerid, "IsInArena") >= 0 || PlayerInfo[playerid][pJailTime] > 0 || GetPVarInt(playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use your badge now.");
			return 1;
		}
		#if defined zombiemode
		if(zombieevent == 1 && GetPVarType(playerid, "pIsZombie")) return SendClientMessageEx(playerid, COLOR_GREY, "Zombies can't use this.");
		#endif
		if(PlayerInfo[playerid][pDuty]) {
			PlayerInfo[playerid][pDuty] = 0;
			SetPlayerToTeamColor(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have hidden your badge, and will now be identified as being off-duty.");
			if(IsAMedic(playerid))
			{
				Medics -= 1;
			}
		}
		else {
			PlayerInfo[playerid][pDuty] = 1;
			SetPlayerToTeamColor(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have shown your badge, and will now be identified as being on-duty.");
			if(IsAMedic(playerid))
			{
				Medics += 1;
			}
		}
	}
	return 1;
}

// Testing Commands
CMD:playsound(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command!");

	new id, soundid;

	if(sscanf(params, "ud", id, soundid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /playsound [player] [soundid]");
        return 1;
	}
	else
	{
		PlayerPlaySound(id, soundid, 0, 0, 0);
	}
	return 1;
}

CMD:aobject(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command!");

	new id, objectid, bone, Float:offsetx, Float:offsety, Float:offsetz, Float:rotx, Float:roty, Float:rotz, Float:scalex, Float:scaley, Float:scalez;

	if(sscanf(params, "uddfffffffff", id, objectid, bone, offsetx, offsety, offsetz, rotx, roty, rotz, scalex, scaley, scalez))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /aobject [player] [objectid] [bone] [offx] [offy] [offz] [rotx] [roty] [rotz] [scax] [scay] [scaz]");
        return 1;
	}
	else
	{
		if(IsPlayerAttachedObjectSlotUsed(id, 8)) RemovePlayerAttachedObject(id, 8);
		SetPlayerAttachedObject(id, 8, objectid, bone, offsetx, offsety, offsetz, rotx, roty, rotz, scalex, scaley, scalez);
		new string[256];
		format(string, sizeof(string), "%s has given %s object ID %d with /aobject", GetPlayerNameEx(playerid), GetPlayerNameEx(id), objectid);
		Log("logs/toys.log", string);
	}
	return 1;
}

CMD:robject(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command!");

	new id;
	if(sscanf(params, "u", id))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /robject [player]");
        return 1;
	}
	else
	{
		if(IsPlayerAttachedObjectSlotUsed(id, 9)) RemovePlayerAttachedObject(id, 9);
	}
	return 1;
}

CMD:car(playerid, params[])
{
	new string[128];
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /car [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Status, Engine, Lights, Trunk, Hood, Fuel, Windows");
		return 1;
	}
	if(strcmp(params, "engine", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new engine,lights,alarm,doors,bonnet,boot,objective,vehicleid;
		vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || DynVeh[vehicleid] != -1 && DynVehicleInfo[DynVeh[vehicleid]][gv_iType] == 1 && GetVehicleModel(vehicleid) == 592) return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON)
		{
			SetVehicleEngine(vehicleid, playerid);
			format(string, sizeof(string), "{FF8000}** {C2A2DA}%s turns the key in the ignition and the engine stops.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
		{
			if (GetPVarInt(playerid, "Refueling")) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while refueling.");
			format(string, sizeof(string), "{FF8000}** {C2A2DA}%s turns the key in the ignition and the engine starts.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle engine starting, please wait...");
			SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
		}
	}
	else if(strcmp(params, "lights", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
		SetVehicleLights(vehicleid, playerid);
	}
	else if(strcmp(params, "hood", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || IsAPlane(vehicleid) || IsABike(vehicleid))
			{
				return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
			}
			SetVehicleHood(vehicleid, playerid);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			new closestcar = GetClosestCar(playerid);
			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
			{
				if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510 || IsAPlane(closestcar) || IsABike(closestcar))
				{
					return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used on this vehicle.");
				}
				SetVehicleHood(closestcar, playerid);
			}
		}
	}
	else if(strcmp(params, "trunk", true) == 0)
  	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
			{
				return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
			}
			SetVehicleTrunk(vehicleid, playerid);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			new closestcar = GetClosestCar(playerid);
			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
			{
				if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510)
				{
					return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used on this vehicle.");
				}
				SetVehicleTrunk(closestcar, playerid);
			}
		}
	}
	else if(strcmp(params, "fuel", true) == 0 && IsPlayerInAnyVehicle(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new engine,lights,alarm,doors,bonnet,boot,objective,enginestatus[4],lightstatus[4];
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			if(!IsRefuelableVehicle(vehicleid)) return SendClientMessageEx(playerid,COLOR_RED,"This vehicle doesn't need fuel.");
			if(engine != VEHICLE_PARAMS_ON) strcpy(enginestatus, "OFF", 4);
			else strcpy(enginestatus, "ON", 3);
			if(lights != VEHICLE_PARAMS_ON) strcpy(lightstatus, "OFF", 4);
			else strcpy(lightstatus, "ON", 3);

			if (IsVIPcar(vehicleid) || IsAdminSpawnedVehicle(vehicleid) || IsFamedVeh(vehicleid)) format(string, sizeof(string), "Engine: %s | Lights: %s | Fuel: Unlimited",enginestatus,lightstatus);
			else format(string, sizeof(string), "Engine: %s | Lights: %s | Fuel: %.1f%s",enginestatus,lightstatus, VehicleFuel[vehicleid], "%");
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	else if(strcmp(params, "status", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid), slot = GetPlayerVehicle(playerid, vehicleid);
			new engine,lights,alarm,doors,bonnet,boot,objective,enginestatus[4],lightstatus[4];
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			if(!IsRefuelableVehicle(vehicleid)) return SendClientMessageEx(playerid,COLOR_RED,"This vehicle doesn't need fuel.");
			if(engine != VEHICLE_PARAMS_ON) strcpy(enginestatus, "OFF", 4);
			else strcpy(enginestatus, "ON", 3);
			if(lights != VEHICLE_PARAMS_ON) strcpy(lightstatus, "OFF", 4);
			else strcpy(lightstatus, "ON", 3);
			if (IsVIPcar(vehicleid) || IsAdminSpawnedVehicle(vehicleid) || IsFamedVeh(vehicleid)) format(string, sizeof(string), "Engine: %s | Lights: %s | Fuel: Unlimited | Windows: %s",enginestatus,lightstatus,(CrateVehicleLoad[GetPlayerVehicleID(playerid)][vCarWindows] == 0) ? ("Up") : ("Down"));
			else if(slot != -1) format(string, sizeof(string), "Engine: %s | Lights: %s | Fuel: %.1f percent | Windows: %s | Lock Durability: %d/5",enginestatus,lightstatus, VehicleFuel[vehicleid], (CrateVehicleLoad[GetPlayerVehicleID(playerid)][vCarWindows] == 0) ? ("Up") : ("Down"), PlayerVehicleInfo[playerid][slot][pvLocksLeft]);
			else format(string, sizeof(string), "Engine: %s | Lights: %s | Fuel: %.1f percent | Windows: %s",enginestatus,lightstatus, VehicleFuel[vehicleid], (CrateVehicleLoad[GetPlayerVehicleID(playerid)][vCarWindows] == 0) ? ("Up") : ("Down"));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	else if(strcmp(params, "windows", true) == 0 && IsPlayerInAnyVehicle(playerid) && !IsABike(GetPlayerVehicleID(playerid)) && !IsABoat(GetPlayerVehicleID(playerid)))
	{
	    if(CrateVehicleLoad[GetPlayerVehicleID(playerid)][vCarWindows])
	    {
	    	CrateVehicleLoad[GetPlayerVehicleID(playerid)][vCarWindows] = 0;
			format(string, sizeof(string), "{FF8000}** {C2A2DA}%s winds their windows up.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    }
	    else {
            CrateVehicleLoad[GetPlayerVehicleID(playerid)][vCarWindows] = 1;
			format(string, sizeof(string), "{FF8000}** {C2A2DA}%s winds their windows down.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    }
	}
	return 1;
}

CMD:refuel(playerid, params[])
{

    if (GetPVarType(playerid, "Refueling"))
	{
	    SetPVarInt(playerid, "Refueling", -1);
	}
	else
	{

	    new vehicleid = GetPlayerVehicleID(playerid);

		new
			iBusinessID,
			iPumpID;

		GetClosestGasPump(playerid, iBusinessID, iPumpID);

		if (iBusinessID == INVALID_BUSINESS_ID) return SendClientMessageEx(playerid, COLOR_RED, "You're not at a fuel station.");
		if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_RED, "You are not in a vehicle.");
		if (!Businesses[iBusinessID][bStatus]) return SendClientMessageEx(playerid, COLOR_RED, "This fuel station is closed.");
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_RED, "You're not the driver.");
		if (IsVIPcar(vehicleid)) return SendClientMessageEx(playerid, COLOR_RED, "This is a vehicle from the VIP garage and it has already unlimited amount of fuel.");
		if (IsFamedVeh(vehicleid)) return SendClientMessageEx(playerid, COLOR_RED, "This is a vehicle from the Famed garage and it has already unlimited amount of fuel.");
		if (IsAdminSpawnedVehicle(vehicleid)) return SendClientMessageEx(playerid, COLOR_RED, "This is an admin-spawned vehicle and it has already unlimited amount of fuel.");
	    new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	    if(engine == VEHICLE_PARAMS_ON) return SendClientMessageEx(playerid, COLOR_RED, "You need to shut off the engine before filling up (/car engine).");
     	if (Businesses[iBusinessID][GasPumpGallons][iPumpID] == 0.0) return SendClientMessageEx(playerid, COLOR_RED, "No gas left in the gas station tank.");
	    if (!IsRefuelableVehicle(vehicleid)) return SendClientMessageEx(playerid,COLOR_RED,"This vehicle does not need fuel.");
	    if (VehicleFuel[vehicleid] >= 100.0) return SendClientMessageEx(playerid, COLOR_RED, "This vehicle's tank is already full.");
	    if (Businesses[iBusinessID][GasPumpVehicleID][iPumpID] > 0) return SendClientMessageEx(playerid, COLOR_RED, "This gas pump is occupied.");

       	SendClientMessageEx(playerid, COLOR_WHITE, "Refueling your vehicle's tank, please wait.");
       	SendClientMessageEx(playerid, COLOR_YELLOW, "Type /refuel again to stop refueling.");

		SetPVarInt(playerid, "Refueling", vehicleid);
       	Businesses[iBusinessID][GasPumpSaleGallons][iPumpID] = 0;
       	Businesses[iBusinessID][GasPumpSalePrice][iPumpID] = 0;
       	Businesses[iBusinessID][GasPumpVehicleID][iPumpID] = vehicleid;
       	Businesses[iBusinessID][GasPumpTimer][iPumpID] = SetTimerEx("GasPumpSaleTimer", 200, true, "iii", playerid, iBusinessID, iPumpID);
	}
	return 1;
}

CMD:wepreset(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 3)
	{
	    new string[75 + (MAX_PLAYER_NAME * 2)], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /wepreset [player]");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[giveplayerid][pWRestricted] > 0)
		    {
		        PlayerInfo[giveplayerid][pWRestricted] = 0;
		        format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s reset %s's (ID:%d) weapon restriction timer.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), giveplayerid);
		        ABroadCast(COLOR_YELLOW, string, 2);
		    }
		    else
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "Their weapons are not restricted!");
			}
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
		}
	}
	return 1;
}

CMD:watch(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not authorised to use this command.");
		return 1;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can not do this while spectating.");
		return 1;
	}
	if(isnull(params))
	{
	    // VIP gold room needs to be fixed
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /watch [location] (or /watch off)");
		SendClientMessageEx(playerid, COLOR_GRAD2, "General locations: gym, lspd, allsaints, countygen, grove, tgb, bank, motel, cityhall, mall");
        SendClientMessageEx(playerid, COLOR_GRAD2, "VIP locations: lsvip, sfvip, loungeview1, loungeview2, goldlounge, vipgarage");
        SendClientMessageEx(playerid, COLOR_GRAD2, "Point locations: mp1, df, mf1, dh, mp2, cl, mf2, sfd, ffc");
	}

	new Float: Pos[3], int, vw;

	// SAVING INITIAL POSITION TO TELEPORT BACK TO LATER
	if(!(strcmp(params, "off", true) == 0) && GetPVarFloat(playerid, "WatchLastx") == 0 && GetPVarFloat(playerid, "WatchLasty") == 0 && GetPVarFloat(playerid, "WatchLastz") == 0 && GetPVarInt(playerid, "WatchLastVW") == 0 && GetPVarInt(playerid, "WatchLastInt") == 0)
	{
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	vw = GetPlayerVirtualWorld(playerid);
	int = GetPlayerInterior(playerid);

	SetPVarFloat(playerid, "WatchLastx", Pos[0]);
	SetPVarFloat(playerid, "WatchLasty", Pos[1]);
	SetPVarFloat(playerid, "WatchLastz", Pos[2]);
	SetPVarInt(playerid, "WatchLastInt", int);
	SetPVarInt(playerid, "WatchLastVW", vw);
	}

	// GENERAL LOCATIONS
	if(strcmp(params, "gym", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Ganton gym.");
		SetPlayerPos(playerid, 2212.61, -1730.57, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2208.67, -1733.71, 27.48);
		SetPlayerCameraLookAt(playerid, 2225.25, -1723.1, 13.56);
	}
	else if(strcmp(params, "lspd", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the LSPD.");
		SetPlayerPos(playerid, 1504.23, -1700.17, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1500.21, -1691.75, 38.38);
		SetPlayerCameraLookAt(playerid, 1541.46, -1676.17, 13.55);
	}
	else if(strcmp(params, "allsaints", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching All Saints General Hospital.");
		SetPlayerPos(playerid, 1201.12, -1324, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1207.39, -1294.71, 24.61);
		SetPlayerCameraLookAt(playerid, 1181.72, -1322.65, 13.58);
	}
	else if(strcmp(params, "countygen", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching County General Hospital.");
		SetPlayerPos(playerid, 1989.24, -1461.38, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1981.79, -1461.55, 31.93);
		SetPlayerCameraLookAt(playerid, 2021.23, -1427.48, 13.97);
	}
	else if(strcmp(params, "grove", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Grove Street.");
		SetPlayerPos(playerid, 2489.09, -1669.88, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2459.82, -1652.68, 26.45);
		SetPlayerCameraLookAt(playerid, 2489.09, -1669.88, 13.34);
	}
	else if(strcmp(params, "tgb", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Ten Green Bottles.");
		SetPlayerPos(playerid, 2319.09, -1650.90, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2336.31, -1664.76, 24.98);
		SetPlayerCameraLookAt(playerid, 2319.09, -1650.90, 14.16);
	}
	else if(strcmp(params, "bank", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the Los Santos bank.");
		SetPlayerPos(playerid, 1466.24, -1023.05, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1502.28, -1044.47, 31.19);
		SetPlayerCameraLookAt(playerid, 1466.24, -1023.05, 23.83);
	}
	else if(strcmp(params, "motel", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Jefferson motel.");
		SetPlayerPos(playerid, 2215.73, -1163.39, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2203.05, -1152.81, 37.03);
		SetPlayerCameraLookAt(playerid, 2215.73, -1163.39, 25.73);
	}
	else if(strcmp(params, "cityhall", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Los Santos City Hall.");
		SetPlayerPos(playerid, 1478.936035, -1746.446655, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1447.461669, -1717.788085, 44.047473);
		SetPlayerCameraLookAt(playerid, 1478.936035, -1746.446655, 14.347633);
	}
	else if(strcmp(params, "mall", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Los Santos Mall.");
		SetPlayerPos(playerid, 1127.245483, -1451.613891, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1092.614868, -1499.197998, 42.018226);
		SetPlayerCameraLookAt(playerid, 1127.245483, -1451.613891, 15.796875);
	}


	// VIP LOCATIONS
	else if(strcmp(params, "lsvip", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the Los Santos VIP entrance.");
		SetPlayerPos(playerid, 1809.888427, -1570.615844, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1861.195190, -1533.169677, 33.800296);
		SetPlayerCameraLookAt(playerid, 1809.888427, -1570.615844, 13.465585);
	}
	else if(strcmp(params, "sfvip", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the San Fierro VIP entrance.");
		SetPlayerPos(playerid, -2437.302490, 508.727020, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, -2410.812011, 488.762603, 40.148445);
		SetPlayerCameraLookAt(playerid, -2437.302490, 508.727020, 29.933441);
	}
	else if(strcmp(params, "loungeview1", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the VIP Lounge.");
		SetPlayerPos(playerid, 2526.647949, 1431.128417, 7754.650390);
		SetPlayerInterior(playerid, 1);
		PlayerInfo[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2572.895996, 1424.583007, 7705.613769);
		SetPlayerCameraLookAt(playerid, 2555.148681, 1407.475708, 7699.584472);
	}
	else if(strcmp(params, "loungeview2", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the VIP Lounge.");
		SetPlayerPos(playerid, 2526.647949, 1431.128417, 7754.650390);
		SetPlayerInterior(playerid, 1);
		PlayerInfo[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2488.598388, 1419.864868, 7703.525390);
		SetPlayerCameraLookAt(playerid, 2519.420410, 1418.585693, 7697.718261);
	}
	else if(strcmp(params, "goldlounge", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the VIP Gold+ Lounge.");
  		SetPlayerPos(playerid, 2864.634277, 2290.584960, 1272.007568);
		SetPlayerInterior(playerid, 1);
		PlayerInfo[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid,2787.102050, 2392.162841, 1243.898681);
		SetPlayerCameraLookAt(playerid,2801.281982, 2404.575683, 1240.531127);
	}
	else if(strcmp(params, "vipgarage", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the VIP Garage.");
  		SetPlayerPos(playerid, -4412.440429, 867.361694, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, -4437.200683, 870.038269, 989.548767);
		SetPlayerCameraLookAt(playerid, -4412.440429, 867.361694, 986.708435);
	}


	// Points (mp1, df, mf1, dh, mp2, cl, mf2, sfd, ffc)
	else if(strcmp(params, "mp1", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Materials Pickup 1.");
  		SetPlayerPos(playerid, 1423.773437, -1320.386962, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1411.689941, -1352.002929, 24.477527);
		SetPlayerCameraLookAt(playerid, 1423.773437, -1320.386962, 13.554687);
	}
	else if(strcmp(params, "df", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Drug Factory.");
  		SetPlayerPos(playerid, 2206.402587, 1582.398681, -80.0);
		SetPlayerInterior(playerid, 1);
		PlayerInfo[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2222.844482, 1590.667968, 1002.612915);
		SetPlayerCameraLookAt(playerid, 2206.402587, 1582.398681, 999.976562);
	}
	else if(strcmp(params, "mf1", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Materials Factory 1.");
  		SetPlayerPos(playerid, 2172.315185, -2263.781250, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2206.363769, -2262.568359, 24.240808);
		SetPlayerCameraLookAt(playerid, 2172.315185, -2263.781250, 13.335824);
	}
	else if(strcmp(params, "dh", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the Drug House.");
  		SetPlayerPos(playerid, 323.577026, 1118.344116, -80.0);
		SetPlayerInterior(playerid, 5);
		PlayerInfo[playerid][pInt] = 5;
		SetPlayerVirtualWorld(playerid, 371);
		PlayerInfo[playerid][pVW] = 371;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 316.387817, 1123.946289, 1085.046020);
		SetPlayerCameraLookAt(playerid, 323.577026, 1118.344116, 1083.882812);
	}
	else if(strcmp(params, "mp2", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Materials Pickup 2.");
  		SetPlayerPos(playerid, 2390.212402, -2008.328491, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2410.285644, -2013.919433, 21.716161);
		SetPlayerCameraLookAt(playerid, 2390.212402, -2008.328491, 13.553703);
	}
	else if(strcmp(params, "cl", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Crack Lab.");
  		SetPlayerPos(playerid, 2346.013916, -1185.367065, -80.0);
		SetPlayerInterior(playerid, 5);
		PlayerInfo[playerid][pInt] = 5;
		SetPlayerVirtualWorld(playerid, 371);
		PlayerInfo[playerid][pVW] = 371;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2342.012207, -1180.969848, 1029.412353);
		SetPlayerCameraLookAt(playerid, 2346.013916, -1185.367065, 1027.976562);
	}
	else if(strcmp(params, "mf2", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Materials Factory 2.");
  		SetPlayerPos(playerid, 2282.298828, -1110.143798, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2306.088623, -1133.968627, 52.929584);
		SetPlayerCameraLookAt(playerid, 2282.298828, -1110.143798, 37.976562);
	}
	else if(strcmp(params, "sfd", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the San Fierro Docks.");
  		SetPlayerPos(playerid, -1576.488159, 50.301193, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, -1569.082153, 96.206344, 34.091339);
		SetPlayerCameraLookAt(playerid, -1576.488159, 50.301193, 17.328125);
	}
	else if(strcmp(params, "ffc", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Fossil Fuel Company.");
  		SetPlayerPos(playerid, -2139.215087, -248.235076, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, -2170.527832, -246.948257, 40.965312);
		SetPlayerCameraLookAt(playerid, -2139.215087, -248.235076, 36.515625);
	}


	// OFF
	else if(strcmp(params, "off", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are no longer watching any area.");
		SetPlayerPos(playerid, GetPVarFloat(playerid, "WatchLastx"), GetPVarFloat(playerid, "WatchLasty"), GetPVarFloat(playerid, "WatchLastz"));
		SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "WatchLastVW"));
		PlayerInfo[playerid][pVW] = GetPVarInt(playerid, "WatchLastVW");
		SetPlayerInterior(playerid, GetPVarInt(playerid, "WatchLastInt"));
		PlayerInfo[playerid][pInt] = GetPVarInt(playerid, "WatchLastInt");
		SetPlayerFacingAngle(playerid, 270.0);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid,1);
		DeletePVar(playerid,"WatchLastx");
		DeletePVar(playerid,"WatchLasty");
		DeletePVar(playerid,"WatchLastz");
		DeletePVar(playerid,"WatchLastVW");
		DeletePVar(playerid,"WatchLastInt");
	}
	return 1;
}

CMD:goto(playerid, params[])
{
    if(EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(isnull(params))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /goto [location]");
			SendClientMessageEx(playerid, COLOR_GRAD1, "Locations 1: LS,SF,LV,RC,ElQue,Bayside,LSVIP,SFVIP,LVVIP,Famed,MHC,stadium1");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Locations 2: stadium2,stadium3,stadium4,int1,mark,mark2,sfairport,dillimore,cave,doc,bank,mall,allsaints");
			SendClientMessageEx(playerid, COLOR_GRAD3, "Locations 3: countygen,cracklab,gym,rodeo,flint,idlewood,fbi,island,demorgan,doc,icprison,oocprison");
			SendClientMessageEx(playerid, COLOR_GRAD4, "Locations 4: garagesm,garagemed,garagelg,garagexlg,glenpark,palomino,nggshop");
			return 1;
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can not do this while spectating.");
			return 1;
		}
		if(strcmp(params,"glenpark",true) == 0 || strcmp(params,"gp",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2012.500366, -1264.768554, 23.547389);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1986.69, -1300.49, 25.03);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		if(strcmp(params,"palomino",true) == 0 || strcmp(params,"pc",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2229.485351, -63.457298, 26.134857);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 2231.578613, -48.729660, 26.484375);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		if(strcmp(params,"nggshop",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2930.920410, -1429.603637, 10.675988);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 2957.967041, -1459.404541, 10.809198);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		if(strcmp(params,"ls",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"garagexlg",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar,1111.0139,1546.9510,5290.2793);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1111.0139,1546.9510,5290.2793);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"garagelg",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar,1192.8501,1540.0295,5290.2871);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1192.8501,1540.0295,5290.2871);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"garagemed",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar,1069.1473,1582.1029,5290.2529);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1069.1473,1582.1029,5290.2529);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"garagesm",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar,1198.1407,1589.2153,5290.2871);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1198.1407,1589.2153,5290.2871);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"cave",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1993.01, -1580.44, 86.39);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1993.01, -1580.44, 86.39);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"sfairport",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1412.5375,-301.8998,14.1411);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1412.5375,-301.8998,14.1411);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"sf",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1605.0,720.0,12.0);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1605.0,720.0,12.0);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"lv",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"island",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1081.0,4297.9,4.4);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1081.0,4297.9,4.4);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"cracklab",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2348.2871, -1146.8298, 27.3183);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 2348.2871, -1146.8298, 27.3183);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"bank",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1487.91, -1030.60, 23.66);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1487.91, -1030.60, 23.66);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"allsaints",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1192.78, -1292.68, 13.38);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1192.78, -1292.68, 13.38);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"countygen",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2000.05, -1409.36, 16.99);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 2000.05, -1409.36, 16.99);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"gym",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2227.60, -1674.89, 14.62);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 2227.60, -1674.89, 14.62);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

   		}
		else if(strcmp(params,"fbi",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 344.77,-1526.08,33.28);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 344.77,-1526.08,33.28);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
  		else if(strcmp(params,"rc",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1253.70, 343.73, 19.41);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1253.70, 343.73, 19.41);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

   		}
     	else if(strcmp(params,"lsvip",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1810.39, -1601.15, 13.54);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1810.39, -1601.15, 13.54);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
     	else if(strcmp(params,"sfvip",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -2433.63, 511.45, 30.38);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -2433.63, 511.45, 30.38);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
       	else if(strcmp(params,"lvvip",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1875.7731, 1366.0796, 16.8998);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1875.7731, 1366.0796, 16.8998);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"demorgan",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 112.67, 1917.55, 18.72);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 112.67, 1917.55, 18.72);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"icprison",true) == 0)
		{
			SetPlayerPos(playerid, -2069.76, -200.05, 991.53);
			SetPlayerInterior(playerid,10);
			PlayerInfo[playerid][pInt] = 10;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else if(strcmp(params, "doc", true) == 0)
		{
			SetPlayerPos(playerid, -2029.2322, -78.3302, 35.3203);
			SetPlayerInterior(playerid, 0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else if(strcmp(params,"oocprison",true) == 0)
		{
			SetPlayerPos(playerid, -298.13, 1881.85, 29.89);
			SetPlayerInterior(playerid,1);
			PlayerInfo[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");

		}
		else if(strcmp(params,"stadium1",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1424.93, -664.59, 1059.86);
				LinkVehicleToInterior(tmpcar, 4);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1424.93, -664.59, 1059.86);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,4);
			PlayerInfo[playerid][pInt] = 4;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"stadium2",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1395.96, -208.20, 1051.28);
				LinkVehicleToInterior(tmpcar, 7);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1395.96, -208.20, 1051.28);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,7);
			PlayerInfo[playerid][pInt] = 7;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"stadium3",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1410.72, 1591.16, 1052.53);
				LinkVehicleToInterior(tmpcar, 14);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1410.72, 1591.16, 1052.53);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,14);
			PlayerInfo[playerid][pInt] = 14;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"stadium4",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1394.20, 987.62, 1023.96);
				LinkVehicleToInterior(tmpcar, 15);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
    		}
			else
			{
				SetPlayerPos(playerid, -1394.20, 987.62, 1023.96);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,15);
			PlayerInfo[playerid][pInt] = 15;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"int1",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
				LinkVehicleToInterior(tmpcar, 1);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,1);
			PlayerInfo[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"mark",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, GetPVarFloat(playerid, "tpPosX1"), GetPVarFloat(playerid, "tpPosY1"), GetPVarFloat(playerid, "tpPosZ1"));
				LinkVehicleToInterior(tmpcar, GetPVarInt(playerid, "tpInt1"));
			}
			else
			{
				SetPlayerPos(playerid, GetPVarFloat(playerid, "tpPosX1"), GetPVarFloat(playerid, "tpPosY1"), GetPVarFloat(playerid, "tpPosZ1"));
			}
			SetPlayerInterior(playerid, GetPVarInt(playerid, "tpInt1"));
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else if(strcmp(params,"mark2",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, GetPVarFloat(playerid, "tpPosX2"), GetPVarFloat(playerid, "tpPosY2"), GetPVarFloat(playerid, "tpPosZ2"));
				LinkVehicleToInterior(tmpcar, GetPVarInt(playerid, "tpInt2"));
			}
			else
			{
				SetPlayerPos(playerid, GetPVarFloat(playerid, "tpPosX2"), GetPVarFloat(playerid, "tpPosY2"), GetPVarFloat(playerid, "tpPosZ2"));
			}
			SetPlayerInterior(playerid, GetPVarInt(playerid, "tpInt2"));
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else if(strcmp(params,"mall",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1133.71,-1464.52,15.77);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1133.71,-1464.52,15.77);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"elque",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1446.5997,2608.4478,55.8359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1446.5997,2608.4478,55.8359);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"bayside",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -2465.1348,2333.6572,4.8359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -2465.1348,2333.6572,4.8359);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"dillimore",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 634.9734, -594.6402, 16.3359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 634.9734, -594.6402, 16.3359);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"famed",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1020.29, -1129.06, 23.87);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1020.29, -1129.06, 23.87);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"rodeo",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 587.0106,-1238.3374,17.8049);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 587.0106,-1238.3374,17.8049);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"flint",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -108.1058,-1172.5293,2.8906);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -108.1058,-1172.5293,2.8906);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"idlewood",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1955.1357,-1796.8896,13.5469);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1955.1357,-1796.8896,13.5469);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"mhc",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				Player_StreamPrep(playerid, 1700.2124, 1461.1771, 1145.7766, FREEZE_TIME);
				SetVehiclePos(tmpcar, 1700.2124, 1461.1771, 1145.7766);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				Player_StreamPrep(playerid, 1649.7531, 1463.1614, 1151.9687, FREEZE_TIME);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:sendto(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], location[32], giveplayerid;
		if(sscanf(params, "s[32]u", location, giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sendto [location] [player]");
			SendClientMessageEx(playerid, COLOR_GRAD1, "Locations 1: LS,SF,LV,RC,ElQue,Bayside,LSVIP,SFVIP,LVVIP,MHC,Famed,stadium1");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Locations 2: stadium2,stadium3,stadium4,int1,mark,mark2,sfairport,dillimore,cave,doc,bank,mall,allsaints");
			SendClientMessageEx(playerid, COLOR_GRAD3, "Locations 3: countygen,cracklab,gym,rodeo,flint,idlewood,fbi,island,demorgan,doc,icprison,oocprison");
			SendClientMessageEx(playerid, COLOR_GRAD3, "Locations 4: glenpark, palomino, nggshop");
			return 1;
		}
		if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin])
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
			return 1;
		}
		if (!IsPlayerConnected(giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
			return 1;
		}
		if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "This person is currently in spectate mode.");
			return 1;
		}
		if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
		{
		    SetPVarInt(playerid, "tempPBP", giveplayerid);
		    format(string, sizeof(string), "%s (ID: %d) is currently in an active Paintball game.\n\nDo you want to force this player out?", GetPlayerNameEx(giveplayerid), giveplayerid);
		    ShowPlayerDialog(playerid, PBFORCE, DIALOG_STYLE_MSGBOX, "Paintball", string, "Yes", "No");
		    return 1;
		}
		if(strcmp(location,"glenpark",true) == 0 || strcmp(location,"gp",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 2012.500366, -1264.768554, 23.547389);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1986.69, -1300.49, 25.03);
			}
			format(string, sizeof(string), " You have sent %s to Glen Park.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		if(strcmp(location,"palomino",true) == 0 || strcmp(location,"pc",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 2229.485351, -63.457298, 26.134857);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 2231.578613, -48.729660, 26.484375);
			}
			format(string, sizeof(string), " You have sent %s to Palomino Creek.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		if(strcmp(location,"nggshop",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 2930.920410, -1429.603637, 10.675988);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 2957.967041, -1459.404541, 10.809198);
			}
			format(string, sizeof(string), " You have sent %s to the NGG Shop.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		if(strcmp(location,"ls",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
			}
			format(string, sizeof(string), " You have sent %s to Los Santos.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		else if(strcmp(location,"cave",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1993.01, -1580.44, 86.39);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1993.01, -1580.44, 86.39);
			}
			format(string, sizeof(string), " You have sent %s to crate cave.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
  		else if(strcmp(location, "sfairport", true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1412.5375, -301.8998, 14.1411);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1412.5375,-301.8998,14.1411);
			}
			format(string, sizeof(string), " You have sent %s to SF Airport.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		else if(strcmp(location, "doc", true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -2029.2322, -78.3302, 35.3203);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid,-2029.2322, -78.3302, 35.32034);
			}
			format(string, sizeof(string), " You have sent %s to DoC.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		else if(strcmp(location, "cracklab", true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 2348.2871, -1146.8298, 27.3183);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 2348.2871, -1146.8298, 27.3183);
			}
			format(string, sizeof(string), " You have sent %s to Crack Lab.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		else if(strcmp(location,"sf",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1605.0,720.0,12.0);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1605.0,720.0,12.0);
			}
			format(string, sizeof(string), " You have sent %s to San Fierro.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		else if(strcmp(location,"dillimore",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 634.9734, -594.6402, 16.3359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 634.9734, -594.6402, 16.3359);
			}
			format(string, sizeof(string), " You have sent %s to Dillimore.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		else if(strcmp(location,"lv",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1699.2,1435.1, 10.7);
			}
			format(string, sizeof(string), " You have sent %s to Las Venturas.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
		else if(strcmp(location,"island",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1081.0,4297.9,4.4);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1081.0,4297.9,4.4);
			}
			format(string, sizeof(string), " You have sent %s to the Crate Island.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
		else if(strcmp(location,"bank",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1487.91, -1030.60, 23.66);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1487.91, -1030.60, 23.66);
			}
			format(string, sizeof(string), " You have sent %s to the bank.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
		else if(strcmp(location,"allsaints",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1192.78, -1292.68, 13.38);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1192.78, -1292.68, 13.38);
			}
			format(string, sizeof(string), " You have sent %s to All Saints.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
		else if(strcmp(location,"countygen",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 2000.05, -1409.36, 16.99);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 2000.05, -1409.36, 16.99);
			}
			format(string, sizeof(string), " You have sent %s to County General.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
		else if(strcmp(location,"gym",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 2227.60, -1674.89, 14.62);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 2227.60, -1674.89, 14.62);
			}
			format(string, sizeof(string), " You have sent %s to Ganton Gym.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

   		}
		else if(strcmp(location,"fbi",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 344.77,-1526.08,33.28);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 344.77,-1526.08,33.28);
			}
			format(string, sizeof(string), " You have sent %s to the FBI HQ.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
  		else if(strcmp(location,"rc",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1253.70, 343.73, 19.41);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1253.70, 343.73, 19.41);
			}
			format(string, sizeof(string), " You have sent %s to Red County.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

   		}
     	else if(strcmp(location,"lsvip",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1810.39, -1601.15, 13.54);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1810.39, -1601.15, 13.54);
			}
			format(string, sizeof(string), " You have sent %s to LS VIP.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
     	else if(strcmp(location,"sfvip",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -2433.63, 511.45, 30.38);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -2433.63, 511.45, 30.38);
			}
			format(string, sizeof(string), " You have sent %s to SF VIP.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
       	else if(strcmp(location,"lvvip",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1875.7731, 1366.0796, 16.8998);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1875.7731, 1366.0796, 16.8998);
			}
			format(string, sizeof(string), " You have sent %s to LV VIP.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		else if(strcmp(location,"demorgan",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 112.67, 1917.55, 18.72);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 112.67, 1917.55, 18.72);
			}
			format(string, sizeof(string), " You have sent %s to DeMorgan.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
		else if(strcmp(location,"icprison",true) == 0)
		{
			if(PlayerInfo[giveplayerid][pJailTime] > 0)
			{
				SetPlayerInterior(giveplayerid, 10);
				new rand = random(sizeof(DocPrison));
				SetPlayerFacingAngle(giveplayerid, 0);
				SetPlayerPos(giveplayerid, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2]);
				PhoneOnline[giveplayerid] = 1;
				PlayerInfo[giveplayerid][pWantedLevel] = 0;
				SetPlayerToTeamColor(giveplayerid);
				SetPlayerWantedLevel(giveplayerid, 0);
				PlayerInfo[giveplayerid][pVW] = 0;
				SetPlayerVirtualWorld(giveplayerid, 0);
				SetPlayerToTeamColor(giveplayerid);
				Player_StreamPrep(giveplayerid, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2], FREEZE_TIME);
			}
			else
			{
				SetPlayerPos(giveplayerid, -2069.76, -200.05, 991.53);
				SetPlayerInterior(giveplayerid,10);
				PlayerInfo[giveplayerid][pInt] = 10;
				SetPlayerVirtualWorld(giveplayerid, 0);
				PlayerInfo[giveplayerid][pVW] = 0;
			}
			format(string, sizeof(string), " You have sent %s to IC prison.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");

		}
		else if(strcmp(location,"oocprison",true) == 0)
		{
			if(PlayerInfo[giveplayerid][pJailTime] > 0)
			{
				SetPlayerInterior(giveplayerid,1);
				PlayerInfo[giveplayerid][pInt] = 1;
				ResetPlayerWeaponsEx(giveplayerid);
				PlayerInfo[giveplayerid][pWantedLevel] = 0;
				SetPlayerWantedLevel(giveplayerid, 0);
				PhoneOnline[giveplayerid] = 1;
				new rand = random(sizeof(OOCPrisonSpawns));
				Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
				SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
				SetPlayerSkin(giveplayerid, 50);
				SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
				Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
			}
			else
			{
				SetPlayerPos(giveplayerid, -298.13, 1881.85, 29.89);
				SetPlayerInterior(giveplayerid,1);
				PlayerInfo[giveplayerid][pInt] = 1;
				SetPlayerVirtualWorld(giveplayerid, 0);
				PlayerInfo[giveplayerid][pVW] = 0;
			}
			format(string, sizeof(string), " You have sent %s to OOC prison.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");

		}
		else if(strcmp(location,"stadium1",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1424.93, -664.59, 1059.86);
				LinkVehicleToInterior(tmpcar, 4);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1424.93, -664.59, 1059.86);
			}
			format(string, sizeof(string), " You have sent %s to Stadium 1.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,4);
			PlayerInfo[giveplayerid][pInt] = 4;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
		else if(strcmp(location,"stadium2",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1395.96, -208.20, 1051.28);
				LinkVehicleToInterior(tmpcar, 7);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1395.96, -208.20, 1051.28);
			}
			format(string, sizeof(string), " You have sent %s to Stadium 2.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,7);
			PlayerInfo[giveplayerid][pInt] = 7;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
		else if(strcmp(location,"stadium3",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1410.72, 1591.16, 1052.53);
				LinkVehicleToInterior(tmpcar, 14);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1410.72, 1591.16, 1052.53);
			}
			format(string, sizeof(string), " You have sent %s to Stadium 3.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,14);
			PlayerInfo[giveplayerid][pInt] = 14;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
		else if(strcmp(location,"stadium4",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1394.20, 987.62, 1023.96);
				LinkVehicleToInterior(tmpcar, 15);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
    		}
			else
			{
				SetPlayerPos(giveplayerid, -1394.20, 987.62, 1023.96);
			}
			format(string, sizeof(string), " You have sent %s to Stadium 4.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,15);
			PlayerInfo[giveplayerid][pInt] = 15;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
		else if(strcmp(location,"int1",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
				LinkVehicleToInterior(tmpcar, 1);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1416.107000,0.268620,1000.926000);
			}
			format(string, sizeof(string), " You have sent %s to Int 1.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,1);
			PlayerInfo[giveplayerid][pInt] = 1;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
		else if(strcmp(location,"mark",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, GetPVarFloat(playerid, "tpPosX1"), GetPVarFloat(playerid, "tpPosY1"), GetPVarFloat(playerid, "tpPosZ1"));
				LinkVehicleToInterior(tmpcar, GetPVarInt(playerid, "tpInt1"));
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, GetPVarFloat(playerid, "tpPosX1"), GetPVarFloat(playerid, "tpPosY1"), GetPVarFloat(playerid, "tpPosZ1"));
			}
			format(string, sizeof(string), " You have sent %s to your first marked position.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SetPlayerInterior(playerid, GetPVarInt(playerid, "tpInt1"));
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else if(strcmp(location,"mark2",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, GetPVarFloat(playerid, "tpPosX2"), GetPVarFloat(playerid, "tpPosY2"), GetPVarFloat(playerid, "tpPosZ2"));
				LinkVehicleToInterior(tmpcar, GetPVarInt(playerid, "tpInt2"));
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, GetPVarFloat(playerid, "tpPosX2"), GetPVarFloat(playerid, "tpPosY2"), GetPVarFloat(playerid, "tpPosZ2"));
			}
			format(string, sizeof(string), " You have sent %s to your second marked position.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SetPlayerInterior(playerid, GetPVarInt(playerid, "tpInt2"));
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else if(strcmp(location,"mall",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1133.71,-1464.52,15.77);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1133.71,-1464.52,15.77);
			}
			format(string, sizeof(string), " You have sent %s to the mall.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
		else if(strcmp(location,"elque",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1446.5997,2608.4478,55.8359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1446.5997,2608.4478,55.8359);
			}
			format(string, sizeof(string), " You have sent %s to El Quebrados.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;

		}
		else if(strcmp(location,"bayside",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -2465.1348,2333.6572,4.8359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -2465.1348,2333.6572,4.8359);
			}
			format(string, sizeof(string), " You have sent %s to Bayside.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		else if(strcmp(location,"famed",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1020.29, -1129.06, 23.87);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1020.29, -1129.06, 23.87);
			}
			format(string, sizeof(string), " You have sent %s to the Famed HQ.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		else if(strcmp(location,"rodeo",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 587.0106,-1238.3374,17.8049);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 587.0106,-1238.3374,17.8049);
			}
			format(string, sizeof(string), " You have sent %s to Rodeo.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		else if(strcmp(location,"flint",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -108.1058,-1172.5293,2.8906);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -108.1058,-1172.5293,2.8906);
			}
			format(string, sizeof(string), " You have sent %s to Flint County Gas Station.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		else if(strcmp(location,"idlewood",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1955.1357,-1796.8896,13.5469);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1955.1357,-1796.8896,13.5469);
			}
			format(string, sizeof(string), " You have sent %s to Idlewood Gas Station.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
		else if(strcmp(location,"mhc",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				Player_StreamPrep(giveplayerid, 1700.2124, 1461.1771, 1145.7766, FREEZE_TIME);
				SetVehiclePos(tmpcar, 1700.2124, 1461.1771, 1145.7766);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				Player_StreamPrep(giveplayerid, 1649.7531, 1463.1614, 1151.9687, FREEZE_TIME);
			}
			format(string, sizeof(string), " You have sent %s to the Mile High Club.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:accept(playerid, params[])
{
	new szMessage[256];
	new string[128];
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new giveplayerid;
	if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot do this while being in the Hunger Games Event!");
    if(IsPlayerConnected(playerid)) {
        if(isnull(params)) {
            SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /accept [name]");
            SendClientMessageEx(playerid, COLOR_GREY, "Available names: Sex, Mats, Crack, Pot, Weapon, Craft, Repair, Lawyer, Bodyguard, Job, Live, Refill");
            SendClientMessageEx(playerid, COLOR_GREY, "Available names: Firework, Group, Family, Boxing, Medic, Mechanic, Ticket, Car, Death, Backpack");
            SendClientMessageEx(playerid, COLOR_GREY, "Available names: Business, Item, Offer, Heroin, Rawopium, Syringes, Rimkit, Voucher, Kiss");
            return 1;
        }
        if(strcmp(params, "kiss", true) == 0)
		{
	        if (!GetPVarType(playerid, "kissvaloffer")) {
       	 		return SendClientMessageEx(playerid, COLOR_GREY, "No one has offered you a kiss!");
			}
			if (GetPVarInt(playerid,"kissvalsqlid") != GetPlayerSQLId(GetPVarInt(playerid, "kissvaloffer"))) {
				return SendClientMessageEx(playerid, COLOR_GREY, "Inviter has disconnected.");
			}
			new Float: ppFloats[3], targetid;
			targetid = GetPVarInt(playerid, "kissvaloffer");
			GetPlayerPos(targetid, ppFloats[0], ppFloats[1], ppFloats[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 2, ppFloats[0], ppFloats[1], ppFloats[2]) || Spectating[targetid] > 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You're too far away. You can't kiss right now.");
				return 1;
			}
			if(PlayerInfo[playerid][pGiftTime] > 0)
			{
				format(string, sizeof(string),"Item: Reset Gift Timer\nYour Credits: %s\nCost: {FFD700}%s{A9C4E4}\nCredits Left: %s", number_format(PlayerInfo[playerid][pCredits]), number_format(ShopItems[17][sItemPrice]), number_format(PlayerInfo[playerid][pCredits]-ShopItems[17][sItemPrice]));
				ShowPlayerDialog( playerid, DIALOG_SHOPGIFTRESET, DIALOG_STYLE_MSGBOX, "Reset Gift Timer", string, "Purchase", "Exit" );
				SendClientMessageEx(playerid, COLOR_GRAD2, "You have already received a gift in the last 5 hours!");
				return 1;
			}
			else if(PlayerInfo[targetid][pGiftTime] > 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player has already received a gift in the last 5 hours!");
				return 1;
			}
			ClearAnimations(playerid);
			ClearAnimations(targetid);
			PlayerFacePlayer( playerid, targetid );
			switch(GetPVarInt(targetid,"kissvalstyle")) {
				case 1:
				{
					ApplyAnimation( playerid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
					ApplyAnimation( targetid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
				}
				case 2:
				{
					ApplyAnimation( playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
					ApplyAnimation( targetid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
				}
				case 3:
				{
					ApplyAnimation( playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
					ApplyAnimation( targetid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
				}
				case 4:
				{
					ApplyAnimation( playerid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
					ApplyAnimation( targetid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
				}
				case 5:
				{
					ApplyAnimation( playerid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
					ApplyAnimation( targetid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
				}
				case 6:
				{
					ApplyAnimation( playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
					ApplyAnimation( targetid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
				}
			}
			format(string, sizeof(string), "* %s has given %s a kiss.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GiftPlayer(MAX_PLAYERS, playerid);
			GiftPlayer(MAX_PLAYERS, targetid);	
   			DeletePVar(playerid, "kissvaloffer");
      		DeletePVar(playerid, "kissvalsqlid");
			DeletePVar(targetid, "kissvalstyle");
   		}
		else if(strcmp(params, "business", true) == 0)
		{
	        if (!GetPVarType(playerid, "Business_Inviter")) {
       	 		return SendClientMessageEx(playerid, COLOR_GREY, "No one has invited you to join a business!");
			}
			if (PlayerInfo[playerid][pBusiness] != INVALID_BUSINESS_ID) {
				return SendClientMessageEx(playerid, COLOR_GREY, "You are already in another business. You must first resign before accepting this offer.");
			}
			if (GetPVarInt(playerid,"Business_InviterSQLId") != GetPlayerSQLId(GetPVarInt(playerid, "Business_Inviter"))) {
				return SendClientMessageEx(playerid, COLOR_GREY, "Inviter has disconnected.");
			}
			PlayerInfo[playerid][pBusiness] = GetPVarInt(playerid, "Business_Invited");
			PlayerInfo[playerid][pBusinessRank] = 0;
            format(string, sizeof(string), "* You have accepted the invitation and joined %s, you were invited by %s %s.", Businesses[GetPVarInt(playerid, "Business_Invited")][bName], GetPlayerNameEx(GetPVarInt(playerid, "Business_Inviter")));
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            format(string, sizeof(string), "* %s has accepted your invitation and joined %s", GetPlayerNameEx(playerid),Businesses[GetPVarInt(playerid, "Business_Invited")][bName]);
            SendClientMessageEx(GetPVarInt(playerid, "Business_Inviter"), COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "%s has accepted %s's invite to join %s", GetPlayerNameEx(playerid), GetPlayerNameEx(GetPVarInt(playerid, "Business_Inviter")), Businesses[GetPVarInt(playerid, "Business_Invited")][bName]);
			Log("logs/business.log", string);
   			DeletePVar(playerid, "Business_Inviter");
      		DeletePVar(playerid, "Business_Invited");
   		}
        else if(strcmp(params, "gun", true) == 0)
		{
			if (!GetPVarType(playerid, "Business_WeapOfferer"))	{
		        return SendClientMessageEx(playerid, COLOR_GREY, "No one has offered you a weapon!");
			}
		    new offerer = GetPVarInt(playerid, "Business_WeapOfferer"), business = PlayerInfo[offerer][pBusiness];
			if (GetPlayerSQLId(offerer) != GetPVarInt(playerid, "Business_WeapOffererSQLId")) {
   				return SendClientMessage(playerid, COLOR_GRAD2, "The offerer has disconnected!");
			}
            if(!ProxDetectorS(5.0, playerid, offerer)) {
       	        SendClientMessageEx(playerid, COLOR_GREY, "The seller is not near you!");
       	        return 1;
            }
		    if(GetPVarInt(playerid, "IsInArena") >= 0) {
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in an arena!");
				return 1;
			}
		    if (GetPlayerCash(playerid) < GetPVarInt(playerid, "Business_WeapPrice")) {
			    SendClientMessageEx(playerid, COLOR_GREY, "You can't afford the weapon");
			    return 1;
		    }
		    if (Businesses[business][bInventory] < GetWeaponParam(GetPVarInt(playerid, "Business_WeapType"), WeaponMats)) {
				SendClientMessage(playerid, COLOR_GRAD2, "Shop doesnt have mats anymore");
				return 1;
		    }
			if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen")) {
   				SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
   				return 1;
			}

		    Businesses[business][bTotalSales]++;
		    Businesses[business][bLevelProgress]++;
		    Businesses[business][bSafeBalance] += TaxSale(GetPVarInt(playerid, "Business_WeapPrice"));
  			GivePlayerCash(playerid, -GetPVarInt(playerid, "Business_WeapPrice"));
		    Businesses[business][bInventory] -= GetWeaponParam(GetPVarInt(playerid, "Business_WeapType"), WeaponMats);
		    SaveBusiness(business);

            format(string, sizeof(string), "   You have sold %s a %s.", GetPlayerNameEx(playerid),Weapon_ReturnName(GetPVarInt(playerid, "Business_WeapType")));
            SendClientMessageEx(offerer, COLOR_GRAD1, string);
            format(string, sizeof(string), "   You have recieved a %s from %s.", Weapon_ReturnName(GetPVarInt(playerid, "Business_WeapType")), GetPlayerNameEx(offerer));
            SendClientMessageEx(playerid, COLOR_GRAD1, string);
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            PlayerPlaySound(offerer, 1052, 0.0, 0.0, 0.0);
            format(string, sizeof(string), "* %s creates a gun from materials and sells it to %s.", GetPlayerNameEx(offerer), GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            GivePlayerValidWeapon(playerid,GetPVarInt(playerid, "Business_WeapType"),50000);

			format(string, sizeof(string), "%s %s (IP: %s) has sold a %s to %s (IP: %s) for $%d in %s (%d)", GetBusinessRankName(PlayerInfo[offerer][pBusinessRank]), GetPlayerNameEx(offerer), GetPlayerIpEx(offerer), Weapon_ReturnName(GetPVarInt(playerid, "Business_WeapType")), GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), GetPVarInt(playerid, "Business_WeapPrice"), Businesses[business][bName], business);
			Log("logs/business.log", string);

  		    DeletePVar(playerid, "Business_WeapPrice");
		    DeletePVar(playerid, "Business_WeapType");
		    DeletePVar(playerid, "Business_WeapOfferer");
		    DeletePVar(playerid, "Business_WeapOffererSQLId");
		}

        else if(strcmp(params, "item", true) == 0) {

			if (!GetPVarType(playerid, "Business_ItemOfferer")) {
		        SendClientMessageEx(playerid, COLOR_GREY, "No one has offered you a item!");
		        return 1;
			}

		    new offerer = GetPVarInt(playerid, "Business_ItemOfferer");
		    new item = GetPVarInt(playerid, "Business_ItemType");
		    new price = GetPVarInt(playerid, "Business_ItemPrice");
			new business = InBusiness(playerid);

			if (business == INVALID_BUSINESS_ID)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "You are not in the business interior");
   				return 1;
			}
			if (GetPlayerSQLId(offerer) != GetPVarInt(playerid, "Business_ItemOffererSQLId")) {
   				SendClientMessage(playerid, COLOR_GRAD2, "The offerer has disconnected!");
   				return 1;
			}
		    if (GetPlayerCash(playerid) < price) {
			    SendClientMessageEx(playerid, COLOR_GREY, "You can't afford the item!");
			    return 1;
		    }
			if (!Businesses[business][bItemPrices][item]) {
			    SendClientMessageEx(playerid, COLOR_GRAD4, "Item is not for sale anymore.");
			    return 1;
			}
		 	if (Businesses[business][bInventory] < 1) {
	   	 		SendClientMessageEx(playerid, COLOR_GRAD2, "Store does not have any items anymore!");
	   	 		return 1;
			}
			if (GetPVarInt(playerid, "Business_ItemPrice") != Businesses[business][bItemPrices][item]) {
			    SendClientMessageEx(playerid, COLOR_GRAD4, "Purchase failed because the price for this item has changed.");
			    return 1;
			}

			if(item == ITEM_ILOCK || item == ITEM_SCALARM || item == ITEM_ELOCK)
   			{
      			if(Businesses[business][bInventory] >= StoreItemCost[item][ItemValue])
	        	{

					SetPVarInt(playerid, "lockcost", price);
     				SetPVarInt(playerid, "businessid", business);
	        		SetPVarInt(playerid, "item", item);
		        	SetPVarInt(playerid, "playersold", item);
			        GivePlayerStoreItem(playerid, 1, business, item+1, price);
				}
				else return SendClientMessageEx(playerid, COLOR_GRAD2, "The store does not have enough stock for that item!");
    		}
  			else GivePlayerStoreItem(playerid, 1, business, item+1, price);
		}


        else if(strcmp(params, "vehicle", true) == 0) {

		    new offerer = GetPVarInt(playerid, "Business_VehicleOfferer");
		    new price = GetPVarInt(playerid, "Business_VehiclePrice");
		    new slot = GetPVarInt(playerid, "Business_VehicleSlot");
		    new businessid = PlayerInfo[offerer][pBusiness];

			if (!GetPVarType(playerid, "Business_VehicleOfferer")) {
		        SendClientMessageEx(playerid, COLOR_GREY, "No one has offered you a vehicle!");
		        return 1;
			}

			if (GetPlayerSQLId(offerer) != GetPVarInt(playerid, "Business_VehicleOffererSQLId")) {
   				SendClientMessage(playerid, COLOR_GRAD2, "The offerer has disconnected!");
   				return 1;
			}
		    if (GetPlayerCash(playerid) < price) {
			    SendClientMessageEx(playerid, COLOR_GREY, "You can't afford the vehicle!");
			    return 1;
		    }

            new playervehicleid = GetPlayerFreeVehicleId(playerid);

			if(!vehicleCountCheck(playerid)) {
				return SendClientMessage(playerid, COLOR_GRAD2, "You can't own any more vehicles.");
			}
			if(!vehicleSpawnCountCheck(playerid)) {
				return SendClientMessage(playerid, COLOR_GRAD2, "You have too many vehicles spawned - store one first.");
			}
            PlayerVehicleInfo[playerid][playervehicleid][pvId] = Businesses[businessid][bVehID][slot];
            PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = Businesses[businessid][bModel][slot];
            PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = Businesses[businessid][bParkPosX][slot];
            PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = Businesses[businessid][bParkPosY][slot];
            PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = Businesses[businessid][bParkPosZ][slot];
            PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = Businesses[businessid][bParkAngle][slot];
            PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 1;
            Businesses[businessid][DealershipVehStock][slot] = 0;
            VehicleSpawned[playerid]++;

		    g_mysql_SaveVehicle(playerid, playervehicleid);

    		Businesses[businessid][bSafeBalance] += TaxSale(GetPVarInt(playerid, "Business_ItemPrice"));
			GivePlayerCash(playerid, -GetPVarInt(playerid, "Business_VehiclePrice"));
			if (PlayerInfo[playerid][pBusiness] != PlayerInfo[offerer][pBusiness]) Businesses[businessid][bLevelProgress]++;
			SaveBusiness(businessid);
			OnPlayerStatsUpdate(playerid);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

			DeletePVar(playerid, "Business_VehiclePrice");
			DeletePVar(playerid, "Business_VehicleOfferer");
			DeletePVar(playerid, "Business_VehicleOffererSQLId");
			DeletePVar(playerid, "Business_VehicleSlot");
        }

        else if(strcmp(params, "death", true) == 0) {
            if(GetPVarInt(playerid, "Injured") == 1) {
                SendClientMessageEx(playerid, COLOR_WHITE, "You gave up hope and fell unconscious, you were immediately sent to the hospital.");
                KillEMSQueue(playerid);
                ResetPlayerWeaponsEx(playerid);
                SpawnPlayer(playerid);
            }
            else {  SendClientMessageEx(playerid, COLOR_GREY, "   You are not injured, you can't do this right now !"); }
        }
        else if(strcmp(params, "car", true) == 0) {
            if(VehicleOffer[playerid] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(VehicleOffer[playerid])) {
                    if(GetPlayerCash(playerid) > VehiclePrice[playerid]) {
                        if(IsPlayerInVehicle(VehicleOffer[playerid], PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId])) {
                            if(!ProxDetectorS(8.0, VehicleOffer[playerid], playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not near the car dealer");
                            new playervehicleid = GetPlayerFreeVehicleId(playerid);

			 				if(!vehicleCountCheck(playerid)) {
								return SendClientMessage(playerid, COLOR_GRAD2, "You can't own any more vehicles.");
							}
   							if(!vehicleSpawnCountCheck(playerid)) {
								return SendClientMessage(playerid, COLOR_GRAD2, "You have too many vehicles spawned - store one first.");
							}
							if(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvBeingPickLocked])
								return SendClientMessage(playerid, COLOR_GRAD2, "There was an error while trying to sell this vehicle.");
							
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(VehicleOffer[playerid], ipex, sizeof(ipex));
                            format(szMessage, sizeof(szMessage), "[CAR] %s (IP: %s) has paid $%s to %s for the %s (IP: %s)", GetPlayerNameEx(playerid), ip, number_format(VehiclePrice[playerid]), GetPlayerNameEx(VehicleOffer[playerid]), GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), ipex);
                            Log("logs/pay.log", szMessage);
                            GetPlayerName(VehicleOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(szMessage, sizeof(szMessage), "* You bought the %s for $%s, from %s. (Check /carhelp for more help)", GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), number_format(VehiclePrice[playerid]), giveplayer);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                            format(szMessage, sizeof(szMessage), "* You sold your %s to %s for $%s.",GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), sendername, number_format(VehiclePrice[playerid]));
                            SendClientMessageEx(VehicleOffer[playerid], COLOR_LIGHTBLUE, szMessage);
							GivePlayerCashEx(VehicleOffer[playerid], TYPE_ONHAND, VehiclePrice[playerid]);
							GivePlayerCashEx(playerid, TYPE_ONHAND, -VehiclePrice[playerid]);
                            /*GivePlayerCash( VehicleOffer[playerid], VehiclePrice[playerid] );
                            GivePlayerCash(playerid, -VehiclePrice[playerid]);*/
                            RemovePlayerFromVehicle(VehicleOffer[playerid]);
                            new Float:slx, Float:sly, Float:slz;
                            GetPlayerPos(VehicleOffer[playerid], slx, sly, slz);
                            SetPlayerPos(VehicleOffer[playerid], slx, sly, slz+2);
							if(PlayerInfo[VehicleOffer[playerid]][pBackpack] > 0 && PlayerInfo[VehicleOffer[playerid]][pBStoredV] == PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvSlotId])
							{
								PlayerInfo[VehicleOffer[playerid]][pBackpack] = 0;
								PlayerInfo[VehicleOffer[playerid]][pBEquipped] = 0;
								PlayerInfo[VehicleOffer[playerid]][pBStoredV] = INVALID_PLAYER_VEHICLE_ID;
								PlayerInfo[VehicleOffer[playerid]][pBStoredH] = INVALID_HOUSE_ID;
								SendClientMessageEx(VehicleOffer[playerid], COLOR_WHITE, "You have lost your backpack since you did not withdraw it");

							}
                            PlayerVehicleInfo[playerid][playervehicleid][pvId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle];
                            PlayerVehicleInfo[playerid][playervehicleid][pvLock] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock];
                            PlayerVehicleInfo[playerid][playervehicleid][pvLocked] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob];
                            PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1];
                            PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2];
                            PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedPlayerId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPark] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark];
                            PlayerVehicleInfo[playerid][playervehicleid][pvVW] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvVW];
                            PlayerVehicleInfo[playerid][playervehicleid][pvInt] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvInt];
							PlayerVehicleInfo[playerid][playervehicleid][pvAlarm] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAlarm];
							PlayerVehicleInfo[playerid][playervehicleid][pvLocksLeft] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocksLeft];
							PlayerVehicleInfo[playerid][playervehicleid][pvWeapons][0] = 0;
							PlayerVehicleInfo[playerid][playervehicleid][pvWeapons][1] = 0;
							PlayerVehicleInfo[playerid][playervehicleid][pvWeapons][2] = 0;
							PlayerVehicleInfo[playerid][playervehicleid][pvPlate] = 0;
							PlayerVehicleInfo[playerid][playervehicleid][pvTicket] = 0;
                            PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 1;
							PlayerVehicleInfo[playerid][playervehicleid][pvAlarmTriggered] = 0;
							PlayerVehicleInfo[playerid][playervehicleid][pvBeingPickLocked] = 0;
							PlayerVehicleInfo[playerid][playervehicleid][pvLastLockPickedBy] = 0;
                            VehicleSpawned[playerid]++;
                            for(new m = 0; m < MAX_MODS; m++) {
                                PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m];
                            }

        					format(szMessage, sizeof(szMessage), "INSERT INTO `vehicles` (`sqlID`) VALUES ('%d')", GetPlayerSQLId(playerid));
							mysql_function_query(MainPipeline, szMessage, true, "OnQueryCreateVehicle", "ii", playerid, playervehicleid);
							
							format(szMessage, sizeof(szMessage), "DELETE FROM `vehicles` WHERE `id` = '%d'", PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvSlotId]);
							mysql_function_query(MainPipeline, szMessage, false, "OnQueryFinish", "ii", SENDDATA_THREAD, VehicleOffer[playerid]);

							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvSlotId] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock] = 0;
							PlayerVehicleInfo[playerid][playervehicleid][pvLocksLeft] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob] = -1;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvImpounded] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedPlayerId] = INVALID_PLAYER_ID;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvSpawned] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvVW] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvInt] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvWeapons][0] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvWeapons][1] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvWeapons][2] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPlate] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvTicket] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAlarm] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAlarmTriggered] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvBeingPickLocked] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLastLockPickedBy] = 0;
                            VehicleSpawned[VehicleOffer[playerid]]--;
                            for(new m = 0; m < MAX_MODS; m++) {
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m] = 0;
                            }

                            VehicleOffer[playerid] = INVALID_PLAYER_ID;
                            VehiclePrice[playerid] = 0;
                            return 1;
                        }
                        else {
                            SendClientMessageEx(playerid, COLOR_GREY, "   The Car Dealer is not in the offered car!");
                            return 1;
                        }
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the car!");
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   Nobody offered to buy a car!");
                return 1;
            }
        }
        else if(strcmp(params, "house", true) == 0)
		{
            if(HouseOffer[playerid] != INVALID_PLAYER_ID)
			{
                if(IsPlayerConnected(HouseOffer[playerid]))
				{
                    if(HouseInfo[House[playerid]][hOwnerID] != GetPlayerSQLId(HouseOffer[playerid])) return SendClientMessageEx(playerid, COLOR_GREY, "They don't own that house.");
					if(House[playerid] == INVALID_HOUSE_ID) return SendClientMessageEx(playerid, COLOR_RED, "Error: No house specified.");
                    if(GetPlayerCash(playerid) > HousePrice[playerid])
					{
						if(PlayerInfo[HouseOffer[playerid]][pBackpack] > 0 && PlayerInfo[HouseOffer[playerid]][pBStoredH] == HouseInfo[House[playerid]][hSQLId])
						{
							PlayerInfo[HouseOffer[playerid]][pBackpack] = 0;
							PlayerInfo[HouseOffer[playerid]][pBEquipped] = 0;
							PlayerInfo[HouseOffer[playerid]][pBStoredV] = INVALID_PLAYER_VEHICLE_ID;
							PlayerInfo[HouseOffer[playerid]][pBStoredH] = INVALID_HOUSE_ID;
							SendClientMessageEx(HouseOffer[playerid], COLOR_WHITE, "You have lost your backpack since you did not withdraw it");
						}
                        ClearHouse(House[playerid]);
                        HouseInfo[House[playerid]][hLock] = 1;
                        format(HouseInfo[House[playerid]][hOwnerName], 128, "Nobody");
						HouseInfo[House[playerid]][hOwnerID] = -1;
                        sendername = GetPlayerNameEx(HouseOffer[playerid]);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(szMessage, sizeof(szMessage), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", HousePrice[playerid]);
                        GameTextForPlayer(HouseOffer[playerid], szMessage, 4000, 3);
                        if(House[playerid] == PlayerInfo[HouseOffer[playerid]][pPhousekey])
						{
							PlayerInfo[HouseOffer[playerid]][pPhousekey] = INVALID_HOUSE_ID;
							PlayerInfo[playerid][pPhousekey] = House[playerid];
						}
                        else if(House[playerid] == PlayerInfo[HouseOffer[playerid]][pPhousekey2])
						{
							PlayerInfo[HouseOffer[playerid]][pPhousekey2] = INVALID_HOUSE_ID;
							PlayerInfo[playerid][pPhousekey2] = House[playerid];
						}
						else if(House[playerid] == PlayerInfo[HouseOffer[playerid]][pPhousekey3])
						{
							PlayerInfo[HouseOffer[playerid]][pPhousekey3] = INVALID_HOUSE_ID;
							PlayerInfo[playerid][pPhousekey3] = House[playerid];						
						}
						Homes[HouseOffer[playerid]]--;
						Homes[playerid]++;
                        GivePlayerCash(HouseOffer[playerid],HousePrice[playerid]);
						OnPlayerStatsUpdate(HouseOffer[playerid]);

						HouseInfo[House[playerid]][hOwnerID] = GetPlayerSQLId(playerid);
                        HouseInfo[House[playerid]][hOwned] = 1;
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        strmid(HouseInfo[House[playerid]][hOwnerName], sendername, 0, strlen(sendername), 255);
                        GivePlayerCash(playerid,-HousePrice[playerid]);
                        SendClientMessageEx(playerid, COLOR_WHITE, "Congratulations on your new purchase!");
                        SendClientMessageEx(playerid, COLOR_WHITE, "Type /help to review the property help section!");
                        SaveHouse(House[playerid]);
                        OnPlayerStatsUpdate(playerid);
						ReloadHouseText(House[playerid]);

                        new ip[32], ipex[32];
                        GetPlayerIp(HouseOffer[playerid], ip, sizeof(ip));
                        GetPlayerIp(playerid, ipex, sizeof(ipex));
                        format(szMessage,sizeof(szMessage),"%s (IP: %s) has sold their house (ID %d) to %s (IP: %s) for $%s.", GetPlayerNameEx(HouseOffer[playerid]), ip, House[playerid], GetPlayerNameEx(playerid), ipex, number_format(HousePrice[playerid]));
                        Log("logs/house.log", szMessage);

                        HouseOffer[playerid] = INVALID_PLAYER_ID;
                        HousePrice[playerid] = 0;
                        House[playerid] = INVALID_HOUSE_ID;
						return 1;
                    }
                    else
					{
                        SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the house!");
                        HouseOffer[playerid] = INVALID_PLAYER_ID;
                        HousePrice[playerid] = 0;
                        House[playerid] = INVALID_HOUSE_ID;
                        return 1;
                    }
                }
				else return SendClientMessageEx(playerid, COLOR_GREY, "   The seller has disconnected!");
            }
            else return SendClientMessageEx(playerid, COLOR_GREY, "   Nobody offered to buy a house!");
        }
        else if(strcmp(params, "handshake", true) == 0) {
            new
                Count;

            //foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(GetPVarType(i, "shrequest") && GetPVarInt(i, "shrequest") == playerid) {
						new
							Float: ppFloats[3];

						GetPlayerPos(i, ppFloats[0], ppFloats[1], ppFloats[2]);

						if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2]) || Spectating[i] > 0) {
							Count++;
							SendClientMessageEx(playerid, COLOR_WHITE, "You're too far away. You can't accept the handshake right now.");
						}
						else {
							switch(GetPVarInt(i, "shstyle")) {
								case 1:
								{
									Count++;
									PlayerFacePlayer( playerid, i );
									ApplyAnimation( playerid, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000 );
									ApplyAnimation( i, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000 );
									DeletePVar(i, "shrequest");
									format(szMessage, sizeof(szMessage), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
									ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									DeletePVar(i, "shstyle");
								}
								case 2:
								{
									Count++;
									PlayerFacePlayer( playerid, i );
									ApplyAnimation( playerid, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000 );
									ApplyAnimation( i, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000 );
									DeletePVar(i, "shrequest");
									format(szMessage, sizeof(szMessage), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
									ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									DeletePVar(i, "shstyle");
								}
								case 3:
								{
									Count++;
									PlayerFacePlayer( playerid, i );
									ApplyAnimation( playerid, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000 );
									ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000 );
									DeletePVar(i, "shrequest");
									format(szMessage, sizeof(szMessage), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
									ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									DeletePVar(i, "shstyle");
								}
								case 4:
								{
									Count++;
									PlayerFacePlayer( playerid, i );
									ApplyAnimation( playerid, "GANGS", "hndshkcb", 4.0, 1, 1, 1, 0, 1000 );
									ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000 );
									DeletePVar(i, "shrequest");
									format(szMessage, sizeof(szMessage), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
									ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									DeletePVar(i, "shstyle");
								}
								case 5:
								{
									Count++;
									PlayerFacePlayer( playerid, i );
									ApplyAnimation( playerid, "GANGS", "hndshkda", 4.0, 1, 1, 1, 0, 1000 );
									ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000 );
									DeletePVar(i, "shrequest");
									format(szMessage, sizeof(szMessage), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
									ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									DeletePVar(i, "shstyle");
								}
								case 6:
								{
									Count++;
									PlayerFacePlayer( playerid, i );
									ApplyAnimation( playerid, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600 );
									ApplyAnimation( i, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600 );
									DeletePVar(i, "shrequest");
									format(szMessage, sizeof(szMessage), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
									ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									DeletePVar(i, "shstyle");
								}
								case 7:
								{
									Count++;
									PlayerFacePlayer( playerid, i );
									ApplyAnimation( playerid, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250 );
									ApplyAnimation( i, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250 );
									DeletePVar(i, "shrequest");
									format(szMessage, sizeof(szMessage), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
									ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									DeletePVar(i, "shstyle");
								}
								case 8:
								{
									Count++;
									PlayerFacePlayer( playerid, i );
									ApplyAnimation( playerid, "GANGS", "prtial_hndshk_biz_01", 3.7, 1, 1, 1, 0, 2200 );
									ApplyAnimation( i, "GANGS", "prtial_hndshk_biz_01", 3.5, 1, 1, 1, 0, 2200 );
									DeletePVar(i, "shrequest");
									format(szMessage, sizeof(szMessage), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
									ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									DeletePVar(i, "shstyle");
								}
							}
						}
					}
				}
            }
            if(Count == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have any pending handshake requests.");
            return 1;
        }
		else if(strcmp(params, "rflteam",true) == 0) {
			if(!GetPVarType(playerid, "RFLTeam_Invite")) return SendClientMessageEx(playerid, COLOR_GREY, "Nobody offered you to join a team.");
			new team = GetPVarInt(playerid, "RFLTeam_Team");
			giveplayerid = GetPVarInt(playerid, "RFLTeam_Inviter");
			DeletePVar(playerid, "RFLTeam_Invite");
			DeletePVar(playerid, "RFLTeam_Team");
			DeletePVar(playerid, "RFLTeam_Inviter");
			PlayerInfo[playerid][pRFLTeam] = team;
			RFLInfo[team][RFLmembers] +=1;
			format(szMessage, sizeof(szMessage), "* You are now part of %s's team. You may now use /rflhelp.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
			format(szMessage, sizeof(szMessage), "* %s has accepted your invite.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, szMessage);
			if( GetPVarInt( playerid, "EventToken" ) == 1 ) {
				if( EventKernel[ EventStatus ] == 1 || EventKernel[ EventStatus ] == 2 ) {
					if(EventKernel[EventType] == 3) {
						new Float:X, Float:Y, Float:Z;
						GetPlayerPos( playerid, X, Y, Z );
						format(szMessage, sizeof(szMessage), "Team: %s", RFLInfo[team][RFLname]);
						RFLTeamN3D[playerid] = CreateDynamic3DTextLabel(szMessage,0x008080FF,X,Y,Z,10.0,.attachedplayer = playerid, .worldid = GetPlayerVirtualWorld(playerid));
					}		
				}
			}		
			OnPlayerStatsUpdate(playerid);
			SaveRelayForLifeTeam(team);
		}
        else if(strcmp(params, "invite", true) == 0)
		{
            if(hInviteOffer[playerid] != INVALID_PLAYER_ID)
			{
                if(IsPlayerConnected(hInviteOffer[playerid]))
				{
	                if(CheckPointCheck(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                    format(szMessage, sizeof(szMessage), "* You have accepted %s's house invite, a checkpoint has been set to their house.", GetPlayerNameEx(hInviteOffer[playerid]));
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                    format(szMessage, sizeof(szMessage), "* %s has accepted your house invite.", GetPlayerNameEx(playerid));
                    SendClientMessageEx(hInviteOffer[playerid], COLOR_LIGHTBLUE, szMessage);
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, HouseInfo[hInviteHouse[playerid]][hExteriorX], HouseInfo[hInviteHouse[playerid]][hExteriorY], HouseInfo[hInviteHouse[playerid]][hExteriorZ], 4.0);
                    gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
                    hInviteOffer[playerid] = INVALID_PLAYER_ID;
					hInviteHouse[playerid] = INVALID_HOUSE_ID;
                    return 1;
                }
                else
				{
                    hInviteOffer[playerid] = INVALID_PLAYER_ID;
                    hInviteHouse[playerid] = INVALID_HOUSE_ID;
                    SendClientMessageEx(playerid, COLOR_GREY, "The person who sent you a house invite has disconnected.");
                }
            }
            else return SendClientMessageEx(playerid, COLOR_GREY, "Nobody sent you a house invite.");
            return 1;
        }
        else if(strcmp(params, "divorce", true) == 0) {
            if(DivorceOffer[playerid] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(DivorceOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid])) {
                        GetPlayerName(DivorceOffer[playerid], giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(szMessage, sizeof(szMessage), "* You have signed the divorce papers from %s, you are now single again.", giveplayer);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                        format(szMessage, sizeof(szMessage), "* %s has signed the divorce papers, you are now single again.", sendername);
                        SendClientMessageEx(DivorceOffer[playerid], COLOR_LIGHTBLUE, szMessage);
                        ClearMarriage(playerid);
                        ClearMarriage(DivorceOffer[playerid]);
                        PlayerInfo[playerid][pPhousekey] = INVALID_HOUSE_ID;
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   The person that sent you the Divorce Papers is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "Nobody sent you any divorce papers.");
                return 1;
            }
        }
        else if(strcmp(params, "group", true) == 0) {
            if(GetPVarType(playerid, "Group_Inviter")) {

    			new
					iInviter = GetPVarInt(playerid, "Group_Inviter"),
					iGroupID = PlayerInfo[iInviter][pLeader],
					iRank = PlayerInfo[iInviter][pRank];

				if (PlayerInfo[playerid][pCSFBanned]) {
					if (arrGroupData[iGroupID][g_iGroupType] == 1 || arrGroupData[iGroupID][g_iGroupType] == 3)	{
						SendClientMessageEx(playerid, COLOR_WHITE, "You are unable to accept this group invite, as you're banned from civil service groups. Contact a head admin.");
						DeletePVar(playerid, "Group_Invite");
						DeletePVar(iInviter, "Group_Invited");
						return 1;
					}
				}

                if(IsPlayerConnected(iInviter) && GetPVarInt(iInviter, "Group_Invited") == playerid && 0 <= iGroupID < MAX_GROUPS) {
					PlayerInfo[playerid][pMember] = iGroupID;
					PlayerInfo[playerid][pRank] = 0;
					PlayerInfo[playerid][pDivision] = INVALID_DIVISION;

					format(szMessage, sizeof szMessage, "You have accepted %s %s's invite, and are now a member of %s.", arrGroupRanks[iGroupID][iRank], GetPlayerNameEx(iInviter), arrGroupData[iGroupID][g_szGroupName]);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

					format(szMessage, sizeof szMessage, "%s accepted your group invite.", GetPlayerNameEx(playerid));
					SendClientMessageEx(iInviter, COLOR_LIGHTBLUE, szMessage);

					format(szMessage, sizeof szMessage, "%s accepted %s %s's invite to join %s (%d).", GetPlayerNameEx(playerid), arrGroupRanks[iGroupID][iRank], GetPlayerNameEx(iInviter), arrGroupData[iGroupID][g_szGroupName], iGroupID + 1);
					Log("logs/group.log", szMessage);

					DeletePVar(playerid, "Group_Invite");
					DeletePVar(iInviter, "Group_Invited");
                }
				else SendClientMessageEx(playerid, COLOR_GREY, "The person offering you an invite has disconnected.");
            }
            else SendClientMessageEx(playerid, COLOR_GREY, "Nobody has offered you a group invite.");
        }
        else if(strcmp(params, "family", true) == 0) {
            if(InviteOffer[playerid] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(InviteOffer[playerid])) {
                    if(!GetPVarType(playerid, "Group_Inviter") && InviteFamily[playerid] != INVALID_FAMILY_ID) {
                        if(GetPVarInt(playerid, "IsInArena") >= 0) {
                            SendClientMessageEx(playerid, COLOR_WHITE, "Please wait until your Paintball Arena match is over.");
                            return 1;
                        }

                        if(PlayerInfo[playerid][pJailTime] > 1) {
                            SendClientMessageEx(playerid, COLOR_WHITE, "Please wait until you are released from jail/prison before you accept the invite.");
                            return 1;
                        }

                        if( PlayerInfo[playerid][pFMember] != INVALID_FAMILY_ID || PlayerInfo[playerid][pMember] >= 0 || PlayerInfo[playerid][pLeader] >= 0 ) {
                            SendClientMessageEx(playerid, COLOR_WHITE, "You can't accept this invite as you're already in a family/faction.");
                        }
                        else {
                            PlayerInfo[playerid][pFMember] = InviteFamily[playerid];
                            PlayerInfo[playerid][pRank] = 0;
                            PlayerInfo[playerid][pDivision] = 0;
                            FamilyInfo[InviteFamily[playerid]][FamilyMembers] ++;
							SaveFamily(InviteFamily[playerid]);
                            format(szMessage, sizeof(szMessage), "   You have accepted the invitation and joined the %s, you were invited by %s.", FamilyInfo[InviteFamily[playerid]][FamilyName], GetPlayerNameEx(InviteOffer[playerid]));
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                            format(szMessage, sizeof(szMessage), "   %s has accepted the invitation and joined the %s.", GetPlayerNameEx(playerid),FamilyInfo[InviteFamily[playerid]][FamilyName]);
                            SendClientMessageEx(InviteOffer[playerid], COLOR_LIGHTBLUE, szMessage);
                            SendClientMessageEx(playerid, COLOR_WHITE, "Use (/f)amily to talk in family chat. If you wish to acquire a family skin, type /clothes inside a clothes store.");
                            InviteOffer[playerid] = INVALID_PLAYER_ID;
                            InviteFamily[playerid] = INVALID_FAMILY_ID;
                        }
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No one has invited you to join an organisation/family!");
                return 1;
            }
        }
        else if(strcmp(params, "witness", true) == 0) {
            if(MarryWitnessOffer[playerid] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(MarryWitnessOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid])) {
                        GetPlayerName(MarryWitnessOffer[playerid], giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(szMessage, sizeof(szMessage), "* You have accepted %s's request to be their marriage witness.", giveplayer);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                        format(szMessage, sizeof(szMessage), "* %s has accepted your request to be your marriage witness.", sendername);
                        SendClientMessageEx(MarryWitnessOffer[playerid], COLOR_LIGHTBLUE, szMessage);
                        MarryWitness[MarryWitnessOffer[playerid]] = playerid;
                        MarryWitnessOffer[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   The person that requested you to be their marriage witness is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one asked you to be their marriage witness!");
                return 1;
            }
        }
        else if(strcmp(params, "marriage", true) == 0) {
            if(ProposeOffer[playerid] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(ProposeOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid])) {
                        if(MarryWitness[ProposeOffer[playerid]] == INVALID_PLAYER_ID) {
                            SendClientMessageEx(playerid, COLOR_GREY, "   The proposer doesn't have a marriage witness!");
                            return 1;
                        }
                        if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]])) {
                            if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]])) {
                                if(IsPlayerInRangeOfPoint(playerid, 10.0, 1963.9612, -369.1851, 1093.7289)) {
                                    GetPlayerName(ProposeOffer[playerid], giveplayer, sizeof(giveplayer));
                                    GetPlayerName(playerid, sendername, sizeof(sendername));
                                    format(szMessage, sizeof(szMessage), "* You have accepted %s's request to be your husband.", giveplayer);
                                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                                    format(szMessage, sizeof(szMessage), "* %s has accepted your request to be your wife.", sendername);
                                    SendClientMessageEx(ProposeOffer[playerid], COLOR_LIGHTBLUE, szMessage);
                                    format(szMessage, sizeof(szMessage), "Priest: %s, do you take %s as your lovely husband? (Type 'yes', as anything else will reject the marriage.)", sendername, giveplayer);
                                    SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
                                    MarriageCeremoney[playerid] = 1;
                                    ProposedTo[ProposeOffer[playerid]] = playerid;
                                    GotProposedBy[playerid] = ProposeOffer[playerid];
                                    MarryWitness[ProposeOffer[playerid]] = INVALID_PLAYER_ID;
                                    ProposeOffer[playerid] = INVALID_PLAYER_ID;
                                    return 1;
                                }
                                else {
                                    SendClientMessageEx(playerid, COLOR_GREY, "   You are not at the church!");
                                    return 1;
                                }
                            }
                            else {
                                SendClientMessageEx(playerid, COLOR_GREY, "   The marriage witness is not near your proposer!");
                                return 1;
                            }
                        }
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   The person that proposed to you is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   Nobody proposed to you!");
                return 1;
            }
        }
        else if(strcmp(params, "ticket", true) == 0) {
            if(TicketOffer[playerid] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(TicketOffer[playerid])) {
                    if (ProxDetectorS(5.0, playerid, TicketOffer[playerid])) {
                        if(GetPlayerCash(playerid) >= TicketMoney[playerid]) {
                            //new ip[32], ipex[32];
                            //GetPlayerIp(playerid, ip, sizeof(ip));
                            //GetPlayerIp(TicketOffer[playerid], ipex, sizeof(ipex));
                            //format(szMessage, sizeof(szMessage), "[FACTION TICKET] %s (IP: %s) has paid $%d to %s (IP: %s)", GetPlayerNameEx(playerid), ip, TicketMoney[playerid], GetPlayerNameEx(TicketOffer[playerid]), ipex);
                            // Log("logs/pay.log", szMessage);
                            format(szMessage, sizeof(szMessage), "* You have paid the ticket of $%d to %s.", TicketMoney[playerid], GetPlayerNameEx(TicketOffer[playerid]));
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                            format(szMessage, sizeof(szMessage), "* %s has paid your ticket of $%d.", GetPlayerNameEx(playerid), TicketMoney[playerid]);
                            SendClientMessageEx(TicketOffer[playerid], COLOR_LIGHTBLUE, szMessage);
                            format(szMessage, sizeof(szMessage), "* %s has paid the ticket.", GetPlayerNameEx(playerid));
                            ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            GivePlayerCash(playerid, - TicketMoney[playerid]);
                            new money = floatround(TicketMoney[playerid] / 3), iGroupID = PlayerInfo[TicketOffer[playerid]][pMember];
                            Tax += money;
                            arrGroupData[iGroupID][g_iBudget] += money;
                            new str[128], file[32];
			                format(str, sizeof(str), "%s has paid %s's ticket of $%d and $%d has been sent to %s's budget fund.",GetPlayerNameEx(playerid), GetPlayerNameEx(TicketOffer[playerid]), TicketMoney[playerid], money, arrGroupData[iGroupID][g_szGroupName]);
			                new month, day, year;
							getdate(year,month,day);
							format(file, sizeof(file), "grouppay/%d/%d-%d-%d.log", iGroupID, month, day, year);
							Log(file, str);
                            TicketOffer[playerid] = INVALID_PLAYER_ID;
                            TicketMoney[playerid] = 0;
                            if(GetPlayerCash(playerid) < 1) GivePlayerCash(playerid, 0);
                            return 1;
                        }
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   The officer is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you a ticket!");
                return 1;
            }
        }
		else if(strcmp(params, "boxing", true) == 0) {
            if(BoxOffer[playerid] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(BoxOffer[playerid])) {
                    new points;
                    new mypoints;
                    GetPlayerName(BoxOffer[playerid], giveplayer, sizeof(giveplayer));
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    new level = PlayerInfo[BoxOffer[playerid]][pBoxSkill];
                    if(level >= 0 && level <= 50) { points = 40; }
                    else if(level >= 51 && level <= 100) { points = 50; }
                    else if(level >= 101 && level <= 200) { points = 60; }
                    else if(level >= 201 && level <= 400) { points = 70; }
                    else if(level >= 401) { points = 80; }
                    if(PlayerInfo[playerid][pJob] == 12 || PlayerInfo[playerid][pJob2] == 12 || PlayerInfo[playerid][pJob3] == 12) {
                        new clevel = PlayerInfo[playerid][pBoxSkill];
                        if(clevel >= 0 && clevel <= 50) { mypoints = 40; }
                        else if(clevel >= 51 && clevel <= 100) { mypoints = 50; }
                        else if(clevel >= 101 && clevel <= 200) { mypoints = 60; }
                        else if(clevel >= 201 && clevel <= 400) { mypoints = 70; }
                        else if(clevel >= 401) { mypoints = 80; }
                    }
                    else {
                        mypoints = 30;
                    }
                    format(szMessage, sizeof(szMessage), "* You have accepted the Boxing Challenge from %s, and will fight with %d Health.",giveplayer,mypoints);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                    format(szMessage, sizeof(szMessage), "* %s has accepted your Boxing Challenge Request, you will fight with %d Health.",sendername,points);
                    SendClientMessageEx(BoxOffer[playerid], COLOR_LIGHTBLUE, szMessage);
                    if(IsPlayerInRangeOfPoint(playerid,20.0,758.98, -60.32, 1000.78) || IsPlayerInRangeOfPoint(BoxOffer[playerid],20.0,758.98, -60.32, 1000.78)) {
                        ResetPlayerWeapons(playerid);
                        ResetPlayerWeapons(BoxOffer[playerid]);
                        SetPlayerHealth(playerid, mypoints);
                        SetPlayerHealth(BoxOffer[playerid], points);
                        SetPlayerInterior(playerid, 7); SetPlayerInterior(BoxOffer[playerid], 7);
                        SetPlayerPos(playerid, 768.94, -70.87, 1001.56); SetPlayerFacingAngle(playerid, 131.8632);
                        SetPlayerPos(BoxOffer[playerid], 764.35, -66.48, 1001.56); SetPlayerFacingAngle(BoxOffer[playerid], 313.1165);
                        TogglePlayerControllable(playerid, 0); TogglePlayerControllable(BoxOffer[playerid], 0);
                        GameTextForPlayer(playerid, "~r~Waiting", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~Waiting", 3000, 1);
                        new name[MAX_PLAYER_NAME];
                        new dszMessage[MAX_PLAYER_NAME];
                        new wszMessage[MAX_PLAYER_NAME];
                        GetPlayerName(playerid, name, sizeof(name));
                        format(dszMessage, sizeof(dszMessage), "%s", name);
                        strmid(wszMessage, dszMessage, 0, strlen(dszMessage), 255);
                        if(strcmp(Titel[TitelName] ,wszMessage, true ) == 0 ) {
                            format(szMessage, sizeof(szMessage), "Boxing News: Boxing Champion %s will fight VS %s, in 60 seconds (Grove Street Gym).",  sendername, giveplayer);
                            ProxDetector(30.0, playerid, szMessage, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
                            TBoxer = playerid;
                            BoxDelay = 60;
                        }
                        GetPlayerName(BoxOffer[playerid], name, sizeof(name));
                        format(dszMessage, sizeof(dszMessage), "%s", name);
                        strmid(wszMessage, dszMessage, 0, strlen(dszMessage), 255);
                        if(strcmp(Titel[TitelName] ,wszMessage, true ) == 0 ) {
                            format(szMessage, sizeof(szMessage), "Boxing News: Boxing Champion %s will fight VS %s, in 60 seconds (Grove Street Gym).",  giveplayer, sendername);
                            ProxDetector(30.0, playerid, szMessage, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
                            TBoxer = BoxOffer[playerid];
                            BoxDelay = 60;
                        }
                        BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
                        if(BoxDelay < 1) { BoxDelay = 20; }
                        InRing = 1;
                        Boxer1 = BoxOffer[playerid];
                        Boxer2 = playerid;
                        PlayerBoxing[playerid] = 1;
                        PlayerBoxing[BoxOffer[playerid]] = 1;
                        BoxOffer[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    }
                    ResetPlayerWeapons(playerid);
                    ResetPlayerWeapons(BoxOffer[playerid]);
                    SetPlayerHealth(playerid, mypoints);
                    SetPlayerHealth(BoxOffer[playerid], points);
                    SetPlayerInterior(playerid, 5); SetPlayerInterior(BoxOffer[playerid], 5);
                    SetPlayerPos(playerid, 762.9852,2.4439,1001.5942); SetPlayerFacingAngle(playerid, 131.8632);
                    SetPlayerPos(BoxOffer[playerid], 758.7064,-1.8038,1001.5942); SetPlayerFacingAngle(BoxOffer[playerid], 313.1165);
                    TogglePlayerControllable(playerid, 0); TogglePlayerControllable(BoxOffer[playerid], 0);
                    GameTextForPlayer(playerid, "~r~Waiting", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~Waiting", 3000, 1);
                    new name[MAX_PLAYER_NAME];
                    new dszMessage[MAX_PLAYER_NAME];
                    new wszMessage[MAX_PLAYER_NAME];
                    GetPlayerName(playerid, name, sizeof(name));
                    format(dszMessage, sizeof(dszMessage), "%s", name);
                    strmid(wszMessage, dszMessage, 0, strlen(dszMessage), 255);
                    if(strcmp(Titel[TitelName] ,wszMessage, true ) == 0 ) {
                        format(szMessage, sizeof(szMessage), "Boxing News: Boxing Champion %s will fight VS %s, in 60 seconds (Grove Street Gym).",  sendername, giveplayer);
                        ProxDetector(30.0, playerid, szMessage, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
                        TBoxer = playerid;
                        BoxDelay = 60;
                    }
                    GetPlayerName(BoxOffer[playerid], name, sizeof(name));
                    format(dszMessage, sizeof(dszMessage), "%s", name);
                    strmid(wszMessage, dszMessage, 0, strlen(dszMessage), 255);
                    if(strcmp(Titel[TitelName] ,wszMessage, true ) == 0 ) {
                        format(szMessage, sizeof(szMessage), "Boxing News: Boxing Champion %s will fight VS %s, in 60 seconds (Grove Street Gym).",  giveplayer, sendername);
                        ProxDetector(30.0, playerid, szMessage, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
                        TBoxer = BoxOffer[playerid];
                        BoxDelay = 60;
                    }
                    BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
                    if(BoxDelay < 1) { BoxDelay = 20; }
                    InRing = 1;
                    Boxer1 = BoxOffer[playerid];
                    Boxer2 = playerid;
                    PlayerBoxing[playerid] = 1;
                    PlayerBoxing[BoxOffer[playerid]] = 1;
                    BoxOffer[playerid] = INVALID_PLAYER_ID;
                    return 1;
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you a Boxing Challenge!");
                return 1;
            }
        }
                                                  // accept taxi
   /*     else if(strcmp(params,"taxi",true) == 0) {
            if(TransportDuty[playerid] != 1) {
                SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Taxi Driver!");
                return 1;
            }
            if(TaxiCallTime[playerid] > 0) {
                SendClientMessageEx(playerid, COLOR_GREY, "   You have already accepted a taxi call!");
                return 1;
            }
            if(TaxiCall != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(TaxiCall)) {
                	if(taxitime[TaxiCall] == 1 && PlayerInfo[playerid][pMember] != 10 && PlayerInfo[playerid][pLeader] != 10)
					{
					    return SendClientMessageEx(playerid, COLOR_GREY, "You must wait 20 seconds before accepting this call! To recieve priority, join the Taxi Company!");
					}
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    GetPlayerName(TaxiCall, giveplayer, sizeof(giveplayer));
                    format(szMessage, sizeof(szMessage), "* You have accepted the taxi call from %s, you will see the marker until you have reached it.",giveplayer);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                    new zone[MAX_ZONE_NAME];
					GetPlayer3DZone(TaxiCall, zone, sizeof(zone));
					format(szMessage, sizeof(szMessage), "* %s can be found at %s.", GetPlayerNameEx(TaxiCall), zone);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                    format(szMessage, sizeof(szMessage), "* Taxi Driver %s has accepted your Taxi Call; please wait at your current position.",sendername);
                    SendClientMessageEx(TaxiCall, COLOR_LIGHTBLUE, szMessage);
                    GameTextForPlayer(playerid, "~w~Taxi Caller~n~~r~Go to the red marker.", 5000, 1);
                    TaxiCallTime[playerid] = 1;
                    TaxiAccepted[playerid] = TaxiCall;
                    TaxiCall = INVALID_PLAYER_ID;
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   Nobody called for a taxi yet!");
                return 1;
            }
        }
        else if(strcmp(params, "bus", true) == 0) {
            if(TransportDuty[playerid] != 2) {
                SendClientMessageEx(playerid, COLOR_GREY, "   You are not a bus driver!");
                return 1;
            }
            if(BusCallTime[playerid] > 0) {
                SendClientMessageEx(playerid, COLOR_GREY, "   You have already accepted a bus call!");
                return 1;
            }
            if(BusCall != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(BusCall)) {
                    if(CheckPointCheck(playerid)) {
                        SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                        return 1;
                    }
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    GetPlayerName(BusCall, giveplayer, sizeof(giveplayer));
                    format(szMessage, sizeof(szMessage), "* You have accepted the Bus Call from %s, you will see the marker untill you have reached it.",giveplayer);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                    new zone[MAX_ZONE_NAME];
					GetPlayer3DZone(BusCall, zone, sizeof(zone));
					format(szMessage, sizeof(szMessage), "* %s can be found at %s.", GetPlayerNameEx(BusCall), zone);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                    format(szMessage, sizeof(szMessage), "* Bus Driver %s has accepted your bus call; please wait at your current position.",sendername);
                    SendClientMessageEx(BusCall, COLOR_LIGHTBLUE, szMessage);
                    new Float:X,Float:Y,Float:Z;
                    GetPlayerPos(BusCall, X, Y, Z);
                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                    GameTextForPlayer(playerid, "~w~Bus Caller~n~~r~Goto redmarker", 5000, 1);
                    BusCallTime[playerid] = 1;
                    BusAccepted[playerid] = BusCall;
                    BusCall = INVALID_PLAYER_ID;
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one called for a Bus yet!");
                return 1;
            }
        }*/
        else if(strcmp(params, "medic", true) == 0) {
            if(IsAMedic(playerid)) {
                if(MedicCallTime[playerid] > 0) {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You have already accepted a Medic Call!");
                    return 1;
                }
                if(CheckPointCheck(playerid)) {
                    SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                    return 1;
                }
                if(MedicCall != INVALID_PLAYER_ID) {
                    if(IsPlayerConnected(MedicCall)) {
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(MedicCall, giveplayer, sizeof(giveplayer));
                        format(szMessage, sizeof(szMessage), "* You have accepted the Medic Call from %s.",giveplayer);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* After the 45 Seconds the red marker will dissapear.");
                        format(szMessage, sizeof(szMessage), "* Medic %s has accepted your Medic Call please wait at your current Position.",sendername);
                        SendClientMessageEx(MedicCall, COLOR_LIGHTBLUE, szMessage);
                        new Float:X,Float:Y,Float:Z;
                        GetPlayerPos(MedicCall, X, Y, Z);
                        SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                        new zone[MAX_ZONE_NAME];
                        GetPlayer3DZone(MedicCall, zone, sizeof(zone));
                        format(szMessage, sizeof(szMessage), "HINT: %s is located in %s", GetPlayerNameEx(MedicCall), zone);
                        SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
                        MedicCallTime[playerid] = 1;
                        MedicAccepted[playerid] = MedicCall;
                        MedicCall = INVALID_PLAYER_ID;
                        return 1;
                    }
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   No-one called for a Medic yet!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Medic!");
                return 1;
            }
        }
        else if(strcmp(params, "mechanic", true) == 0) {
            if(PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pJob2] != 7 && PlayerInfo[playerid][pJob3] != 7) {
                SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Car Mechanic!");
                return 1;
            }
            if(MechanicCallTime[playerid] > 0) {
                SendClientMessageEx(playerid, COLOR_GREY, "   You have already accepted a Mechanic Call!");
                return 1;
            }
            if(CheckPointCheck(playerid)) {
                SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                return 1;
            }
            if(MechanicCall != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(MechanicCall)) {
                    if(playerid == MechanicCall) return 1;
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    GetPlayerName(MechanicCall, giveplayer, sizeof(giveplayer));
                    format(szMessage, sizeof(szMessage), "* You have accepted the Mechanic Call from %s, you have 30 seconds to get there.",giveplayer);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* After the 30 Seconds the red marker will dissapear.");
                    format(szMessage, sizeof(szMessage), "* Car Mechanic %s has accepted your Mechanic Call, please wait at your current position.",sendername);
                    SendClientMessageEx(MechanicCall, COLOR_LIGHTBLUE, szMessage);
                    new Float:X,Float:Y,Float:Z;
                    GetPlayerPos(MechanicCall, X, Y, Z);
                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                    GameTextForPlayer(playerid, "~w~Mechanic Caller~n~~r~Go to the red marker", 5000, 1);
                    MechanicCallTime[playerid] = 1;
                    MechanicCall = INVALID_PLAYER_ID;
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one called for a Car Mechanic yet!");
                return 1;
            }
        }
        else if(strcmp(params, "job", true) == 0) {
            if(GettingJob[playerid] > 0) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Congratulations with your new Job, type /help to see your new command.");
                if(GettingJob[playerid] == 14) {
                    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: You can find drug crates in blueberry. ( Goto checkpoint )");
                    if(CheckPointCheck(playerid)) {
                        SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                        return 1;
                    }
                    SetPlayerCheckpoint(playerid, 51.9720,-292.6349,1.7031, 3);
                }
                if(GettingJob[playerid] == 21) {
                	SendClientMessageEx(playerid, COLOR_WHITE, "You have been given a Pizza Stack uniform!");
					PlayerInfo[playerid][pModel] = 155;
					SetPlayerSkin(playerid, 155);
                }
                PlayerInfo[playerid][pJob] = GettingJob[playerid];
                GettingJob[playerid] = 0;
                return 1;
            }
            if(GettingJob2[playerid] > 0 && PlayerInfo[playerid][pDonateRank] > 0) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Congratulations with your new Job, type /help to see your new command.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have taken this as a secondary job.");
                if(GettingJob2[playerid] == 14) {
                    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: You can find drug crates in blueberry. ( Goto checkpoint )");
                    SetPlayerCheckpoint(playerid, 51.9720,-292.6349,1.7031, 3);
                }
                if(GettingJob2[playerid] == 21) {
                	SendClientMessageEx(playerid, COLOR_WHITE, "You have been given a Pizza Stack uniform!");
					PlayerInfo[playerid][pModel] = 155;
					SetPlayerSkin(playerid, 155);
                }
                PlayerInfo[playerid][pJob2] = GettingJob2[playerid];
                GettingJob2[playerid] = 0;
                return 1;
            }
			if(GettingJob3[playerid] > 0 && PlayerInfo[playerid][pDonateRank] >= 3) {
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Congratulations with your new Job, type /help to see your new command.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have taken this as a third job.");
				if(GettingJob3[playerid] == 14) {
                    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: You can find drug crates in blueberry. ( Goto checkpoint )");
                    SetPlayerCheckpoint(playerid, 51.9720,-292.6349,1.7031, 3);
                }
				if(GettingJob3[playerid] == 21) {
                	SendClientMessageEx(playerid, COLOR_WHITE, "You have been given a Pizza Stack uniform!");
					PlayerInfo[playerid][pModel] = 155;
					SetPlayerSkin(playerid, 155);
                }
				PlayerInfo[playerid][pJob3] = GettingJob3[playerid];
				GettingJob3[playerid] = 0;
				return 1;
			}			
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   You haven't even been at a job place yet!");
                return 1;
            }
        }
        else if(strcmp(params, "live", true) == 0) {
            if(LiveOffer[playerid] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(LiveOffer[playerid])) {
                    if (ProxDetectorS(5.0, playerid, LiveOffer[playerid])) {
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are frozen till the Live Conversation ends.");
                        SendClientMessageEx(LiveOffer[playerid], COLOR_LIGHTBLUE, "* You are frozen till the Live Conversation ends (use /live again).");
                        TogglePlayerControllable(playerid, 0);
                        TogglePlayerControllable(LiveOffer[playerid], 0);
						SetPVarInt(playerid, "IsLive", 1);
						SetPVarInt(LiveOffer[playerid], "IsLive", 1);
                        TalkingLive[playerid] = LiveOffer[playerid];
                        TalkingLive[LiveOffer[playerid]] = playerid;
                        LiveOffer[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You are to far away from the News Reporter!");
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one gave you a Live Conversation offer!");
                return 1;
            }
        }
        else if(strcmp(params, "lawyer", true) == 0) {
            if(sscanf(params, "u", giveplayerid))
            {
                SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /accept lawyer [player]");
                return 1;
            }
            if (IsACop(playerid)) {
                if(IsPlayerConnected(giveplayerid)) {
                    if(giveplayerid != INVALID_PLAYER_ID) {
                        if(PlayerInfo[giveplayerid][pJob] == 2 || PlayerInfo[giveplayerid][pJob2] == 2 || PlayerInfo[giveplayerid][pJob3] == 2) {
                            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(szMessage, sizeof(szMessage), "* You allowed %s to free a Jailed Person.", giveplayer);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE,szMessage);
                            format(szMessage, sizeof(szMessage), "* Officer %s approved (allowed) you to free a Jailed Person. (use /free)", sendername);
                            SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE,szMessage);
                            ApprovedLawyer[giveplayerid] = 1;
                            return 1;
                        }
                    }
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "Invalid action! (You are no cop / person is not a Lawyer / Bad ID)");
                return 1;
            }
        }
        else if(strcmp(params, "bodyguard", true) == 0) {
            if(GuardOffer[playerid] != INVALID_PLAYER_ID) {
                if(GetPlayerCash(playerid) > GuardPrice[playerid]) {
                    if(IsPlayerConnected(GuardOffer[playerid])) {
                        if(ProxDetectorS(6.0, playerid, GuardOffer[playerid])) {
                            new Float:armour;
                            GetPlayerArmour(playerid, armour);
                            if(armour >= 50) {
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You already have a vest!");
                                return 1;
                            }
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(GuardOffer[playerid], ipex, sizeof(ipex));
                            //format(szMessage, sizeof(szMessage), "[BODYGUARD] %s (IP:%s) has paid $%d to %s (IP:%s)", GetPlayerNameEx(playerid), ip, GuardPrice[playerid], GetPlayerNameEx(GuardOffer[playerid]), ipex);
                            // Log("logs/pay.log", szMessage);

                            if(GuardPrice[playerid] >= 25000 && (PlayerInfo[GuardOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3)) {
                                format(szMessage, sizeof(szMessage), "%s (IP:%s) has guarded %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(GuardOffer[playerid]), ipex, GuardPrice[playerid]);
                                // Log("logs/pay.log", szMessage);
                                ABroadCast(COLOR_YELLOW, szMessage, 2);
                            }

                            SetPlayerArmor(playerid, 50);
                            GetPlayerName(GuardOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(szMessage, sizeof(szMessage), "* You accepted the protection for $%d from %s.",GuardPrice[playerid],GetPlayerNameEx(GuardOffer[playerid]));
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                            format(szMessage, sizeof(szMessage), "* %s accepted your protection, and the $%d was added to your money.",GetPlayerNameEx(playerid),GuardPrice[playerid]);
                            SendClientMessageEx(GuardOffer[playerid], COLOR_LIGHTBLUE, szMessage);
                            GivePlayerCash(GuardOffer[playerid], GuardPrice[playerid]);
                            GivePlayerCash(playerid, -GuardPrice[playerid]);
                            ExtortionTurfsWarsZone(GuardOffer[playerid], 2, GuardPrice[playerid]);
                            GuardOffer[playerid] = INVALID_PLAYER_ID;
                            GuardPrice[playerid] = 0;
                            return 1;
                        }
                        else {
                            SendClientMessageEx(playerid, COLOR_GRAD2, "You are not near the person offering you guard!");
                            return 1;
                        }
                    }
                    return 1;
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the Protection!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you any Protection!");
                return 1;
            }
        }
        else if(strcmp(params, "defense", true) == 0) {
            if(DefendOffer[playerid] != INVALID_PLAYER_ID) {
                if(GetPlayerCash(playerid) > DefendPrice[playerid]) {
                    if(IsPlayerConnected(DefendOffer[playerid])) {
                        /*new ip[32], ipex[32];
                        GetPlayerIp(playerid, ip, sizeof(ip));
                        GetPlayerIp(DefendOffer[playerid], ipex, sizeof(ipex));
                        format(szMessage, sizeof(szMessage), "[LAWYER] %s (IP:%s) has paid $%d to %s (IP:%s)", GetPlayerNameEx(playerid), ip, DefendPrice[playerid], GetPlayerNameEx(DefendOffer[playerid]), ipex);
                        Log("logs/pay.log", szMessage);*/
                        PlayerInfo[playerid][pWantedLevel]--;
                        SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
                        SetPlayerToTeamColor(playerid);
                        giveplayer = GetPlayerNameEx(DefendOffer[playerid]);
                        sendername = GetPlayerNameEx(playerid);
                        format(szMessage, sizeof(szMessage), "* You accepted the Defense for $%d from Lawyer %s.",DefendPrice[playerid],giveplayer);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                        format(szMessage, sizeof(szMessage), "* %s accepted your Defense, and the $%d was added to your money.",sendername,DefendPrice[playerid]);
                        SendClientMessageEx(DefendOffer[playerid], COLOR_LIGHTBLUE, szMessage);
                        GivePlayerCash( DefendOffer[playerid],DefendPrice[playerid]);
                        GivePlayerCash(playerid, -DefendPrice[playerid]);
                        DefendOffer[playerid] = INVALID_PLAYER_ID;
                        DefendPrice[playerid] = 0;
                        return 1;
                    }
                    return 1;
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the Protection!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you any Protection!");
                return 1;
            }
        }
        else if(strcmp(params, "appeal", true) == 0) {
            if(AppealOffer[playerid] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(AppealOffer[playerid])) {
                    AppealOfferAccepted[playerid] = 1;
                    giveplayer = GetPlayerNameEx(AppealOffer[playerid]);
                    sendername = GetPlayerNameEx(playerid);
                    format(szMessage, sizeof(szMessage), "* You accepted the appeal from Lawyer %s.",giveplayer);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                    format(szMessage, sizeof(szMessage), "* %s accepted your appeal, a message to the Judicial System has been sent, please wait at the courtroom.",sendername);
                    SendClientMessageEx(AppealOffer[playerid], COLOR_LIGHTBLUE, szMessage);
                    return 1;
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you any Protection!");
                return 1;
            }
        }
        else if(strcmp(params, "mats", true) == 0)
		{
            if(MatsOffer[playerid] != INVALID_PLAYER_ID)
			{
                if(GetPlayerCash(playerid) >= MatsPrice[playerid])
                {
                	if(IsPlayerConnected(MatsOffer[playerid]))
					{
    					if(GetPVarInt(playerid, "SellMatsTimer") > 0)
						{
							format(szMessage, sizeof(szMessage), "You must wait %d seconds before accepting materials.", GetPVarInt(playerid, "SellMatsTimer"));
							SendClientMessageEx(playerid,COLOR_GREY,szMessage);
							return 1;
						}
						if (GetPVarInt(playerid, "MatsSeller_SQLId") != GetPlayerSQLId(MatsOffer[playerid]))
						{
			                return SendClientMessageEx(playerid, COLOR_GREY, "The other person has disconnected.");
						}
      					if(!ProxDetectorS(8.0, MatsOffer[playerid], playerid))
	  					{
							return SendClientMessageEx(playerid, COLOR_GREY, "You are not near the seller.");
						}
						if(PlayerInfo[MatsOffer[playerid]][pMats] < MatsAmount[playerid])
						{
						    SendClientMessageEx(playerid,COLOR_GREY, "That person does not have that amount of materials anymore!");
						    return 1;
						}
     					new ip[32], ipex[32];
          				GetPlayerIp(playerid, ip, sizeof(ip));
              			GetPlayerIp(MatsOffer[playerid], ipex, sizeof(ipex));
                 		format(szMessage, sizeof(szMessage), "[MATERIALS (%s)] %s (IP:%s) has paid $%s to %s (IP:%s)", number_format(MatsAmount[playerid]), GetPlayerNameEx(playerid), ip, number_format(MatsPrice[playerid]), GetPlayerNameEx(MatsOffer[playerid]), ipex);
                   		Log("logs/pay.log", szMessage);

         				format(szMessage, sizeof(szMessage), "* You bought %s materials for $%s from %s.", number_format(MatsAmount[playerid]), number_format(MatsPrice[playerid]), GetPlayerNameEx(MatsOffer[playerid]));
            			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
              			format(szMessage, sizeof(szMessage), "* %s has bought your %s materials, the $%s was added to your money.", GetPlayerNameEx(playerid), number_format(MatsAmount[playerid]), number_format(MatsPrice[playerid]));
                		SendClientMessageEx(MatsOffer[playerid], COLOR_LIGHTBLUE, szMessage);

                  		GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
						GivePlayerCash(playerid, -MatsPrice[playerid]);
                    	PlayerInfo[playerid][pMats] += MatsAmount[playerid];
                    	PlayerInfo[MatsOffer[playerid]][pMats] -= MatsAmount[playerid];

						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(MatsOffer[playerid]);

                    	MatsOffer[playerid] = INVALID_PLAYER_ID;
                    	MatsPrice[playerid] = 0;
                    	MatsAmount[playerid] = 0;
                    	DeletePVar(playerid, "MatsSeller_SQLId");
					}
				}
                else
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "You can't afford those materials!");
                    return 1;
                }
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "No-one offered you any materials!");
                return 1;
            }
        }
        else if(strcmp(params, "syringes", true) == 0) {
        	if (GetPVarType(playerid, "SyringesOffer")) {
	            if(GetPlayerCash(playerid) > GetPVarInt(playerid, "SyringesPrice")) {
	            	if(IsPlayerConnected(GetPVarInt(playerid, "SyringesOffer"))) {
	            		if (GetPVarInt(playerid, "SyringesSeller_SQLId") != GetPlayerSQLId(GetPVarInt(playerid, "SyringesOffer")))
						{
			                return SendClientMessageEx(playerid, COLOR_GREY, "The other person has disconnected.");
						}
						if(PlayerInfo[GetPVarInt(playerid, "SyringesOffer")][pSyringes] < GetPVarInt(playerid, "SyringesCount"))	{
							SendClientMessageEx(playerid,COLOR_GREY, "That person does not have that number of syringes anymore!");
							return 1;
						}
	                    GivePlayerCash(playerid, -GetPVarInt(playerid, "SyringesPrice"));
	                    GivePlayerCash(GetPVarInt(playerid, "SyringesOffer"), GetPVarInt(playerid, "SyringesPrice"));
						GetPlayerName(GetPVarInt(playerid, "SyringesOffer"), giveplayer, sizeof(giveplayer));
	                    format(szMessage, sizeof(szMessage), "* You bought %d syringes for $%d from %s.",GetPVarInt(playerid, "SyringesCount"),GetPVarInt(playerid, "SyringesPrice"),giveplayer);
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                    format(szMessage, sizeof(szMessage), "* %s has bought your %d syringes, $%d was added to your money.",sendername,GetPVarInt(playerid, "SyringesCount"),GetPVarInt(playerid, "SyringesPrice"));
	                    SendClientMessageEx(GetPVarInt(playerid, "SyringesOffer"), COLOR_LIGHTBLUE, szMessage);
	                    ExtortionTurfsWarsZone(GetPVarInt(playerid, "SyringesOffer"), 5, GetPVarInt(playerid, "SyringesPrice"));
	                    PlayerInfo[GetPVarInt(playerid, "SyringesOffer")][pSyringes] -= GetPVarInt(playerid, "SyringesCount");
	                    PlayerInfo[playerid][pSyringes] += GetPVarInt(playerid, "SyringesCount");

						new ip[32], ipex[32];
						GetPlayerIp(playerid, ip, sizeof(ip));
						GetPlayerIp(GetPVarInt(playerid, "SyringesOffer"), ipex, sizeof(ipex));
						format(szMessage, sizeof(szMessage), "[SYRINGES (%d)] %s (SQL ID: %d) (IP:%s) has paid $%d to %s (SQL ID: %d) (IP:%s)", GetPVarInt(playerid, "SyringesCount"), GetPlayerNameEx(playerid),GetPlayerSQLId(playerid), ip, GetPVarInt(playerid, "SyringesPrice"), GetPlayerNameEx(GetPVarInt(playerid, "SyringesOffer")),GetPlayerSQLId(GetPVarInt(playerid, "SyringesOffer")), ipex);
						Log("logs/sell.log", szMessage);
						
						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(GetPVarInt(playerid, "SyringesOffer"));

	                    DeletePVar(playerid, "SyringesOffer");
	                    DeletePVar(playerid, "SyringesPrice");
	                    DeletePVar(playerid, "SyringesCount");
                    	DeletePVar(playerid, "SyringesSeller_SQLId");
	                    return 1;
	  				}
	     		}
	      		else
				{
	            	SendClientMessageEx(playerid, COLOR_GREY, "You can't afford that syringes!");
	                return 1;
	        	}
       		}
			else
			{
        		SendClientMessageEx(playerid, COLOR_GREY, "No-one offered you any syringes!");
			}
 	    }
 	    else if(strcmp(params, "rimkit", true) == 0) {
        	if (GetPVarType(playerid, "RimOffer")) {
	            if(GetPlayerCash(playerid) > GetPVarInt(playerid, "RimPrice")) {
	            	if(IsPlayerConnected(GetPVarInt(playerid, "RimOffer"))) {
	            		if (GetPVarInt(playerid, "RimSeller_SQLId") != GetPlayerSQLId(GetPVarInt(playerid, "RimOffer")))
						{
			                return SendClientMessageEx(playerid, COLOR_GREY, "The other person has disconnected.");
						}
						if(PlayerInfo[GetPVarInt(playerid, "RimOffer")][pRimMod] < GetPVarInt(playerid, "RimCount"))	{
							SendClientMessageEx(playerid,COLOR_GREY, "That person does not have that number of rim kits anymore!");
							return 1;
						}
	                    GivePlayerCash(playerid, -GetPVarInt(playerid, "RimPrice"));
	                    GivePlayerCash(GetPVarInt(playerid, "RimOffer"), GetPVarInt(playerid, "RimPrice"));
						GetPlayerName(GetPVarInt(playerid, "RimOffer"), giveplayer, sizeof(giveplayer));
	                    format(szMessage, sizeof(szMessage), "* You bought %d rim kits for $%d from %s.",GetPVarInt(playerid, "RimCount"),GetPVarInt(playerid, "RimPrice"),giveplayer);
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                    format(szMessage, sizeof(szMessage), "* %s has bought your %d rim kits, $%d was added to your money.",sendername,GetPVarInt(playerid, "RimCount"),GetPVarInt(playerid, "RimPrice"));
	                    SendClientMessageEx(GetPVarInt(playerid, "RimOffer"), COLOR_LIGHTBLUE, szMessage);
	                    //ExtortionTurfsWarsZone(GetPVarInt(playerid, "RimOffer"), 5, GetPVarInt(playerid, "RimPrice"));
	                    PlayerInfo[GetPVarInt(playerid, "RimOffer")][pRimMod] -= GetPVarInt(playerid, "RimCount");
	                    PlayerInfo[playerid][pRimMod] += GetPVarInt(playerid, "RimCount");

                        format(szMessage, sizeof(szMessage), "%s (IP:%s) has bought (%d) rim kits for $%s from %s (IP:%s)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), GetPVarInt(playerid, "RimCount"), number_format(GetPVarInt(playerid, "RimPrice")),  GetPlayerNameEx(GetPVarInt(playerid, "RimOffer")), GetPlayerIpEx(GetPVarInt(playerid, "RimOffer")));
						Log("logs/pay.log", szMessage);

						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(GetPVarInt(playerid, "RimOffer"));

	                    DeletePVar(playerid, "RimOffer");
	                    DeletePVar(playerid, "RimPrice");
	                    DeletePVar(playerid, "RimCount");
                    	DeletePVar(playerid, "RimSeller_SQLId");
	                    return 1;
	  				}
	     		}
	      		else
				{
	            	SendClientMessageEx(playerid, COLOR_GREY, "You can't afford that many rim kits!");
	                return 1;
	        	}
       		}
			else
			{
        		SendClientMessageEx(playerid, COLOR_GREY, "No-one offered you any rim kits!");
			}
 	    }
		else if(strcmp(params, "voucher", true) == 0)
		{
			if(GetPVarInt(playerid, "buyingVoucher") == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "No-one has offered you any vouchers.");
		
			new sellerid = GetPVarInt(playerid, "sellerVoucher"),
				price = GetPVarInt(playerid, "priceVoucher"),
				amount = GetPVarInt(playerid, "amountVoucher");
			
			DeletePVar(playerid, "sellVoucher");
			DeletePVar(playerid, "priceVoucher");
			DeletePVar(playerid, "amountVoucher");	
			if(GetPlayerCash(playerid) > price)
			{
				if(IsPlayerConnected(sellerid))
				{
					if(GetPVarInt(playerid, "SQLID_Voucher") != GetPlayerSQLId(sellerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "The seller has disconnected.");
					if(GetPVarInt(playerid, "buyingVoucher") == 1) // Car Voucher
					{
						if(PlayerInfo[sellerid][pVehVoucher] < amount) return SendClientMessageEx(playerid, COLOR_GRAD1, "The seller does not have that many anymore.");
						
						GivePlayerCash(playerid, -price);
						GivePlayerCash(sellerid, price);
						format(szMessage, sizeof(szMessage), "* You have bought %d Car Voucher(s) for $%s from %s.", amount, number_format(price), GetPlayerNameEx(sellerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "* %s has bought %d Car Voucher(s) from you, $%s was added to your money.", GetPlayerNameEx(playerid), amount, number_format(price));
						SendClientMessageEx(sellerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "%s (IP:%s) has bought (%d) Car Voucher(s) for $%s from %s (IP:%s)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), amount, number_format(price),  GetPlayerNameEx(sellerid), GetPlayerIpEx(sellerid));
						Log("logs/pay.log", szMessage);
						PlayerInfo[playerid][pVehVoucher] += amount;
						PlayerInfo[sellerid][pVehVoucher] -= amount;
						
						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(sellerid);
						
						SetPVarInt(playerid, "buyingVoucher", INVALID_PLAYER_ID);
						return 1;
					}
					if(GetPVarInt(playerid, "buyingVoucher") == 2) // Silver VIP Voucher
					{
						if(PlayerInfo[sellerid][pSVIPVoucher] < amount) return SendClientMessageEx(playerid, COLOR_GRAD1, "The seller does not have that many anymore.");
						
						GivePlayerCash(playerid, -price);
						GivePlayerCash(sellerid, price);
						format(szMessage, sizeof(szMessage), "* You have bought %d Silver VIP Voucher(s) for $%s from %s.", amount, number_format(price), GetPlayerNameEx(sellerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "* %s has bought %d Silver VIP Voucher(s) from you, $%s was added to your money.", GetPlayerNameEx(playerid), amount, number_format(price));
						SendClientMessageEx(sellerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "%s (IP:%s) has bought (%d) Silver VIP Voucher(s) for $%s from %s (IP:%s)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), amount, number_format(price),  GetPlayerNameEx(sellerid), GetPlayerIpEx(sellerid));
						Log("logs/pay.log", szMessage);
						PlayerInfo[playerid][pSVIPVoucher] += amount;
						PlayerInfo[sellerid][pSVIPVoucher] -= amount;
						
						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(sellerid);
						
						SetPVarInt(playerid, "buyingVoucher", INVALID_PLAYER_ID);
						return 1;
					}
					if(GetPVarInt(playerid, "buyingVoucher") == 3) // Gold VIP Voucher
					{
						if(PlayerInfo[sellerid][pGVIPVoucher] < amount) return SendClientMessageEx(playerid, COLOR_GRAD1, "The seller does not have that many anymore.");
						
						GivePlayerCash(playerid, -price);
						GivePlayerCash(sellerid, price);
						format(szMessage, sizeof(szMessage), "* You have bought %d Gold VIP Voucher(s) for $%s from %s.", amount, number_format(price), GetPlayerNameEx(sellerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "* %s has bought %d Gold VIP Voucher(s) from you, $%s was added to your money.", GetPlayerNameEx(playerid), amount, number_format(price));
						SendClientMessageEx(sellerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "%s (IP:%s) has bought (%d) Gold VIP Voucher(s) for $%s from %s (IP:%s)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), amount, number_format(price),  GetPlayerNameEx(sellerid), GetPlayerIpEx(sellerid));
						Log("logs/pay.log", szMessage);
						PlayerInfo[playerid][pGVIPVoucher] += amount;
						PlayerInfo[sellerid][pGVIPVoucher] -= amount;
						
						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(sellerid);
						
						SetPVarInt(playerid, "buyingVoucher", INVALID_PLAYER_ID);
						return 1;
					}
					if(GetPVarInt(playerid, "buyingVoucher") == 4) // Platinum VIP Voucher
					{
						if(PlayerInfo[sellerid][pPVIPVoucher] < amount) return SendClientMessageEx(playerid, COLOR_GRAD1, "The seller does not have that many anymore.");
						
						GivePlayerCash(playerid, -price);
						GivePlayerCash(sellerid, price);
						format(szMessage, sizeof(szMessage), "* You have bought %d Platinum VIP Voucher(s) for $%s from %s.", amount, number_format(price), GetPlayerNameEx(sellerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "* %s has bought %d Platinum VIP Voucher(s) from you, $%s was added to your money.", GetPlayerNameEx(playerid), amount, number_format(price));
						SendClientMessageEx(sellerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "%s (IP:%s) has bought (%d) Platinum VIP Voucher(s) for $%s from %s (IP:%s)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), amount, number_format(price),  GetPlayerNameEx(sellerid), GetPlayerIpEx(sellerid));
						Log("logs/pay.log", szMessage);
						PlayerInfo[playerid][pPVIPVoucher] += amount;
						PlayerInfo[sellerid][pPVIPVoucher] -= amount;
						
						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(sellerid);
						
						SetPVarInt(playerid, "buyingVoucher", INVALID_PLAYER_ID);
						return 1;
					}
					if(GetPVarInt(playerid, "buyingVoucher") == 5) // Restricted Car Voucher
					{
						if(PlayerInfo[sellerid][pCarVoucher] < amount) return SendClientMessageEx(playerid, COLOR_GRAD1, "The seller does not have that many anymore.");
						
						GivePlayerCash(playerid, -price);
						GivePlayerCash(sellerid, price);
						format(szMessage, sizeof(szMessage), "* You have bought %d Restricted Car Voucher(s) for $%s from %s.", amount, number_format(price), GetPlayerNameEx(sellerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "* %s has bought %d Restricted Car Voucher(s) from you, $%s was added to your money.", GetPlayerNameEx(playerid), amount, number_format(price));
						SendClientMessageEx(sellerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "%s (IP:%s) has bought (%d) Restricted Car Voucher(s) for $%s from %s (IP:%s)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), amount, number_format(price),  GetPlayerNameEx(sellerid), GetPlayerIpEx(sellerid));
						Log("logs/pay.log", szMessage);
						PlayerInfo[playerid][pCarVoucher] += amount;
						PlayerInfo[sellerid][pCarVoucher] -= amount;
						
						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(sellerid);
						
						SetPVarInt(playerid, "buyingVoucher", INVALID_PLAYER_ID);
						return 1;
					}
					if(GetPVarInt(playerid, "buyingVoucher") == 6) // Priority Advertisement Voucher
					{
						if(PlayerInfo[sellerid][pAdvertVoucher] < amount) return SendClientMessageEx(playerid, COLOR_GRAD1, "The seller does not have that many anymore.");
						
						GivePlayerCash(playerid, -price);
						GivePlayerCash(sellerid, price);
						format(szMessage, sizeof(szMessage), "* You have bought %d Priority Advertisement Voucher(s) for $%s from %s.", amount, number_format(price), GetPlayerNameEx(sellerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "* %s has bought %d Priority Advertisement Voucher(s) from you, $%s was added to your money.", GetPlayerNameEx(playerid), amount, number_format(price));
						SendClientMessageEx(sellerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "%s (IP:%s) has bought (%d) Priority Advertisement Voucher(s) for $%s from %s (IP:%s)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), amount, number_format(price),  GetPlayerNameEx(sellerid), GetPlayerIpEx(sellerid));
						Log("logs/pay.log", szMessage);
						PlayerInfo[playerid][pAdvertVoucher] += amount;
						PlayerInfo[sellerid][pAdvertVoucher] -= amount;
						
						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(sellerid);
						
						SetPVarInt(playerid, "buyingVoucher", INVALID_PLAYER_ID);
						return 1;
					}
					if(GetPVarInt(playerid, "buyingVoucher") == 7) // 7 Days Silver VIP
					{
						if(PlayerInfo[sellerid][pSVIPExVoucher] < amount) return SendClientMessageEx(playerid, COLOR_GRAD1, "The seller does not have that many anymore.");
						
						GivePlayerCash(playerid, -price);
						GivePlayerCash(sellerid, price);
						format(szMessage, sizeof(szMessage), "* You have bought %d 7 Days Silver VIP Voucher(s) for $%s from %s.", amount, number_format(price), GetPlayerNameEx(sellerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "* %s has bought %d 7 Days Silver VIP Voucher(s) from you, $%s was added to your money.", GetPlayerNameEx(playerid), amount, number_format(price));
						SendClientMessageEx(sellerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "%s (IP:%s) has bought (%d) 7 Day Silver VIP Voucher(s) for $%s from %s (IP:%s)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), amount, number_format(price),  GetPlayerNameEx(sellerid), GetPlayerIpEx(sellerid));
						Log("logs/pay.log", szMessage);
						PlayerInfo[playerid][pSVIPExVoucher] += amount;
						PlayerInfo[sellerid][pSVIPExVoucher] -= amount;
						
						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(sellerid);
						
						SetPVarInt(playerid, "buyingVoucher", INVALID_PLAYER_ID);
						return 1;
					}
					if(GetPVarInt(playerid, "buyingVoucher") == 8) // 7 Days Gold VIP
					{
						if(PlayerInfo[sellerid][pGVIPExVoucher] < amount) return SendClientMessageEx(playerid, COLOR_GRAD1, "The seller does not have that many anymore.");
						
						GivePlayerCash(playerid, -price);
						GivePlayerCash(sellerid, price);
						format(szMessage, sizeof(szMessage), "* You have bought %d 7 Days Gold VIP Voucher(s) for $%s from %s.", amount, number_format(price), GetPlayerNameEx(sellerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "* %s has bought %d 7 Days Gold VIP Voucher(s) from you, $%s was added to your money.", GetPlayerNameEx(playerid), amount, number_format(price));
						SendClientMessageEx(sellerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "%s (IP:%s) has bought (%d) 7 Days Gold VIP Voucher(s) for $%s from %s (IP:%s)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), amount, number_format(price),  GetPlayerNameEx(sellerid), GetPlayerIpEx(sellerid));
						Log("logs/pay.log", szMessage);
						PlayerInfo[playerid][pGVIPExVoucher] += amount;
						PlayerInfo[sellerid][pGVIPExVoucher] -= amount;
						
						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(sellerid);
						
						SetPVarInt(playerid, "buyingVoucher", INVALID_PLAYER_ID);
						return 1;
					}
				} 
				else return SendClientMessageEx(playerid, COLOR_GRAD2, "No-One has offered you any vouchers.");
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have enough money.");
		}						
 	    else if(strcmp(params, "heroin", true) == 0) {
        	if (GetPVarType(playerid, "HeroinOffer")) {
	            if(GetPlayerCash(playerid) > GetPVarInt(playerid, "HeroinPrice")) {
	            	if(IsPlayerConnected(GetPVarInt(playerid, "HeroinOffer"))) {
	            		if (GetPVarInt(playerid, "HeroinSeller_SQLId") != GetPlayerSQLId(GetPVarInt(playerid, "HeroinOffer")))
						{
			                return SendClientMessageEx(playerid, COLOR_GREY, "The other person has disconnected.");
						}
						if(PlayerInfo[GetPVarInt(playerid, "HeroinOffer")][pHeroin] < GetPVarInt(playerid, "HeroinCount"))	{
							SendClientMessageEx(playerid,COLOR_GREY, "That person does not have that number of heroin anymore!");
							return 1;
						}
	                    GivePlayerCash(playerid, -GetPVarInt(playerid, "HeroinPrice"));
	                    GivePlayerCash(GetPVarInt(playerid, "HeroinOffer"), GetPVarInt(playerid, "HeroinPrice"));
						GetPlayerName(GetPVarInt(playerid, "HeroinOffer"), giveplayer, sizeof(giveplayer));
	                    format(szMessage, sizeof(szMessage), "* You bought %d milligrams of heroin for $%d from %s.",GetPVarInt(playerid, "HeroinCount"),GetPVarInt(playerid, "HeroinPrice"),giveplayer);
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                    format(szMessage, sizeof(szMessage), "* %s has bought your %d milligrams of heroin, $%d was added to your money.",sendername,GetPVarInt(playerid, "HeroinCount"),GetPVarInt(playerid, "HeroinPrice"));
	                    SendClientMessageEx(GetPVarInt(playerid, "HeroinOffer"), COLOR_LIGHTBLUE, szMessage);
	                    ExtortionTurfsWarsZone(GetPVarInt(playerid, "HeroinOffer"), 5, GetPVarInt(playerid, "HeroinPrice"));
	                    PlayerInfo[GetPVarInt(playerid, "HeroinOffer")][pHeroin] -= GetPVarInt(playerid, "HeroinCount");
	                    PlayerInfo[playerid][pHeroin] += GetPVarInt(playerid, "HeroinCount");

                        format(szMessage, sizeof(szMessage), "%s (IP:%s) has bought (%d) Heroin for $%s from %s (IP:%s)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), number_format(GetPVarInt(playerid, "HeroinPrice")),  GetPlayerNameEx(GetPVarInt(playerid, "HeroinOffer")), GetPlayerIpEx(GetPVarInt(playerid, "HeroinOffer")));
						Log("logs/pay.log", szMessage);

						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(GetPVarInt(playerid, "HeroinOffer"));

	                    DeletePVar(playerid, "HeroinOffer");
	                    DeletePVar(playerid, "HeroinPrice");
	                    DeletePVar(playerid, "HeroinCount");
                    	DeletePVar(playerid, "HeroinSeller_SQLId");
	                    return 1;
	  				}
	     		}
	      		else
				{
	            	SendClientMessageEx(playerid, COLOR_GREY, "You can't afford that much heroin!");
	                return 1;
	        	}
       		}
			else
			{
        		SendClientMessageEx(playerid, COLOR_GREY, "No-one offered you any heroin!");
			}
 	    }
 	    else if(strcmp(params, "rawopium", true) == 0) {
        	if (GetPVarType(playerid, "RawOpiumOffer")) {
	            if(GetPlayerCash(playerid) > GetPVarInt(playerid, "RawOpiumPrice")) {
	            	if(IsPlayerConnected(GetPVarInt(playerid, "RawOpiumOffer"))) {
	            		if (GetPVarInt(playerid, "RawOpiumSeller_SQLId") != GetPlayerSQLId(GetPVarInt(playerid, "RawOpiumOffer")))
						{
			                return SendClientMessageEx(playerid, COLOR_GREY, "The other person has disconnected.");
						}
						if(PlayerInfo[GetPVarInt(playerid, "RawOpiumOffer")][pRawOpium] < GetPVarInt(playerid, "RawOpiumCount"))	{
							SendClientMessageEx(playerid,COLOR_GREY, "That person does not have that number of raw opium anymore!");
							return 1;
						}
	                    GivePlayerCash(playerid, -GetPVarInt(playerid, "RawOpiumPrice"));
	                    GivePlayerCash(GetPVarInt(playerid, "RawOpiumOffer"), GetPVarInt(playerid, "RawOpiumPrice"));
						GetPlayerName(GetPVarInt(playerid, "RawOpiumOffer"), giveplayer, sizeof(giveplayer));
	                    format(szMessage, sizeof(szMessage), "* You bought %d milligrams of raw opium for $%d from %s.",GetPVarInt(playerid, "RawOpiumCount"),GetPVarInt(playerid, "RawOpiumPrice"),giveplayer);
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                    format(szMessage, sizeof(szMessage), "* %s has bought your %d milligrams of raw opium, $%d was added to your money.",sendername,GetPVarInt(playerid, "RawOpiumCount"),GetPVarInt(playerid, "RawOpiumPrice"));
	                    SendClientMessageEx(GetPVarInt(playerid, "RawOpiumOffer"), COLOR_LIGHTBLUE, szMessage);
	                    ExtortionTurfsWarsZone(GetPVarInt(playerid, "RawOpiumOffer"), 5, GetPVarInt(playerid, "RawOpiumPrice"));
	                    PlayerInfo[GetPVarInt(playerid, "RawOpiumOffer")][pRawOpium] -= GetPVarInt(playerid, "RawOpiumCount");
	                    PlayerInfo[playerid][pRawOpium] += GetPVarInt(playerid, "RawOpiumCount");

	                    format(szMessage, sizeof(szMessage), "%s (IP:%s) has bought (%d) grams of raw opium for $%s from %s (IP:%s)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), number_format(GetPVarInt(playerid, "RawOpiumPrice")),  GetPlayerNameEx(GetPVarInt(playerid, "RawOpiumOffer")), GetPlayerIpEx(GetPVarInt(playerid, "RawOpiumOffer")));
						Log("logs/pay.log", szMessage);

						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(GetPVarInt(playerid, "RawOpiumOffer"));

	                    DeletePVar(playerid, "RawOpiumOffer");
	                    DeletePVar(playerid, "RawOpiumPrice");
	                    DeletePVar(playerid, "RawOpiumCount");
                    	DeletePVar(playerid, "RawOpiumSeller_SQLId");
	                    return 1;
	  				}
	     		}
	      		else
				{
	            	SendClientMessageEx(playerid, COLOR_GREY, "You can't afford that raw opium!");
	                return 1;
	        	}
       		}
			else
			{
        		SendClientMessageEx(playerid, COLOR_GREY, "No-one offered you any raw opium!");
			}
 	    }
        else if(strcmp(params, "firework", true) == 0) {
        	if (GetPVarType(playerid, "FireworkOffer")) {
	            if(GetPlayerCash(playerid) > GetPVarInt(playerid, "FireworkPrice")) {
	            	if(IsPlayerConnected(GetPVarInt(playerid, "FireworkOffer"))) {
	            		if (GetPVarInt(playerid, "FireworkSeller_SQLId") != GetPlayerSQLId(GetPVarInt(playerid, "FireworkOffer")))
						{
			                return SendClientMessageEx(playerid, COLOR_GREY, "The other person has disconnected.");
						}
						if(PlayerInfo[GetPVarInt(playerid, "FireworkOffer")][pFirework] < GetPVarInt(playerid, "FireworkCount"))	{
							SendClientMessageEx(playerid,COLOR_GREY, "That person does not have that number of fireworks anymore!");
							return 1;
						}
	                    GivePlayerCash(playerid, -GetPVarInt(playerid, "FireworkPrice"));
	                    GivePlayerCash(GetPVarInt(playerid, "FireworkOffer"), GetPVarInt(playerid, "FireworkPrice"));
						GetPlayerName(GetPVarInt(playerid, "FireworkOffer"), giveplayer, sizeof(giveplayer));
	                    format(szMessage, sizeof(szMessage), "* You bought %d fireworks for $%d from %s.",GetPVarInt(playerid, "FireworkCount"),GetPVarInt(playerid, "FireworkPrice"),giveplayer);
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                    format(szMessage, sizeof(szMessage), "* %s has bought your %d fireworks, $%d was added to your money.",sendername,GetPVarInt(playerid, "FireworkCount"),GetPVarInt(playerid, "FireworkPrice"));
	                    SendClientMessageEx(GetPVarInt(playerid, "FireworkOffer"), COLOR_LIGHTBLUE, szMessage);
	                    ExtortionTurfsWarsZone(GetPVarInt(playerid, "FireworkOffer"), 5, GetPVarInt(playerid, "FireworkPrice"));
	                    PlayerInfo[GetPVarInt(playerid, "FireworkOffer")][pFirework] -= GetPVarInt(playerid, "FireworkCount");
	                    PlayerInfo[playerid][pFirework] += GetPVarInt(playerid, "FireworkCount");

						new ip[32], ipex[32];
						GetPlayerIp(playerid, ip, sizeof(ip));
						GetPlayerIp(GetPVarInt(playerid, "FireworkOffer"), ipex, sizeof(ipex));
						format(szMessage, sizeof(szMessage), "[FIREWORKS (%d)] %s (SQL ID: %d) (IP:%s) has paid $%d to %s (SQL ID: %d) (IP:%s)", GetPVarInt(playerid, "FireworkCount"), GetPlayerNameEx(playerid),GetPlayerSQLId(playerid), ip, GetPVarInt(playerid, "FireworkPrice"), GetPlayerNameEx(GetPVarInt(playerid, "FireworkOffer")),GetPlayerSQLId(GetPVarInt(playerid, "FireworkOffer")), ipex);
						Log("logs/sell.log", szMessage);
							
						OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(GetPVarInt(playerid, "FireworkOffer"));

	                    DeletePVar(playerid, "FireworkOffer");
	                    DeletePVar(playerid, "FireworkPrice");
	                    DeletePVar(playerid, "FireworkCount");
                    	DeletePVar(playerid, "FireworkSeller_SQLId");
	                    return 1;
	  				}
	     		}
	      		else
				{
	            	SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford that firework!");
	                return 1;
	        	}
       		}
			else
			{
        		SendClientMessageEx(playerid, COLOR_GREY, "No-one offered you any fireworks!");
			}
 	    }
        else if(strcmp(params,"pot",true) == 0) {
            if(PotOffer[playerid] != INVALID_PLAYER_ID) {
                if(GetPlayerCash(playerid) > PotPrice[playerid]) {
                    if(PlayerInfo[playerid][pPot] < 25) {
                        if(IsPlayerConnected(PotOffer[playerid])) {
							if (GetPVarInt(playerid, "PotSeller_SQLId") != GetPlayerSQLId(PotOffer[playerid]))
							{
				                return SendClientMessageEx(playerid, COLOR_GREY, "The other person has disconnected.");
							}
							if(PlayerInfo[PotOffer[playerid]][pPot] < PotGram[playerid])
							{
						    	SendClientMessageEx(playerid,COLOR_GREY, "That person does not have that amount of pot anymore!");
						    	return 1;
							}
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(PotOffer[playerid], ipex, sizeof(ipex));
                            format(szMessage, sizeof(szMessage), "[POT (%d GRAMS)] %s (SQL ID: %d) (IP:%s) has paid $%d to %s (SQL ID: %d) (IP:%s)", PotGram[playerid], GetPlayerNameEx(playerid),GetPlayerSQLId(playerid), ip, PotPrice[playerid], GetPlayerNameEx(PotOffer[playerid]),GetPlayerSQLId(PotOffer[playerid]), ipex);
                            Log("logs/sell.log", szMessage);


                            GetPlayerName(PotOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(szMessage, sizeof(szMessage), "* You bought %d gram for $%d from Drug Dealer %s.",PotGram[playerid],PotPrice[playerid],giveplayer);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                            format(szMessage, sizeof(szMessage), "* %s has bought your %d gram, the $%d was added to your money.",sendername,PotGram[playerid],PotPrice[playerid]);
                            SendClientMessageEx(PotOffer[playerid], COLOR_LIGHTBLUE, szMessage);
                            ExtortionTurfsWarsZone(PotOffer[playerid], 1, PotPrice[playerid]);
                            PlayerInfo[PotOffer[playerid]][pCash] += PotPrice[playerid];

							if(PlayerInfo[PotOffer[playerid]][pDoubleEXP] > 0)
							{
								format(szMessage, sizeof(szMessage), "You have gained 2 drug dealer skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[PotOffer[playerid]][pDoubleEXP]);
								SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, szMessage);
   								PlayerInfo[PotOffer[playerid]][pDrugsSkill] += 2;
							}
							else
							{
  								PlayerInfo[PotOffer[playerid]][pDrugsSkill] += 1;
							}

                            GivePlayerCash(playerid, -PotPrice[playerid]);
                            PlayerInfo[playerid][pPot] += PotGram[playerid];
                            PlayerInfo[PotOffer[playerid]][pPot] -= PotGram[playerid];

	                    	OnPlayerStatsUpdate(playerid);
							OnPlayerStatsUpdate(PotOffer[playerid]);

                            if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 50)
                            { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 100)
                            { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 200)
                            { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 400)
                            { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }
                            PotOffer[playerid] = INVALID_PLAYER_ID;
                            PotPrice[playerid] = 0;
                            PotGram[playerid] = 0;
	                    	DeletePVar(playerid, "PotSeller_SQLId");
                            return 1;
                        }
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You are fully loaded with Drugs, use them first!");
                        return 1;
                    }
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford those Pot!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you any Pot!");
                return 1;
            }
        }
        else if(strcmp(params,"crack",true) == 0) {
            if(CrackOffer[playerid] != INVALID_PLAYER_ID) {
                if(GetPlayerCash(playerid) > CrackPrice[playerid]) {
                    if(PlayerInfo[playerid][pCrack] < 25) {
                        if(IsPlayerConnected(CrackOffer[playerid])) {
							if (GetPVarInt(playerid, "CrackSeller_SQLId") != GetPlayerSQLId(CrackOffer[playerid]))
							{
				                return SendClientMessageEx(playerid, COLOR_GREY, "The other person has disconnected.");
							}
 							if(PlayerInfo[CrackOffer[playerid]][pCrack] < CrackGram[playerid])
							{
						    	SendClientMessageEx(playerid,COLOR_GREY, "That person does not have that amount of crack anymore!");
						    	return 1;
							}
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(CrackOffer[playerid], ipex, sizeof(ipex));
                            format(szMessage, sizeof(szMessage), "[CRACK DEAL (%d GRAMS)] %s (SQL ID: %d) (IP:%s) has paid $%d to %s (SQL ID: %d) (IP:%s)", CrackGram[playerid], GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), ip, CrackPrice[playerid], GetPlayerNameEx(CrackOffer[playerid]),GetPlayerSQLId(CrackOffer[playerid]), ipex);
                            Log("logs/sell.log", szMessage);

                            GivePlayerCash(playerid, -CrackPrice[playerid]);
                            GivePlayerCash(CrackOffer[playerid], CrackPrice[playerid]);
                            GetPlayerName(CrackOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(szMessage, sizeof(szMessage), "* You bought %d gram for $%d from Drug Dealer %s.",CrackGram[playerid],CrackPrice[playerid],giveplayer);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                            format(szMessage, sizeof(szMessage), "* %s has bought your %d gram, the $%d was added to your money.",sendername,CrackGram[playerid],CrackPrice[playerid]);
                            SendClientMessageEx(CrackOffer[playerid], COLOR_LIGHTBLUE, szMessage);
                            ExtortionTurfsWarsZone(CrackOffer[playerid], 1, CrackPrice[playerid]);
//SetPVarInt(CrackOffer[playerid], "Cash", GetPVarInt(CrackOffer[playerid], "Cash")+CrackOffer[playerid]);

							if(PlayerInfo[CrackOffer[playerid]][pDoubleEXP] > 0)
							{
								format(szMessage, sizeof(szMessage), "You have gained 2 drug dealer skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[CrackOffer[playerid]][pDoubleEXP]);
								SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, szMessage);
   								PlayerInfo[CrackOffer[playerid]][pDrugsSkill] += 2;
							}
							else
							{
  								PlayerInfo[CrackOffer[playerid]][pDrugsSkill] += 1;
							}

                            PlayerInfo[playerid][pCrack] += CrackGram[playerid];
                            PlayerInfo[CrackOffer[playerid]][pCrack] -= CrackGram[playerid];

	                    	OnPlayerStatsUpdate(playerid);
							OnPlayerStatsUpdate(CrackOffer[playerid]);

                            if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 50)
                            { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 100)
                            { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 200)
                            { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 400)
                            { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }
							CrackOffer[playerid] = INVALID_PLAYER_ID;
                            CrackPrice[playerid] = 0;
                            CrackGram[playerid] = 0;
	                    	DeletePVar(playerid, "CrackSeller_SQLId");
                            return 1;
                        }
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You are fully loaded with Crack, use them first!");
                        return 1;
                    }
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford that Crack!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you any Crack!");
                return 1;
            }
        }
        else if(strcmp(params,"weapon",true) == 0) {
            if(GunOffer[playerid] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(GunOffer[playerid])) {
					if (GetPVarInt(playerid, "WeaponSeller_SQLId") != GetPlayerSQLId(GunOffer[playerid]))
					{
		                return SendClientMessageEx(playerid, COLOR_GREY, "The other person has disconnected.");
					}
                    if (ProxDetectorS(5.0, playerid, GunOffer[playerid])) {
                        if(PlayerInfo[playerid][pHospital] > 0) {
                            SendClientMessageEx(playerid, COLOR_GREY, "You can't spawn a weapon whilst in Hospital.");
                            return 1;
                        }
					    if(GetPVarInt(playerid, "IsInArena") >= 0) {
					        SendClientMessageEx(playerid,COLOR_GREY,"   You cannot do this while being in a arena!");
					        return 1;
					    }
                        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Please exit the vehicle, before using this command.");
                        new weaponname[32];
                        GetWeaponName(GunId[playerid], weaponname, sizeof(weaponname));
                        format(szMessage, sizeof(szMessage), "   You have given %s, a %s.", GetPlayerNameEx(playerid),weaponname);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        SendClientMessageEx(GunOffer[playerid], COLOR_GRAD1, szMessage);
                        format(szMessage, sizeof(szMessage), "   You have recieved a %s from %s.", weaponname, GetPlayerNameEx(GunOffer[playerid]));
                        SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(szMessage, sizeof(szMessage), "* %s created a Gun from Materials, and hands it to %s.", GetPlayerNameEx(GunOffer[playerid]), GetPlayerNameEx(playerid));
                        ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ExtortionTurfsWarsZone(GunOffer[playerid], 3, 1000);
                        GivePlayerValidWeapon(playerid,GunId[playerid],50000);
                        new ip[32], ipex[32];
                        GetPlayerIp(playerid, ip, sizeof(ip));
                        GetPlayerIp(GunOffer[playerid], ipex, sizeof(ipex));
                        format(szMessage, sizeof(szMessage), "[WEAPON DEAL] %s(IP:%s) has bought a %s from %s(IP:%s)", GetPlayerNameEx(playerid), ip, weaponname, GetPlayerNameEx(GunOffer[playerid]), ipex);
                        Log("logs/sell.log", szMessage);
                        PlayerInfo[GunOffer[playerid]][pMats] -= GunMats[playerid];

                    	OnPlayerStatsUpdate(playerid);
						OnPlayerStatsUpdate(GunOffer[playerid]);

						StorageInfo[GunOffer[playerid]][GunStorageID[playerid]][sMats] -= GunMats[playerid];
                        if(GunId[playerid] > 15)
						{
   							if(PlayerInfo[GunOffer[playerid]][pDonateRank] == 2 || PlayerInfo[GunOffer[playerid]][pDonateRank] == 3)
			    			{
			        			PlayerInfo[GunOffer[playerid]][pArmsSkill] += 2;
			    			}
			    			else if(PlayerInfo[GunOffer[playerid]][pDoubleEXP] > 0 && PlayerInfo[GunOffer[playerid]][pDonateRank] < 2)
							{
								format(szMessage, sizeof(szMessage), "You have gained 2 arms skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[GunOffer[playerid]][pDoubleEXP]);
								SendClientMessageEx(GunOffer[playerid], COLOR_YELLOW, szMessage);
   								PlayerInfo[GunOffer[playerid]][pArmsSkill] += 2;
							}
			    			else
			    			{
                				PlayerInfo[GunOffer[playerid]][pArmsSkill]++;
                			}
                        }
                        if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 50)
                        { SendClientMessageEx(GunOffer[playerid], COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 2, more weapons are available to sell."); }
                        else if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 100)
                        { SendClientMessageEx(GunOffer[playerid], COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 3, more weapons are available to sell."); }
                        else if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 200)
                        { SendClientMessageEx(GunOffer[playerid], COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 4, more weapons are available to sell."); }
                        else if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 400)
                        { SendClientMessageEx(GunOffer[playerid], COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 5, more weapons are available to sell."); }
                        GunOffer[playerid] = INVALID_PLAYER_ID;
						GunStorageID[playerid] = -1;
                        GunId[playerid] = 0;
                        GunMats[playerid] = 0;
                    	DeletePVar(playerid, "WeaponSeller_SQLId");
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be the near the person that is selling you the weapon !");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No one offered you a weapon!");
                return 1;
            }
        }
        else if(strcmp(params,"craft",true) == 0) {
            if(CraftOffer[playerid] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(CraftOffer[playerid])) {
                    if (ProxDetectorS(5.0, playerid, CraftOffer[playerid])) {
                        if(PlayerInfo[playerid][pHospital] > 0) {
                            SendClientMessageEx(playerid, COLOR_GREY, "You can't spawn a weapon whilst in Hospital.");
                            return 1;
                        }
                        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Please exit the vehicle, before using this command.");
						if(CraftId[playerid] == 17)
						{
							if(PlayerInfo[playerid][pPhousekey] == INVALID_HOUSE_ID && PlayerInfo[playerid][pPhousekey2] == INVALID_HOUSE_ID && PlayerInfo[playerid][pPhousekey3] == INVALID_HOUSE_ID)
							{
								SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house!");
								SendClientMessageEx(CraftOffer[playerid], COLOR_GREY, "The buyer doesn't own a house!");
								return 1;
							}
							if((IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey]][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey]][hIntIW]) &&
							(IsPlayerInRangeOfPoint(CraftOffer[playerid], 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorZ]) && GetPlayerVirtualWorld(CraftOffer[playerid]) == HouseInfo[PlayerInfo[playerid][pPhousekey]][hIntVW] && GetPlayerInterior(CraftOffer[playerid]) == HouseInfo[PlayerInfo[playerid][pPhousekey]][hIntIW]))
							{
							}
							else if((IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey2]][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey2]][hIntIW]) &&
							(IsPlayerInRangeOfPoint(CraftOffer[playerid], 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorZ]) && GetPlayerVirtualWorld(CraftOffer[playerid]) == HouseInfo[PlayerInfo[playerid][pPhousekey2]][hIntVW] && GetPlayerInterior(CraftOffer[playerid]) == HouseInfo[PlayerInfo[playerid][pPhousekey2]][hIntIW]))
							{
							}
							else if((IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey3]][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey3]][hIntIW]) &&
							(IsPlayerInRangeOfPoint(CraftOffer[playerid], 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorZ]) && GetPlayerVirtualWorld(CraftOffer[playerid]) == HouseInfo[PlayerInfo[playerid][pPhousekey3]][hIntVW] && GetPlayerInterior(CraftOffer[playerid]) == HouseInfo[PlayerInfo[playerid][pPhousekey3]][hIntIW]))
							{
							}	
							else
							{
								SendClientMessageEx(playerid, COLOR_GREY, "The craftsman is not inside of your house!");
								SendClientMessageEx(CraftOffer[playerid], COLOR_GREY, "You are not inside of the buyer's house!");
								return 1;
							}
						}
                        new weaponname[50];
                        format(weaponname, 50, "%s", CraftName[playerid]);
                        switch(CraftId[playerid]) {
                            case 1:
                            {
                                PlayerInfo[playerid][pScrewdriver]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/sellgun");
                            }
                            case 2:
                            {
                                PlayerInfo[playerid][pSmslog]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/smslog");
                            }
                            case 3:
                            {
                                PlayerInfo[playerid][pWristwatch]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/wristwatch");
                            }
                            case 4:
                            {
                                PlayerInfo[playerid][pSurveillance]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/(p)lace(c)amera /(s)ee(c)amera /(d)estroy(c)amera");
                            }
                            case 5:
                            {
                                PlayerInfo[playerid][pTire]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/repair");
                            }
                            case 6:
                            {
                                PlayerInfo[playerid][pLock]=1;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/lock");
                            }
                            case 7:
                            {
                                PlayerInfo[playerid][pFirstaid]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/firstaid");
                            }
                            case 8:
                            {
                                GivePlayerValidWeapon(playerid, 43, 50);
                            }
                            case 9:
                            {
                                PlayerInfo[playerid][pRccam]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/rccam");
                            }
                            case 10:
                            {
                                PlayerInfo[playerid][pReceiver]++;
                                SetPVarInt(playerid, "pReceiverMLeft", 4);
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You will receive the next four department radio messages.");
                            }
                            case 11:
                            {
                                PlayerInfo[playerid][pGPS]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/gps");
                            }
                            case 12:
                            {
                                PlayerInfo[playerid][pSweep]++;
                                PlayerInfo[playerid][pSweepLeft] = 3;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/sweep");
                            }
                            case 13:
                            {
                                GivePlayerValidWeapon(playerid, 46, 99999);
                            }
							case 14:
							{

								if(PlayerInfo[playerid][pTreasureSkill] >=0 && PlayerInfo[playerid][pTreasureSkill] <= 24) PlayerInfo[playerid][pMetalDetector] += 25;
								else if(PlayerInfo[playerid][pTreasureSkill] >=25 && PlayerInfo[playerid][pTreasureSkill] <= 149) PlayerInfo[playerid][pMetalDetector] += 50;
								else if(PlayerInfo[playerid][pTreasureSkill] >=150 && PlayerInfo[playerid][pTreasureSkill] <= 299) PlayerInfo[playerid][pMetalDetector] += 75;
								else if(PlayerInfo[playerid][pTreasureSkill] >=300 && PlayerInfo[playerid][pTreasureSkill] <= 599) PlayerInfo[playerid][pMetalDetector] += 100;
								else if(PlayerInfo[playerid][pTreasureSkill] >=600) PlayerInfo[playerid][pMetalDetector] += 125;
								SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/search");
							}
                            case 15:
                            {
                                PlayerInfo[playerid][pMailbox]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Type /placemailbox where you want mailbox to be at.");
                            }
							case 16:
							{
								if(PlayerInfo[playerid][pSyringes] < 3) {
									PlayerInfo[playerid][pSyringes]++;
									SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/useheroin");
								}
								else
								{
						    		SendClientMessageEx(playerid, COLOR_GREY, "You can't hold anymore syringes.");
						    		return 1;
								}
							}
							case 17:
							{
								if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorZ]) && IsPlayerInRangeOfPoint(CraftOffer[playerid], 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorZ]))
								{
									GetPlayerPos(playerid, HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetZ]);
									if(IsValidDynamic3DTextLabel(HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetTextID])) DestroyDynamic3DTextLabel(Text3D:HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetTextID]);
									HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetTextID] = CreateDynamic3DTextLabel("Closet\n/closet to use", 0xFFFFFF88, HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetZ]+0.5,10.0, .testlos = 1, .worldid = HouseInfo[PlayerInfo[playerid][pPhousekey]][hIntVW], .interiorid = HouseInfo[PlayerInfo[playerid][pPhousekey]][hIntIW], .streamdistance = 10.0);
									SaveHouse(PlayerInfo[playerid][pPhousekey]);
									SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/closet(add/remove)");
								}
								else if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorZ]) && IsPlayerInRangeOfPoint(CraftOffer[playerid], 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorZ]))
								{
									GetPlayerPos(playerid, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetZ]);
									if(IsValidDynamic3DTextLabel(HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetTextID])) DestroyDynamic3DTextLabel(Text3D:HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetTextID]);
									HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetTextID] = CreateDynamic3DTextLabel("Closet\n/closet to use", 0xFFFFFF88, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetZ]+0.5,10.0, .testlos = 1, .worldid = HouseInfo[PlayerInfo[playerid][pPhousekey2]][hIntVW], .interiorid = HouseInfo[PlayerInfo[playerid][pPhousekey2]][hIntIW], .streamdistance = 10.0);
									SaveHouse(PlayerInfo[playerid][pPhousekey2]);
									SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/closet(add/remove)");
								}
								else if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorZ]) && IsPlayerInRangeOfPoint(CraftOffer[playerid], 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorZ]))
								{
									GetPlayerPos(playerid, HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetZ]);
									if(IsValidDynamic3DTextLabel(HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetTextID])) DestroyDynamic3DTextLabel(Text3D:HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetTextID]);
									HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetTextID] = CreateDynamic3DTextLabel("Closet\n/closet to use", 0xFFFFFF88, HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetZ]+0.5,10.0, .testlos = 1, .worldid = HouseInfo[PlayerInfo[playerid][pPhousekey3]][hIntVW], .interiorid = HouseInfo[PlayerInfo[playerid][pPhousekey3]][hIntIW], .streamdistance = 10.0);
									SaveHouse(PlayerInfo[playerid][pPhousekey3]);
									SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/closet(add/remove)");
								}		
							}
							case 18:
							{
								PlayerInfo[playerid][pToolBox] += 25;
								SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Type /pickveh(icle) in any car to attempt to lock pick it.");
							}
							case 19:
							{
								PlayerInfo[playerid][pCrowBar] += 1;
								SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Type /cranktrunk in any car that you already lock picked to attempt to open the trunk.");
							}
                        }
                        format(szMessage, sizeof(szMessage), "   You have given %s, a %s.", GetPlayerNameEx(playerid),weaponname);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        SendClientMessageEx(CraftOffer[playerid], COLOR_GRAD1, szMessage);
                        format(szMessage, sizeof(szMessage), "   You have recieved a %s from %s.", weaponname, GetPlayerNameEx(CraftOffer[playerid]));
                        SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(szMessage, sizeof(szMessage), "* %s created something from Materials, and hands it to %s.", GetPlayerNameEx(CraftOffer[playerid]), GetPlayerNameEx(playerid));
                        ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        new ip[32], ipex[32];
                        GetPlayerIp(playerid, ip, sizeof(ip));
                        GetPlayerIp(CraftOffer[playerid], ipex, sizeof(ipex));
                        format(szMessage, sizeof(szMessage), "[CRAFTSMAN DEAL] %s (IP: %s) has bought a %s from %s (IP: %s)", GetPlayerNameEx(playerid), ip, weaponname, GetPlayerNameEx(CraftOffer[playerid]), ipex);
                        Log("logs/sell.log", szMessage);
                        PlayerInfo[CraftOffer[playerid]][pMats] -= CraftMats[playerid];
                        PlayerInfo[CraftOffer[playerid]][pArmsSkill]++;
                        CraftOffer[playerid] = INVALID_PLAYER_ID;
                        CraftId[playerid] = 0;
                        CraftMats[playerid] = 0;
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be the near the person that is selling you the weapon !");
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you a Weapon!");
                return 1;
            }
        }
        else if(strcmp(params,"contract",true) == 0) {
            if(HitOffer[playerid] != INVALID_PLAYER_ID) {
                if(HitToGet[playerid] != INVALID_PLAYER_ID) {
                    if(IsPlayerConnected(HitToGet[playerid])) {
                        format(szMessage, sizeof(szMessage), "* %s has accepted the contract to kill %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(HitToGet[playerid]));
                        SendClientMessageEx(HitOffer[playerid], COLOR_LIGHTBLUE, szMessage);
                        format(szMessage, sizeof(szMessage), "* You have accepted the contract to kill %s, you will recieve $%d when completed.", GetPlayerNameEx(HitToGet[playerid]), (PlayerInfo[HitToGet[playerid]][pHeadValue] / 4) * 2);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                        format(szMessage, sizeof(szMessage), "%s has been assigned to the contract on %s, for $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(HitToGet[playerid]),  (PlayerInfo[HitToGet[playerid]][pHeadValue] / 4) * 2);
                        SendGroupMessage(2, COLOR_YELLOW, szMessage);
                        GoChase[playerid] = HitToGet[playerid];
                        GetChased[HitToGet[playerid]] = playerid;
                        GotHit[HitToGet[playerid]] = 1;
                        HitToGet[playerid] = INVALID_PLAYER_ID;
                        HitOffer[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    }
                    else {
                        HitToGet[playerid] = INVALID_PLAYER_ID;
                        HitOffer[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you a contract!");
                return 1;
            }
        }
        else if(strcmp(params,"sex",true) == 0) {
            if(SexOffer[playerid] != INVALID_PLAYER_ID) {
                if(GetPlayerCash(playerid) > SexPrice[playerid]) {
                    if (IsPlayerConnected(SexOffer[playerid])) {
                        new Car = GetPlayerVehicleID(playerid);
                        if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(SexOffer[playerid], Car)) {
                            GetPlayerName(SexOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(szMessage, sizeof(szMessage), "* You had sex with Whore %s, for $%s.", giveplayer, number_format(SexPrice[playerid]));
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                            format(szMessage, sizeof(szMessage), "* %s had sex with you. You have earned $%d.", sendername, SexPrice[playerid]);
                            SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, szMessage);

                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(SexOffer[playerid], ipex, sizeof(ipex));
                            format(szMessage, sizeof(szMessage), "[SEX] %s (IP:%s) had sex with %s (IP:%s) for %d.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(SexOffer[playerid]), ipex, SexPrice[playerid]);
                            Log("logs/sell.log", szMessage);

                            if(SexPrice[playerid] >= 25000 && (PlayerInfo[SexOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3)) {
                                format(szMessage, sizeof(szMessage), "%s (IP:%s) had sex with %s (IP:%s) for $%s in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(SexOffer[playerid]), ipex, number_format(SexPrice[playerid]));
                                Log("logs/sell.log", szMessage);
                                ABroadCast(COLOR_YELLOW, szMessage, 2);
                            }

                            ExtortionTurfsWarsZone(SexOffer[playerid], 4, SexPrice[playerid]);
                            GivePlayerCash(SexOffer[playerid], SexPrice[playerid]);
                            GivePlayerCash(playerid, -SexPrice[playerid]);

  							if(PlayerInfo[SexOffer[playerid]][pDoubleEXP] > 0)
							{
								format(szMessage, sizeof(szMessage), "You have gained 2 whore skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[SexOffer[playerid]][pDoubleEXP]);
								SendClientMessageEx(SexOffer[playerid], COLOR_YELLOW, szMessage);
   								PlayerInfo[SexOffer[playerid]][pSexSkill] += 2;
							}
							else
							{
  								PlayerInfo[SexOffer[playerid]][pSexSkill] += 1;
							}

                            if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 50) {
                                SendClientMessageEx(SexOffer[playerid], COLOR_YELLOW, "* Your Sex Skill is now Level 2, you offer better Sex (health) and less chance on STI.");
                            }
                            else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 100) {
                                SendClientMessageEx(SexOffer[playerid], COLOR_YELLOW, "* Your Sex Skill is now Level 3, you offer better Sex (health) and less chance on STI.");
                            }
                            else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 200) {
                                SendClientMessageEx(SexOffer[playerid], COLOR_YELLOW, "* Your Sex Skill is now Level 4, you offer better Sex (health) and less chance on STI.");
                            }
                            else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 400) {
                                SendClientMessageEx(SexOffer[playerid], COLOR_YELLOW, "* Your Sex Skill is now Level 5, you offer better Sex (health) and less chance on STI.");
                            }

                            if(!GetPVarType(playerid, "STD")) {
                                if(Condom[playerid] < 1) {
                                    new Float:health;
                                    new level = PlayerInfo[SexOffer[playerid]][pSexSkill];
                                    if(level >= 0 && level <= 50) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 90) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 10.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD1));
                                        SetPVarInt(playerid, "STD", STD1[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD1[rand]);
                                        if(STD1[rand] == 0) {
                                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 10 Health + no STI while having Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STI while having Sex.");
                                        }
                                        else if(STD1[rand] == 1) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 10 Health and Chlamydia because of unsafe sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You received Chlamydia because of unsafe sex."); }
                                        else if(STD1[rand] == 2) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 10 Health and Gonorrhea because of unsafe sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You received Gonorrhea because of unsafe sex."); }
                                        else if(STD1[rand] == 3) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 10 Health and Syphilis because of unsafe sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You received Syphilis because of unsafe sex."); }
                                    }
                                    else if(level >= 51 && level <= 100) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 80) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 20.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD2));
                                        SetPVarInt(playerid, "STD", STD2[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD2[rand]);
                                        if(STD2[rand] == 0) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 20 Health + no STD while having Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STI while having Sex."); }
                                        else if(STD2[rand] == 1) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 20 Health and Chlamydia because of unsafe sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You received Chlamydia because of unsafe sex."); }
                                        else if(STD2[rand] == 2) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 20 Health and Gonorrhea because of unsafe sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You received Gonorrhea because of unsafe sex."); }
                                        else if(STD2[rand] == 3) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 20 Health and Syphilis because of unsafe sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You received Syphilis because of unsafe sex."); }
                                    }
                                    else if(level >= 101 && level <= 200) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 70) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 30.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD3));
                                        SetPVarInt(playerid, "STD", STD3[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD3[rand]);
                                        if(STD3[rand] == 0) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 30 Health + no STI while having Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STI while having Sex."); }
                                        else if(STD3[rand] == 1) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 30 Health and Chlamydia because of unsafe sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You received Chlamydia because of unsafe sex."); }
                                        else if(STD3[rand] == 2) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 30 Health and Gonorrhea because of unsafe sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You received Gonorrhea because of unsafe sex."); }
                                        else if(STD3[rand] == 3) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 30 Health and Syphilis because of unsafe sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You received Syphilis because of unsafe sex."); }
                                    }
                                    else if(level >= 201 && level <= 400) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 60) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 40.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD4));
                                        SetPVarInt(playerid, "STD", STD4[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD4[rand]);
                                        if(STD4[rand] == 0) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 40 Health + no STI while having Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STI while having Sex."); }
                                        else if(STD4[rand] == 1) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 40 Health and Chlamydia because of unsafe sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You received Chlamydia because of unsafe sex."); }
                                        else if(STD4[rand] == 2) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 40 Health and Gonorrhea because of unsafe sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You received Gonorrhea because of unsafe sex."); }
                                        else if(STD4[rand] == 3) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 40 Health and Syphilis because of unsafe sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You received Syphilis because of unsafe sex."); }
                                    }
                                    else if(level >= 401) {
                                        GetPlayerHealth(playerid, health);
                                        if(health > 50) {
                                            SetPlayerHealth(playerid, 100);
                                        }
                                        else {
                                            SetPlayerHealth(playerid, health + 50.0);
                                        }
                                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Your sex skill level was high enough to give them a lot of health and no STD.");
                                        SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* The whore's sex skill level was high enough to give you a lot of health and no STD.");
                                    }
                                }
                                else {
                                    SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* The person used a Condom.");
                                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You used a Condom.");
                                    Condom[playerid] --;
                                }
                            }
                            else {
                                SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* That person was already infected with a STI, can't get another one.");
                                return 1;
                            }
                            SexOffer[playerid] = INVALID_PLAYER_ID;
                            return 1;
                        }
                        else {
                            SendClientMessageEx(playerid, COLOR_GREY, "   You or the Whore are not both in a Car!");
                            return 1;
                        }
                    }                             //Connected or not
                    return 1;
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the Sex!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No sex has been offered!");
                return 1;
            }
        }
        else if(strcmp(params,"repair",true) == 0) {
            if(RepairOffer[playerid] != INVALID_PLAYER_ID) {
                if(GetPlayerCash(playerid) > RepairPrice[playerid]) {
                    if(IsPlayerInAnyVehicle(playerid)) {
                        if(IsPlayerConnected(RepairOffer[playerid])) {
                            RepairCar[playerid] = GetPlayerVehicleID(playerid);
                            RepairVehicle(RepairCar[playerid]);
							Vehicle_Armor(RepairCar[playerid]);
                            PlayerInfo[RepairOffer[playerid]][pTire]--;

                            GivePlayerCash(RepairOffer[playerid], RepairPrice[playerid]);
                            GivePlayerCash(playerid, -RepairPrice[playerid]);
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(RepairOffer[playerid], ipex, sizeof(ipex));
                            format(szMessage, sizeof(szMessage), "%s(IP:%s) has repaired the vehicle from %s(IP:%s) for $%d", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RepairOffer[playerid]), ipex, RepairPrice[playerid]);
                            Log("logs/sell.log", szMessage);
                            format(szMessage, sizeof(szMessage), "* %s has repaired %s's vehicle.", GetPlayerNameEx(RepairOffer[playerid]), GetPlayerNameEx(playerid));
                            ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            format(szMessage, sizeof(szMessage), "* You repaired your car for $%d by Car Mechanic %s.",RepairPrice[playerid],GetPlayerNameEx(RepairOffer[playerid]));
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

                            if(RepairPrice[playerid] >= 25000 && (PlayerInfo[RepairOffer[playerid]][pLevel] <= 3 || PlayerInfo[RepairOffer[playerid]][pLevel] <= 3)) {
                                format(szMessage, sizeof(szMessage), "%s (IP:%s) has repaired %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RepairOffer[playerid]), ipex, RepairPrice[playerid]);
                                Log("logs/sell.log", szMessage);
                                ABroadCast(COLOR_YELLOW, szMessage, 2);
                            }

                            format(szMessage, sizeof(szMessage), "* You fixed %s's car, the $%d has been added to your money on hand!",GetPlayerNameEx(playerid),RepairPrice[playerid]);
                            SendClientMessageEx(RepairOffer[playerid], COLOR_LIGHTBLUE, szMessage);

   							if(PlayerInfo[RepairOffer[playerid]][pDoubleEXP] > 0)
							{
								format(szMessage, sizeof(szMessage), "You have gained 2 mechanic skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[RepairOffer[playerid]][pDoubleEXP]);
								SendClientMessageEx(RepairOffer[playerid], COLOR_YELLOW, szMessage);
   								PlayerInfo[RepairOffer[playerid]][pMechSkill] += 2;
							}
							else
							{
								PlayerInfo[RepairOffer[playerid]][pMechSkill] += 1;
							}

                            RepairOffer[playerid] = INVALID_PLAYER_ID;
                            RepairPrice[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    return 1;
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the Repair!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you to Repair your Car!");
                return 1;
            }
        }
        else if(strcmp(params,"refill",true) == 0) {
            if(RefillOffer[playerid] != INVALID_PLAYER_ID) {
                if(GetPlayerCash(playerid) > RefillPrice[playerid]) {
                    if(IsPlayerInAnyVehicle(playerid)) {
                        if(IsPlayerConnected(RefillOffer[playerid])) {

	      					if(!ProxDetectorS(8.0, RefillOffer[playerid], playerid))
		  					{
								return SendClientMessageEx(playerid, COLOR_GREY, "You are not near the mechanic.");
							}
                            new Float:fueltogive;
                            new level = PlayerInfo[RefillOffer[playerid]][pMechSkill];
                            if(level >= 0 && level < 50) { fueltogive = 2.0; }
                            else if(level >= 50 && level < 100) { fueltogive = 4.0; }
                            else if(level >= 100 && level < 200) { fueltogive = 6.0; }
                            else if(level >= 200 && level < 400) { fueltogive = 8.0; }
                            else if(level >= 400) { fueltogive = 10.0; }
                            GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            new vehicleid = GetPlayerVehicleID(playerid);
                            VehicleFuel[vehicleid] = floatadd(VehicleFuel[vehicleid], fueltogive);
                            if(VehicleFuel[vehicleid] > 100.0) VehicleFuel[vehicleid] = 100.0;
                            for(new vehicleslot = 0; vehicleslot < MAX_PLAYERVEHICLES; vehicleslot++)
							{
								if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][vehicleslot][pvId]))
								{
									if(vehicleslot != -1) {
										format(szMessage, sizeof(szMessage), "UPDATE `vehicles` SET `pvFuel` = %0.5f WHERE `id` = '%d'", VehicleFuel[vehicleid], PlayerVehicleInfo[playerid][vehicleslot][pvSlotId]);
										mysql_function_query(MainPipeline, szMessage, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
									}
								}
							}
                            GivePlayerCash(RefillOffer[playerid], RefillPrice[playerid]);
                            GivePlayerCash(playerid, -RefillPrice[playerid]);
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(RefillOffer[playerid], ipex, sizeof(ipex));
                            format(szMessage, sizeof(szMessage), "%s(IP:%s) has refilled the vehicle from %s(IP:%s) for $%d", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RefillOffer[playerid]), ipex, RefillPrice[playerid]);
							Log("logs/sell.log", szMessage);
                            format(szMessage, sizeof(szMessage), "* %s has refilled %s's vehicle.", giveplayer, GetPlayerNameEx(playerid));
                            ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            format(szMessage, sizeof(szMessage), "* You have added %.2f fuel to your car for $%d by Car Mechanic %s.",fueltogive,RefillPrice[playerid],giveplayer);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                            format(szMessage, sizeof(szMessage), "* You added %.2f fuel to %s's car, the $%d has been added to your money on hand!",fueltogive,sendername,RefillPrice[playerid]);
                            SendClientMessageEx(RefillOffer[playerid], COLOR_LIGHTBLUE, szMessage);

 							if(PlayerInfo[RefillOffer[playerid]][pDoubleEXP] > 0)
							{
								format(szMessage, sizeof(szMessage), "You have gained 2 mechanic skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[RefillOffer[playerid]][pDoubleEXP]);
								SendClientMessageEx(RefillOffer[playerid], COLOR_YELLOW, szMessage);
   								PlayerInfo[RefillOffer[playerid]][pMechSkill] += 2;
							}
							else
							{
								PlayerInfo[RefillOffer[playerid]][pMechSkill] += 1;
							}

                            if(RefillPrice[playerid] >= 30000 && (PlayerInfo[playerid][pLevel] <= 3 || PlayerInfo[RefillOffer[playerid]][pLevel] <= 3)) {
                                format(szMessage, sizeof(szMessage), "%s (IP:%s) has refueled %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RefillOffer[playerid]), ipex, RefillPrice[playerid]);
                                Log("logs/sell.log", szMessage);
                                ABroadCast(COLOR_YELLOW, szMessage, 2);
                            }

                            RefillOffer[playerid] = INVALID_PLAYER_ID;
                            RefillPrice[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    return 1;
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the refill!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you to refill your Car!");
                return 1;
            }
        }
		else if(strcmp(params, "backpack", true) == 0) {
			if(GetPVarType(playerid, "sellbackpack") && IsPlayerConnected(GetPVarInt(playerid, "sellbackpack")))
			{
				if(GetPlayerCash(playerid) > GetPVarInt(playerid, "sellbackpackprice")) 
				{
					if(PlayerInfo[GetPVarInt(playerid, "sellbackpack")][pBackpack] < 1)	{
						SendClientMessageEx(playerid,COLOR_GREY, "That person does not have a backpack anymore!");
						return 1;
					}
					new btype[8];
					if(PlayerHoldingObject[playerid][10] != 0 || IsPlayerAttachedObjectSlotUsed(playerid, 9)) 
						RemovePlayerAttachedObject(playerid, 9), PlayerHoldingObject[playerid][10] = 0;
					switch(PlayerInfo[GetPVarInt(playerid, "sellbackpack")][pBackpack])
					{
						case 1: 
						{
							btype = "Small";
							SetPlayerAttachedObject(playerid, 9, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
						}
						case 2: 
						{
							btype = "Medium";
							SetPlayerAttachedObject(playerid, 9, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
						}
						case 3: 
						{
							btype = "Large";
							SetPlayerAttachedObject(playerid, 9, 3026, 1, -0.254999, -0.109, -0.022999, 10.6, -1.20002, 3.4, 1.265, 1.242, 1.062);
						}
					}
					GivePlayerCash(playerid, -GetPVarInt(playerid, "sellbackpackprice"));
					GivePlayerCash(GetPVarInt(playerid, "sellbackpack"), GetPVarInt(playerid, "sellbackpackprice"));
					format(szMessage, sizeof(szMessage), "* You bought a %s Backpack for $%s from %s.",btype,number_format(GetPVarInt(playerid, "sellbackpackprice")),GetPlayerNameEx(GetPVarInt(playerid, "sellbackpack")));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
					format(szMessage, sizeof(szMessage), "* %s has bought your %s Backpack, $%s was added to your money.",GetPlayerNameEx(playerid),btype, number_format(GetPVarInt(playerid, "sellbackpackprice")));
					SendClientMessageEx(GetPVarInt(playerid, "sellbackpack"), COLOR_LIGHTBLUE, szMessage);
					
					
					PlayerInfo[playerid][pBackpack] = PlayerInfo[GetPVarInt(playerid, "sellbackpack")][pBackpack];
					PlayerInfo[playerid][pBEquipped] = 1;
					PlayerInfo[playerid][pBStoredH] = INVALID_HOUSE_ID;
					PlayerInfo[playerid][pBStoredV] = INVALID_PLAYER_VEHICLE_ID;
					RemovePlayerAttachedObject(GetPVarInt(playerid, "sellbackpack"), 9);
					
					PlayerInfo[GetPVarInt(playerid, "sellbackpack")][pBackpack] = 0;
					PlayerInfo[GetPVarInt(playerid, "sellbackpack")][pBEquipped] = 0;
					PlayerInfo[GetPVarInt(playerid, "sellbackpack")][pBStoredH] = INVALID_HOUSE_ID;
					PlayerInfo[GetPVarInt(playerid, "sellbackpack")][pBStoredV] = INVALID_PLAYER_VEHICLE_ID;
					for(new i = 0; i < 10; i++)
					{
						PlayerInfo[GetPVarInt(playerid, "sellbackpack")][pBItems][i] = 0;
					}

					format(szMessage, sizeof(szMessage), "%s (IP:%s) has bought %s Backpack for $%s from %s (IP:%s)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), btype, number_format(GetPVarInt(playerid, "sellbackpackprice")),  GetPlayerNameEx(GetPVarInt(playerid, "sellbackpack")), GetPlayerIpEx(GetPVarInt(playerid, "sellbackpack")));
					Log("logs/pay.log", szMessage);
					Log("logs/backpack.log", szMessage);

					OnPlayerStatsUpdate(playerid);
					OnPlayerStatsUpdate(GetPVarInt(playerid, "sellbackpack"));
					DeletePVar(GetPVarInt(playerid, "sellbackpack"), "sellingbackpack");
					DeletePVar(playerid, "sellbackpack");
					DeletePVar(playerid, "sellbackpackprice");
					return 1;
	     		}
	      		else
				{
	            	SendClientMessageEx(playerid, COLOR_GREY, "You can't afford the backpack!");
					DeletePVar(playerid, "sellbackpack");
	                DeletePVar(playerid, "sellbackpackprice");
	                return 1;
	        	}
			}
		}
        return 1;
    }                                             //not connected
    return 1;
}

CMD:join(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot do this while being inside a vehicle.");
	if(GetPlayerState(playerid) == 1 && PlayerInfo[playerid][pJob] == 0 || (PlayerInfo[playerid][pJob2] == 0 && (PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0)) || (PlayerInfo[playerid][pJob3] == 0 && PlayerInfo[playerid][pDonateRank] >= 3)) {
		if(IsPlayerInRangeOfPoint(playerid,3.0,251.99, 117.36, 1003.22) || IsPlayerInRangeOfPoint(playerid,3.0, 1478.9515, -1755.7147, 3285.2859) || IsPlayerInRangeOfPoint(playerid,3.0,301.042633, 178.700408, 1007.171875) || IsPlayerInRangeOfPoint(playerid,3.0,-1385.6786,2625.6636,55.5572)) {
			if(PlayerInfo[playerid][pJob] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Detective, type /accept job.");
				GettingJob[playerid] = 1;
				return 1;
			}
			if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Detective, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
				GettingJob2[playerid] = 1;
				return 1;
			}
			if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Detective, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
				GettingJob3[playerid] = 1;
				return 1;
			}			
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1469.5247, -1755.7039, 3285.2859)) {
			if(PlayerInfo[playerid][pJob] == 0){
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Lawyer, type /accept job.");
				GettingJob[playerid] = 2;
				return 1;
			}
			if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Lawyer, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
				GettingJob2[playerid] = 2;
				return 1;
			}
			if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Lawyer, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
				GettingJob3[playerid] = 2;
				return 1;
			}			
		}
		else if (IsPlayerInRangeOfPoint(playerid,3.0,1215.1304,-11.8431,1000.9219)) {
			if(PlayerInfo[playerid][pJob] == 0){
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Whore, type /accept job.");
				GettingJob[playerid] = 3;
				return 1;
			}
			if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Whore, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
				GettingJob2[playerid] = 3;
				return 1;
			}
			if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Whore, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
				GettingJob3[playerid] = 3;
				return 1;
			}			
		}
		else if (IsPlayerInRangeOfPoint(playerid,3.0,2166.3772,-1675.3829,15.0859) || IsPlayerInRangeOfPoint(playerid,3.0,-2089.344970, 87.800231, 35.320312) || IsPlayerInRangeOfPoint(playerid,3.0,-1528.0924,2688.7837,55.8359)) {
			if(PlayerInfo[playerid][pJob] == 0){
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drug Dealer, type /accept job.");
				GettingJob[playerid] = 4;
				return 1;
			}
			if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drug Dealer, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
				GettingJob2[playerid] = 4;
				return 1;
			}
			if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drug Dealer, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
				GettingJob3[playerid] = 4;
				return 1;
			}			
		}
		else if (IsPlayerInRangeOfPoint(playerid,3.0,161.92, -25.70, 1.57) || IsPlayerInRangeOfPoint(playerid,3.0,-2032.601928, 143.866592, 28.835937) || IsPlayerInRangeOfPoint(playerid,3.0,-1475.4224,1877.3550,32.6328)) {
			if(PlayerInfo[playerid][pJob] == 0){
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Mechanic, type /accept job.");
				GettingJob[playerid] = 7;
				return 1;
			}
			if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Mechanic, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
				GettingJob2[playerid] = 7;
				return 1;
			}
			if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Mechanic, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
				GettingJob3[playerid] = 7;
				return 1;
			}			
		}
		else if (IsPlayerInRangeOfPoint(playerid,3.0,1224.13, 267.98, 19.55) || IsPlayerInRangeOfPoint(playerid,3.0,-2269.256103, -158.054321, 35.320312) || IsPlayerInRangeOfPoint(playerid,3.0,2226.1716,-1718.1792,13.5165) || IsPlayerInRangeOfPoint(playerid,3.0,1099.73,-1504.67,15.800) || IsPlayerInRangeOfPoint(playerid,3.0,-821.3508,1574.9393,27.1172)) {
			if(PlayerInfo[playerid][pJob] == 0){
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
				GettingJob[playerid] = 8;
				return 1;
			}
			if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
				GettingJob2[playerid] = 8;
				return 1;
			}
			if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
				GettingJob3[playerid] = 8;
				return 1;
			}			
		}
		else if (IsPlayerInRangeOfPoint(playerid,3.0,1366.4325,-1275.2096,13.5469) || IsPlayerInRangeOfPoint(playerid,3.0,-2623.333984, 209.235931, 4.684767) || IsPlayerInRangeOfPoint(playerid,3.0,-1513.4904,2614.3591,55.8078)) {
			if(PlayerInfo[playerid][pJob] == 0){
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become an Arms Dealer, type /accept job.");
				GettingJob[playerid] = 9;
				return 1;
			}
			if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become an Arms Dealer, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
				GettingJob2[playerid] = 9;
				return 1;
			}
			if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become an Arms Dealer, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
				GettingJob3[playerid] = 9;
				return 1;
			}			
		}
		/*else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,531.7930,-1292.4044,17.2422)) {
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Car Dealer, type /accept job.");
			GettingJob[playerid] = 10;
			return 1;
		}*/
		else if (IsPlayerInRangeOfPoint(playerid,3.0,766.0804,14.5133,1000.7004) || IsPlayerInRangeOfPoint(playerid,3.0,758.98, -60.32, 1000.78)) {
			if(PlayerInfo[playerid][pJob] == 0){
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Boxer, type /accept job.");
				GettingJob[playerid] = 12;
				return 1;
			}
			if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Boxer, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
				GettingJob2[playerid] = 12;
				return 1;
			}
			if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Boxer, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
				GettingJob3[playerid] = 12;
				return 1;
			}			
		}
		else if (IsPlayerInRangeOfPoint(playerid,3.0,2354.2808,-1169.2959,28.0066) || IsPlayerInRangeOfPoint(playerid,3.0,-2630.7375,2349.3994,8.4892)) {
			if(PlayerInfo[playerid][pJob] == 0){
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drug Smuggler, type /accept job.");
				GettingJob[playerid] = 14;
				return 1;
			}
			if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drug Smuggler, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
				GettingJob2[playerid] = 14;
				return 1;
			}
			if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drug Smuggler, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
				GettingJob3[playerid] = 14;
				return 1;
			}			
		}
		/*else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-2040.9436,456.2395,35.1719)) {
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Paper Boy, type /accept job.");
			GettingJob[playerid] = 15;
			return 1;
		}*/
		/*else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-77.7288,-1136.3896,1.0781)) {
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Trucker, type /accept job.");
			GettingJob[playerid] = 16;
			return 1;
		}*/
		else if (IsPlayerInRangeOfPoint(playerid,3.0,1741.5199,-1863.4615,13.5750) || IsPlayerInRangeOfPoint(playerid,3.0,-1981.144775, 133.063293, 27.687500)) {
			if(PlayerInfo[playerid][pJob] == 0){
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Taxi Driver, type /accept job.");
				GettingJob[playerid] = 17;
				return 1;
			}
			if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Taxi Driver, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
				GettingJob2[playerid] = 17;
				return 1;
			}
			if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Taxi Driver, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
				GettingJob3[playerid] = 17;
				return 1;
			}			
		}
		else if (IsPlayerInRangeOfPoint(playerid,3.0,2195.8335,-1973.0638,13.5589) || IsPlayerInRangeOfPoint(playerid,3.0,-1356.7195,2065.3450,52.4677)) {
			if(PlayerInfo[playerid][pJob] == 0){
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Craftsman, type /accept job.");
				GettingJob[playerid] = 18;
				return 1;
			}
			if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Craftsman, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
				GettingJob2[playerid] = 18;
				return 1;
			}
			if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Craftsman, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
				GettingJob3[playerid] = 18;
				return 1;
			}			
		}
		else if (IsPlayerInRangeOfPoint(playerid,3.0,502.6696,-11.6603,1000.6797) || IsPlayerInRangeOfPoint(playerid,3.0,-864.3550,1536.9703,22.5870)) {
			if(PlayerInfo[playerid][pJob] == 0){
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bartender, type /accept job.");
				GettingJob[playerid] = 19;
				return 1;
			}
			if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bartender, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
				GettingJob2[playerid] = 19;
				return 1;
			}
			if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bartender, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
				GettingJob3[playerid] = 19;
				return 1;
			}			
		}
		else if (IsPlayerInRangeOfPoint(playerid,3.0,-1560.963867, 127.491157, 3.554687)) {
			if(PlayerInfo[playerid][pLevel] >= 2)
			{
				if(PlayerInfo[playerid][pJob] == 0){
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Shipment Contractor, type /accept job.");
				GettingJob[playerid] = 20;
				return 1;
				}
				if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Shipment Contractor, type /accept job.");
					SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
					GettingJob2[playerid] = 20;
					return 1;
				}
				if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Shipment Contractor, type /accept job.");
					SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
					GettingJob3[playerid] = 20;
					return 1;
				}				
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "You must be at least level 2 to become a Shipment Contractor.");
		}
		else if (IsPlayerInRangeOfPoint(playerid,3.0,-1720.962646, 1364.456176, 7.187500)) {
			if(PlayerInfo[playerid][pJob] == 0){
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Pizza Boy, type /accept job.");
				GettingJob[playerid] = 21;
				return 1;
			}
			if((PlayerInfo[playerid][pDonateRank] > 0 || PlayerInfo[playerid][pFamed] > 0) && PlayerInfo[playerid][pJob2] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Pizza Boy, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a secondary job. Only VIP/Famed can do this.");
				GettingJob2[playerid] = 21;
				return 1;
			}
			if(PlayerInfo[playerid][pDonateRank] >= 3 && PlayerInfo[playerid][pJob3] == 0) {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Pizza Boy, type /accept job.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are getting a third job. Only Gold VIP+ can do this.");
				GettingJob3[playerid] = 21;
				return 1;
			}			
		}
		else {
			SendClientMessageEx(playerid, COLOR_GREY, "You are not even near a place to get a Job!");
		}
	}
	else {
		if(PlayerInfo[playerid][pDonateRank] == 0) {
			SendClientMessageEx(playerid, COLOR_GREY, "You already have a Job, use /quitjob first!");
            SendClientMessageEx(playerid, COLOR_YELLOW, "Only VIP/Famed can get two jobs, Gold VIP+ can get three jobs!");
		}
		else if(PlayerInfo[playerid][pDonateRank] < 3 && PlayerInfo[playerid][pJob2] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You already have 2 Jobs, use /quitjob first!");
			SendClientMessageEx(playerid, COLOR_YELLOW, "Only Gold VIP+ can get three jobs!");
		}
		else {
			SendClientMessageEx(playerid, COLOR_GREY, "You already have 3 Jobs, use /quitjob first!");
		}
	}
    return 1;
}

CMD:sellgun(playerid, params[])
{
    new string[128];
	if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot do this while being in the Hunger Games Event!");
    if(GetPVarInt(playerid, "IsInArena") >= 0) {
        SendClientMessageEx(playerid,COLOR_GREY,"   You cannot do this while being in a arena!");
        return 1;
    }
   	if(GetPVarInt( playerid, "EventToken") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
    if (PlayerInfo[playerid][pJob] != 9 && PlayerInfo[playerid][pJob2] != 9 && PlayerInfo[playerid][pJob3] != 9) {
        SendClientMessageEx(playerid,COLOR_GREY,"   You are not a Arms Dealer!");
        return 1;
    }
    if(WatchingTV[playerid] != 0) {
        SendClientMessageEx(playerid, COLOR_GREY, "You can not do this while watching TV!");
        return 1;
    }
    if (PlayerInfo[playerid][pScrewdriver] == 0) {
        SendClientMessageEx(playerid,COLOR_GREY,"   You need a screwdriver from a craftsman to make a weapon!");
        return 1;
    }
    if (PlayerInfo[playerid][pJailTime] > 0) {
        SendClientMessageEx(playerid,COLOR_GREY,"   You can not make guns while in jail or prison!");
        return 1;
    }
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    if (GetPVarInt(playerid, "ArmsTimer") > 0) {
        format(string, sizeof(string), "   You must wait %d seconds before selling another weapon.", GetPVarInt(playerid, "ArmsTimer"));
        SendClientMessageEx(playerid,COLOR_GREY,string);
        return 1;
    }
    if(PlayerInfo[playerid][pHospital] > 0) {
        SendClientMessageEx(playerid, COLOR_GREY, "You can't spawn a weapon whilst in Hospital.");
        return 1;
    }

    new giveplayerid,x_weapon[20],weapon,price,storageid;

	/*// Find the storageid of the storagedevice.
	new bool:itemEquipped = false;

	for(new i = 0; i < 3; i++)
	{
		if(StorageInfo[playerid][i][sAttached] == 1) {
			storageid = i;
			itemEquipped = true;
		}
	}
	if(itemEquipped == false) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a storage device equipped! - /storagehelp");
	*/

    if(sscanf(params, "us[20]", giveplayerid, x_weapon)) {
        SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
        SendClientMessageEx(playerid, COLOR_YELLOW, "<< Available weapons >>");
        new level = PlayerInfo[playerid][pArmsSkill];
        if(level >= 0 && level < 50) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "shotgun(200)	knuckles(25)");
        }
        else if(level >= 50 && level < 100) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "shotgun(200)	knuckles(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "mp5(400)		baseballbat(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "rifle(1000)	    cane(25)");
        }
        else if(level >= 100 && level < 200) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "shotgun(200)	knuckles(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "mp5(400)		baseballbat(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "rifle(1000)	    cane(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "deagle(2000)	shovel(25)");
        }
        else if(level >= 200 && level < 400) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "shotgun(200)	knuckles(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "mp5(400)   		baseballbat(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "rifle(1000)	    cane(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "deagle(2000)    shovel(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "golfclub(25)	poolcue(25)");
        }
        else if(level >= 400) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "shotgun(200)	knuckles(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "mp5(400)        baseballbat(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "rifle(1000)	    cane(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "deagle(2000)    shovel(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "golfclub(25)	poolcue(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "dildo(25)	    katana(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "uzi(1250)      tec9(1250)");
        }
        if(PlayerInfo[playerid][pDonateRank] >= 3)
        {
       		SendClientMessageEx(playerid, COLOR_YELLOW, "Gold+ VIP Feature: AK-47(10000)");
        }
        SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
        SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellgun [player] [weaponname]");
        return 1;
    }

	if(!IsPlayerConnected(giveplayerid)) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	if(PlayerInfo[giveplayerid][pAccountRestricted] != 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot do this to someone that has his account restricted!");
	if(HungerPlayerInfo[giveplayerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   This person is not able to receive weapons at the moment.");
    if(strcmp(x_weapon,"dildo",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 10; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"katana",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 8; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }
    else if(strcmp(x_weapon,"ak47",true) == 0) {
        if(PlayerInfo[playerid][pDonateRank] < 3) return SendClientMessageEx(playerid, COLOR_GREY, " You are not a Gold VIP+!");
        if(PlayerInfo[playerid][pMats] >= 10000) {
            weapon = 30; price = 10000;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }
    else if(strcmp(x_weapon,"golfclub",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 2; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"poolcue",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 7; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"shovel",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 100) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 6; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"cane",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 15; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"baseballbat",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 5; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"knuckles",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 1; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"sdpistol",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 99) {
            weapon = 23; price = 100;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"flowers",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 14; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"deagle",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 100) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 1999) {
            weapon = 24; price = 2000;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"mp5",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 399) {
            weapon = 29; price = 400;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"uzi",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessageEx(playerid, COLOR_GREY, "You're not a high enough level to craft this item!");
        if(PlayerInfo[playerid][pMats] > 1249) {
            weapon = 28; price = 1250;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"tec9",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessageEx(playerid, COLOR_GREY, "You're not a high enough level to craft this item!");
        if(PlayerInfo[playerid][pMats] > 1249) {
            weapon = 32; price = 1250;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"shotgun",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 199) {
            weapon = 25; price = 200;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"9mm",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 149) {
            weapon = 22; price = 150;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }



    else if(strcmp(x_weapon,"rifle",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 999) {
            weapon = 33; price = 1000;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else { SendClientMessageEx(playerid,COLOR_GREY,"   Invalid Weapon name!"); return 1; }
    if (ProxDetectorS(5.0, playerid, giveplayerid)) {
        if(PlayerInfo[giveplayerid][pConnectHours] < 2 || PlayerInfo[giveplayerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "That person is currently restricted from possessing weapons!");

        if(giveplayerid == playerid) {
            format(string, sizeof(string), "   You have given yourself a %s.", x_weapon);
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            SendClientMessageEx(playerid, COLOR_GRAD1, string);
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            switch( PlayerInfo[playerid][pSex] ) {
                case 1: format(string, sizeof(string), "* %s created a Gun from Materials, and hands it to himself.", GetPlayerNameEx(playerid));
                case 2: format(string, sizeof(string), "* %s created a Gun from Materials, and hands it to herself.", GetPlayerNameEx(playerid));
            }
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            GivePlayerValidWeapon(playerid,weapon,50000);
            PlayerInfo[playerid][pMats] -= price;
            if(weapon > 15)
			{
				if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3)
 				{
  					PlayerInfo[playerid][pArmsSkill] += 2;
 				}
  				else if(PlayerInfo[playerid][pDoubleEXP] > 0 && PlayerInfo[playerid][pDonateRank] < 2)
				{
					format(string, sizeof(string), "You have gained 2 arms skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					PlayerInfo[playerid][pArmsSkill] += 2;
				}
 				else
  				{
  					PlayerInfo[playerid][pArmsSkill]++;
   				}
            }
            if(PlayerInfo[playerid][pAdmin] < 3) {
                SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
            }
            if(PlayerInfo[playerid][pArmsSkill] == 50)
            { SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 2, more weapons are available to sell."); }
            else if(PlayerInfo[playerid][pArmsSkill] == 100)
            { SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 3, more weapons are available to sell."); }
            else if(PlayerInfo[playerid][pArmsSkill] == 200)
            { SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 4, more weapons are available to sell."); }
            else if(PlayerInfo[playerid][pArmsSkill] == 400)
            { SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 5, more weapons are available to sell."); }
            return 1;
        }

        format(string, sizeof(string), "* You offered %s to buy a %s.", GetPlayerNameEx(giveplayerid), x_weapon);
        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Arms Dealer %s wants to sell you a %s, (type /accept weapon) to buy.", GetPlayerNameEx(playerid), x_weapon);
        SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
        GunOffer[giveplayerid] = playerid;
		GunStorageID[giveplayerid] = storageid;
        GunId[giveplayerid] = weapon;
        GunMats[giveplayerid] = price;
	 	SetPVarInt(giveplayerid, "WeaponSeller_SQLId", GetPlayerSQLId(playerid));
        if(PlayerInfo[playerid][pAdmin] < 3) {
            SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
        return 1;
    }
	return 1;
}

CMD:window(playerid, params[])
{
	new string[128];
    if(InsidePlane[playerid] != INVALID_VEHICLE_ID)
	{
        if(GetPlayerInterior(playerid) != 0)
		{
            new
                Float: fSpecPos[6];

            GetPlayerPos(playerid, fSpecPos[0], fSpecPos[1], fSpecPos[2]);
            GetPlayerFacingAngle(playerid, fSpecPos[3]);
            GetPlayerHealth(playerid, fSpecPos[4]);
            GetPlayerArmour(playerid, fSpecPos[5]);

            SetPVarFloat(playerid, "air_Xpos", fSpecPos[0]);
            SetPVarFloat(playerid, "air_Ypos", fSpecPos[1]);
            SetPVarFloat(playerid, "air_Zpos", fSpecPos[2]);
            SetPVarFloat(playerid, "air_Rpos", fSpecPos[3]);
            SetPVarFloat(playerid, "air_HP", fSpecPos[4]);
            SetPVarFloat(playerid, "air_Arm", fSpecPos[5]);
            SetPVarInt(playerid, "air_Int", GetPlayerInterior(playerid));
            SetPVarInt(playerid, "air_Mode", 1);

            SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid, 0);
            TogglePlayerSpectating(playerid, 1);
            PlayerSpectateVehicle(playerid, InsidePlane[playerid]);

            format(string, sizeof(string), "* %s glances out the window.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else TogglePlayerSpectating(playerid, 0);
    }
    return 1;
}

CMD:changedoorpass(playerid, params[])
{
    for(new i = 0; i < sizeof(DDoorsInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW] || IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW])
		{
			new doorpass[24];
			if(sscanf(params, "s[24]", doorpass)) { SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /changedoorpass [pass]"); SendClientMessageEx(playerid, COLOR_WHITE, "To remove the password on the door set the password to 'none'."); return 1; }
        	if(DDoorsInfo[i][ddType] == 2 && DDoorsInfo[i][ddFaction] != INVALID_GROUP_ID && PlayerInfo[playerid][pLeader] == DDoorsInfo[i][ddFaction])
			{
				format(DDoorsInfo[i][ddPass], 24, "%s", doorpass);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the password of this door.");
				SaveDynamicDoor(i);
			}
			else if(DDoorsInfo[i][ddType] == 3 && DDoorsInfo[i][ddFamily] != INVALID_FAMILY_ID && PlayerInfo[playerid][pFMember] == DDoorsInfo[i][ddFamily] && PlayerInfo[playerid][pRank] == 6)
			{
				format(DDoorsInfo[i][ddPass], 24, "%s", doorpass);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the password of this door.");
				SaveDynamicDoor(i);
			}
			else if(DDoorsInfo[i][ddType] == 1 && DDoorsInfo[i][ddOwner] == GetPlayerSQLId(playerid))
			{
				format(DDoorsInfo[i][ddPass], 24, "%s", doorpass);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the password of this door.");
				SaveDynamicDoor(i);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "You cannot change the password on this lock.");
		}
	}
	return 1;
}

CMD:lockdoor(playerid, params[])
{
    for(new i = 0; i < sizeof(DDoorsInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW] || IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW])
		{
        	if(DDoorsInfo[i][ddType] == 2 && DDoorsInfo[i][ddFaction] != INVALID_GROUP_ID && PlayerInfo[playerid][pLeader] == DDoorsInfo[i][ddFaction])
			{
				if(DDoorsInfo[i][ddLocked] == 0)
				{
					DDoorsInfo[i][ddLocked] = 1;
					SendClientMessageEx(playerid, COLOR_WHITE, "This door has been locked.");
				}
				else if(DDoorsInfo[i][ddLocked] == 1)
				{
					DDoorsInfo[i][ddLocked] = 0;
					SendClientMessageEx(playerid, COLOR_GREY, "This door has been unlocked.");
				}
			}
			else if(DDoorsInfo[i][ddType] == 3 && DDoorsInfo[i][ddFamily] != INVALID_FAMILY_ID && PlayerInfo[playerid][pFMember] == DDoorsInfo[i][ddFamily] && PlayerInfo[playerid][pRank] == 6)
			{
				if(DDoorsInfo[i][ddLocked] == 0)
				{
					DDoorsInfo[i][ddLocked] = 1;
					SendClientMessageEx(playerid, COLOR_WHITE, "This door has been locked.");
				}
				else if(DDoorsInfo[i][ddLocked] == 1)
				{
					DDoorsInfo[i][ddLocked] = 0;
					SendClientMessageEx(playerid, COLOR_GREY, "This door has been unlocked.");
				}
			}
			else if(DDoorsInfo[i][ddType] == 1 && DDoorsInfo[i][ddOwner] == GetPlayerSQLId(playerid))
			{
				if(DDoorsInfo[i][ddLocked] == 0)
				{
					DDoorsInfo[i][ddLocked] = 1;
					SendClientMessageEx(playerid, COLOR_WHITE, "This door has been locked.");
				}
				else if(DDoorsInfo[i][ddLocked] == 1)
				{
					DDoorsInfo[i][ddLocked] = 0;
					SendClientMessageEx(playerid, COLOR_GREY, "This door has been unlocked.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "You cannot lock this door.");
		}
	}
	return 1;
}

CMD:doorpass(playerid, params[])
{
    for(new i = 0; i < sizeof(DDoorsInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW] || IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW]) {
        	if(DDoorsInfo[i][ddPass] < 1)
                return SendClientMessageEx(playerid, COLOR_GREY, "This door isn't allowed to be locked");
         	if(strcmp(DDoorsInfo[i][ddPass], "None", true) == 0)
                return SendClientMessageEx(playerid, COLOR_GREY, "This door isn't allowed to be locked");

			ShowPlayerDialog(playerid, DOORLOCK, DIALOG_STYLE_INPUT, "Door Security","Enter the password for this door","Login","Cancel");
			SetPVarInt(playerid, "Door", i);
		}
	}
	return 1;
}

CMD:carol(playerid, params[]) // Christmas Event
{
	new year, month, day, string[256], cstring[32];
	getdate(year, month, day);
	if(month == 12 && day == 24)
	{
		if(PlayerInfo[playerid][pConnectHours] > 2)
		{
			for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
				{
					if(PlayerInfo[playerid][pTrickortreat] == 0)
					{
						GiftPlayer(MAX_PLAYERS, playerid);
						switch(PlayerInfo[playerid][pDonateRank])
						{
							case 0, 1: PlayerInfo[playerid][pTrickortreat] = 5;
							case 2: PlayerInfo[playerid][pTrickortreat] = 4;
							case 3: PlayerInfo[playerid][pTrickortreat] = 3;
							case 4: PlayerInfo[playerid][pTrickortreat] = 2;
							case 5: PlayerInfo[playerid][pTrickortreat] = 2;
						}

						new rand = Random(1, 5);
						switch(rand)
						{
							case 1: cstring = "Deck the Halls";
							case 2: cstring = "We Wish You a Merry Christmas";
							case 3: cstring = "Jingle Bells";
							case 4: cstring = "Jingle Bells Rock";
							case 5: cstring = "Silent Night";
							default: cstring = "Deck the Halls";
						}

						format(string, sizeof(string), "* %s begins to sing the Christmas Carol %s.",GetPlayerNameEx(playerid), cstring);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						return 1;
					}
					else
					{
						if(GetPVarInt(playerid, "PinConfirmed"))
						{
							format(string, sizeof(string),"Item: Reset Caroling Timer\nYour Credits: %s\nCost: {FFD700}%s{A9C4E4}\nCredits Left: %s", number_format(PlayerInfo[playerid][pCredits]), number_format(20), number_format(PlayerInfo[playerid][pCredits]-20));
							ShowPlayerDialog( playerid, DIALOG_SHOPTOTRESET, DIALOG_STYLE_MSGBOX, "Reset Timer", string, "Purchase", "Exit" );
							SendClientMessageEx(playerid, COLOR_GRAD2, "You have already sang in the last few hours!");
							return 1;
						}
						else
						{
							PinLogin(playerid);
							SendClientMessageEx(playerid, COLOR_GRAD2, "You have already sang in the last few hours!");
							return 1;
						}
					}
				}
			}
			SendClientMessageEx(playerid, COLOR_GREY, "You are not at a house. (green house icon)");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You have not played 2 hours.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "It isn't Christmas Eve!");
	return 1;
}

CMD:trickortreat(playerid, params[])
{
	new year, month, day, string[256];
	getdate(year, month, day);
	if(month == 10 && day == 31)
	{
		if(PlayerInfo[playerid][pConnectHours] > 2)
		{
			for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
				{
					if(PlayerInfo[playerid][pTrickortreat] == 0)
					{
						GiftPlayer(MAX_PLAYERS, playerid);
						switch(PlayerInfo[playerid][pDonateRank])
						{
							case 0, 1: PlayerInfo[playerid][pTrickortreat] = 5;
							case 2: PlayerInfo[playerid][pTrickortreat] = 4;
							case 3: PlayerInfo[playerid][pTrickortreat] = 3;
							case 4: PlayerInfo[playerid][pTrickortreat] = 2;
							case 5: PlayerInfo[playerid][pTrickortreat] = 2;
						}	
						return 1;
					}
					else
					{
						if(GetPVarInt(playerid, "PinConfirmed"))
						{
							format(string, sizeof(string),"Item: Reset Trick or Treat Timer\nYour Credits: %s\nCost: {FFD700}%s{A9C4E4}\nCredits Left: %s", number_format(PlayerInfo[playerid][pCredits]), number_format(20), number_format(PlayerInfo[playerid][pCredits]-20));
							ShowPlayerDialog( playerid, DIALOG_SHOPTOTRESET, DIALOG_STYLE_MSGBOX, "Reset Gift Timer", string, "Purchase", "Exit" );
							SendClientMessageEx(playerid, COLOR_GRAD2, "You have already trick or treated in the last few hours!");
							return 1;
						}
						else
						{
							PinLogin(playerid);
							SendClientMessageEx(playerid, COLOR_GRAD2, "You have already trick or treated in the last few hours!");
							return 1;
						}
					}
				}
			}
			SendClientMessageEx(playerid, COLOR_GREY, "You are not at a house. (green house icon)");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You have not played 2 hours.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "It isn't Halloween!");
	return 1;
}

CMD:enter(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") >= 0) {
        SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
        return 1;
    }
	if(GetPVarType(playerid, "StreamPrep")) {
		return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now. Wait for streaming to finish.");
	}
    if( PlayerCuffed[playerid] >= 1 ) {
        SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
        return 1;
    }
	new cCar = GetClosestCar(playerid);
    for(new i = 0; i < sizeof(DDoorsInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW]) {
            if(DDoorsInfo[i][ddVIP] > 0 && PlayerInfo[playerid][pDonateRank] < DDoorsInfo[i][ddVIP]) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, you are not a high enough VIP level.");
                return 1;
            }
            
            if(DDoorsInfo[i][ddFamed] > 0 && PlayerInfo[playerid][pFamed] < DDoorsInfo[i][ddFamed]) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, you're not a high enough famed level.");
                return 1;
            }

			if(DDoorsInfo[i][ddDPC] > 0 && PlayerInfo[playerid][pRewardHours] < 150) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, you are not a Dedicated Player.");
                return 1;
            }

            if(DDoorsInfo[i][ddFamily] > 0) {
                if(PlayerInfo[playerid][pFMember] != DDoorsInfo[i][ddFamily]) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, this door is family restricted.");
				else if(PlayerInfo[playerid][pRank] < DDoorsInfo[i][ddRank]) return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not high enough rank to enter this door.");
            }

			if(DDoorsInfo[i][ddAllegiance] > 0) {
                if(arrGroupData[PlayerInfo[playerid][pMember]][g_iAllegiance] != DDoorsInfo[i][ddAllegiance]) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, this door is nation restricted.");
				else if(PlayerInfo[playerid][pRank] < DDoorsInfo[i][ddRank]) return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not high enough rank to enter this door.");
            }

			if(DDoorsInfo[i][ddGroupType] > 0) {
                if(arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] != DDoorsInfo[i][ddGroupType] && arrGroupData[PlayerInfo[playerid][pMember]][g_iAllegiance] != DDoorsInfo[i][ddAllegiance]) {
					return SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, this door is faction restricted.");
				}
				else if(PlayerInfo[playerid][pRank] < DDoorsInfo[i][ddRank]) return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not high enough rank to enter this door.");
            }

            if(DDoorsInfo[i][ddFaction] != INVALID_GROUP_ID) {
                if(PlayerInfo[playerid][pMember] != DDoorsInfo[i][ddFaction]) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, this door is faction restricted.");
				else if(PlayerInfo[playerid][pRank] < DDoorsInfo[i][ddRank]) return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not high enough rank to enter this door.");
            }

            if(DDoorsInfo[i][ddAdmin] > 0 && PlayerInfo[playerid][pAdmin] < DDoorsInfo[i][ddAdmin]) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, you are not a high enough admin level.");
                return 1;
            }

            if(DDoorsInfo[i][ddWanted] > 0 && PlayerInfo[playerid][pWantedLevel] != 0) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, this door restricts those with wanted levels.");
                return 1;
            }

			if(DDoorsInfo[i][ddLocked] == 1) {
			    return SendClientMessageEx(playerid, COLOR_GRAD2, "This door is currently locked.");
			}

            SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
            PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
            PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
            SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
            if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
                LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
	            if(GetPVarInt(playerid, "tpForkliftTimer") > 0)
				{
				    SetPVarInt(playerid, "tpJustEntered", 1);
				    new Float: pX, Float: pY, Float: pZ;
					GetPlayerPos(playerid, pX, pY, pZ);
					SetPVarFloat(playerid, "tpForkliftX", pX);
			 		SetPVarFloat(playerid, "tpForkliftY", pY);
			  		SetPVarFloat(playerid, "tpForkliftZ", pZ);
				}
                if(DynVeh[GetPlayerVehicleID(playerid)] != -1)
				{
				    new vw[1];
					vw[0] = GetVehicleVirtualWorld(GetPlayerVehicleID(playerid));
				    if(DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][0] != INVALID_OBJECT_ID)
				    {
				    	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectID][0], E_STREAMER_WORLD_ID, vw[0]);

					}
					if(DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][1] != INVALID_OBJECT_ID)
				    {
						Streamer_SetArrayData(STREAMER_TYPE_OBJECT, DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectID][1], E_STREAMER_WORLD_ID, vw[0]);

					}
				}
                //foreach(new passenger: Player)
				for(new passenger = 0; passenger < MAX_PLAYERS; ++passenger)
				{
					if(IsPlayerConnected(passenger))
					{
						if(passenger != playerid)
						{
							if(IsPlayerInVehicle(passenger, GetPlayerVehicleID(playerid)))
							{
								SetPlayerInterior(passenger,DDoorsInfo[i][ddInteriorInt]);
								PlayerInfo[passenger][pInt] = DDoorsInfo[i][ddInteriorInt];
								PlayerInfo[passenger][pVW] = DDoorsInfo[i][ddInteriorVW];
								SetPlayerVirtualWorld(passenger, DDoorsInfo[i][ddInteriorVW]);
							}
						}
					}	
                }
            }
            else {
                SetPlayerPos(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
                SetCameraBehindPlayer(playerid);
            }
			if(DDoorsInfo[i][ddCustomInterior]) Player_StreamPrep(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ], FREEZE_TIME);
            break;
        }
    }
    for(new i = 0; i < sizeof(FamilyInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,FamilyInfo[i][FamilyEntrance][0], FamilyInfo[i][FamilyEntrance][1], FamilyInfo[i][FamilyEntrance][2])) {
            SetPlayerInterior(playerid,FamilyInfo[i][FamilyInterior]);
            PlayerInfo[playerid][pInt] = FamilyInfo[i][FamilyInterior];
            PlayerInfo[playerid][pVW] = FamilyInfo[i][FamilyVirtualWorld];
            SetPlayerVirtualWorld(playerid, FamilyInfo[i][FamilyVirtualWorld]);
            SetPlayerPos(playerid,FamilyInfo[i][FamilyExit][0],FamilyInfo[i][FamilyExit][1],FamilyInfo[i][FamilyExit][2]);
            SetPlayerFacingAngle(playerid,FamilyInfo[i][FamilyExit][3]);
			if(FamilyInfo[i][FamilyCustomMap]) Player_StreamPrep(playerid, FamilyInfo[i][FamilyExit][0],FamilyInfo[i][FamilyExit][1],FamilyInfo[i][FamilyExit][2], FREEZE_TIME);
            break;
        }
    }
    for(new i = 0; i < sizeof(HouseInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hExtIW] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExtVW]) {
            if(PlayerInfo[playerid][pPhousekey] == i || PlayerInfo[playerid][pPhousekey2] == i || PlayerInfo[playerid][pPhousekey3] == i || HouseInfo[i][hLock] == 0 || PlayerInfo[playerid][pRenting] == i) {
                if(PlayerInfo[playerid][pFreezeHouse] != 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot do this while having your assets frozen!");
				SetPlayerInterior(playerid,HouseInfo[i][hIntIW]);
                PlayerInfo[playerid][pInt] = HouseInfo[i][hIntIW];
                PlayerInfo[playerid][pVW] = HouseInfo[i][hIntVW];
                SetPlayerVirtualWorld(playerid,HouseInfo[i][hIntVW]);
                SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
                SetCameraBehindPlayer(playerid);
                GameTextForPlayer(playerid, "~w~Welcome Home", 5000, 1);
				if(HouseInfo[i][hCustomInterior] == 1) Player_StreamPrep(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ], FREEZE_TIME);
            }
            else GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
            break;
        }
    }

    for(new i = 0; i < sizeof(Businesses); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3,Businesses[i][bExtPos][0], Businesses[i][bExtPos][1], Businesses[i][bExtPos][2])) {
	        if (Businesses[i][bExtPos][1] == 0.0) return 1;
			if (Businesses[i][bStatus]) {
				if (Businesses[i][bType] == BUSINESS_TYPE_GYM)
				{
					if (Businesses[i][bGymEntryFee] > 0 && PlayerInfo[playerid][pCash] < Businesses[i][bGymEntryFee])
					{
						GameTextForPlayer(playerid, "~r~You need more money to enter this gym", 5000, 1);
						return 1;
					}
				}
				SetPVarInt(playerid, "BusinessesID", i);

				if(Businesses[i][bVW] == 0) SetPlayerVirtualWorld(playerid, BUSINESS_BASE_VW + i), PlayerInfo[playerid][pVW] = BUSINESS_BASE_VW + i;
				else SetPlayerVirtualWorld(playerid, Businesses[i][bVW]), PlayerInfo[playerid][pVW] = Businesses[i][bVW];


				SetPlayerInterior(playerid,Businesses[i][bInt]);
	            SetPlayerPos(playerid,Businesses[i][bIntPos][0],Businesses[i][bIntPos][1],Businesses[i][bIntPos][2]);
		        SetPlayerFacingAngle(playerid, Businesses[i][bIntPos][3]);
	         	SetCameraBehindPlayer(playerid);
		        PlayerInfo[playerid][pInt] = Businesses[i][bInt];
		        if(Businesses[i][bCustomInterior]) Player_StreamPrep(playerid, Businesses[i][bIntPos][0], Businesses[i][bIntPos][1], Businesses[i][bIntPos][2], FREEZE_TIME);

				if (Businesses[i][bType] == BUSINESS_TYPE_GYM)
				{
					new string[50];
					format(string, sizeof(string), "You entered a gym and were charged $%i.", Businesses[i][bGymEntryFee]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					GivePlayerCash(playerid, -Businesses[i][bGymEntryFee]);
					Businesses[i][bSafeBalance] += Businesses[i][bGymEntryFee];

					if (Businesses[i][bGymType] == 1)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Type /beginswimming to start using the swimming pool.");
						SendClientMessageEx(playerid, COLOR_WHITE, "Type /joinboxing to join the boxing queue.");
					}
					else if (Businesses[i][bGymType] == 2)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Type /beginparkour to begin the bike parkour track.");
					}
				}
			}
			else GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
			break;
        }
    }

    new Float:X, Float:Y, Float:Z;
    GetDynamicObjectPos(Carrier[0], X, Y, Z);
    if(IsPlayerInRangeOfPoint(playerid, 2.0, (X-0.377671),(Y-10.917018),11.6986)) {
		//Battle Carrier
        SetPlayerInterior(playerid, 1);
        SetPlayerVirtualWorld(playerid, 7);
        PlayerInfo[playerid][pVW] = 7;
        Streamer_UpdateEx(playerid, 1170.0106201172,-1355.0770263672,2423.0461425781);
        //Old Hospital: 2087.4626,2806.0630,-16.1744
        SetPlayerPos(playerid,1170.0106201172,-1355.0770263672,2423.0461425781);
        PlayerInfo[playerid][pInt] = 1;
        Player_StreamPrep(playerid, 1170.0106201172,-1355.0770263672,2423.0461425781, FREEZE_TIME);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, (X-6.422671),(Y-10.898918),11.6986)) {
                                                  //Battle Carrier Armoury
        SetPlayerInterior(playerid, 6);
        SetPlayerVirtualWorld(playerid, 1337);
        SetPlayerPos(playerid, 316.4553,-170.2923,999.5938);
        PlayerInfo[playerid][pVW] = 1337;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 306.4042,-159.0768,999.5938)) {
                                                  //Battle Carrier Armoury
        SetPlayerPos(playerid, 305.6966,-159.1586,999.5938);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, (X-5.560629),(Y-3.860818),11.6986)) {
                                                  //Engine Room Entrance
        SetPlayerInterior(playerid, 17);
        SetPlayerVirtualWorld(playerid, 1337);
        SetPlayerPos(playerid, -959.6347,1956.4598,9.0000);
        PlayerInfo[playerid][pVW] = 1337;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, (X-15.382171),(Y-2.272918),11.6986)) {
                                                  //Briefing Room Entrance
        SetPlayerInterior(playerid, 3);
        SetPlayerVirtualWorld(playerid, 1337);
        SetPlayerPos(playerid, 1494.3763,1303.5875,1093.2891);
        PlayerInfo[playerid][pVW] = 1337;
    }
//NG/LEO Only Entrance

                                                  // Hitman HQ
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -418.95, -1759.26, 6.22 )) {
        	if (arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] == 2 || arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] == 2) {
            SetPlayerVirtualWorld(playerid, 666420);
            PlayerInfo[playerid][pVW] = 666420;
            SetPlayerInterior(playerid, 6);
            PlayerInfo[playerid][pInt] = 6;
            SetPlayerPos(playerid, -68.8239,1351.4331,1080.6257);
            SetPlayerFacingAngle(playerid, 160);
            SetCameraBehindPlayer(playerid);
            Player_StreamPrep(playerid, -68.8239,1351.4331,1080.6257, FREEZE_TIME);
        }
    }
                                                  // Hitman HQ
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2323.3135, 7.6760, 26.5640)) {
        	if (arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] == 2 || arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] == 2) {
            SetPlayerVirtualWorld(playerid, 666421);
            PlayerInfo[playerid][pVW] = 666421;
            SetPlayerInterior(playerid, 6);
            PlayerInfo[playerid][pInt] = 6;
            SetPlayerPos(playerid, -68.8239,1351.4331,1080.6257);
            SetPlayerFacingAngle(playerid, 160);
            SetCameraBehindPlayer(playerid);
            Player_StreamPrep(playerid, -68.8239,1351.4331,1080.6257, FREEZE_TIME);
        }
    }
                                                  //Garage
    else if (IsPlayerInRangeOfPoint(playerid,8.0,1547.1947,29.8561,24.1406)) {
        GameTextForPlayer(playerid, "~w~GARAGE", 5000, 1);
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid), -1790.378295,1436.949829,7.187500);
        }
        else {
            SetPlayerPos(playerid,-1790.378295,1436.949829,7.187500);
        }
    }

                                                      //VIP Garage
    else if (IsPlayerInRangeOfPoint(playerid,12.0,1814.6857,-1559.2028,13.4834)) {
        if(PlayerInfo[playerid][pDonateRank] > 0) {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(GetPlayerVehicleID(playerid),  2425.8677,-1644.1337,1015.2882);
                SetVehicleZAngle(GetPlayerVehicleID(playerid),  180);
            }
            else {
                Streamer_UpdateEx(playerid, 2425.8677,-1644.1337,1015.2882);
                SetPlayerPos(playerid,2425.8677,-1644.1337,1015.2882);
                SetPlayerFacingAngle(playerid, 180);
            }
        }
        else {
            SendClientMessage(playerid, COLOR_WHITE, "* You are not a VIP!");
        }
	}
                                                  // LSPD Panel
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1575.9766845703, -1636.4899902344, 13.555115699768)) {
        if(IsACop(playerid)) {
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerPos(playerid,1579.0098876953, -1636.2879638672, 13.554491043091);
            SetPlayerFacingAngle(playerid, 190.0520);
            SetCameraBehindPlayer(playerid);
            PlayerInfo[playerid][pVW] = 0;
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (LSPD restricted access)!");
        }
    }
     // DoC Exterior Entrance
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2033.7502, -154.8784, 35.3203)) {
        if(BackEntrance) {
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerPos(playerid,-2045.0183, -211.6728, 991.5364);
            SetCameraBehindPlayer(playerid);
            PlayerInfo[playerid][pVW] = 0;
            SetCameraBehindPlayer(playerid);
            Player_StreamPrep(playerid, -2045.0183, -211.6728, 991.5364, FREEZE_TIME);
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (locked)!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2088.4797, -199.6259, 978.8315)) {
        if(IsACop(playerid)) {
            SetPlayerPos(playerid,-2091.0200,-199.8031,978.8315);
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (SFPD restricted)!");
        }
    }
                                                  //SASD - Elevator
    else if (IsPlayerInRangeOfPoint(playerid,3.0,2530.3774,-1689.9998,562.7922)) {
        if(IsACop(playerid)) {
            SetPlayerFacingAngle(playerid, 359);
            GameTextForPlayer(playerid, "~w~GARAGE", 5000, 1);
            SetPlayerPos(playerid,612.6414,-629.8659,-4.0447);
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
			Player_StreamPrep(playerid, 612.6414,-629.8659,-4.0447, FREEZE_TIME);
        }
        else {
            return SendClientMessageEx(playerid, COLOR_GRAD2, "Access Denied.");
        }
    }                                                //Gym Garage
    else if (IsPlayerInRangeOfPoint(playerid,8.0,2273.6787,-1728.9022,13.5039)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid),  2240.7332,-1695.9648,-0.0826 + 1100);
            SetVehicleZAngle(GetPlayerVehicleID(playerid),  180);
        }
        else {
            Streamer_UpdateEx(playerid, 2240.7332,-1695.9648,-0.0826 + 1100);
            SetPlayerPos(playerid,2240.7332,-1695.9648,-0.0826 + 1100);
            SetPlayerFacingAngle(playerid, 180);
        }
    }
                                                  //Courthouse Garage
    else if (IsPlayerInRangeOfPoint(playerid,8.0,1423.0443,-1664.5244,13.5810)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid),  1381.7274,-1676.4248,-13.2229 + 1100);
            SetVehicleZAngle(GetPlayerVehicleID(playerid),  90);
        }
        else {
            Streamer_UpdateEx(playerid,1381.7274,-1676.4248,-13.2229 + 1100);
            SetPlayerPos(playerid,1381.7274,-1676.4248,-13.2229 + 1100);
            SetPlayerFacingAngle(playerid, 90);
        }
    }
                                                  //PB Garage
    else if (IsPlayerInRangeOfPoint(playerid,8.0,1218.69,-1425.01,13.15)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid),  1218.8041,-1449.8579,-46.2308 + 1100);
            SetVehicleZAngle(GetPlayerVehicleID(playerid), 360 + 1100);
        }
        else {
            Streamer_UpdateEx(playerid, 1218.8041,-1449.8579,-46.2308 + 1100);
            SetPlayerPos(playerid,1218.8041,-1449.8579,-46.2308 + 1100);
            SetPlayerFacingAngle(playerid, 90);
        }
    }
                                                  // LAOfficeBuilding Roof Entrance
    else if (IsPlayerInRangeOfPoint(playerid,3.0,1779.0928,-1302.7775,131.7344)) {
        SetPlayerPos(playerid, 1771.0253,-1302.8596,125.7209);
        SetPlayerFacingAngle(playerid, 280);
    }
                                                  // LAOfficeBuilding Roof Entrance
    else if (IsPlayerInRangeOfPoint(playerid,3.0,1771.0253,-1302.8596,125.7209)) {
        SetPlayerPos(playerid,1779.0928,-1302.7775,131.7344);
        SetPlayerFacingAngle(playerid, 280);
    }
                                                  // Gold/Plat VIP
    else if (IsPlayerInRangeOfPoint(playerid,3.0,902.2482,1419.8180,-80.9308)) {
        if(PlayerInfo[playerid][pDonateRank] < 3) {
            SendClientMessageEx(playerid, COLOR_WHITE, "* You are not Gold or Platinum VIP!");
        }
        else {
            SetPlayerPos(playerid,911.6200,1426.2729,-81.1762);
            SetPlayerFacingAngle(playerid, 270);
        }
    }

	else if (cCar != INVALID_VEHICLE_ID && (GetVehicleModel(cCar) == 519 || GetVehicleModel(cCar) == 553) && IsPlayerInRangeOfVehicle(playerid, cCar, 5.0) && GetPlayerVehicleID(playerid) != cCar)
	{
	    if(VehicleStatus{cCar} == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You are not allowed to enter this plane as it's been damaged!");
	    new string[47 + MAX_PLAYER_NAME];
   		format(string, sizeof(string), "* %s enters the airplane as a passenger.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		switch(GetVehicleModel(cCar)) {
			case 519: { // Shamal
				SetPlayerPos(playerid, 2.509036, 23.118730, 1199.593750);
				SetPlayerFacingAngle(playerid, 82.14);
				PlayerInfo[playerid][pInt] = 1;
				SetPlayerInterior(playerid, 1);
			}
			case 553: { // Nevada
				SetPlayerPos(playerid, 315.9396, 973.2628, 1961.5985);
				SetPlayerFacingAngle(playerid, 2.7);
				PlayerInfo[playerid][pInt] = 9;
				SetPlayerInterior(playerid, 9);
			}
		}


        SetCameraBehindPlayer(playerid);
		PlayerInfo[playerid][pVW] = cCar;
		SetPlayerVirtualWorld(playerid, cCar);
		InsidePlane[playerid] = cCar;
		SendClientMessageEx(playerid, COLOR_WHITE, "Type /exit near the door to exit the vehicle, or /window to look outside.");
	}
	if(GetPVarType(playerid, "tpDeliverVehTimer") > 0)
	{
		SetPVarInt(playerid, "tpJustEntered", 1);
		new Float: playerPos[3];
		GetPlayerPos(playerid, playerPos[0], playerPos[1], playerPos[2]);
		SetPVarFloat(playerid, "tpDeliverVehX", playerPos[0]);
		SetPVarFloat(playerid, "tpDeliverVehY", playerPos[1]);
		SetPVarFloat(playerid, "tpDeliverVehZ", playerPos[2]);
	}
    return 1;
}

CMD:exit(playerid, params[])
{
	if (GetPVarInt(playerid, "_BikeParkourStage") > 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You must finish your parkour activity first, or /leaveparkour.");
		return 1;
	}

	if (GetPVarInt(playerid, "_SwimmingActivity") > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are no longer participating in the swimming activity.");
		DeletePVar(playerid, "_SwimmingActivity");
		DisablePlayerCheckpoint(playerid);
	}

	if (GetPVarInt(playerid, "_BoxingQueue") == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are no longer in the boxing queue.");
		DeletePVar(playerid, "_BoxingQueue");
		DeletePVar(playerid, "_BoxingQueueTick");
	}

    if(GetPVarInt(playerid, "IsInArena") >= 0) {
        SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
        return 1;
    }
	if(GetPVarType(playerid, "StreamPrep")) {
		return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now. Wait for streaming to finish.");
	}
    if( PlayerCuffed[playerid] >= 1 || PlayerInfo[playerid][pBeingSentenced] != 0 ) {
        SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
        return 1;
    }
    for(new i = 0; i <  sizeof(DDoorsInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW]) {
            SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
            PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddExteriorInt];
            SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
            PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddExteriorVW];
            SetPlayerToTeamColor(playerid);
            if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
                LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
                if(GetPVarInt(playerid, "tpForkliftTimer") > 0)
				{
				    SetPVarInt(playerid, "tpJustEntered", 1);
				    new Float: pX, Float: pY, Float: pZ;
					GetPlayerPos(playerid, pX, pY, pZ);
					SetPVarFloat(playerid, "tpForkliftX", pX);
			 		SetPVarFloat(playerid, "tpForkliftY", pY);
			  		SetPVarFloat(playerid, "tpForkliftZ", pZ);
				}
                if(DynVeh[GetPlayerVehicleID(playerid)] != -1)
				{
				    new vw[1];
					vw[0] = GetVehicleVirtualWorld(GetPlayerVehicleID(playerid));
				    if(DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][0] != INVALID_OBJECT_ID)
				    {
				    	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectID][0], E_STREAMER_WORLD_ID, vw[0]);

					}
					if(DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][1] != INVALID_OBJECT_ID)
				    {
						Streamer_SetArrayData(STREAMER_TYPE_OBJECT, DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectID][1], E_STREAMER_WORLD_ID, vw[0]);

					}
				}
                //foreach(new passenger: Player)
				for(new passenger = 0; passenger < MAX_PLAYERS; ++passenger)
				{
					if(IsPlayerConnected(passenger))
					{
						if(passenger != playerid)
						{
							if(IsPlayerInVehicle(passenger, GetPlayerVehicleID(playerid)))
							{
								SetPlayerInterior(passenger,DDoorsInfo[i][ddExteriorInt]);
								PlayerInfo[passenger][pInt] = DDoorsInfo[i][ddExteriorInt];
								PlayerInfo[passenger][pVW] = DDoorsInfo[i][ddExteriorVW];
								SetPlayerVirtualWorld(passenger, DDoorsInfo[i][ddExteriorVW]);
							}
						}
					}	
                }
            }
            else {
                SetPlayerPos(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
                SetCameraBehindPlayer(playerid);
            }
			if(DDoorsInfo[i][ddCustomExterior]) Player_StreamPrep(playerid, DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ], FREEZE_TIME);
            return 1;
        }
    }
    for(new i = 0; i < sizeof(FamilyInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,FamilyInfo[i][FamilyExit][0], FamilyInfo[i][FamilyExit][1], FamilyInfo[i][FamilyExit][2]) && PlayerInfo[playerid][pVW] == FamilyInfo[i][FamilyVirtualWorld]) {
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid,0);
            Streamer_UpdateEx(playerid, FamilyInfo[i][FamilyEntrance][0],FamilyInfo[i][FamilyEntrance][1],FamilyInfo[i][FamilyEntrance][2]);
            SetPlayerPos(playerid,FamilyInfo[i][FamilyEntrance][0],FamilyInfo[i][FamilyEntrance][1],FamilyInfo[i][FamilyEntrance][2]);
            SetPlayerFacingAngle(playerid,FamilyInfo[i][FamilyEntrance][3]);
            return 1;
        }
    }
    for(new i = 0; i <  sizeof(HouseInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && PlayerInfo[playerid][pVW] == HouseInfo[i][hIntVW]) {
			SetPlayerInterior(playerid,0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPos(playerid,HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
            SetPlayerFacingAngle(playerid, HouseInfo[i][hExteriorA]);
            SetCameraBehindPlayer(playerid);
            SetPlayerVirtualWorld(playerid, HouseInfo[i][hExtVW]);
            PlayerInfo[playerid][pVW] = HouseInfo[i][hExtVW];
			PlayerInfo[playerid][pInt] = HouseInfo[i][hExtIW];
            SetPlayerInterior(playerid, HouseInfo[i][hExtIW]);
			if(HouseInfo[i][hCustomExterior]) Player_StreamPrep(playerid, HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ], FREEZE_TIME);
            return 1;
        }
    }
    for(new i = 0; i < sizeof(Businesses); i++) {
		if (IsPlayerInRangeOfPoint(playerid,3,Businesses[i][bIntPos][0], Businesses[i][bIntPos][1], Businesses[i][bIntPos][2])) {
		    if(Businesses[i][bVW] == 0 && PlayerInfo[playerid][pVW] == BUSINESS_BASE_VW + i || Businesses[i][bVW] != 0 && PlayerInfo[playerid][pVW] == Businesses[i][bVW]) {
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
        	    SetPlayerPos(playerid,Businesses[i][bExtPos][0],Businesses[i][bExtPos][1],Businesses[i][bExtPos][2]);
        	    SetPlayerFacingAngle(playerid, Businesses[i][bExtPos][3]);
        	    SetCameraBehindPlayer(playerid);
				PlayerInfo[playerid][pInt] = 0;
        	    PlayerInfo[playerid][pVW] = 0;
 				DeletePVar(playerid, "BusinessesID");
           	 	if(Businesses[i][bCustomExterior]) Player_StreamPrep(playerid, Businesses[i][bExtPos][0], Businesses[i][bExtPos][1], Businesses[i][bExtPos][2], FREEZE_TIME);
            	return 1;
			}
        }
    }

    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1753.6423,-1586.9365,13.2424)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid), 1753.4561,-1595.1804,13.5381);
            SetVehicleZAngle(GetPlayerVehicleID(playerid), 347.7918);
        }
        else {
            SetPlayerPos(playerid,1753.4561,-1595.1804,13.5381);
        }
    }
    else if(InsidePlane[playerid] != INVALID_VEHICLE_ID)
	{
	    if(GetPVarType(playerid, "air_Mode")) {
	        SendClientMessageEx(playerid, COLOR_GREY, "You must stop looking out the window! (/window)");
	        return 1;
	    }
	    new string[64];
        format(string, sizeof(string), "* %s exits the airplane.", GetPlayerNameEx(playerid));
        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

        if(!IsAPlane(InsidePlane[playerid])) {
            PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
            GivePlayerValidWeapon(playerid, 46, 60000);
            SetPlayerPos(playerid, 0.000000, 0.000000, 420.000000); // lol nick
        }
        else {
            new Float:X, Float:Y, Float:Z;
            GetVehiclePos(InsidePlane[playerid], X, Y, Z);
            SetPlayerPos(playerid, X-2.7912, Y+3.2304, Z);
			Player_StreamPrep(playerid, X-2.7912,Y+3.2304,Z, FREEZE_TIME);
            if(Z > 50.0) {
                PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
                GivePlayerValidWeapon(playerid, 46, 60000);
            }
        }

        PlayerInfo[playerid][pVW] = 0;
        SetPlayerVirtualWorld(playerid, 0);
        PlayerInfo[playerid][pInt] = 0;
        SetPlayerInterior(playerid, 0);
        InsidePlane[playerid] = INVALID_VEHICLE_ID;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2045.0183,-211.6728,991.5364)) {
        if(BackEntrance) {
         	SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
	        SetPlayerPos(playerid, -2033.7502,-154.8784,35.3203);
		 }
		 else return SendClientMessageEx(playerid, COLOR_GREY, "You don't have the keys for that door (locked) !");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2091.0200,-199.8031,978.8315)) {
        if(IsACop(playerid)) {
	        SetPlayerPos(playerid, -2088.4797,-199.6259,978.8315);
		 }
		 else return SendClientMessageEx(playerid, COLOR_GREY, "You don't have the keys for that door (LEO restricted) !");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1169.67, -1356.32, 2423.04) && GetPlayerVirtualWorld(playerid) == 7) {
                                                  //Battle Carrier
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerFacingAngle(playerid, 180);
        new Float:X, Float:Y, Float:Z;
        GetDynamicObjectPos(Carrier[0], X, Y, Z);
        SetPlayerPos(playerid, (X-0.377671),(Y-10.917018),11.6986);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 316.4553,-170.2923,999.5938) && GetPlayerVirtualWorld(playerid) == 1337) {
                                                  //Battle Carrier Armoury
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        PlayerInfo[playerid][pVW] = 0;
        new Float:X, Float:Y, Float:Z;
        GetDynamicObjectPos(Carrier[0], X, Y, Z);
        SetPlayerPos(playerid, (X-6.422671),(Y-10.898918),11.6986);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 305.6966,-159.1586,999.5938)&& GetPlayerVirtualWorld(playerid) == 1337) {
                                                  //Battle Carrier Armoury
        SetPlayerPos(playerid, 306.4042,-159.0768,999.5938);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -959.6347,1956.4598,9.0000) && GetPlayerVirtualWorld(playerid) == 1337) {
                                                  //Engine Room Exit
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        new Float:X, Float:Y, Float:Z;
        GetDynamicObjectPos(Carrier[0], X, Y, Z);
        SetPlayerPos(playerid, (X-5.560629),(Y-3.853518),11.6986);
        PlayerInfo[playerid][pVW] = 0;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1494.3763,1303.5875,1093.2891) && GetPlayerVirtualWorld(playerid) == 1337) {
                                                  //Briefing Room Exit
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        new Float:X, Float:Y, Float:Z;
        GetDynamicObjectPos(Carrier[0], X, Y, Z);
        SetPlayerPos(playerid, (X-15.382171),(Y-2.272918),11.6986);
        PlayerInfo[playerid][pVW] = 0;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 971.70568847656, 0.73652172088623, 1013.0336914063)) {
        if(PlayerInfo[playerid][pFMember] == 1) {
            SetPlayerPos(playerid, 971.75524902344, 1.949291229248, 1012.8675537109);
            SetCameraBehindPlayer(playerid);
            Player_StreamPrep(playerid, 971.75524902344, 1.949291229248, 1012.8675537109, FREEZE_TIME);
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (Hades' Children MC Members only)!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -265.52786254883, 1409.2824707031, -2.2975430488586)) {
        if(PlayerInfo[playerid][pFMember] == 1) {
            SetPlayerPos(playerid, -230.57353210449, 1409.3792724609, -5.2974662780762);
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetCameraBehindPlayer(playerid);
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
			Player_StreamPrep(playerid, -230.57353210449, 1409.3792724609, -5.2974662780762, FREEZE_TIME);
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (Hades' Children MC Members only)!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -270.8628,1417.2441,-2.2902)) {
        if(PlayerInfo[playerid][pFMember] == 1) {
            SetPlayerPos(playerid, 255.84442138672, -158.21658325195, 1.677818775177);
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetCameraBehindPlayer(playerid);
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
			Player_StreamPrep(playerid, 255.84442138672, -158.21658325195, 1.677818775177, FREEZE_TIME);
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (Hades' Children MC Members only)!");
        }
    }
                                                  //Garage
    else if (IsPlayerInRangeOfPoint(playerid,8.0,-1790.378295,1436.949829,7.187500)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid), 1551.8052,31.0254,24.1446);
        }
        else {
            SetPlayerPos(playerid,1551.8052,31.0254,24.1446);
        }
    }
                                                        //VIP Garage
    else if (IsPlayerInRangeOfPoint(playerid,8.0,2425.9028,-1640.0483,1015.3889)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid),  1819.3533,-1560.3534,13.5469);
            SetVehicleZAngle(GetPlayerVehicleID(playerid),  253);
        }
        else {
            SetPlayerPos(playerid,1819.3533,-1560.3534,13.5469);
            SetPlayerFacingAngle(playerid,253);
        }
	}
                                                  // Hitman HQ
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -68.845336914063, 1351.3386230469, 1079.2109375 ) && (GetPlayerVirtualWorld(playerid) == 666420)) {
        	if (arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] == 2 || arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] == 2) {
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPos(playerid, -418.95, -1759.26, 6.22);
            SetCameraBehindPlayer(playerid);
        }
    }
                                                  // Hitman HQ
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -68.845336914063, 1351.3386230469, 1079.2109375 ) && (GetPlayerVirtualWorld(playerid) == 666421)) {
        	if (arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] == 2 || arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] == 2) {
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPos(playerid, 2323.3135, 7.6760, 26.5640);
            SetPlayerFacingAngle(playerid, 265.11);
            SetCameraBehindPlayer(playerid);
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 301.228820, 191.181884, 1007.171875)) {
                                                  //SFPD Exit to garage
        if(IsACop(playerid)) {
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPos(playerid,-1591.450195, 716.007141, -5.242187);
            SetPlayerFacingAngle(playerid, 271.00);
            SetCameraBehindPlayer(playerid);
        }
        else {
            return SendClientMessageEx(playerid, COLOR_GRAD2, "Access Denied.");
        }
    }
                                                  //SASD - Elevator
    else if (IsPlayerInRangeOfPoint(playerid,3.0,612.6414,-629.8659,-4.0447)) {
        if(IsACop(playerid)) {
            SetPlayerFacingAngle(playerid, 268);
            GameTextForPlayer(playerid, "~w~SASD HQ", 5000, 1);
            SetPlayerPos(playerid,2530.3774,-1689.9998,562.7922);
            SetPlayerVirtualWorld(playerid, 1699);
            PlayerInfo[playerid][pVW] = 1699;
			Player_StreamPrep(playerid, 2530.3774,-1689.9998,562.7922, FREEZE_TIME);
        }
        else {
            return SendClientMessageEx(playerid, COLOR_GRAD2, "Access Denied.");
        }
    }
    /*else if (IsPlayerInRangeOfPoint(playerid,6.0,-1404.5299,-259.0602,1043.6563)) {
        SetPlayerInterior(playerid,0);
        SetPlayerPos(playerid,2695.6235,-1704.6960,11.8438);
    }
    else if (IsPlayerInRangeOfPoint(playerid,8.0,-1443.0554,-581.1879,1055.0472)) {
        SetPlayerInterior(playerid,0);
        SetPlayerPos(playerid,-2111.5686,-443.9720,38.7344);
    }
    else if (IsPlayerInRangeOfPoint(playerid,8.0,-1464.7732,1557.5533,1052.5313)) {
        SetPlayerInterior(playerid,0);
        SetPlayerPos(playerid,-2080.3079,-406.0309,38.7344);
    }*/
                                                  // NG exit
    else if (IsPlayerInRangeOfPoint(playerid,4.0,-273.884765625,1875.1552734375,29.817853927612)) {
        if (PlayerInfo[playerid][pJailTime] == 0) {
            SetPlayerInterior(playerid,0);
            SetPlayerPos(playerid,200.2569,1869.5732,13.1470);
        }
        else {
            SetPlayerHealth(playerid, 0);
            SendClientMessageEx(playerid, COLOR_WHITE, "You can not escape admin prison!");
        }

    }
                                                  //Courthouse Garage
    else if (IsPlayerInRangeOfPoint(playerid,20.0,1381.7274,-1676.4248,-13.2229+1100.00)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid),  1423.0443,-1664.5244,13.5810);
            SetVehicleZAngle(GetPlayerVehicleID(playerid),  270);
        }
        else {
            SetPlayerPos(playerid,1423.0443,-1664.5244,13.5810);
            SetPlayerFacingAngle(playerid,270);
        }
    }
                                                  //Gym Garage
    else if (IsPlayerInRangeOfPoint(playerid,20.0,2240.7332,-1695.9648,(-0.0826+1100.00))) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid),  2273.6787,-1728.9022,13.5039);
            SetVehicleZAngle(GetPlayerVehicleID(playerid),  180);
        }
        else {
            SetPlayerPos(playerid,2273.6787,-1728.9022,13.5039);
            SetPlayerFacingAngle(playerid,180);
        }
    }
                                                  //PB Garage
    else if (IsPlayerInRangeOfPoint(playerid,20.0,1218.60,-1451.69,(-46.85+1100.00))) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid),  1218.6017,-1421.5887,13.9084);
            SetVehicleZAngle(GetPlayerVehicleID(playerid),  360);
        }
        else {
            SetPlayerPos(playerid,1218.6017,-1421.5887,13.9084);
        }
    }
                                           // Gold/Plat VIP
    else if (IsPlayerInRangeOfPoint(playerid,3.0, 911.6200,1426.2729,-81.1762)) {
        SetPlayerPos(playerid,902.2482,1419.8180,-80.9308);
        SetPlayerFacingAngle(playerid, 90);
    }
    return 1;
}

CMD:home(playerid, params[])
{
    if(CheckPointCheck(playerid))
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
        return 1;
    }
    if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID)
	{
        SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorZ], 4.0);
        GameTextForPlayer(playerid, "~w~Waypoint set ~r~Home", 5000, 1);
        gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
    }
    else
	{
        GameTextForPlayer(playerid, "~w~You are homeless", 5000, 1);
    }
    return 1;
}

CMD:showmehq(playerid, params[])
{
    if(CheckPointCheck(playerid)) {
        SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
        return 1;
    }
	if (IsAHitman(playerid)) {
	    SetPlayerCheckpoint(playerid,-418.95, -1759.26, 6.22, 4.0);
	    GameTextForPlayer(playerid, "~w~Waypoint set ~r~HQ", 5000, 1);
	    gPlayerCheckpointStatus[playerid] = CHECKPOINT_HITMAN;
    }
    return 1;
}


CMD:showmehq2(playerid, params[])
{
    if(CheckPointCheck(playerid)) {
        SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
        return 1;
    }
	if (arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] == 2 || arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] == 2)
	{
	    SetPlayerCheckpoint(playerid,811.087707, -564.493835, 16.335937, 4.0);
	    GameTextForPlayer(playerid, "~w~Waypoint set ~r~HQ", 5000, 1);
	    gPlayerCheckpointStatus[playerid] = CHECKPOINT_HITMAN2;
    }
    return 1;
}


CMD:showmehq3(playerid, params[])
{
    if(CheckPointCheck(playerid)) {
        SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
        return 1;
    }
   	if (arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] == 2 || arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] == 2)
	{
    	SetPlayerCheckpoint(playerid, 1415.727905, -1299.371093, 15.054657, 4.0);
	    GameTextForPlayer(playerid, "~w~Waypoint set ~r~HQ", 5000, 1);
    	gPlayerCheckpointStatus[playerid] = CHECKPOINT_HITMAN3;
	}
    return 1;
}

CMD:bigears(playerid, params[])
{
    if( PlayerInfo[playerid][pAdmin] >= 2) {
        ShowPlayerDialog(playerid, BIGEARS, DIALOG_STYLE_LIST, "Please choose an item to proceed", "Global Chat\nOOC Chat\nIC Chat\nFaction Chat\nFamily Chat\nPlayer\nPrivate Messages\nDisable Bigears", "Select", "Cancel");
    }
    return 1;
}

CMD:clearall(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 1338) {
        //foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				PlayerInfo[i][pWantedLevel] = 0;
				SetPlayerToTeamColor(i);
				SetPlayerWantedLevel(i, 0);
				ClearCrimes(i);
			}	
        }
        SendClientMessageEx(playerid,COLOR_GRAD1, "You have cleared everyone's Wanted Level.");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:clearallreports(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 1337) {
        new string[128];
        ClearReports();
        SendClientMessageEx(playerid,COLOR_GRAD1, "You have cleared all the active reports.");
        format(string, sizeof(string), "AdmCmd: %s has cleared all the pending reports.", GetPlayerNameEx(playerid));
        ABroadCast(COLOR_LIGHTRED, string, 2);
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:savechars(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 4) {
        SaveEventPoints();
        mysql_SaveCrates();
        SendClientMessageEx(playerid, COLOR_YELLOW, "All Crates Saved sucessfully.");
        SaveAllAccountsUpdate();
		//g_mysql_DumpAccounts();
        SendClientMessageEx(playerid, COLOR_YELLOW, "Update Process Started - Wait for Account Saving Finish Confirmation.");
        SaveHouses();
        SendClientMessageEx(playerid, COLOR_YELLOW, "House saving process started.");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:lottoinfo(playerid, params[])
{
	new szMessage[128];
	format(szMessage, sizeof(szMessage), "Next drawing is at %i:00, tickets sold %i, and total jackpot is $%s.", NextDrawing, TicketsSold, number_format(Jackpot));
	SendClientMessage(playerid, COLOR_WHITE, szMessage);
	return 1;
}

CMD:speclotto(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) {
	    SendClientMessage(playerid, COLOR_GREY, "You don't have access to this command.");
	}
	else if(SpecLotto) {
	    SendClientMessage(playerid, COLOR_GREY, "A special lottery has already been started.");
	}
	else {

	    new
	        prize[64],
	        string[128];

	    if(sscanf(params, "s[64]", prize)) {
	        SendClientMessage(playerid, COLOR_GREY, "USAGE: /speclotto [text]");
		}
		else {
		    SpecLotto = 1;
		    LottoPrize = prize;
		    format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has started a special lottery. (Prize: %s)", GetPlayerNameEx(playerid), prize);
			ABroadCast(COLOR_YELLOW, string, 4);
			return 1;
		}
	}
	return 1;
}

CMD:cancelspeclotto(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) {
	    SendClientMessage(playerid, COLOR_GREY, "You don't have access to this command.");
	}
	else if(!SpecLotto) {
	    SendClientMessage(playerid, COLOR_GREY, "No special lottery.");
	}
	else {
	    SpecLotto = 0;
	    LottoPrize = "";
	}
	return 1;
}

CMD:myangle(playerid, params[])
{
    new myString[128], Float:a;
    GetPlayerFacingAngle(playerid, a);

    format(myString, sizeof(myString), "Your angle is: %0.2f", a);
    SendClientMessageEx(playerid, 0xFFFFFFFF, myString);

    new myString2[128], Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    format(myString2, sizeof(myString), "Your position is: %f, %f, %f", x, y, z);
    SendClientMessageEx(playerid, 0xFFFFFFFF, myString2);
    return 1;
}

CMD:setcolor(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
        ShowPlayerDialog(playerid, COLORMENU, DIALOG_STYLE_LIST, "Color Menu", "Blue\nBlack\nRed\nOrange\nPink\nPurple\nGreen\nYellow\nWhite", "Select", "Cancel");
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:mark(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 2) {

		new
			Float: f_PlayerPos[3];

		GetPlayerPos(playerid, f_PlayerPos[0], f_PlayerPos[1], f_PlayerPos[2]);
		SetPVarFloat(playerid, "tpPosX1", f_PlayerPos[0]);
		SetPVarFloat(playerid, "tpPosY1", f_PlayerPos[1]);
		SetPVarFloat(playerid, "tpPosZ1", f_PlayerPos[2]);

		SetPVarInt(playerid, "tpInt1", GetPlayerInterior(playerid));
        SendClientMessageEx(playerid, COLOR_GRAD1, "Teleporter destination set!");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:mark2(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 2) {

		new
			Float: f_PlayerPos[3];

		GetPlayerPos(playerid, f_PlayerPos[0], f_PlayerPos[1], f_PlayerPos[2]);
		SetPVarFloat(playerid, "tpPosX2", f_PlayerPos[0]);
		SetPVarFloat(playerid, "tpPosY2", f_PlayerPos[1]);
		SetPVarFloat(playerid, "tpPosZ2", f_PlayerPos[2]);

		SetPVarInt(playerid, "tpInt2", GetPlayerInterior(playerid));
        SendClientMessageEx(playerid, COLOR_GRAD1, "Teleporter destination set!");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:gotojet(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 3) {
        if (GetPlayerState(playerid) == 2) {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, 1.71875, 30.4062, 1200.34);
        }
        else {
            SetPlayerPos(playerid, 1.71875, 30.4062, 1200.34);
        }
        SetPlayerInterior(playerid,1);
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:eventstaff(playerid, params[])
{
	new Float:health, Float:armor;
    if( PlayerInfo[ playerid ][ pAdmin ] >= 1 || PlayerInfo[playerid][pHelper] >= 2 ) {
		if(GetPVarType(playerid, "pGodMode"))
			return SendClientMessageEx(playerid, COLOR_GRAD1, "Please disable your god mode before joining the event staff (/god)");
        if(EventKernel[EventJoinStaff] == 1) {
			if(GetPVarInt(playerid, "eventStaff") == 0) {
				for(new i; i < sizeof(EventKernel[EventStaff]); i++) if(EventKernel[EventStaff][i] == INVALID_PLAYER_ID) {
					SetPVarInt( playerid, "EventToken", 1 );
					EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
					EventLastInt[playerid] = GetPlayerInterior(playerid);
					GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
					GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
					SetPlayerPos( playerid, EventKernel[ EventPositionX ], EventKernel[ EventPositionY ], EventKernel[ EventPositionZ ] );
					SetPlayerInterior( playerid, EventKernel[ EventInterior ] );
					SetPlayerVirtualWorld( playerid, EventKernel[ EventWorld ] );
					PlayerInfo[playerid][pAGuns][GetWeaponSlot(38)] = 38;
					GivePlayerValidWeapon(playerid, 38, 60000);
					EventKernel[EventStaff][i] = playerid;
					GetPlayerHealth(playerid,health);
					SetPVarFloat(playerid, "pPreGodHealth", health);
					GetPlayerArmour(playerid,armor);
					SetPVarFloat(playerid, "pPreGodArmor", armor);
					SetPlayerHealth(playerid, 0x7FB00000);
					SetPlayerArmor(playerid, 0x7FB00000);
					SetPVarInt(playerid, "eventStaff", 1);
					return SendClientMessageEx( playerid, COLOR_WHITE, "You have joined the event staff." );
				}
				SendClientMessageEx(playerid, COLOR_GRAD2, "Unable to join the event staff, max is 5.");
			}	
        }
    }
    return 1;
}

CMD:quitevent(playerid, params[])
{
	new Float:health, Float:armor;
	if( GetPVarInt( playerid, "eventStaff" ) == 1) {
		if( EventKernel[ EventStatus ] == 1 || EventKernel[ EventStatus ] == 2 ) {
       		if(EventKernel[EventType] == 3) {
					DisablePlayerCheckpoint(playerid);
            	    ResetPlayerWeapons( playerid );
        			DeletePVar(playerid, "EventToken");
        			SetPlayerWeapons(playerid);
       				SetPlayerToTeamColor(playerid);
        			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
        			SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
        			SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
        			SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
        			SetPlayerInterior(playerid,EventLastInt[playerid]);
        			Player_StreamPrep(playerid, EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3], FREEZE_TIME);
        			RemovePlayerWeapon(playerid, 38);
        			for(new i = 0; i < 6; i++) {
        	   			EventFloats[playerid][i] = 0.0;
    	   			}
       		}
       		EventLastVW[playerid] = 0;
       		EventLastInt[playerid] = 0;
       		SendClientMessageEx( playerid, COLOR_LIGHTBLUE, "* You have quit the event as event staff." );
       		return 1;
		}
      	ResetPlayerWeapons( playerid );
       	DeletePVar(playerid, "EventToken");
       	SetPlayerWeapons(playerid);
       	SetPlayerToTeamColor(playerid);
       	SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
       	SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
      	SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
       	SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
       	SetPlayerInterior(playerid,EventLastInt[playerid]);
       	Player_StreamPrep(playerid, EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3], FREEZE_TIME);
       	if(EventKernel[EventType] == 4)
		{
			if(GetPVarType(playerid, "pEventZombie")) DeletePVar(playerid, "pEventZombie");
 			SetPlayerToTeamColor(playerid);
		}
       	for(new i = 0; i < 6; i++) {
        	EventFloats[playerid][i] = 0.0;
        }
        EventLastVW[playerid] = 0;
        EventLastInt[playerid] = 0;
        RemovePlayerWeapon(playerid, 38);
		health = GetPVarFloat(playerid, "pPreGodHealth");
		SetPlayerHealth(playerid,health);
		armor = GetPVarFloat(playerid, "pPreGodArmor");
		SetPlayerArmor(playerid, armor);
		DeletePVar(playerid, "pPreGodHealth");
		DeletePVar(playerid, "pPreGodArmor");
		DeletePVar(playerid, "eventStaff");
        return SendClientMessageEx( playerid, COLOR_LIGHTBLUE, "* You have quit the event as event staff." );
	}	
    else if( GetPVarInt( playerid, "EventToken" ) == 1 ) {
        if( EventKernel[ EventStatus ] == 1 || EventKernel[ EventStatus ] == 2 ) {
       		if(EventKernel[EventType] == 3) {
					if(IsValidDynamic3DTextLabel(RFLTeamN3D[playerid])) {
						DestroyDynamic3DTextLabel(RFLTeamN3D[playerid]);
					}
					DisablePlayerCheckpoint(playerid);
            	    ResetPlayerWeapons( playerid );
        			DeletePVar(playerid, "EventToken");
        			SetPlayerWeapons(playerid);
       				SetPlayerToTeamColor(playerid);
        			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
        			SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
        			SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
        			SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
        			SetPlayerInterior(playerid,EventLastInt[playerid]);
        			SetPlayerHealth(playerid, EventFloats[playerid][4]);
        			if(EventFloats[playerid][5] > 0) {
        				SetPlayerArmor(playerid, EventFloats[playerid][5]);
        			}
        			Player_StreamPrep(playerid, EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3], FREEZE_TIME);
        			RemovePlayerWeapon(playerid, 38);
        			for(new i = 0; i < 6; i++) {
        	   			EventFloats[playerid][i] = 0.0;
    	   			}
       		}
       		EventLastVW[playerid] = 0;
       		EventLastInt[playerid] = 0;
       		SendClientMessageEx( playerid, COLOR_LIGHTBLUE, "* You have quit the event." );
       		return 1;
		}
      	ResetPlayerWeapons( playerid );
       	DeletePVar(playerid, "EventToken");
       	SetPlayerWeapons(playerid);
       	SetPlayerToTeamColor(playerid);
       	SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
       	SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
      	SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
       	SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
       	SetPlayerInterior(playerid,EventLastInt[playerid]);
       	SetPlayerHealth(playerid, EventFloats[playerid][4]);
       	if(EventFloats[playerid][5] > 0) {
       		SetPlayerArmor(playerid, EventFloats[playerid][5]);
       	}
       	Player_StreamPrep(playerid, EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3], FREEZE_TIME);
       	if(EventKernel[EventType] == 4)
		{
			if(GetPVarType(playerid, "pEventZombie")) DeletePVar(playerid, "pEventZombie");
 			SetPlayerToTeamColor(playerid);
		}
       	for(new i = 0; i < 6; i++) {
        	EventFloats[playerid][i] = 0.0;
        }
        EventLastVW[playerid] = 0;
        EventLastInt[playerid] = 0;
        RemovePlayerWeapon(playerid, 38);
		health = GetPVarFloat(playerid, "pPreGodHealth");
		if(health > 0) {
			SetPlayerHealth(playerid,health);
		}
		armor = GetPVarFloat(playerid, "pPreGodArmor");
		if(armor > 0) {
			SetPlayerArmor(playerid, armor);
		}	
		DeletePVar(playerid, "pPreGodHealth");
		DeletePVar(playerid, "pPreGodArmor");
        SendClientMessageEx( playerid, COLOR_LIGHTBLUE, "* You have quit the event." );
    }
    return 1;
}

CMD:eventreset(playerid, params[])
{
    if( PlayerInfo[ playerid ][ pAdmin ] >= 1337 ) {
        new string[128];
        if( EventKernel[EventAdvisor] >= 1 ) {
            EventKernel[EventAdvisor] = 0;
            KillTimer( EventTimerHandle );
            format( string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has reset the event timer.", GetPlayerNameEx( playerid ) );
            ABroadCast( COLOR_YELLOW, string, 4 );
        }
        else {
            SendClientMessageEx( playerid, COLOR_GREY, "The timeout expired before you attempted to use this command. You can set-up an event." );
        }
    }
    return 1;
}

CMD:requestevent(playerid, params[])
{
    if( PlayerInfo[ playerid ][ pAdmin ] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4) {
        new string[128];
        if( EventKernel[ EventStatus ] == 0 ) {
            if(EventKernel[EventRequest] != INVALID_PLAYER_ID || EventKernel[EventCreator] != INVALID_PLAYER_ID) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "There's already someone requesting/making an event.");
                return 1;
            }
            if(EventKernel[EventAdvisor] == 1) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "Another admin/advisor already requested/made an event within the last three hours, please try again later!");
                return 1;
            }
            if(PlayerInfo[ playerid ][ pAdmin ] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4) {
                EventKernel[ EventRequest ] = playerid;
                SendClientMessageEx( playerid, COLOR_GRAD2, "You have requested to set up an event, please wait until a Senior Admin approves it." );
                format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s would like to set up an event, do you approve? /acceptevent or /denyevent.", GetPlayerNameEx(playerid) );
                ABroadCast( COLOR_YELLOW, string, 4 );
                EventKernel[EventAdvisor] = 1;
                EventTimerHandle = SetTimer("ERequested", 9600000, false);
            }
        }
        else {
            SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
        }
    }
    return 1;
}

CMD:vipparty(playerid, params[])
{
    if( PlayerInfo[playerid][pDonateRank] == 5 )
	{
        new string[128+MAX_PLAYER_NAME];
        if( EventKernel[ EventStatus ] == 0 )
		{
            if(EventKernel[EventRequest] != INVALID_PLAYER_ID || EventKernel[EventCreator] != INVALID_PLAYER_ID)
			{
                SendClientMessageEx(playerid, COLOR_GRAD2, "There's already someone requesting/making an event.");
                return 1;
            }
            if(EventKernel[EventAdvisor] == 1)
			{
                SendClientMessageEx(playerid, COLOR_GRAD2, "Another admin/advisor already requested/made an event within the last three hours, please try again later!");
                return 1;
            }
            if(PlayerInfo[ playerid ][ pAdmin ] >= 4 || PlayerInfo[playerid][pDonateRank] == 5) {
                EventKernel[ EventRequest ] = playerid;
                SendClientMessageEx( playerid, COLOR_GRAD2, "You have requested to set up an event, please wait until a Senior Admin approves it." );
                format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: VIP Mod %s would like to set up a VIP event - /acceptevent or /denyevent", GetPlayerNameEx(playerid) );
                ABroadCast( COLOR_YELLOW, string, 4 );
                EventKernel[EventAdvisor] = 1;
                EventKernel[VipOnly] = 1;
                EventTimerHandle = SetTimer("ERequested", 9600000, false);
            }
        }
        else
		{
            SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
        }
    }
    return 1;
}

CMD:denyevent(playerid, params[])
{
    if( PlayerInfo[ playerid ][ pAdmin ] >= 4 ) {
        new string[128];
        SendClientMessageEx( EventKernel[EventRequest], COLOR_GRAD2, "Your request was denied." );
        EventKernel[EventRequest] = INVALID_PLAYER_ID;
        EventKernel[EventCreator] = INVALID_PLAYER_ID;
        format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s has denied the event request.", GetPlayerNameEx(playerid) );
        ABroadCast( COLOR_YELLOW, string, 4 );
        for(new i; i < sizeof(EventKernel[EventStaff]); i++) {
            if(EventKernel[EventStaff][i] != INVALID_PLAYER_ID) {
                SetPlayerWeapons(EventKernel[EventStaff][i]);
                SetPlayerPos(EventKernel[EventStaff][i],EventFloats[EventKernel[EventStaff][i]][1],EventFloats[EventKernel[EventStaff][i]][2],EventFloats[EventKernel[EventStaff][i]][3]);
                SetPlayerVirtualWorld(EventKernel[EventStaff][i], EventLastVW[EventKernel[EventStaff][i]]);
                SetPlayerFacingAngle(EventKernel[EventStaff][i], EventFloats[EventKernel[EventStaff][i]][0]);
                SetPlayerInterior(EventKernel[EventStaff][i],EventLastInt[EventKernel[EventStaff][i]]);
                SetPlayerHealth(EventKernel[EventStaff][i], EventFloats[EventKernel[EventStaff][i]][4]);
                if(EventFloats[EventKernel[EventStaff][i]][5] > 0) {
                	SetPlayerArmor(EventKernel[EventStaff][i], EventFloats[EventKernel[EventStaff][i]][5]);
                }
                for(new d = 0; d < 6; d++) {
                    EventFloats[EventKernel[EventStaff][i]][d] = 0.0;
                }
                EventLastVW[EventKernel[EventStaff][i]] = 0;
                EventLastInt[EventKernel[EventStaff][i]] = 0;
                EventKernel[EventStaff][i] = INVALID_PLAYER_ID;
                ResetPlayerWeapons( i );
            }
        }

        EventKernel[ EventStatus ] = 0;
        EventKernel[ EventType ] = 0;
        EventKernel[ EventLimit ] = 0;
        EventKernel[ EventPlayers ] = 0;
        EventKernel[ EventWeapons ][0] = 0;
        EventKernel[ EventWeapons ][1] = 0;
        EventKernel[ EventWeapons ][2] = 0;
        EventKernel[ EventWeapons ][3] = 0;
        EventKernel[ EventWeapons ][4] = 0;
        EventKernel[EventCreator] = INVALID_PLAYER_ID;
        EventKernel[VipOnly] = 0;
        EventKernel[EventJoinStaff] = 0;
		EventKernel[EventCustomInterior] = 0;
    }

    return 1;
}

CMD:acceptevent(playerid, params[])
{
    if( PlayerInfo[ playerid ][ pAdmin ] >= 4 ) {
        if( EventKernel[ EventStatus ] == 0 ) {
            if(EventKernel[EventRequest] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(EventKernel[EventRequest])) {
                    if(EventKernel[EventCreator] != INVALID_PLAYER_ID) {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "There's already someone making an event.");
                        return 1;
                    }
                    new string[128];
                    EventKernel[EventCreator] = EventKernel[EventRequest];
                    EventKernel[EventRequest] = INVALID_PLAYER_ID;
                    SetPVarInt( EventKernel[EventCreator], "EventToken", 1 );
                    SendClientMessageEx( EventKernel[EventCreator], COLOR_GRAD2, "Your event request has been accepted, use /seteventpos to change the event position, once you do it people will be able to /eventstaff." );
                    if(PlayerInfo[EventKernel[EventCreator]][pHelper] >= 2) {
                        SendClientMessageEx( EventKernel[EventCreator], COLOR_GRAD2, "You now have temporary access to (/o)oc and /goto." );
                    }
                    format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s has approved the event request from %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(EventKernel[EventCreator]) );
                    ABroadCast( COLOR_YELLOW, string, 4 );
                    return 1;
                }
            }
        }
    }
    return 1;
}

CMD:approveevent(playerid, params[])
{
    if( PlayerInfo[ playerid ][ pAdmin ] >= 4 ) {
        if( EventKernel[ EventStartRequest ] == 1 ) {
            new string[128];
            EventKernel[ EventStatus ] = 1;
            EventKernel[EventStartRequest] = 0;
            SendClientMessageEx( EventKernel[EventCreator], COLOR_GRAD2, "Your event start request has been accepted, you can now use /announceevent to announce it to the server." );
            format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s has approved the event start request from %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(EventKernel[EventCreator]) );
            ABroadCast( COLOR_YELLOW, string, 4 );
            //foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pDonateRank] >= 3) {
						SendClientMessageEx(i, COLOR_YELLOW, "* Gold+ VIP Feature: An event has been started! /joinevent to join early");
					}
				}	
            }
            return 1;
        }
    }
    return 1;
}

CMD:god(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pWatchdog] < 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	{
		new Float:health, Float:armor;
	    if(GetPVarType(playerid, "pGodMode"))
	    {
			health = GetPVarFloat(playerid, "pPreGodHealth");
			SetPlayerHealth(playerid,health);
			armor = GetPVarFloat(playerid, "pPreGodArmor");
			SetPlayerArmor(playerid, armor);
			DeletePVar(playerid, "pGodMode");
			DeletePVar(playerid, "pPreGodHealth");
			DeletePVar(playerid, "pPreGodArmor");
			SendClientMessage(playerid, COLOR_WHITE, "God mode disabled");
		}
		else
		{
			GetPlayerHealth(playerid,health);
			SetPVarFloat(playerid, "pPreGodHealth", health);
			GetPlayerArmour(playerid,armor);
			SetPVarFloat(playerid, "pPreGodArmor", armor);
		    SetPlayerHealth(playerid, 0x7FB00000);
		    SetPlayerArmor(playerid, 0x7FB00000);
		    SetPVarInt(playerid, "pGodMode", 1);
		    SendClientMessage(playerid, COLOR_WHITE, "God mode enabled");
		}
    }
	return 1;
}

CMD:damagecheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	if(GetPVarType(playerid, "_dCheck")) {
		DeletePVar(playerid, "_dCheck");
		SendClientMessageEx(playerid, COLOR_WHITE, "You have stopped damagecheck.");
		return 1;
	}	
	new pID;
	if(sscanf(params, "u", pID)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /damagecheck [playerid]");
	if(!IsPlayerConnected(pID)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	new string[64];
	SetPVarInt(playerid, "_dCheck", pID);
	format(string, sizeof(string), "You will now see all the damage that %s takes.", GetPlayerNameEx(pID));
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	if(GetPVarInt(pID, "usingfirstaid") == 1) SendClientMessageEx(playerid, COLOR_ORANGE, "Note{ffffff}: Player is currently using a first aid kit.");
	return 1;
}

CMD:lastshot(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	new pID;
	if(sscanf(params, "u", pID)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /lastshot [playerid]");
	if(!IsPlayerConnected(pID)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	if(aLastShot[pID] == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GREY, "Player was not shot yet.");
	new string[128];
	format(string, sizeof(string), "%s was last shot by %s (ID: %d).",GetPlayerNameEx(pID), GetPlayerNameEx(aLastShot[pID]), aLastShot[pID]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:healnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4) {
		new string[128], radius, count;
		if(sscanf(params, "d", radius)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /healnear [radius]");
		if(radius < 1 || radius > 100)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Radius must be higher than 0 and lower than 100!");
			return 1;
		}
		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(ProxDetectorS(radius, playerid, i)) {
					SetPlayerHealth(i, 100);
					count++;
				}
			}	
        }
        format(string, sizeof(string), "You have healed everyone (%d) nearby.", count);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:armornear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4) {
		new string[128], radius, count;
		if(sscanf(params, "d", radius)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /armornear [radius]");
		if(radius < 1 || radius > 100)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Radius must be higher than 0 and lower than 100!");
			return 1;
		}
        //foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(ProxDetectorS(radius, playerid, i)) {
					SetPlayerArmor(i, 100);
					count++;
				}
			}	
        }
        format(string, sizeof(string), "You have given armor to everyone (%d) nearby.", count);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:nos(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7 || PlayerInfo[playerid][pJob3] == 7) {
        if(IsPlayerInAnyVehicle(playerid)) {
			if(GetPVarInt(playerid, "EventToken")) {
				return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this while in an event.");
			}
   			if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1010)) != 1010 && GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1009)) != 1009 && GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1008)) != 1008)
   			{
            	if(!IsPlayerInInvalidNosVehicle(playerid))
				{
                	new string[128];
                	new nostogive;
               		new level = PlayerInfo[playerid][pMechSkill];
 		 			if(level >= 0 && level < 50) { nostogive = 1009; }
    		 		else if(level >= 50 && level < 100) { nostogive = 1009; }
         			else if(level >= 100 && level < 200) { nostogive = 1008; }
                	else if(level >= 200 && level < 400) { nostogive = 1008; }
                	else if(level >= 400) { nostogive = 1010; }
                	AddVehicleComponent(GetPlayerVehicleID(playerid),nostogive);
                	PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
                	format(string, sizeof(string), "* %s added nitrous injection to the vehicle.", GetPlayerNameEx(playerid));
                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
            	else {
            	    SendClientMessageEx(playerid, COLOR_GREY, "Nitrous injection cannot be installed on this vehicle.");
            	}
			 }
			 else {
			    SendClientMessageEx(playerid, COLOR_GREY, "This vehicle already has nitrous.");
		 	}
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You're not in a vehicle.");
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GREY, "You are not a Mechanic!" );
    }
    return 1;
}

CMD:hyd(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7 || PlayerInfo[playerid][pJob3] == 7) {
        if(IsPlayerInAnyVehicle(playerid)) {
			if(IsPlayerInInvalidNosVehicle(playerid) || (DynVeh[GetPlayerVehicleID(playerid)] != -1 && DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_igID] != INVALID_GROUP_ID)) return SendClientMessageEx(playerid, COLOR_WHITE, "Hydraulics cannot be installed in this vehicle.");
			if(gettime() < PlayerInfo[playerid][pServiceTime]) return SendClientMessage(playerid, COLOR_GREY, "You must wait 20 seconds before using this command again.");
			new string[128];
			PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
			format(string, sizeof(string), "* %s added hydraulics to the vehicle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pServiceTime] = gettime()+20;
        }
        else return SendClientMessageEx(playerid, COLOR_WHITE, "You're not in a vehicle.");
    }
    else return SendClientMessageEx(playerid, COLOR_WHITE, "You are not a Mechanic!");
    return 1;
}

CMD:pnsedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], choice[32], id, amount;
	if(sscanf(params, "s[32]dD", choice, id, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pnsedit [name] [id] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Position, GroupCost, RegCost, Delete");
		return 1;
	}

	if(id >= MAX_PAYNSPRAYS)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Invalid Pay N' Spray ID!");
		return 1;
	}

	if(strcmp(choice, "position", true) == 0)
	{
		if(PayNSprays[id][pnsStatus] == 0)
		{
			PayNSprays[id][pnsStatus] = 1;
		}
		GetPlayerPos(playerid, PayNSprays[id][pnsPosX], PayNSprays[id][pnsPosY], PayNSprays[id][pnsPosZ]);
		PayNSprays[id][pnsInt] = GetPlayerInterior(playerid);
		PayNSprays[id][pnsVW] = GetPlayerVirtualWorld(playerid);
		format(string, sizeof(string), "You have changed the position on Pay N' Spray #%d.", id);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		DestroyDynamicPickup(PayNSprays[id][pnsPickupID]);
		DestroyDynamic3DTextLabel(PayNSprays[id][pnsTextID]);
		DestroyDynamicMapIcon(PayNSprays[id][pnsMapIconID]);
		format(string, sizeof(string), "/repaircar\nRepair Cost -- Regular: $%s | Faction: $%s\nID: %d", number_format(PayNSprays[id][pnsRegCost]), number_format(PayNSprays[id][pnsGroupCost]), id);
		PayNSprays[id][pnsTextID] = CreateDynamic3DTextLabel(string, COLOR_RED, PayNSprays[id][pnsPosX], PayNSprays[id][pnsPosY], PayNSprays[id][pnsPosZ]+0.5,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, PayNSprays[id][pnsVW], PayNSprays[id][pnsInt], -1);
		PayNSprays[id][pnsPickupID] = CreateDynamicPickup(1239, 23, PayNSprays[id][pnsPosX], PayNSprays[id][pnsPosY], PayNSprays[id][pnsPosZ], PayNSprays[id][pnsVW]);
		PayNSprays[id][pnsMapIconID] = CreateDynamicMapIcon(PayNSprays[id][pnsPosX], PayNSprays[id][pnsPosY], PayNSprays[id][pnsPosZ], 63, 0, PayNSprays[id][pnsVW], PayNSprays[id][pnsInt], -1, 500.0);
		SavePayNSpray(id);
		format(string, sizeof(string), "%s has edited Pay N' Spray ID %d's position.", GetPlayerNameEx(playerid), id);
		Log("logs/pnsedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "groupcost", true) == 0)
	{
		if(PayNSprays[id][pnsStatus] == 0)
		{
			format(string, sizeof(string), "Pay N' Spray #%d does not exist.", id);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
		PayNSprays[id][pnsGroupCost] = amount;
		format(string, sizeof(string), "You have changed the group cost for Pay N' Spray #%d to $%s.", id, number_format(amount));
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		DestroyDynamic3DTextLabel(PayNSprays[id][pnsTextID]);
		format(string, sizeof(string), "/repaircar\nRepair Cost -- Regular: $%s | Faction: $%s\nID: %d", number_format(PayNSprays[id][pnsRegCost]), number_format(PayNSprays[id][pnsGroupCost]), id);
		PayNSprays[id][pnsTextID] = CreateDynamic3DTextLabel(string, COLOR_RED, PayNSprays[id][pnsPosX], PayNSprays[id][pnsPosY], PayNSprays[id][pnsPosZ]+0.5,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, PayNSprays[id][pnsVW], PayNSprays[id][pnsInt], -1);
		SavePayNSpray(id);
		format(string, sizeof(string), "%s has changed the group cost on Pay N' Spray ID %d to $%s.", GetPlayerNameEx(playerid), id, number_format(amount));
		Log("logs/pnsedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "regcost", true) == 0)
	{
		if(PayNSprays[id][pnsStatus] == 0)
		{
			format(string, sizeof(string), "Pay N' Spray #%d does not exist.", id);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
		PayNSprays[id][pnsRegCost] = amount;
		format(string, sizeof(string), "You have changed the regular cost for Pay N' Spray #%d to $%s.", id, number_format(amount));
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		DestroyDynamic3DTextLabel(PayNSprays[id][pnsTextID]);
		format(string, sizeof(string), "/repaircar\nRepair Cost -- Regular: $%s | Faction: $%s\nID: %d", number_format(PayNSprays[id][pnsRegCost]), number_format(PayNSprays[id][pnsGroupCost]), id);
		PayNSprays[id][pnsTextID] = CreateDynamic3DTextLabel(string, COLOR_RED, PayNSprays[id][pnsPosX], PayNSprays[id][pnsPosY], PayNSprays[id][pnsPosZ]+0.5,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, PayNSprays[id][pnsVW], PayNSprays[id][pnsInt], -1);
		SavePayNSpray(id);
		format(string, sizeof(string), "%s has changed the regular cost on Pay N' Spray ID %d to $%s.", GetPlayerNameEx(playerid), id, number_format(amount));
		Log("logs/pnsedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "delete", true) == 0)
	{
		if(PayNSprays[id][pnsStatus] == 0)
		{
			format(string, sizeof(string), "Pay N' Spray #%d does not exist.", id);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
   	  	DestroyDynamicPickup(PayNSprays[id][pnsPickupID]);
	    DestroyDynamic3DTextLabel(PayNSprays[id][pnsTextID]);
		DestroyDynamicMapIcon(PayNSprays[id][pnsMapIconID]);
		PayNSprays[id][pnsStatus] = 0;
		PayNSprays[id][pnsPosX] = 0.0;
		PayNSprays[id][pnsPosY] = 0.0;
		PayNSprays[id][pnsPosZ] = 0.0;
		PayNSprays[id][pnsVW] = 0;
		PayNSprays[id][pnsInt] = 0;
		PayNSprays[id][pnsGroupCost] = 0;
		PayNSprays[id][pnsRegCost] = 0;
		SavePayNSpray(id);
		format(string, sizeof(string), "You have deleted Pay N' Spray #%d.", id);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has deleted Pay N' Spray ID %d.", GetPlayerNameEx(playerid), id);
		Log("logs/pnsedit.log", string);
		return 1;
	}
	return 1;
}

CMD:pnsstatus(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pnsstatus [id]");
		return 1;
	}
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128];
		format(string,sizeof(string),"|___________ Pay N' Spray Status (ID: %d) ___________|", id);
		SendClientMessageEx(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "[Position] X: %f | Y: %f | Z: %f | VW: %d | Int: %d", PayNSprays[id][pnsPosX], PayNSprays[id][pnsPosY], PayNSprays[id][pnsPosZ], PayNSprays[id][pnsVW], PayNSprays[id][pnsInt]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Group Cost: $%s | Regular Cost: $%s", number_format(PayNSprays[id][pnsGroupCost]), number_format(PayNSprays[id][pnsRegCost]));
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:pnsnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available Pay N' Spray...");
		for(new x = 0; x < MAX_PAYNSPRAYS; x++)
		{
			if(PayNSprays[x][pnsStatus] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:gotopaynspray(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new id;
		if(sscanf(params, "d", id)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotopaynspray [id]");

		SetPlayerPos(playerid, PayNSprays[id][pnsPosX], PayNSprays[id][pnsPosY], PayNSprays[id][pnsPosZ]);
		SetPlayerInterior(playerid, PayNSprays[id][pnsInt]);
		PlayerInfo[playerid][pInt] = PayNSprays[id][pnsInt];
		SetPlayerVirtualWorld(playerid, PayNSprays[id][pnsVW]);
		PlayerInfo[playerid][pVW] = PayNSprays[id][pnsVW];
	}
	return 1;
}

CMD:repaircar(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for(new i; i < MAX_PAYNSPRAYS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, PayNSprays[i][pnsPosX], PayNSprays[i][pnsPosY], PayNSprays[i][pnsPosZ]) && GetPlayerVirtualWorld(playerid) == PayNSprays[i][pnsVW] && GetPlayerInterior(playerid) == PayNSprays[i][pnsInt])
			{
				if(PayNSprays[i][pnsStatus] > 0)
				{
					if(DynVeh[GetPlayerVehicleID(playerid)] != -1 && DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_igID] != INVALID_GROUP_ID)
					{
						new iGroupID = DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_igID];
						if(arrGroupData[iGroupID][g_iBudget] >= PayNSprays[i][pnsGroupCost])
						{
						}
						else return SendClientMessage(playerid, COLOR_WHITE, "Your agency does not have enough money in their funds to pay for this!");
					}
					else
					{
						if(PlayerInfo[playerid][pCash] >= PayNSprays[i][pnsRegCost])
						{
						}
						else return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money to pay for this!");
					}
					SetTimerEx("PayNSpray", 5000, false, "iii", playerid, i, GetPlayerVehicleID(playerid));
					TogglePlayerControllable(playerid, 0);
					GameTextForPlayer(playerid, "Repairing...", 5000, 5);
					return 1;
				}
			}
		}
		SendClientMessage(playerid, COLOR_WHITE, "You are not at a Pay N' Spray!");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "You are not in a car!");
	return 1;
}

CMD:fixveh(playerid, params[])
{
    if(IsPlayerConnected(playerid)) {
        if(PlayerInfo[playerid][pAdmin] < 4) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid)) {
            new Float:vrot;
            GetVehicleZAngle(GetPlayerVehicleID(playerid), vrot);
            SetVehicleZAngle(GetPlayerVehicleID(playerid), vrot);
            RepairVehicle(GetPlayerVehicleID(playerid));
			Vehicle_Armor(GetPlayerVehicleID(playerid));
            SendClientMessageEx(playerid, COLOR_GREY, "   Vehicle Fixed!");
        }
    }
    return 1;
}


CMD:fixvehall(playerid, params[])
{
    if(IsPlayerConnected(playerid)) {
        if(PlayerInfo[playerid][pAdmin] < 4) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
            return 1;
        }
        for(new v = 0; v < MAX_VEHICLES; v++) {
            RepairVehicle(v);
			Vehicle_Armor(v);
        }
        SendClientMessageEx(playerid, COLOR_GREY, "   All vehicles fixed!");
    }
    return 1;
}


CMD:destroycars(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4) {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
        return 1;
    }
    for(new i = 0; i < sizeof(CreatedCars); i++) {
        if(CreatedCars[i] != INVALID_VEHICLE_ID) {
            DestroyVehicle(CreatedCars[i]);
            CreatedCars[i] = INVALID_VEHICLE_ID;
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, "   Created vehicles destroyed!");
    return 1;
}

CMD:turfs(playerid, params[])
{
    if(turfWarsRadar[playerid] == 0) {
        SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled the Turf Minimap Radar.");
        ShowTurfWarsRadar(playerid);
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the Turf Minimap Radar.");
        HideTurfWarsRadar(playerid);
    }
    return 1;
}

CMD:shutdown(playerid, params[])
{
    if(IsACop(playerid)) {
        new string[128];
        new tw = GetPlayerTurfWarsZone(playerid);
        new rank = PlayerInfo[playerid][pRank];
        if(rank < 3) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You have to be at least Rank 3 to shutdown turfs!");
            return 1;
        }
        if(tw != -1) {
            if(TurfWars[tw][twLocked] == 1) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "The turf is currently locked by a admin, you can not shutdown the turf!");
                return 1;
            }
            if(TurfWars[tw][twVulnerable] == 0) {
                if(TurfWars[tw][twActive] == 0) {
                    SendClientMessageEx(playerid, COLOR_GRAD2, "The turf isn't in a active turf war, you have no reason to shutdown the turf!");
                }
                else {
                    new count = 0;
                    if(TurfWars[tw][twAttemptId] == -2) {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "The LEO Factions are already attempting to shutdown the turf war!");
                        return 1;
                    }

                    //foreach(new i: Player)
					for(new i = 0; i < MAX_PLAYERS; ++i)
					{
						if(IsPlayerConnected(i))
						{
							if(TurfWars[tw][twAttemptId] == PlayerInfo[i][pFMember]) {
								if(GetPlayerTurfWarsZone(i) == tw) {
									count++;
								}
							}
						}	
                    }
                    if(count != 0) {
                        format(string,sizeof(string),"There is still %d Attacking Members on the Turf, you must get rid of them before shuting down!",count);
                        SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    }
                    else {
                        ShutdownTurfWarsZone(tw);
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD2, "This turf is currently not vulnerable, you are unable to shutdown!");
                SendClientMessageEx(playerid, COLOR_GRAD1, "If you are in FBI, You must contact a admin to lock down the turf with a IC Casefile.");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You have to be in a turf to be able to shutdown turfs!");
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in a LEO Faction, you can not shutdown turfs!");
    }
	return 1;
}


CMD:claim(playerid, params[])
{
	if(servernumber == 2)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This command is disabled!");
	    return 1;
	}
    new string[128];
    new tw = GetPlayerTurfWarsZone(playerid);
    new family = PlayerInfo[playerid][pFMember];
    new rank = PlayerInfo[playerid][pRank];
    if(family == INVALID_FAMILY_ID) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in a family/gang, you can not claim turfs!");
        return 1;
    }
    if(rank < 5) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You have to be at least Rank 5 to claim turfs!");
        return 1;
    }
    if(FamilyInfo[family][FamilyTurfTokens] < 12) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "Your family/gang does not have any turf claim tokens, please wait at least 12 hours.");
        return 1;
    }
    if(tw != -1) {
        if(TurfWars[tw][twLocked] == 1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "The turf is currently locked by a admin, you can not claim it!");
            return 1;
        }
        if(TurfWars[tw][twVulnerable] == 0) {
            if(TurfWars[tw][twActive] == 0) {
                if(TurfWars[tw][twOwnerId] == family) {
                    SendClientMessageEx(playerid, COLOR_GRAD2, "Your family/gang already owns this turf, you are unable to claim it!");
                    return 1;
                }
                new count = 0;
                //foreach(new i: Player)
				for(new i = 0; i < MAX_PLAYERS; ++i)
				{
					if(IsPlayerConnected(i))
					{
						if(family == PlayerInfo[i][pFMember] && PlayerInfo[i][pAccountRestricted] != 1) {
							if(GetPlayerTurfWarsZone(i) == tw) {
								count++;
							}
						}
					}	
                }

                if(count > 2) {
                    FamilyInfo[family][FamilyTurfTokens] -= 12;
                    TakeoverTurfWarsZone(family, tw);
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GRAD2, "You need at least 3 of your family/gang members on the turf, to be able to claim it!");
                }
            }
            else {
                new count = 0;
                new leocount = 0;
                if(TurfWars[tw][twAttemptId] == family) {
                    SendClientMessageEx(playerid, COLOR_GRAD2, "You are already attempting to capture this turf!");
                    return 1;
                }

                //foreach(new i: Player)
				for(new i = 0; i < MAX_PLAYERS; ++i)
				{
					if(IsPlayerConnected(i))
					{
						if(TurfWars[tw][twAttemptId] == PlayerInfo[i][pFMember]) {
							if(GetPlayerTurfWarsZone(i) == tw) {
								count++;
							}
						}
						if(TurfWars[tw][twAttemptId] == -2) {
							if(IsACop(i)) {
								if(GetPlayerTurfWarsZone(i) == tw) {
									leocount++;
								}
							}
						}
					}	
                }

                if(count == 0 && leocount == 0) {
                    if(family != TurfWars[tw][twOwnerId]) {
                        FamilyInfo[family][FamilyTurfTokens] -= 12;
                    }
                    //foreach(new i: Player)
					for(new i = 0; i < MAX_PLAYERS; ++i)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pGangModerator] >= 1) {
								format(string,sizeof(string),"%s has attempted to takeover turf %d for family %s",GetPlayerNameEx(playerid),tw,FamilyInfo[family][FamilyName]);
								SendClientMessageEx(i,COLOR_YELLOW,string);
							}
						}	
                    }
                    TakeoverTurfWarsZone(family, tw);
                }
                else {
                    if(leocount == 0) {
                        format(string,sizeof(string),"There is still %d Attacking Members on the Turf, you must get rid of them before reclaiming!",count);
                        SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    }
                    else {
                        format(string,sizeof(string),"There is still %d Officers on the Turf, you must get rid of them before reclaiming!",leocount);
                        SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    }
                }
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD2, "This turf is currently not vulnerable, you are unable to claim it!");
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You have to be in a turf to be able to claim turfs!");
    }

    if(turfWarsRadar[playerid] == 0) {
        ShowTurfWarsRadar(playerid);
    }
    return 1;
}

CMD:scores(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
        PaintballScoreboard(playerid, GetPVarInt(playerid, "IsInArena"));
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a arena!");
    }
    return 1;
}

CMD:announcem(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1337) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
        return 1;
    }

    SetTimer( "Maintenance", 30000, false );
    SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* The server will be going down in 30 seconds for Scheduled Maintenance.");
    //foreach(new i: Player)
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			GameTextForPlayer(i, "~y~Scheduled Maintenance Alert", 5000, 6);
		}	
    }
    return 1;
}

CMD:kos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new giveplayerid, string[128], time, fine = 0;
		if(!sscanf(params, "u", giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[giveplayerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}

			if(!IsPlayerConnected(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not connected.");
				return 1;
			}

			SetPlayerArmedWeapon(giveplayerid, 0);

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
				 LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));

			new playerlevel = PlayerInfo[giveplayerid][pLevel];
			new totalwealth = PlayerInfo[giveplayerid][pAccount] + GetPlayerCash(giveplayerid);
			if(PlayerInfo[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hSafeMoney];
			if(PlayerInfo[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hSafeMoney];
			if(PlayerInfo[giveplayerid][pPhousekey3] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hSafeMoney];
			
			if(totalwealth > 0 && playerlevel > 5)
			{
				fine = 10*totalwealth/100;
			}
			if(fine > 0) {
				GivePlayerCash(giveplayerid, -fine);
			}

			if(playerlevel <= 5) time = 30;
			else if(playerlevel > 5 && playerlevel < 10) time = 60;
			else time = 120; // level is greater than 10
						
			if(playerlevel >= 10)  PlayerInfo[giveplayerid][pWarns] += 1;
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned (/kos) by %s (had 3 Warnings), reason: Killing on Sight", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid));
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: Killing on Sight", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				if(fine > 0) {
					format(string, sizeof(string), "You have been fined $%s (10 percent of your total wealth).", number_format(fine));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
					format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s (/kos).", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fine), GetPlayerNameEx(playerid));
					Log("logs/admin.log", string);
				}
				StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Player had 3 warnings");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, "Third Warning (KoS)", 1,GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return 1;
			}
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}
			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been prisoned (/kos) by %s, reason: Killing on Sight ", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: Killing on Sight", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
    		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = time*60;
			SetPVarInt(giveplayerid, "_rAppeal", gettime()+60);			
			strcpy(PlayerInfo[giveplayerid][pPrisonReason], "[OOC][PRISON][/KOS]", 128);
			strcpy(PlayerInfo[giveplayerid][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			if(time == 30) format(string, sizeof(string), "You have been prisoned for Killing on Sight - you will be prisoned for 30 minutes.");
			else if(time == 60) format(string, sizeof(string), "You have been prisoned for Killing on Sight - you will be prisoned for 1 hour.");
			else format(string, sizeof(string), "You have been prisoned for Killing on Sight - you will be prisoned for 2 hours.");
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
			
			if(fine > 0) {
				format(string, sizeof(string), "You have been fined $%s (10 percent of your total wealth).", number_format(fine));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s (/kos).", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fine), GetPlayerNameEx(playerid));
				Log("logs/admin.log", string);
			}	
			
			if(PlayerInfo[giveplayerid][pAccountRestricted] == 1)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s (Punished while restricted), reason: KoS", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid));
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (Punished while restricted), reason: KoS", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Punished while account restricted");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, "Punished while account restricted - KoS", 1, GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return true;
			}
			
			if(giveplayerid == GetPVarInt(playerid, "PendingAction2"))
			{
				if(AlertTime[GetPVarInt(playerid, "PendingAction3")] != 0)
				{
					if(GetPVarInt(playerid, "PendingAction") == 3) // KoS
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Killing on Sight Alert, we've automatically issued 3 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 3, gettime()+2592000, "Killing on Sight", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 3;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 3 Non RP Points for Killing on Sight.");
						
						format(string, sizeof(string), "%s has been issued 3 Non RP Points for Revenge Killing.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					
					if(PlayerInfo[giveplayerid][pNonRPMeter] >= 15)
					{
						format(string, sizeof(string), "%s(%i) Account Restriction", GetPlayerNameEx(giveplayerid), giveplayerid);
						SendReportToQue(playerid, string, 4, GetPlayerPriority(playerid));
						SetPVarInt(playerid, "AccountRestrictionReport", 1);
						SetPVarInt(playerid, "AccountRestID", giveplayerid);
					}
				}
			}
			
			DeletePVar(playerid, "PendingAction");
			DeletePVar(playerid, "PendingAction2");
			if(AlertTime[GetPVarInt(playerid, "PendingAction3")] != 0) AlertTime[GetPVarInt(playerid, "PendingAction3")] = 0;
			DeletePVar(playerid, "PendingAction3");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /kos [playerid]");
			SendClientMessageEx(playerid, COLOR_GREY, "Note: Depending on the player level, this will issue up to 2 hours, a warning, and a 10 percent fine.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command!");
	}
	return 1;
}

CMD:skos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pUndercover] > 0)
	{
		new giveplayerid, string[128], time, fine = 0;
		if(!sscanf(params, "u", giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[giveplayerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}

			if(!IsPlayerConnected(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not connected.");
				return 1;
			}

			SetPlayerArmedWeapon(giveplayerid, 0);

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
				 LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));

			new playerlevel = PlayerInfo[giveplayerid][pLevel];
			new totalwealth = PlayerInfo[giveplayerid][pAccount] + GetPlayerCash(giveplayerid);
			if(PlayerInfo[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hSafeMoney];
			if(PlayerInfo[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hSafeMoney];

			if(totalwealth > 0 && playerlevel > 5) // above 5 gets a fine
			{
				fine = 10*totalwealth/100;
			}
			if(fine > 0) {
				GivePlayerCash(giveplayerid, -fine);
			}	

			if(playerlevel <= 5) time = 30;
			else if(playerlevel > 5 && playerlevel < 10) time = 60;
			else time = 120; // level is greater than 10
						
			if(playerlevel >= 10)  PlayerInfo[giveplayerid][pWarns] += 1;
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned (/skos) by %s (had 3 Warnings), reason: Killing on Sight", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid));
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: Killing on Sight", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED, string, 2);
				if(fine > 0) {
					format(string, sizeof(string), "You have been fined $%s (10 percent of your total wealth).", number_format(fine));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
					format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s (/skos).", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fine), GetPlayerNameEx(playerid));
					Log("logs/admin.log", string);
				}
				StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Player had 3 warnings");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, "Third Warning (KoS)", 1,GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return 1;
			}
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}
			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been silent prisoned (/skos) by %s, reason: Killing on Sight ", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by an Admin, reason: Killing on Sight", GetPlayerNameEx(giveplayerid));
    		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = time*60;
			SetPVarInt(giveplayerid, "_rAppeal", gettime()+60);			
			strcpy(PlayerInfo[giveplayerid][pPrisonReason], "[OOC][PRISON][/SKOS]", 128);
			strcpy(PlayerInfo[giveplayerid][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			if(time == 30) format(string, sizeof(string), "You have been prisoned for Killing on Sight - you will be prisoned for 30 minutes.");
			else if(time == 60) format(string, sizeof(string), "You have been prisoned for Killing on Sight - you will be prisoned for 1 hour.");
			else format(string, sizeof(string), "You have been prisoned for Killing on Sight - you will be prisoned for 2 hours.");
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
			
			if(fine > 0) {
				format(string, sizeof(string), "You have been fined $%s (10 percent of your total wealth).", number_format(fine));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s (/skos).", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fine), GetPlayerNameEx(playerid));
				Log("logs/admin.log", string);
			}	
			
			if(PlayerInfo[giveplayerid][pAccountRestricted] == 1)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by an Admin (Punished while restricted), reason: KoS", GetPlayerNameEx(giveplayerid), ip);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by an Admin (Punished while restricted), reason: KoS", GetPlayerNameEx(giveplayerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Punished while account restricted");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, "Punished while account restricted - KoS", 1, GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return true;
			}
			
			if(giveplayerid == GetPVarInt(playerid, "PendingAction2"))
			{
				if(AlertTime[GetPVarInt(playerid, "PendingAction3")] != 0)
				{
					if(GetPVarInt(playerid, "PendingAction") == 3) // KoS
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Killing on Sight Alert, we've automatically issued 3 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 3, gettime()+2592000, "Killing on Sight", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 3;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 3 Non RP Points for Killing on Sight.");
						
						format(string, sizeof(string), "%s has been issued 3 Non RP Points for Revenge Killing.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					
					if(PlayerInfo[giveplayerid][pNonRPMeter] >= 15)
					{
						format(string, sizeof(string), "%s(%i) Account Restriction", GetPlayerNameEx(giveplayerid), giveplayerid);
						SendReportToQue(playerid, string, 4, GetPlayerPriority(playerid));
						SetPVarInt(playerid, "AccountRestrictionReport", 1);
						SetPVarInt(playerid, "AccountRestID", giveplayerid);
					}
				}
			}
			
			DeletePVar(playerid, "PendingAction");
			DeletePVar(playerid, "PendingAction2");
			if(AlertTime[GetPVarInt(playerid, "PendingAction3")] != 0) AlertTime[GetPVarInt(playerid, "PendingAction3")] = 0;
			DeletePVar(playerid, "PendingAction3");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /skos [playerid]");
			SendClientMessageEx(playerid, COLOR_GREY, "Note: Depending on the player level, this will issue up to 2 hours, a warning, and a 10 percent fine.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command!");
	}
	return 1;
}

CMD:pg(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new giveplayerid, string[128], time;
		if(!sscanf(params, "u", giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[giveplayerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}

			if(!IsPlayerConnected(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not connected.");
				return 1;
			}

			SetPlayerArmedWeapon(giveplayerid, 0);

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			}

			new playerlevel = PlayerInfo[giveplayerid][pLevel];
			
			if(playerlevel <= 5) time = 15;
			else time = 60;
						
			if(playerlevel > 5)  PlayerInfo[giveplayerid][pWarns] += 1;
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned (/pg) by %s (had 3 Warnings), reason: Powergaming", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid));
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: Powergaming", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Player had 3 warnings");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, "Third Warning (PG)", 1,GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return 1;
			}

			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been prisoned by %s, reason: Powergaming", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: Powergaming", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
    		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = time*60;
			SetPVarInt(giveplayerid, "_rAppeal", gettime()+60);			
			strcpy(PlayerInfo[giveplayerid][pPrisonReason], "[OOC][PRISON][/PG]", 128);
			strcpy(PlayerInfo[giveplayerid][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			if(time == 15) format(string, sizeof(string), "You have been prisoned for Powergaming - you will be prisoned for 15 minutes.");
			else format(string, sizeof(string), "You have been prisoned for Powergaming - you will be prisoned for 1 hour.");
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);	
			
			if(PlayerInfo[giveplayerid][pAccountRestricted] == 1)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s (Punished while restricted), reason: PG", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid));
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (Punished while restricted), reason: PG", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Punished while account restricted");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, "Punished while account restricted - PG", 1, GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return true;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pg [playerid]");
			SendClientMessageEx(playerid, COLOR_GREY, "Note: Depending on the player level, this will issue up to 1 hour prison, and a warning.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command!");
	}
	return 1;
}

CMD:spg(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pUndercover] > 0)
	{
		new giveplayerid, string[128], time;
		if(!sscanf(params, "u", giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[giveplayerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}

			if(!IsPlayerConnected(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not connected.");
				return 1;
			}

			SetPlayerArmedWeapon(giveplayerid, 0);

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			}

			new playerlevel = PlayerInfo[giveplayerid][pLevel];
			
			if(playerlevel <= 5) time = 15;
			else time = 60;
						
			if(playerlevel > 5)  PlayerInfo[giveplayerid][pWarns] += 1;
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned (/spg) by %s (had 3 Warnings), reason: Powergaming", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid));
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: Powergaming", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED, string, 2);
				StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Player had 3 warnings");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, "Third Warning (PG)", 1,GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return 1;
			}

			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been silent prisoned (/spg) by %s, reason: Powergaming", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by an Admin, reason: Powergaming", GetPlayerNameEx(giveplayerid));
    		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = time*60;
			SetPVarInt(giveplayerid, "_rAppeal", gettime()+60);			
			strcpy(PlayerInfo[giveplayerid][pPrisonReason], "[OOC][PRISON][/SPG]", 128);
			strcpy(PlayerInfo[giveplayerid][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			if(time == 15) format(string, sizeof(string), "You have been prisoned for Powergaming - you will be prisoned for 15 minutes.");
			else format(string, sizeof(string), "You have been prisoned for Powergaming - you will be prisoned for 1 hour.");
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);	
			
			if(PlayerInfo[giveplayerid][pAccountRestricted] == 1)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by an Admin (Punished while restricted), reason: PG", GetPlayerNameEx(giveplayerid), ip);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by an Admin (Punished while restricted), reason: PG", GetPlayerNameEx(giveplayerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Punished while account restricted");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, "Punished while account restricted - PG", 1, GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return true;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /spg [playerid]");
			SendClientMessageEx(playerid, COLOR_GREY, "Note: Depending on the player level, this will issue up to 1 hour prison, and a warning.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command!");
	}
	return 1;
}

CMD:mg(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new giveplayerid, string[128], time;
		if(!sscanf(params, "u", giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[giveplayerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}

			if(!IsPlayerConnected(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not connected.");
				return 1;
			}

			SetPlayerArmedWeapon(giveplayerid, 0);

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			}

			new playerlevel = PlayerInfo[giveplayerid][pLevel];
			
			if(playerlevel <= 5) time = 15;
			else time = 60;

			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been prisoned (/mg) by %s, reason: Metagaming", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: Metagaming", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
    		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = time*60;
			SetPVarInt(giveplayerid, "_rAppeal", gettime()+60);			
			strcpy(PlayerInfo[giveplayerid][pPrisonReason], "[OOC][PRISON][/MG]", 128);
			strcpy(PlayerInfo[giveplayerid][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			if(time == 15) format(string, sizeof(string), "You have been prisoned for Metagaming - you will be prisoned for 15 minutes.");
			else format(string, sizeof(string), "You have been prisoned for Metagaming - you will be prisoned for 1 hour.");
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);	
			
			if(PlayerInfo[giveplayerid][pAccountRestricted] == 1)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s (Punished while restricted), reason: MG", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid));
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (Punished while restricted), reason: MG", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Punished while account restricted");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, "Punished while account restricted - MG", 1, GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return true;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /mg [playerid]");
			SendClientMessageEx(playerid, COLOR_GREY, "Note: Depending on the player level, this will issue up to a 1 hour prison.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command!");
	}
	return 1;
}

CMD:smg(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pUndercover] > 0)
	{
		new giveplayerid, string[128], time;
		if(!sscanf(params, "u", giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[giveplayerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}

			if(!IsPlayerConnected(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not connected.");
				return 1;
			}

			SetPlayerArmedWeapon(giveplayerid, 0);

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			}

			new playerlevel = PlayerInfo[giveplayerid][pLevel];
			
			if(playerlevel <= 5) time = 15;
			else time = 60;

			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been silent prisoned (/smg) by %s, reason: Metagaming", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by an Admin, reason: Metagaming", GetPlayerNameEx(giveplayerid));
    		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = time*60;
			SetPVarInt(giveplayerid, "_rAppeal", gettime()+60);			
			strcpy(PlayerInfo[giveplayerid][pPrisonReason], "[OOC][PRISON][/SMG]", 128);
			strcpy(PlayerInfo[giveplayerid][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			if(time == 15) format(string, sizeof(string), "You have been prisoned for Metagaming - you will be prisoned for 15 minutes.");
			else format(string, sizeof(string), "You have been prisoned for Metagaming - you will be prisoned for 1 hour.");
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);	
			
			if(PlayerInfo[giveplayerid][pAccountRestricted] == 1)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by an Admin (Punished while restricted), reason: MG", GetPlayerNameEx(giveplayerid), ip);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by an Admin (Punished while restricted), reason: MG", GetPlayerNameEx(giveplayerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Punished while account restricted");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, "Punished while account restricted - MG", 1, GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return true;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /smg [playerid]");
			SendClientMessageEx(playerid, COLOR_GREY, "Note: Depending on the player level, this will issue up to a 1 hour prison.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command!");
	}
	return 1;
}

CMD:nonrp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new giveplayerid, string[128], time;
		if(!sscanf(params, "u", giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[giveplayerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}

			if(!IsPlayerConnected(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not connected.");
				return 1;
			}

			SetPlayerArmedWeapon(giveplayerid, 0);

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			}

			new playerlevel = PlayerInfo[giveplayerid][pLevel];
			
			if(playerlevel <= 5) time = 30;
			else if(playerlevel > 5 && playerlevel < 10) time = 60;
			else time = 120;

			if(PlayerInfo[giveplayerid][pMember] >= 0 || PlayerInfo[giveplayerid][pLeader] >= 0)
			{
				format(string, sizeof(string), "Administrator %s has group-kicked (/nonrp) %s from %s (%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), arrGroupData[PlayerInfo[giveplayerid][pMember]][g_szGroupName], PlayerInfo[giveplayerid][pMember]+1);
				Log("logs/group.log", string);
				format(string, sizeof(string), "You have been faction-kicked as a result of your prison.");
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[giveplayerid][pDuty] = 0;
				PlayerInfo[giveplayerid][pMember] = INVALID_GROUP_ID;
				PlayerInfo[giveplayerid][pRank] = INVALID_RANK;
				PlayerInfo[giveplayerid][pLeader] = INVALID_GROUP_ID;
				PlayerInfo[giveplayerid][pDivision] = INVALID_DIVISION;
				player_remove_vip_toys(giveplayerid);
				pTazer{giveplayerid} = 0;
				time = 120;
			}

			if(PlayerInfo[giveplayerid][pFMember] != INVALID_FAMILY_ID )
			{
				PlayerInfo[giveplayerid][pGangWarn] += 1;
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have been issued a gang warning as a result of your prison.");
				if(PlayerInfo[giveplayerid][pGangWarn] >= 3)
				{
					format(string, sizeof(string), "AdmCmd: %s(%d) was banned from gangs (/nonrp) by %s (had 3 Gang Warnings), reason: Non-RP Behaviour", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
					Log("logs/admin.log", string);
					format(string, sizeof(string), "AdmCmd: %s was banned from gangs by %s (had 3 Gang Warnings), reason: Non-RP Behaviour", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					ABroadCast(COLOR_LIGHTRED, string, 2);
					format(string, sizeof(string), "You have been banned from gangs by %s (had 3 Gang Warnings), reason: Non-RP Behaviour", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
					PlayerInfo[giveplayerid][pFMember] = INVALID_FAMILY_ID;
					PlayerInfo[giveplayerid][pRank] = 0;
					PlayerInfo[giveplayerid][pGangWarn] = 3; // just to make sure?
				}
				time = 120;
			}
						
			if(playerlevel >= 10 || PlayerInfo[giveplayerid][pMember] != INVALID_GROUP_ID || PlayerInfo[giveplayerid][pLeader] != INVALID_GROUP_ID || PlayerInfo[giveplayerid][pFMember] != INVALID_FAMILY_ID) 
				PlayerInfo[giveplayerid][pWarns] += 1;
			
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned (/nonrp) by %s (had 3 Warnings), reason: Non-RP Behaviour", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid));
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: Non-RP Behaviour", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Player had 3 warnings");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, "Third Warning (PG)", 1,GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return 1;
			}

			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been prisoned (/nonrp) by %s, reason: Non-RP Behaviour", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: Non-RP Behaviour", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
    		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = time*60;
			SetPVarInt(giveplayerid, "_rAppeal", gettime()+60);			
			strcpy(PlayerInfo[giveplayerid][pPrisonReason], "[OOC][PRISON][/NONRP]", 128);
			strcpy(PlayerInfo[giveplayerid][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			switch(time)
			{
				case 30: format(string, sizeof(string), "You have been prisoned for Non-RP Behaviour - you will be prisoned for 30 minutes.");
				case 60: format(string, sizeof(string), "You have been prisoned for Non-RP Behaviour - you will be prisoned for 1 hour.");
				case 120: format(string, sizeof(string), "You have been prisoned for Non-RP Behaviour - you will be prisoned for 2 hours.");
			}
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);	
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /nonrp [playerid]");
			SendClientMessageEx(playerid, COLOR_GREY, "Note: Depending on the player level, this will issue up to 2 hours prison, a warning, and a groupkick/gangwarn.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command!");
	}
	return 1;
}

CMD:snonrp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pUndercover] > 0)
	{
		new giveplayerid, string[128], time;
		if(!sscanf(params, "u", giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[giveplayerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}

			if(!IsPlayerConnected(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not connected.");
				return 1;
			}

			SetPlayerArmedWeapon(giveplayerid, 0);

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			}

			new playerlevel = PlayerInfo[giveplayerid][pLevel];
			
			if(playerlevel <= 5) time = 30;
			else if(playerlevel > 5 && playerlevel < 10) time = 60;
			else time = 120;

			if(PlayerInfo[giveplayerid][pMember] >= 0 || PlayerInfo[giveplayerid][pLeader] >= 0)
			{
				format(string, sizeof(string), "Administrator %s has group-kicked (/snonrp) %s from %s (%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), arrGroupData[PlayerInfo[giveplayerid][pMember]][g_szGroupName], PlayerInfo[giveplayerid][pMember]+1);
				Log("logs/group.log", string);
				format(string, sizeof(string), "You have been faction-kicked as a result of your prison.");
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[giveplayerid][pDuty] = 0;
				PlayerInfo[giveplayerid][pMember] = INVALID_GROUP_ID;
				PlayerInfo[giveplayerid][pRank] = INVALID_RANK;
				PlayerInfo[giveplayerid][pLeader] = INVALID_GROUP_ID;
				PlayerInfo[giveplayerid][pDivision] = INVALID_DIVISION;
				player_remove_vip_toys(giveplayerid);
				pTazer{giveplayerid} = 0;
				time = 120;
			}

			if(PlayerInfo[giveplayerid][pFMember] != INVALID_FAMILY_ID )
			{
				PlayerInfo[giveplayerid][pGangWarn] += 1;
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have been issued a gang warning as a result of your prison.");
				if(PlayerInfo[giveplayerid][pGangWarn] >= 3)
				{
					format(string, sizeof(string), "AdmCmd: %s(%d) was banned from gangs (/nonrp) by %s (had 3 Gang Warnings), reason: Non-RP Behaviour", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
					Log("logs/admin.log", string);
					format(string, sizeof(string), "AdmCmd: %s was banned from gangs by %s (had 3 Gang Warnings), reason: Non-RP Behaviour", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					ABroadCast(COLOR_LIGHTRED, string, 2);
					format(string, sizeof(string), "You have been banned from gangs by an Admin (had 3 Gang Warnings), reason: Non-RP Behaviour");
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
					PlayerInfo[giveplayerid][pFMember] = INVALID_FAMILY_ID;
					PlayerInfo[giveplayerid][pRank] = 0;
					PlayerInfo[giveplayerid][pGangWarn] = 3; // just to make sure?
				}
				time = 120;
			}
						
			if(playerlevel >= 10 || PlayerInfo[giveplayerid][pMember] != INVALID_GROUP_ID || PlayerInfo[giveplayerid][pLeader] != INVALID_GROUP_ID || PlayerInfo[giveplayerid][pFMember] != INVALID_FAMILY_ID) 
				PlayerInfo[giveplayerid][pWarns] += 1;
			
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned (/snonrp) by %s (had 3 Warnings), reason: Non-RP Behaviour", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid));
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: Non-RP Behaviour", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED, string, 2);
				StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Player had 3 warnings");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, "Third Warning (PG)", 1,GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return 1;
			}

			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been prisoned (/snonrp) by %s, reason: Non-RP Behaviour", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by an Admin, reason: Non-RP Behaviour", GetPlayerNameEx(giveplayerid));
    		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = time*60;
			SetPVarInt(giveplayerid, "_rAppeal", gettime()+60);			
			strcpy(PlayerInfo[giveplayerid][pPrisonReason], "[OOC][PRISON][/SNONRP]", 128);
			strcpy(PlayerInfo[giveplayerid][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			if(time == 30) format(string, sizeof(string), "You have been prisoned for Non-RP Behaviour - you will be prisoned for 30 minutes.");
			else if(time == 60) format(string, sizeof(string), "You have been prisoned for Non-RP Behaviour - you will be prisoned for 1 hour.");
			else format(string, sizeof(string), "You have been prisoned for Non-RP Behaviour - you will be prisoned for 2 hours.");
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);	
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /snonrp [playerid]");
			SendClientMessageEx(playerid, COLOR_GREY, "Note: Depending on the player level, this will issue up to 2 hours prison, a warning, and a groupkick/gangwarn.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command!");
	}
	return 1;
}

CMD:dm(playerid, params[])
{
    if( PlayerInfo[playerid][pAdmin] >= 3)
	{
	    new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dm [player]");
			SendClientMessageEx(playerid, COLOR_GREY, "NOTE: This command issues a 2 hours prison sentence, 1 warning, a 10 percent fine and a 4 hours weapon restriction.");
			return 1;
		}	
		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[giveplayerid][pAdmin] > 1)
		    {
		        return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot do this to other administrators!");
			}
			
			new fine = 0;
			new totalwealth = PlayerInfo[giveplayerid][pAccount] + GetPlayerCash(giveplayerid);
			if(PlayerInfo[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hSafeMoney];
			if(PlayerInfo[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hSafeMoney];
			if(PlayerInfo[giveplayerid][pPhousekey3] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hSafeMoney];
			
			if(totalwealth > 0)
			{
				fine = 10*totalwealth/100;
			}
			if(fine > 0) {
				GivePlayerCash(giveplayerid, -fine);
			}	

			//foreach(new i: Player)
			
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(GetPVarInt(i, "pWatchdogWatching") == giveplayerid) {
						SendClientMessage(i, COLOR_WHITE, "You have stopped DM Watching.");
						GettingSpectated[Spectate[i]] = INVALID_PLAYER_ID;
						Spectating[i] = 0;
						Spectate[i] = INVALID_PLAYER_ID;
						SetPVarInt(i, "SpecOff", 1 );
						TogglePlayerSpectating(i, false);
						SetCameraBehindPlayer(i);
						DeletePVar(i, "pWatchdogWatching");
					}
				}	
			}
						
			PlayerInfo[giveplayerid][pWarns] += 1;
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s (had 3 Warnings), reason: DM", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid));
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: DM", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				if(fine > 0) {
					format(string, sizeof(string), "You have been fined $%s (10 percent of your total wealth).", number_format(fine));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
					format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s (/dm).", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fine), GetPlayerNameEx(playerid));
					Log("logs/admin.log", string);
				}
				StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Player had 3 warnings");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, "Third Warning (DM)", 1,GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return 1;
			}
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}
			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been prisoned by %s, reason: DM ", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: DM", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
    		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = 120*60;
			SetPVarInt(giveplayerid, "_rAppeal", gettime()+60);			
			strcpy(PlayerInfo[giveplayerid][pPrisonReason], "[OOC][PRISON][/DM]", 128);
			strcpy(PlayerInfo[giveplayerid][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			PlayerInfo[giveplayerid][pWRestricted] = 4;
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "You have been prisoned for Death Matching - you will be prisoned for two hours, warned and your weapons restricted for 4 hours.");
			if(fine > 0) {
				format(string, sizeof(string), "You have been fined $%s (10 percent of your total wealth).", number_format(fine));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s (/dm).", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fine), GetPlayerNameEx(playerid));
				Log("logs/admin.log", string);
			}	
			
			if(giveplayerid == GetPVarInt(playerid, "PendingAction2"))
			{
				if(AlertTime[GetPVarInt(playerid, "PendingAction3")] != 0)
				{
					if(GetPVarInt(playerid, "PendingAction") == 1) // DM
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Deathmatching Alert, we've automatically issued 5 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 5, gettime()+2592000, "Deathmatching", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 5;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 5 Non RP Points for Deathmatching.");
						
						format(string, sizeof(string), "%s has been issued 5 Non RP Points for Deathmatching.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
				}
			}
			
			DeletePVar(playerid, "PendingAction");
			DeletePVar(playerid, "PendingAction2");
			if(AlertTime[GetPVarInt(playerid, "PendingAction3")] != 0) AlertTime[GetPVarInt(playerid, "PendingAction3")] = 0;
			DeletePVar(playerid, "PendingAction3");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:sdm(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pUndercover] >= 1)
	{
	    new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sdm [player]");
			SendClientMessageEx(playerid, COLOR_GREY, "NOTE: This command issues a 2 hours prison sentence, 1 warning, a 10 percent fine and a 4 hours weapon restriction.");
			return 1;
		}	
		if(IsPlayerConnected(giveplayerid))
	 	{
		    if(PlayerInfo[giveplayerid][pAdmin] > 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot do this to other administrators!");
			
			new fine = 0;
			new totalwealth = PlayerInfo[giveplayerid][pAccount] + GetPlayerCash(giveplayerid);
			if(PlayerInfo[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hSafeMoney];
			if(PlayerInfo[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hSafeMoney];
			if(PlayerInfo[giveplayerid][pPhousekey3] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hSafeMoney];
			
			if(totalwealth > 0)
			{
				fine = 10*totalwealth/100;
			}
			if(fine > 0) {
				GivePlayerCash(giveplayerid, -fine);
			}	

			PlayerInfo[giveplayerid][pWarns] += 1;
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s (had 3 Warnings), reason: DM", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid));
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: DM", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED, string, 2);
				if(fine > 0) {
					format(string, sizeof(string), "You have been fined $%s (10 percent of your total wealth).", number_format(fine));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
					format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s (/dm).", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fine), GetPlayerNameEx(playerid));
					Log("logs/admin.log", string);
				}	
				StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Player had 3 warnings");
				MySQLBan(GetPlayerSQLId(giveplayerid),ip, "Third Warning (DM)", 1,GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return 1;
			}
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}
			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been silent prisoned (/sdm) by %s, reason: DM ", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been silent prisoned (/sdm) by %s, reason: DM", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
   			ABroadCast(COLOR_LIGHTRED, string, 2);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = 120*60;
			SetPVarInt(giveplayerid, "_rAppeal", gettime()+60);			
			strcpy(PlayerInfo[giveplayerid][pPrisonReason], "[OOC][PRISON][/SDM]", 128);
			strcpy(PlayerInfo[giveplayerid][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			PlayerInfo[giveplayerid][pWRestricted] = 4;
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "You have been prisoned for Death Matching - you will be prisoned for two hours, warned and your weapons restricted for 4 hours.");
			if(fine > 0) {
				format(string, sizeof(string), "You have been fined $%s (10 percent of your total wealth).", number_format(fine));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s (/dm).", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fine), GetPlayerNameEx(playerid));
				Log("logs/admin.log", string);
			}	
			
			if(giveplayerid == GetPVarInt(playerid, "PendingAction2"))
			{
				if(AlertTime[GetPVarInt(playerid, "PendingAction3")] != 0)
				{
					if(GetPVarInt(playerid, "PendingAction") == 1) // DM
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Deathmatching Alert, we've automatically issued 5 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 5, gettime()+2592000, "Deathmatching", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 5;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 5 Non RP Points for Deathmatching.");
						
						format(string, sizeof(string), "%s has been issued 5 Non RP Points for Deathmatching.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
				}
			}
			
			DeletePVar(playerid, "PendingAction");
			DeletePVar(playerid, "PendingAction2");
			if(AlertTime[GetPVarInt(playerid, "PendingAction3")] != 0) AlertTime[GetPVarInt(playerid, "PendingAction3")] = 0;
			DeletePVar(playerid, "PendingAction3");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}	return 1;
}

CMD:present(playerid, params[])
{
  	if(IsAJudge(playerid))
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /present [player]");
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
			if(PlayerInfo[giveplayerid][pBeingSentenced] == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "That person isn't pending a sentence!");
			if(courtjail[giveplayerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "That person isn't in the courthouse jail!");
			if(courtjail[giveplayerid] > 0)
			{
				SetPlayerPos(giveplayerid, 1406.145, -1774.3, 7308.95);
		    	SetPlayerFacingAngle(giveplayerid, 93.34);
			}
			courtjail[giveplayerid] = 0;
		    SetCameraBehindPlayer(giveplayerid);
		}
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not a part of the Judicial System!");
	}
	return 1;
}

CMD:offerappeal(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 2 || PlayerInfo[playerid][pJob2] == 2 || PlayerInfo[playerid][pJob3] == 2)
	{
	    new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /offerappeal [player]");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[giveplayerid][pBeingSentenced] == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "That person isn't pending a sentence!");
		    if(AppealOfferAccepted[giveplayerid] == 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "That person has already accepted a lawyer to appeal for him!");
			AppealOffer[giveplayerid] = playerid;
		    format(string, sizeof(string), "You have offered your lawyer services to %s.",GetPlayerNameEx(giveplayerid));
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    format(string, sizeof(string), "%s has offered their lawyer services (use /accept appeal to accept them).", GetPlayerNameEx(playerid));
		    SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not a Lawyer!");
	}
	return 1;
}

/*CMD:nchange(playerid, params[]) return cmd_namechanges(playerid, params);

CMD:namechanges(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
 	{

		new
			nstring[64 + (MAX_PLAYER_NAME * 2)],
			newname[ MAX_PLAYER_NAME ];

  		SendClientMessageEx(playerid, COLOR_GREEN, "* Pending name changes:");
   		foreach(new i: Player)
		{
			if(GetPVarType(i, "RequestingNameChange"))
			{
  				GetPVarString(i, "NewNameRequest", newname, MAX_PLAYER_NAME);
				format(nstring, sizeof(nstring), "Current name: %s (ID: %d) | Requested name: %s | Price: %d", GetPlayerNameEx(i), i, newname, GetPVarInt(i, "NameChangeCost"));
				SendClientMessageEx(playerid, COLOR_YELLOW, nstring);
			}
		}
		SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________");
	}
	return 1;
} */

CMD:changename(playerid, params[])
{
	if(IsAtNameChange(playerid))
	{
	    if(gettime()-GetPVarInt(playerid, "LastNameChange") < 120) {
			return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only request a name change every two minutes.");
		}
	    new iGroupID = PlayerInfo[playerid][pMember];
		if((0 <= iGroupID < MAX_GROUPS) && PlayerInfo[playerid][pRank] >= arrGroupData[iGroupID][g_iFreeNameChange])
		{
			ShowPlayerDialog( playerid, DIALOG_NAMECHANGE, DIALOG_STYLE_INPUT, "Name Change","Please enter your new desired name!\n\nNote: Name Changes are free for your faction.", "Change", "Cancel" );
		}
		else
		{
			if(PlayerInfo[playerid][pDonateRank] < 3)
			{
				ShowPlayerDialog( playerid, DIALOG_NAMECHANGE, DIALOG_STYLE_INPUT, "Name Change","Please enter your new desired name!\n\nNote: Name Changes cost $15,000 per level.", "Change", "Cancel" );
			}
			else
			{
				ShowPlayerDialog( playerid, DIALOG_NAMECHANGE, DIALOG_STYLE_INPUT, "Name Change","Please enter your new desired name!\n\nNote: Name Changes cost $15,000 per level.\n\nGold VIP+: 10 percent discount", "Change", "Cancel" );
			}
		}
	}
	else if(PlayerInfo[playerid][pAdmin] == 1 && PlayerInfo[playerid][pSMod] > 0) ShowPlayerDialog( playerid, DIALOG_NAMECHANGE, DIALOG_STYLE_INPUT, "Name Change","Please enter your new desired name!\n\nNote: Name Changes are free because you are a Senior Moderator.", "Change", "Cancel" );
	else
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "   You are not in the Name Change Place!" );
	}
	return 1;
}

CMD:finishappeal(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 2 || PlayerInfo[playerid][pJob2] == 2 || PlayerInfo[playerid][pJob3] == 2)
	{
	    new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /finishappeal [player]");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(AppealOffer[giveplayerid] != playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not offering your services to this player!");
		    format(string, sizeof(string), "You have finished your Lawyer services to %s.",GetPlayerNameEx(giveplayerid));
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    format(string, sizeof(string), "%s has finished offering their Lawyer services.", GetPlayerNameEx(playerid));
		    SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		    AppealOffer[giveplayerid] = INVALID_PLAYER_ID;
			AppealOfferAccepted[giveplayerid] = 0;
		}
	}
	else
	{
       	return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not a Lawyer!");
	}
	return 1;
}

CMD:checkjudgements(playerid, params[])
{
    if(IsACop(playerid) || IsAJudge(playerid))
    {

    	if(JudgeOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_GRAD4, "There must be at least one judge online to use this command!");
		SendClientMessageEx(playerid, COLOR_YELLOW, "Pending Judgements List:");

		new
			string[128],
			fCounter;

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pJudgeJailType] == 1)
				{
					if(PlayerInfo[i][pJailTime] > 1)
					{
						format(string, sizeof(string), "Sentenced: %s - jail (transport completed) - time: %d.",GetPlayerNameEx(i),PlayerInfo[i][pJudgeJailTime]);
						SendClientMessageEx(playerid, COLOR_GRAD1, string);
						++fCounter;
					}
					else
					{
						format(string, sizeof(string), "Sentenced: %s - jail (being transported) - time: %d.",GetPlayerNameEx(i),PlayerInfo[i][pJudgeJailTime]);
						SendClientMessageEx(playerid, COLOR_GRAD1, string);
						++fCounter;
					}
				}
				else if(PlayerInfo[i][pJudgeJailType] == 2)
				{
					if(PlayerInfo[i][pJailTime] > 1)
					{
						format(string, sizeof(string), "Sentenced: %s - prison (transport completed) - time: %d.",GetPlayerNameEx(i),PlayerInfo[i][pJudgeJailTime]);
						SendClientMessageEx(playerid, COLOR_GRAD1, string);
						++fCounter;
					}
					else
					{
						format(string, sizeof(string), "Sentenced: %s - prison (being transported) - time: %d.",GetPlayerNameEx(i),PlayerInfo[i][pJudgeJailTime]);
						SendClientMessageEx(playerid, COLOR_GRAD1, string);
						++fCounter;
					}
				}
			}	
		}
		if(fCounter == 0)
		{
  			SendClientMessageEx(playerid, COLOR_GRAD1, "Nobody is pending judgement.");
		}
  	}
	return 1;
}

CMD:freezebank(playerid, params[])
{
  	if(!IsAJudge(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 4+ can do this.");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /freezebank [player]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	new	string[128],
		rank[GROUP_MAX_RANK_LEN],
		division[GROUP_MAX_DIV_LEN],
		employer[GROUP_MAX_NAME_LEN];
	if(PlayerInfo[giveplayerid][pFreezeBank] == 0)
    {
        PlayerInfo[giveplayerid][pFreezeBank] = 1;
       	GetPlayerGroupInfo(playerid, rank, division, employer);
	   	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has froze %s bank account.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
    	ABroadCast(COLOR_YELLOW,string, 2);
    	format(string, sizeof(string), "You have frozen %s's bank account.", GetPlayerNameEx(giveplayerid));
   	 	SendClientMessageEx(playerid, COLOR_WHITE, string);
   	 	format(string, sizeof(string), "Your bank account has been frozen by %s", GetPlayerNameEx(playerid));
   	 	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
    }
    else
    {
		PlayerInfo[giveplayerid][pFreezeBank] = 0;
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has unfrozen %s bank account.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		ABroadCast(COLOR_YELLOW,string, 2);
		format(string, sizeof(string), "You have unfrozen %s's bank account.", GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid, COLOR_WHITE, string);
   	 	format(string, sizeof(string), "Your bank account has been unfrozen by %s", GetPlayerNameEx(playerid));
   	 	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:freezeassets(playerid, params[])
{
  	if(!IsAJudge(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 4+ can do this.");
	new giveplayerid, houseorcar[8];
	if(sscanf(params, "us[8]", giveplayerid, houseorcar)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /freezeassets [player] [house/car]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	new string[128],
		rank[GROUP_MAX_RANK_LEN],
		division[GROUP_MAX_DIV_LEN],
		employer[GROUP_MAX_NAME_LEN];
    if(strcmp(houseorcar, "house", true) == 0)
	{
		if(PlayerInfo[giveplayerid][pFreezeHouse] == 0)
	    {
			PlayerInfo[giveplayerid][pFreezeHouse] = 1;
	       	GetPlayerGroupInfo(playerid, rank, division, employer);
		   	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has frozen %s house assets.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		   	ABroadCast(COLOR_YELLOW,string, 2);
		   	format(string, sizeof(string), "You have frozen %s's house assets.", GetPlayerNameEx(giveplayerid));
	   	 	SendClientMessageEx(playerid, COLOR_WHITE, string);
	   	 	format(string, sizeof(string), "Your house assets have been frozen by %s", GetPlayerNameEx(playerid));
	   	 	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
	    }
	    else
	    {
	        PlayerInfo[giveplayerid][pFreezeHouse] = 0;
			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has unfrozen %s house assets.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	    	ABroadCast(COLOR_YELLOW,string, 2);
		   	format(string, sizeof(string), "You have unfrozen %s's house assets.", GetPlayerNameEx(giveplayerid));
	   	 	SendClientMessageEx(playerid, COLOR_WHITE, string);
	   	 	format(string, sizeof(string), "Your house assets have been unfrozen by %s", GetPlayerNameEx(playerid));
	   	 	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
	}
	else if(strcmp(houseorcar, "car", true) == 0)
	{
	    if(PlayerInfo[giveplayerid][pFreezeCar] == 0)
		{
			PlayerInfo[giveplayerid][pFreezeCar] = 1;
	       	GetPlayerGroupInfo(playerid, rank, division, employer);
			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has frozen %s vehicle assets.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	    	ABroadCast(COLOR_YELLOW,string, 2);
	    	format(string, sizeof(string), "You have frozen %s's vehicle assets.", GetPlayerNameEx(giveplayerid));
	   	 	SendClientMessageEx(playerid, COLOR_WHITE, string);
	   	 	format(string, sizeof(string), "Your vehicle assets have been frozen by %s", GetPlayerNameEx(playerid));
		 	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
	    }
	    else
	    {
	        PlayerInfo[giveplayerid][pFreezeCar] = 0;
	        format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has unfrozen %s vehicle assets.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	    	ABroadCast(COLOR_YELLOW,string, 2);
	    	format(string, sizeof(string), "You have unfrozen %s's vehicle assets.", GetPlayerNameEx(giveplayerid));
		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
		 	format(string, sizeof(string), "Your vehicle assets have been unfrozen by %s", GetPlayerNameEx(playerid));
		 	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
	    }
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /freezeassets [player] [house/car]");
	}
	return 1;
}

CMD:reward(playerid, params[])
{

    if(!IsAJudge(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 4+ can do this.");

	new
		giveplayerid,
		money;

	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /reward [player] [money(max of $50,000)]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
		new
			string[64 + (MAX_PLAYER_NAME * 2)];

  		if(money < 1 || money > 50000) return SendClientMessageEx(playerid, COLOR_GRAD5, "Reward amount cannot be lower than $1 or higher than $50,000!");
    	new rank[GROUP_MAX_RANK_LEN], division[GROUP_MAX_DIV_LEN], employer[GROUP_MAX_NAME_LEN];
   		GetPlayerGroupInfo(playerid, rank, division, employer);
	    format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has just rewarded %s $%d.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), money);
	    ABroadCast(COLOR_YELLOW,string, 2);

		format(string, sizeof(string), "AdmCmd: %s %s has just rewarded %s $%d", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), money);
		Log("logs/rpspecial.log", string);
		Tax -= money;
  		GivePlayerCash(giveplayerid, money);
    	format(string, sizeof(string), "You have given a reward of $%d to %s.", money, GetPlayerNameEx(giveplayerid));
	    SendClientMessageEx(playerid, COLOR_WHITE, string);
	    format(string, sizeof(string), "You have recieved a reward of $%d from %s %s.", money, rank, GetPlayerNameEx(playerid));
	   	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:reversejudgement(playerid, params[])
{

    if(!IsAJudge(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 4+ can do this.");

	new
		giveplayerid; // For future reference - sscanf plugin is 3 times as fast as ReturnUser, even when used on only one argument

	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /reversejudgement [player]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
 		if(PlayerInfo[giveplayerid][pJudgeJailTime] != 0)
   		{
     		new rank[GROUP_MAX_RANK_LEN], division[GROUP_MAX_DIV_LEN], employer[GROUP_MAX_NAME_LEN], string[52 + (MAX_PLAYER_NAME * 2)];
       		GetPlayerGroupInfo(playerid, rank, division, employer);
			if(PlayerInfo[giveplayerid][pJailTime] != 0) PlayerInfo[giveplayerid][pJailTime] = 0;
			PlayerInfo[giveplayerid][pJudgeJailTime] = 0;
   			switch(PlayerInfo[playerid][pSex])
			{
			    case 1: format(string, sizeof(string), "%s %s has reversed %s's judgement, he is free to go.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    case 2: format(string, sizeof(string), "%s %s has reversed %s's judgement, she is free to go.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			}
   			SendGroupMessage(1, DEPTRADIO, string);
   		}
	    else
   		{
        	SendClientMessageEx(playerid, COLOR_GRAD1, "That person doesn't have a jail/prison sentence.");
   		}
	}
	return 1;
}

CMD:commute(playerid, params[])
{
	if(IsAGovernment(playerid) && PlayerInfo[playerid][pRank] >= Group_GetMaxRank(PlayerInfo[playerid][pMember]))
 	{
		new
			giveplayerid;

		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /commute [player]");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pJudgeJailTime] != 0)
		    {
				new string[68 + (MAX_PLAYER_NAME * 2)];
				if(PlayerInfo[giveplayerid][pJailTime] != 0) PlayerInfo[giveplayerid][pJailTime] = PlayerInfo[giveplayerid][pJailTime]/2;
				PlayerInfo[giveplayerid][pJudgeJailTime] = PlayerInfo[giveplayerid][pJudgeJailTime]/2;
				switch(PlayerInfo[playerid][pSex])
				{
					case 1: format(string, sizeof(string), "President %s has commuted %s, his sentence is now half (%d seconds).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pJudgeJailTime]);
					case 2: format(string, sizeof(string), "President %s has commuted %s, her sentence is now half (%d seconds).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pJudgeJailTime]);
				}
			    SendGroupMessage(1, DEPTRADIO, string);
	    	}
	    	else
   			{
	        	SendClientMessageEx(playerid, COLOR_GRAD1, "That person doesn't have a jail/prison sentence.");
   			}
		}
   	}
   	else
   	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Only the President can use this command.");
	}
	return 1;
}

CMD:pardon(playerid, params[])
{
    if(IsAGovernment(playerid) && PlayerInfo[playerid][pRank] >= Group_GetMaxRank(PlayerInfo[playerid][pMember]))
    {
		new
			giveplayerid;

        if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pardon [player]");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[giveplayerid][pJudgeJailTime] != 0)
		    {
				new string[58 + (MAX_PLAYER_NAME * 2)];
		        if(PlayerInfo[giveplayerid][pJailTime] != 0) PlayerInfo[giveplayerid][pJailTime] = 0;
		        PlayerInfo[giveplayerid][pJudgeJailTime] = 0;
		        switch(PlayerInfo[playerid][pSex])
				{
				    case 1: format(string, sizeof(string), "President %s has forgiven %s of his crimes, he's now free.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				    case 2: format(string, sizeof(string), "President %s has forgiven %s of his crimes, she's now free.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				}
			    SendGroupMessage(1, DEPTRADIO, string);
		    }
		    else
	   		{
	       		SendClientMessageEx(playerid, COLOR_GRAD1, "That person doesn't have a jail/prison sentence.");
	   		}
		}
	}
 	else
  	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Only the President can use this command.");
  	}
	return 1;
}

CMD:wants(playerid, params[])
{
    if(IsACop(playerid) || IsAJudge(playerid))
    {
    	if(JudgeOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_GRAD4, "There must be at least one judge online to use this command!");
		SendClientMessageEx(playerid, COLOR_YELLOW, "Outstanding Warrants List:");

		new
			fCounter,
			string[128];

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(!isnull(PlayerInfo[i][pWarrant]) || PlayerInfo[i][pWarrant] != 0)
				{
					format(string, sizeof(string), "%s (%d) - reason: %s.",GetPlayerNameEx(i), i, PlayerInfo[i][pWarrant]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					++fCounter;
				}
			}	
		}
		if(fCounter <= 0)
		{
		    SendClientMessageEx(playerid, COLOR_GRAD1, "Nobody has any pending warrants.");
		}
  	}
	return 1;
}

CMD:mywarrants(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 361.8299,173.7117,1008.3828))
    {
		if(!isnull(PlayerInfo[playerid][pWarrant]))
  		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You do have active warrants for your arrest. Please considering calling 911 to turn yourself in.");
   		}
     	else
      	{
       		SendClientMessageEx(playerid, COLOR_WHITE, "You do not have active warrants.");
      	}
   	}
    else
    {
    	SendClientMessageEx(playerid, COLOR_GRAD1, "You need to be at the point in City Hall to check if you have active warrants.");
    }
	return 1;
}

CMD:jarrest(playerid, params[])
{
    if(IsAJudge(playerid))
	{
 		if(!IsAtArrestPoint(playerid, 4))
		{
  			SendClientMessageEx(playerid, COLOR_GREY, "You aren't at the arrest point.");
	    	return 1;
		}
		new suspect = GetClosestPlayer(playerid), string[256];
		if(IsPlayerConnected(suspect))
		{
			if(ProxDetectorS(5.0, playerid,suspect))
			{
				if(PlayerInfo[suspect][pJudgeJailType] != 1) { return SendClientMessageEx(playerid, COLOR_GREY, "That person doesn't need to complete a sentence in jail."); }
				format(string, sizeof(string), "* You arrested %s!", GetPlayerNameEx(suspect));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				ResetPlayerWeaponsEx(suspect);
				for(new x; x < MAX_PLAYERVEHICLES; x++) if(PlayerVehicleInfo[suspect][x][pvTicket] >= 1) {
					PlayerVehicleInfo[suspect][x][pvTicket] = 0;
				}
				SetPlayerInterior(suspect, 5);
				SetPlayerPos(suspect,318.5971,312.9619,999.1484);
				PlayerInfo[suspect][pJailTime] = PlayerInfo[suspect][pJudgeJailTime];
				DeletePVar(suspect, "IsFrozen");
				PhoneOnline[suspect] = 1;
				PlayerInfo[suspect][pArrested] += 1;
				SetPlayerFree(suspect,playerid, "was arrested");
				PlayerInfo[suspect][pWantedLevel] = 0;
				SetPlayerToTeamColor(suspect);
				SetPlayerWantedLevel(suspect, 0);
				WantLawyer[suspect] = 1;
				TogglePlayerControllable(suspect, 1);
				ClearAnimations(suspect);
				if(PlayerCuffed[suspect] == 2)
				{
					SetPlayerHealth(suspect, GetPVarFloat(suspect, "cuffhealth"));
					SetPlayerArmor(suspect, GetPVarFloat(suspect, "cuffarmor"));
					DeletePVar(suspect, "cuffhealth");
					DeletePVar(suspect, "PlayerCuffed");
				}
				PlayerCuffed[suspect] = 0;
				DeletePVar(suspect, "PlayerCuffed");
				PlayerCuffedTime[suspect] = 0;
				PlayerInfo[suspect][pVW] = 0;
				SetPlayerVirtualWorld(suspect, 0);
			}
		}
	}
	return 1;
}

CMD:deliver(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 1991.7953,-2321.2532,13.5469))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not at the Los Santos International Airport.");
		return 1;
	}
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /deliver [player]");
	if(PlayerInfo[playerid][pRank] < 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You must be at least rank 1.");
		return 1;
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "   Can't throw yourself into prison!"); return 1; }
		if(PlayerInfo[giveplayerid][pJudgeJailTime] == 0 && PlayerInfo[giveplayerid][pJudgeJailType] != 2) { SendClientMessageEx(playerid, COLOR_GREY, "That person doesn't need to be in prison!"); return 1; }
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			new string[37 + MAX_PLAYER_NAME];
  			DeletePVar(giveplayerid, "IsFrozen");
			format(string, sizeof(string), "* You've brought %s to the Department of Corrections.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s brought you to the Department of Corrections.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~the Department of Corrections", 5000, 3);
			ClearAnimations(giveplayerid);
			PlayerCuffed[giveplayerid] = 0;
			DeletePVar(giveplayerid, "PlayerCuffed");
			format(PlayerInfo[giveplayerid][pPrisonedBy], 24, "%s", GetPlayerNameEx(playerid));
			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "[IC] Judge Sentence");
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerToTeamColor(giveplayerid);
			SetPlayerWantedLevel(giveplayerid, 0);
			SetPlayerSkin(giveplayerid, 50);
			PhoneOnline[giveplayerid] = 1;
			PlayerInfo[giveplayerid][pJailTime] = PlayerInfo[giveplayerid][pJudgeJailTime];
			SetPlayerInterior(giveplayerid, 10);
			PlayerInfo[giveplayerid][pInt] = 10;
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
			SetPlayerColor(giveplayerid, TEAM_ORANGE_COLOR);
			new rand = random(sizeof(DocPrison));
			SetPlayerFacingAngle(giveplayerid, 0);
			SetPlayerPos(giveplayerid, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2]);
			ResetPlayerWeaponsEx(giveplayerid);
			Player_StreamPrep(giveplayerid, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2], FREEZE_TIME);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /me [action]");
	new string[128];
	format(string, sizeof(string), "{FF8000}* {C2A2DA}%s %s", GetPlayerNameEx(playerid), params);
	ProxDetectorWrap(playerid, string, 92, 30.0, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:whisper(playerid, params[]) {
	return cmd_w(playerid, params);
}

CMD:w(playerid, params[])
{
	new giveplayerid, whisper[128];

	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(sscanf(params, "us[128]", giveplayerid, whisper))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/w)hisper [player] [text]");
		return 1;
	}
	if(WatchingTV[playerid] != 0 && PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this while watching TV.");
		return 1;
	}
	if (IsPlayerConnected(giveplayerid))
	{
		if(HidePM[giveplayerid] > 0 && PlayerInfo[playerid][pAdmin] < 2)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That person is blocking whispers!");
			return 1;
		}
		new giveplayer[MAX_PLAYER_NAME], sendername[MAX_PLAYER_NAME], string[128];
		sendername = GetPlayerNameEx(playerid);
		giveplayer = GetPlayerNameEx(giveplayerid);
		if(giveplayerid == playerid)
		{
			if(PlayerInfo[playerid][pSex] == 1) format(string, sizeof(string), "* %s mutters something to himself.", GetPlayerNameEx(playerid));
			else format(string, sizeof(string), "* %s mutters something to herself.", GetPlayerNameEx(playerid));
			return ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		if(ProxDetectorS(5.0, playerid, giveplayerid) || PlayerInfo[playerid][pAdmin] >= 2)
		{
		    //foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(GetPVarInt(i, "BigEar") == 6 && (GetPVarInt(i, "BigEarPlayer") == playerid || GetPVarInt(i, "BigEarPlayer")  == giveplayerid))
					{
						format(string, sizeof(string), "(BE)%s(ID %d) whispers to %s(ID %d): %s", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(giveplayerid), giveplayerid, whisper);
						SendClientMessageWrap(i, COLOR_YELLOW, 92, string);
					}
				}	
			}

			format(string, sizeof(string), "%s (ID %d) whispers to you: %s", GetPlayerNameEx(playerid), playerid, whisper);
			SendClientMessageWrap(giveplayerid, COLOR_YELLOW, 92, string);

			format(string, sizeof(string), "You whispered to %s: %s", GetPlayerNameEx(giveplayerid),whisper);
			SendClientMessageWrap(playerid, COLOR_YELLOW, 92, string);
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
		}
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	return 1;
}

CMD:do(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /do [action]");
	else if(strlen(params) > 120) return SendClientMessageEx(playerid, COLOR_GREY, "The specified message must not be longer than 120 characters in length.");
	new
		iCount,
		iPos,
		iChar;

	while((iChar = params[iPos++])) {
		if(iChar == '@') iCount++;
	}
	if(iCount >= 5) {
		return SendClientMessageEx(playerid, COLOR_GREY, "The specified message must not contain more than 4 '@' symbols.");
	}

	new string[150];
	format(string, sizeof(string), "* %s (( %s ))", params, GetPlayerNameEx(playerid));
	ProxDetectorWrap(playerid, string, 92, 30.0, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:ooc(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if ((noooc) && PlayerInfo[playerid][pAdmin] < 2 && EventKernel[EventCreator] != playerid)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   The OOC channel has been disabled by an Admin!");
		return 1;
	}
	if(gOoc[playerid])
	{
		SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "   You have disabled OOC Chat, re-enable with /togooc!");
		return 1;
	}
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/o)oc [ooc chat]");

	if(PlayerInfo[playerid][pAdmin] == 1)
	{
		new string[128];
		format(string, sizeof(string), "(( Moderator %s: %s ))", GetPlayerNameEx(playerid), params);
		OOCOff(COLOR_OOC,string);
	}
	else if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128];
		format(string, sizeof(string), "(( %s %s: %s ))", GetAdminRankName(PlayerInfo[playerid][pAdmin]), GetPlayerNameEx(playerid), params);
		OOCOff(COLOR_OOC,string);
	}
	else if(PlayerInfo[playerid][pHelper] >= 2)
	{
		new string[128];
		format(string, sizeof(string), "(( Community Advisor %s: %s ))", GetPlayerNameEx(playerid), params);
		OOCOff(COLOR_OOC,string);
		return 1;
	}
	else if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] <= 2)
	{
		new string[128];
		format(string, sizeof(string), "(( %s: %s ))", GetPlayerNameEx(playerid), params);
		OOCOff(COLOR_OOC,string);
		return 1;
	}
	return 1;
}

CMD:o(playerid, params[]) 
{
	return SendClientMessageEx(playerid, COLOR_GRAD1, "/o has been renamed to /ooc to prevent typos.");
}

CMD:shout(playerid, params[]) {
	return cmd_s(playerid, params);
}

CMD:s(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}

	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/s)hout [shout chat]");
	new string[128];
	format(string, sizeof(string), "(shouts) %s!", params);
	SetPlayerChatBubble(playerid,string,COLOR_WHITE,60.0,5000);
	format(string, sizeof(string), "%s shouts: %s!", GetPlayerNameEx(playerid), params);
	ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2, 1);
	return 1;
}

CMD:low(playerid, params[]) {
	return cmd_l(playerid, params);
}

CMD:l(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}

	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/l)ow [close chat]");

	new string[128];
	format(string, sizeof(string), "%s says quietly: %s", GetPlayerNameEx(playerid), params);
	ProxDetector(5.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, 1);
	format(string, sizeof(string), "(quietly) %s", params);
	SetPlayerChatBubble(playerid,string,COLOR_WHITE,5.0,5000);
	return 1;
}

CMD:b(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /b [local ooc chat]");
	new string[128];
	format(string, sizeof(string), "%s: (( %s ))", GetPlayerNameEx(playerid), params);
	ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);

	//foreach(new i: Player)
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pAdmin] > 1 && GetPVarInt(i, "BigEar") == 2)
			{
				new szAntiprivacy[128];
				format(szAntiprivacy, sizeof(szAntiprivacy), "(BE) %s: %s", GetPlayerNameEx(playerid), params);
				SendClientMessageEx(i, COLOR_FADE1, szAntiprivacy);
			}
		}	
	}
	return 1;
}

IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (x > minx && x < maxx && y > miny && y < maxy) return 1;
    return 0;
}

FoundTreasure(playerid)
{
	new szMessage[128];

	switch(PlayerInfo[playerid][pTreasureSkill])
	{
	    case 1..149:
	    {
	        new FoundAnything = Random(1, 100);
	        if(FoundAnything >= 1 && FoundAnything <= 50)
	        {
	            new ItemFound = Random(1, 10);
	            if(ItemFound >= 1 && ItemFound <= 2)
	            {
	                SetPVarInt(playerid, "junkmetal", GetPVarInt(playerid, "junkmetal")+1);
	                SaveTreasureInventory(playerid);

	                format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds junk metal.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            }
	            else if(ItemFound >= 3 && ItemFound <= 4)
	            {
	                SetPVarInt(playerid, "newcoin", GetPVarInt(playerid, "newcoin")+1);
	                SaveTreasureInventory(playerid);

	                format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a new coin.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            }
                else if(ItemFound >= 5 && ItemFound <= 6)
	            {
	                SetPVarInt(playerid, "oldcoin", GetPVarInt(playerid, "oldcoin")+1);
	                SaveTreasureInventory(playerid);

	                format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a old coin.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            }
	            else if(ItemFound >= 7 && ItemFound <= 8)
	            {
	                SetPVarInt(playerid, "brokenwatch", GetPVarInt(playerid, "brokenwatch")+1);
	                SaveTreasureInventory(playerid);

	                format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a broken watch.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            }
	            else if(ItemFound >= 9 && ItemFound <= 10)
	            {
	                SetPVarInt(playerid, "oldkey", GetPVarInt(playerid, "oldkey")+1);
	                SaveTreasureInventory(playerid);

	                format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a old key.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            }
	        }
	        else
	        {
	            SendClientMessageEx(playerid, COLOR_WHITE, "You did not discover anything.");

	            format(szMessage, 128, "%s's metal detector has seemed to malfunctioned", GetPlayerNameEx(playerid));
  				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	        }
	    }
	    case 150..299:
	    {
	        new FoundAnything = Random(1, 100);
	        if(FoundAnything >= 1 && FoundAnything <= 75)
	        {
	            new ItemFound = Random(1, 10);
         		if(ItemFound >= 1 && ItemFound <= 2)
          		{
       	    		SetPVarInt(playerid, "junkmetal", GetPVarInt(playerid, "junkmetal")+1);
         	    	SaveTreasureInventory(playerid);

         	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds junk metal.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
           		}
            	else if(ItemFound == 3 && ItemFound <= 4)
            	{
      	    		SetPVarInt(playerid, "newcoin", GetPVarInt(playerid, "newcoin")+1);
        	    	SaveTreasureInventory(playerid);

        	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a new coin.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
            	else if(ItemFound == 5 && ItemFound <= 6)
            	{
        	    	SetPVarInt(playerid, "oldcoin", GetPVarInt(playerid, "oldcoin")+1);
         	    	SaveTreasureInventory(playerid);

         	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a old coin.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
            	else if(ItemFound == 7)
            	{
        	    	SetPVarInt(playerid, "brokenwatch", GetPVarInt(playerid, "brokenwatch")+1);
         	    	SaveTreasureInventory(playerid);

         	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a broken watch.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
            	else if(ItemFound == 8 || ItemFound == 9)
            	{
        	    	SetPVarInt(playerid, "oldkey", GetPVarInt(playerid, "oldkey")+1);
         	    	SaveTreasureInventory(playerid);

         	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a old key.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
				else if(ItemFound == 10)
				{
				    new VeryRare = Random(1, 90);
				    if(VeryRare >= 1 && VeryRare <= 30)
				    {
				        SetPVarInt(playerid, "goldwatch", GetPVarInt(playerid, "goldwatch")+1);
	            	    SaveTreasureInventory(playerid);

	            	    format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a gold watch!", GetPlayerNameEx(playerid));
  						ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
				    else if(VeryRare >= 31 && VeryRare <= 60)
				    {
				        SetPVarInt(playerid, "silvernugget", GetPVarInt(playerid, "silvernugget")+1);
	            	    SaveTreasureInventory(playerid);

	            	    format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a silver nugget!", GetPlayerNameEx(playerid));
  						ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
				    else if(VeryRare >= 61 && VeryRare <= 90)
				    {
				        SetPVarInt(playerid, "goldnugget", GetPVarInt(playerid, "goldnugget")+1);
	            	    SaveTreasureInventory(playerid);

	            	    format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a gold nugget!", GetPlayerNameEx(playerid));
  						ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
				}
	        }
	        else
	        {
	            SendClientMessageEx(playerid, COLOR_WHITE, "You did not discover anything.");

	            format(szMessage, 128, "%s's metal detector has seemed to malfunctioned", GetPlayerNameEx(playerid));
  				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	        }
	    }
	    case 300..499:
	    {
	        new FoundAnything = Random(1, 125);
	        if(FoundAnything >= 1 && FoundAnything <= 75)
	        {
        		new ItemFound = Random(1, 10);
         		if(ItemFound >= 1 && ItemFound <= 2)
          		{
       	    		SetPVarInt(playerid, "junkmetal", GetPVarInt(playerid, "junkmetal")+1);
         	    	SaveTreasureInventory(playerid);

         	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds junk metal.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
           		}
            	else if(ItemFound == 3 && ItemFound <= 4)
            	{
      	    		SetPVarInt(playerid, "newcoin", GetPVarInt(playerid, "newcoin")+1);
        	    	SaveTreasureInventory(playerid);

        	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a new coin.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
            	else if(ItemFound == 5 && ItemFound <= 6)
            	{
        	    	SetPVarInt(playerid, "oldcoin", GetPVarInt(playerid, "oldcoin")+1);
         	    	SaveTreasureInventory(playerid);

         	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a old coin.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
            	else if(ItemFound == 7)
            	{
        	    	SetPVarInt(playerid, "brokenwatch", GetPVarInt(playerid, "brokenwatch")+1);
         	    	SaveTreasureInventory(playerid);

         	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a broken watch.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
            	else if(ItemFound == 8 || ItemFound == 9)
            	{
        	    	SetPVarInt(playerid, "oldkey", GetPVarInt(playerid, "oldkey")+1);
         	    	SaveTreasureInventory(playerid);

         	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a old key.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
				else if(ItemFound == 10)
				{
				    new VeryRare = Random(1, 90);
				    if(VeryRare >= 1 && VeryRare <= 30)
				    {
				        SetPVarInt(playerid, "goldwatch", GetPVarInt(playerid, "goldwatch")+1);
	            	    SaveTreasureInventory(playerid);

	            	    format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a gold watch!", GetPlayerNameEx(playerid));
  						ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
				    else if(VeryRare >= 31 && VeryRare <= 60)
				    {
				        SetPVarInt(playerid, "silvernugget", GetPVarInt(playerid, "silvernugget")+1);
	            	    SaveTreasureInventory(playerid);

	            	    format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a silver nugget!", GetPlayerNameEx(playerid));
  						ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
				    else if(VeryRare >= 61 && VeryRare <= 90)
				    {
				        SetPVarInt(playerid, "goldnugget", GetPVarInt(playerid, "goldnugget")+1);
	            	    SaveTreasureInventory(playerid);

	            	    format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a gold nugget!", GetPlayerNameEx(playerid));
  						ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
				}
	        }
	        else
	        {
	            SendClientMessageEx(playerid, COLOR_WHITE, "You did not discover anything.");

	            format(szMessage, 128, "%s's metal detector has seemed to malfunctioned", GetPlayerNameEx(playerid));
  				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	        }
	    }
		case 500..9999:
		{
		    new FoundAnything = Random(1, 125);
	        if(FoundAnything >= 1 && FoundAnything <= 75)
	        {
        		new ItemFound = Random(1, 10);
         		if(ItemFound >= 1 && ItemFound <= 2)
          		{
       	    		SetPVarInt(playerid, "junkmetal", GetPVarInt(playerid, "junkmetal")+1);
         	    	SaveTreasureInventory(playerid);

         	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds junk metal.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
           		}
            	else if(ItemFound == 3 && ItemFound <= 4)
            	{
      	    		SetPVarInt(playerid, "newcoin", GetPVarInt(playerid, "newcoin")+1);
        	    	SaveTreasureInventory(playerid);

        	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a new coin.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
            	else if(ItemFound == 5 && ItemFound <= 6)
            	{
        	    	SetPVarInt(playerid, "oldcoin", GetPVarInt(playerid, "oldcoin")+1);
         	    	SaveTreasureInventory(playerid);

         	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a old coin.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
            	else if(ItemFound == 7)
            	{
        	    	SetPVarInt(playerid, "brokenwatch", GetPVarInt(playerid, "brokenwatch")+1);
         	    	SaveTreasureInventory(playerid);

         	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a broken watch.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
            	else if(ItemFound == 8)
            	{
        	    	SetPVarInt(playerid, "oldkey", GetPVarInt(playerid, "oldkey")+1);
         	    	SaveTreasureInventory(playerid);

         	    	format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a old key.", GetPlayerNameEx(playerid));
  					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
				else if(ItemFound == 9 || ItemFound == 10)
				{
				    new VeryRare = Random(1, 100);
				    if(VeryRare >= 1 && VeryRare <= 35)
				    {
				        SetPVarInt(playerid, "goldwatch", GetPVarInt(playerid, "goldwatch")+1);
	            	    SaveTreasureInventory(playerid);

	            	    format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a gold watch!", GetPlayerNameEx(playerid));
  						ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
				    else if(VeryRare >= 36 && VeryRare <= 65)
				    {
				        SetPVarInt(playerid, "silvernugget", GetPVarInt(playerid, "silvernugget")+1);
	            	    SaveTreasureInventory(playerid);

	            	    format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a silver nugget!", GetPlayerNameEx(playerid));
  						ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
				    else if(VeryRare >= 66 && VeryRare <= 99)
				    {
				        SetPVarInt(playerid, "goldnugget", GetPVarInt(playerid, "goldnugget")+1);
	            	    SaveTreasureInventory(playerid);

	            	    format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a gold nugget!", GetPlayerNameEx(playerid));
  						ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
				    else if(VeryRare == 100)
				    {
				        SetPVarInt(playerid, "treasure", GetPVarInt(playerid, "treasure")+1);
	            	    SaveTreasureInventory(playerid);

	            	    format(szMessage, 128, "%s's sweeps the ground with a metal detector and finds a hidden treasure!", GetPlayerNameEx(playerid));
  						ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

  						format(szMessage, 128, "{AA3333}AdmWarning{FFFF00}: %s has just found hidden treasure ($1,000,000)", GetPlayerNameEx(playerid));
						ABroadCast(COLOR_YELLOW, szMessage, 2);
				    }
				}
	        }
	        else
	        {
	            SendClientMessageEx(playerid, COLOR_WHITE, "You did not discover anything.");

	            format(szMessage, 128, "%s's metal detector has seemed to malfunctioned", GetPlayerNameEx(playerid));
  				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	        }
		}
	}
	return 1;
}


CMD:search(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 22 && PlayerInfo[playerid][pJob2] != 22 && PlayerInfo[playerid][pJob3] != 22) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not a treasure hunter.");
	}
	else if(PlayerInfo[playerid][pMetalDetector] == 0) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You don't have a metal detector. You can recieve one from a craftsman.");
	}
	else if(IsPlayerInAnyVehicle(playerid)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not allowed to metal detect while in a vehicle. " );
	}
	else if(gettime()-GetPVarInt(playerid, "LastScan") < GetPVarInt(playerid, "ScanReload")) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "Your metal detector is still charging.");
	}

	else if(!GetPVarType(playerid, "HiddenTreasure")) { // New Treasure
 		SetPVarInt(playerid, "HiddenTreasure", random(sizeof(HiddenTreasure)));
	}

	new
		szMessage[128],
		Float:distance = GetPlayerDistanceFromPoint(playerid, HiddenTreasure[GetPVarInt(playerid, "HiddenTreasure")][0], HiddenTreasure[GetPVarInt(playerid, "HiddenTreasure")][1], HiddenTreasure[GetPVarInt(playerid, "HiddenTreasure")][2]);

    if(IsPlayerInArea(playerid, 402.2964, 737.5547, -1923.9410, -1752.8732) && distance > 3)
  	{
   		PlayerInfo[playerid][pMetalDetector]--;

   		if(PlayerInfo[playerid][pMetalDetector] == 1) {
			SendClientMessageEx(playerid, COLOR_WHITE, "INFO: You only have 1 metal detector charge left.");
		}

        SetPlayerCheckpoint(playerid,HiddenTreasure[GetPVarInt(playerid, "HiddenTreasure")][0], HiddenTreasure[GetPVarInt(playerid, "HiddenTreasure")][1], HiddenTreasure[GetPVarInt(playerid, "HiddenTreasure")][2], 3);
        SetTimerEx("DisableCheckPoint", 2000, 0, "i", playerid);

   		format(szMessage, 128, "You are %f meters away from the treasure. ", distance);
     	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);

      	format(szMessage, 128, "%s sweeps the ground with a metal detector.", GetPlayerNameEx(playerid));
       	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

        if(PlayerInfo[playerid][pTreasureSkill] >=0 && PlayerInfo[playerid][pTreasureSkill] <= 24) SetPVarInt(playerid, "ScanReload", 20);
		else if(PlayerInfo[playerid][pTreasureSkill] >=25 && PlayerInfo[playerid][pTreasureSkill] <= 299) SetPVarInt(playerid, "ScanReload", 15);
		else if(PlayerInfo[playerid][pTreasureSkill] >=300 && PlayerInfo[playerid][pTreasureSkill] <= 599) SetPVarInt(playerid, "ScanReload", 10);
		else if(PlayerInfo[playerid][pTreasureSkill] >=600) SetPVarInt(playerid, "ScanReload", 5);

  		SetPVarInt(playerid, "LastScan", gettime());

	}
 	else if(distance <= 3) // Finds Treasure
  	{
  	    FoundTreasure(playerid);
  	    PlayerInfo[playerid][pMetalDetector]--;
		/*if(PlayerInfo[playerid][pDoubleEXP] > 0)
		{
			format(szMessage, 128, "You have gained 2 treasure hunting skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
			SendClientMessageEx(playerid, COLOR_YELLOW, szMessage);
			PlayerInfo[playerid][pTreasureSkill] += 2;
		}
		else ++PlayerInfo[playerid][pTreasureSkill];*/
		++PlayerInfo[playerid][pTreasureSkill];
  	    DeletePVar(playerid, "HiddenTreasure");

  	    if(PlayerInfo[playerid][pMetalDetector] == 1) {
			SendClientMessageEx(playerid, COLOR_WHITE, "INFO: You only have 1 metal detector charge left.");
		}

  	    if(PlayerInfo[playerid][pTreasureSkill] == 25) {
  	        SendClientMessageEx(playerid, COLOR_WHITE, "* Your Treasure Hunting Skill is now Level 2, the time it takes for your metal detector to charge is now 15 seconds!");
  	    }
  	    if(PlayerInfo[playerid][pTreasureSkill] == 150) {
  	        SendClientMessageEx(playerid, COLOR_WHITE, "* Your Treasure Hunting Skill is now Level 3, your chance to find a rare is now 10%!");
  	    }
  	    if(PlayerInfo[playerid][pTreasureSkill] == 300) {
  	        SendClientMessageEx(playerid, COLOR_WHITE, "* Your Treasure Hunting Skill is now Level 4, the time it takes for your metal detector to charge is now 10 seconds!");
  	    }
  	    if(PlayerInfo[playerid][pTreasureSkill] == 600) {
  	        SendClientMessageEx(playerid, COLOR_WHITE, "* Your Treasure Hunting Skill is now Level 5, your chance to find a rare is now 20%!");
  	    }
   	}
    else {
    	SendClientMessageEx(playerid, COLOR_GREY, "You are not at a beach.");
    }
	return 1;
}

CMD:pay(playerid, params[])
{
	new id, storageid, amount;

	if(sscanf(params, "ud", id, amount)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pay [player] [amount]");
	}
	/*if(sscanf(params, "udd", id, storageid, amount)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pay [player] [storageid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	if(storageid < 0 || storageid > 1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /pay [player] [storageid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	// Find the storageid of the storagedevice.
	if(storageid == 1) {
		new bool:itemEquipped = false;
		for(new i = 0; i < 3; i++)
		{
			if(StorageInfo[playerid][i][sAttached] == 1) {
				storageid = i+1;
				itemEquipped = true;
			}
		}
		if(itemEquipped == false) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a storage device equipped!");
	}*/
	else if(!IsPlayerConnected(id)) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else if(id == playerid) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can not use this command on yourself!");
	}
	else if(amount > 1000 && PlayerInfo[playerid][pLevel] < 3) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You must be level 3 to pay over $1,000 at a time.");
	}
	else if(!(1 <= amount <= 100000)) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "Don't go below $1, or above $100,000 at once.");
	}
	else if(gettime()-GetPVarInt(playerid, "LastTransaction") < 10) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can only make a transaction once every 10 seconds, please wait!");
	}
	else if(PlayerInfo[playerid][pCash] < 0 || PlayerInfo[playerid][pAccount] < 0) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "Your cash on-hand or in the bank is currently at a negative value!");
	}
	else if((2 <= PlayerInfo[playerid][pAdmin] < 4) || (2 <= PlayerInfo[id][pAdmin] <= 4)) return 1;
	else if(ProxDetectorS(5.0, playerid, id)) {
		TransferStorage(id, -1, playerid, storageid, 1, amount, -1, -1);
		OnPlayerStatsUpdate(playerid);
		OnPlayerStatsUpdate(id);
		SetPVarInt(playerid, "LastTransaction", gettime());
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
	return 1;
}

CMD:rehashall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}

	RehashHouses();
	RehashDynamicDoors();
	RehashDynamicMapIcons();
	return 1;
}

CMD:kill(playerid, params[])
{
	if(!IsPlayerConnected(playerid)) return SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
	else if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot do this while being in the Hunger Games Event!");
    else if(GetPVarInt( playerid, "EventToken" ) == 1 || PlayerInfo[playerid][pBeingSentenced] != 0 || GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid] != 0 || PlayerInfo[playerid][pHospital] != 0 || PlayerInfo[playerid][pJailTime] != 0) return SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
	else
	{
		if(GetPVarInt(playerid, "EventToken") >= 1 || GetPVarInt(playerid, "IsInArena") >= 0)
		{
		    if(GetPVarInt(playerid, "IsInArena") >= 0)
		    {
				if(PaintBallArena[GetPVarInt(playerid, "IsInArena")][pbGameType] == 3)
				{
				    if(GetPVarInt(playerid, "AOSlotPaintballFlag") != -1)
				    {
				        SendClientMessageEx(playerid, COLOR_WHITE, "You can not kill yourself while holding a flag.");
				        return 1;
				    }
				}
		    }
			ResetPlayerWeapons(playerid);
		}
		
		if(GetPVarInt(playerid, "commitSuicide") == 1) {
		    return SendClientMessageEx(playerid, COLOR_GRAD2, "You have already requested to commit suicide.");
		}
		else {
			SetTimerEx("killPlayer", 10000, false, "i", playerid);
			SetPVarInt(playerid, "commitSuicide", 1);
			SendClientMessageEx(playerid, COLOR_YELLOW, "You requested to commit suicide, please wait 10 seconds...");
		}
	}
	return 1;
}

CMD:stopani(playerid, params[])
{
	if(StopaniFloats[playerid][0] != 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You are already attempting to clear your animations!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid] != 0 || PlayerInfo[playerid][pHospital] != 0 || PlayerInfo[playerid][pBeingSentenced] != 0|| GetPVarType(playerid, "IsTackled") || GetPVarType(playerid, "Tackling"))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot do this at this time.");
	}
	else
	{
	    GetPlayerPos(playerid, StopaniFloats[playerid][0], StopaniFloats[playerid][1], StopaniFloats[playerid][2]);
		SetTimerEx("StopaniTimer", 10000, 0, "d", playerid);
		SendClientMessageEx (playerid, COLOR_YELLOW, "Do not move for 10 seconds to have your animations cleared!");
	}
	return 1;
}

CMD:eventhelp(playerid, params[])
{
	if (EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 4)
	{
	    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessageEx(playerid, COLOR_GRAD4,"*** EVENT HELP *** type a command for more information");
		SendClientMessageEx(playerid, COLOR_WHITE,"*** EVENT HELP *** /seteventpos /seteventinfo /startevent /lockevent /endevent /announceevent /beginevent /quitevent");
		SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	}
	return 1;
}

CMD:skill(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /skill [number]");
		SendClientMessageEx(playerid, COLOR_GREY, "| 1: Detective																	 6: Arms Dealer");
		SendClientMessageEx(playerid, COLOR_GREY, "| 2: Lawyer						   											 7: Car Mechanic");
		SendClientMessageEx(playerid, COLOR_GREY, "| 3: Whore											  	 						 8: Boxer");
		SendClientMessageEx(playerid, COLOR_GREY, "| 4: Drugs Dealer										  9: Fishing");
		SendClientMessageEx(playerid, COLOR_GREY, "| 5: Drug Smuggler								10: Shipment Contractor");
		SendClientMessageEx(playerid, COLOR_GREY, "| 11: Treasure Hunter							12: Vehicle Lock Picking");
		return 1;
	}
	else switch(strval(params)) {
		case 1: //Detective
		{
			new level = PlayerInfo[playerid][pDetSkill], string[48];
			if(level >= 0 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Detective Skill Level = 1."); format(string, sizeof(string), "You need to find %d more people to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Detective Skill Level = 2."); format(string, sizeof(string), "You need to find %d more people to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Detective Skill Level = 3."); format(string, sizeof(string), "You need to find %d more people to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Detective Skill Level = 4."); format(string, sizeof(string), "You need to find %d more people to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Detective Skill Level = 5."); }
		}
		case 2://Lawyer
		{
			new level = PlayerInfo[playerid][pLawSkill], string[48];
			if(level >= 0 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 1."); format(string, sizeof(string), "You need to free %d more people to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 2."); format(string, sizeof(string), "You need to free %d more people to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 3."); format(string, sizeof(string), "You need to free %d more people to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 4."); format(string, sizeof(string), "You need to free %d more people to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 5."); }
		}
		case 3://Whore
		{
			new level = PlayerInfo[playerid][pSexSkill], string[48];
			if(level >= 0 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Whore Skill Level = 1."); format(string, sizeof(string), "You need to have sex %d times more to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Whore Skill Level = 2."); format(string, sizeof(string), "You need to have sex %d times more to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Whore Skill Level = 3."); format(string, sizeof(string), "You need to have sex %d times more to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Whore Skill Level = 4."); format(string, sizeof(string), "You need to have sex %d times more to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Whore Skill Level = 5."); }
		}
		case 4://Drugs Dealer
		{
			new level = PlayerInfo[playerid][pDrugsSkill], string[50];
			if(level >= 0 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 1."); format(string, sizeof(string), "You need to sell drugs %d times more to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 2."); format(string, sizeof(string), "You need to sell drugs %d times more to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 3."); format(string, sizeof(string), "You need to sell drugs %d times more to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 4."); format(string, sizeof(string), "You need to sell drugs %d times more to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 5."); }
		}
		case 5://Drug Smuggling
		{
			new level = PlayerInfo[playerid][pSmugSkill], string[53];
			if(level >= 0 && level < 20) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 1."); format(string, sizeof(string), "You need to smuggle %d more drug crates to level up.", 20 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 20 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 2."); format(string, sizeof(string), "You need to smuggle %d more drug crates to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 3."); format(string, sizeof(string), "You need to smuggle %d more drug crates to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 4."); format(string, sizeof(string), "You need to smuggle %d more drug crates to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 5."); }
		}
		case 6://Arms Dealer
		{
			new level = PlayerInfo[playerid][pArmsSkill], string[48];
			if(level >= 0 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 1."); format(string, sizeof(string), "You need to sell %d more guns to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 2."); format(string, sizeof(string), "You need to sell %d more guns to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 3."); format(string, sizeof(string), "You need to sell %d more guns to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 4."); format(string, sizeof(string), "You need to sell %d more guns to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 5."); }
		}
		case 7://Car Mechanic
		{
			new level = PlayerInfo[playerid][pMechSkill], string[60];
			if(level >= 0 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 1."); format(string, sizeof(string), "You need to repair/refill a car for %d times more to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 2."); format(string, sizeof(string), "You need to repair/refill a car for %d times more to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 3."); format(string, sizeof(string), "You need to repair/refill a car for %d times more to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 4."); format(string, sizeof(string), "You need to repair/refill a car for %d times more to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 5."); }
		}
		case 8://Boxer
		{
			new level = PlayerInfo[playerid][pBoxSkill], string[48];
			if(level >= 0 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 1."); format(string, sizeof(string), "You need to Win %d more Matches to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 2."); format(string, sizeof(string), "You need to Win %d more Matches to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 3."); format(string, sizeof(string), "You need to Win %d more Matches to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 4."); format(string, sizeof(string), "You need to Win %d more Matches to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 5."); }
		}
		case 9://Fishing
		{
			new level = PlayerInfo[playerid][pFishSkill], string[48];
			if(level >= 0 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 1."); format(string, sizeof(string), "You need to Fish %d more Fishes to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 2."); format(string, sizeof(string), "You need to Fish %d more Fishes to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 3."); format(string, sizeof(string), "You need to Fish %d more Fishes to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level <= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 4."); format(string, sizeof(string), "You need to Fish %d more Fishes to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 5."); }
		}
		case 10://Trucker
		{
			new level = PlayerInfo[playerid][pTruckSkill], string[50];
			if(level >= 0 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Shipment Contractor Skill Level = 1."); format(string, sizeof(string), "You need to transport goods %d times to level up.", 51 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Shipment Contractor Skill Level = 2."); format(string, sizeof(string), "You need to transport goods %d times to level up.", 101 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Shipment Contractor Skill Level = 3."); format(string, sizeof(string), "You need to transport goods %d times to level up.", 201 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Shipment Contractor Skill Level = 4."); format(string, sizeof(string), "You need to transport goods %d times to level up.", 401 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Shipment Contractor Skill Level = 5."); }
		}
		case 11://Treasure Hunter
		{
		    new level = PlayerInfo[playerid][pTreasureSkill], string[50];
            if(level >=0 && level <= 24) SendClientMessageEx(playerid, COLOR_YELLOW, "Your Treasure Hunting Skill Level = 1"), format(string, sizeof(string), "You need to find treasure %d times to level up.", 25 - level), SendClientMessageEx(playerid, COLOR_YELLOW, string);
            else if(level >= 25 && level <= 149) SendClientMessageEx(playerid, COLOR_YELLOW, "Your Treasure Hunting Skill Level = 2"), format(string, sizeof(string), "You need to find treasure %d times to level up.", 150 - level), SendClientMessageEx(playerid, COLOR_YELLOW, string);
			else if(level >=150 && level <= 299) SendClientMessageEx(playerid, COLOR_YELLOW, "Your Treasure Hunting Skill Level = 3"), format(string, sizeof(string), "You need to find treasure %d times to level up.", 300 - level), SendClientMessageEx(playerid, COLOR_YELLOW, string);
			else if(level >=300 && level <= 599) SendClientMessageEx(playerid, COLOR_YELLOW, "Your Treasure Hunting Skill Level = 4"), format(string, sizeof(string), "You need to find treasure %d times to level up.", 600 - level), SendClientMessageEx(playerid, COLOR_YELLOW, string);
			else if(level >=600) SendClientMessageEx(playerid, COLOR_YELLOW, "Your Treasure Hunting Skill Level = 5");
		}
		case 12: //Lock Picking
		{
		    new level = PlayerInfo[playerid][pCarLockPickSkill], string[61];
            if(level >=0 && level <= 49) SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Lock Picking Skill Level = 1"), format(string, sizeof(string), "You need to successfully lock pick %d more cars to level up.", 50 - level), SendClientMessageEx(playerid, COLOR_YELLOW, string);
            else if(level >= 50 && level <= 124) SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Lock Picking Skill Level = 2"), format(string, sizeof(string), "You need to successfully lock pick %d more cars to level up.", 125 - level), SendClientMessageEx(playerid, COLOR_YELLOW, string);
			else if(level >=125 && level <= 224) SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Lock Picking Skill Level = 3"), format(string, sizeof(string), "You need to successfully lock pick %d more cars to level up.", 225 - level), SendClientMessageEx(playerid, COLOR_YELLOW, string);
			else if(level >=225 && level <= 349) SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Lock Picking Skill Level = 4"), format(string, sizeof(string), "You need successfully lock pick %d more cars to level up.", 350 - level), SendClientMessageEx(playerid, COLOR_YELLOW, string);
			else if(level >=350) SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Lock Picking Skill Level = 5");
		}
		default:
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid skill number specified.");
		}
	}
	return 1;
}

CMD:checkcargo(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 20 && PlayerInfo[playerid][pJob2] != 20 && PlayerInfo[playerid][pJob3] != 20 && !IsACop(playerid))
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not a Shipment Contractor or a Cop!");
        return 1;
	}

	new carid = GetPlayerVehicleID(playerid);
 	new closestcar = GetClosestCar(playerid, carid);
  	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && IsATruckerCar(closestcar))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot search the contents of this vehicle while inside a vehicle.");
			return 1;
		}
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
		if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "The vehicle's trunk must be opened in order to search it.");
			return 1;
		}

		new string[128];

     	SendClientMessageEx(playerid, COLOR_GREEN,"_______________ SHIPMENT CONTRACTOR LOAD SHEET _______________");
		if(IsPlayerInVehicle(playerid, closestcar))
  		{
    		SendClientMessageEx(playerid, COLOR_WHITE, "There is a person in that truck. In order to check the content of the truck, the driver must be removed.");
      		return 1;
		}
		new iTruckContents = TruckContents{closestcar};
		new truckcontentname[50];
		if(iTruckContents == 1)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Food & beverages");}
		else if(iTruckContents == 2)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Clothing"); }
		else if(iTruckContents == 3)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Legal materials"); }
		else if(iTruckContents == 4)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}24/7 items"); }
		else if(iTruckContents == 5)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal weapons"); }
		else if(iTruckContents == 6)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal drugs"); }
		else if(iTruckContents == 7)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal materials"); }
		format(string, sizeof(string), "Vehicle registration: %s (%d)", GetVehicleName(closestcar), closestcar);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(iTruckContents == 0)
		{ format(truckcontentname, sizeof(truckcontentname), "%s",  GetInventoryType(TruckDeliveringTo[closestcar])); }
		format(string, sizeof(string), "Content: %s", truckcontentname);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		if(IsACop(playerid))
		{
			SendClientMessageEx(playerid, COLOR_YELLOW, "To remove the illegal goods, type /clearcargo near the truck.");
		}

		if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20 || PlayerInfo[playerid][pJob3] == 20)
		{
			if(TruckDeliveringTo[closestcar] > 0 && TruckUsed[playerid] == INVALID_VEHICLE_ID)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "To deliver the goods, type /hijackcargo as the driver.");
			}
			else if(TruckUsed[playerid] == INVALID_VEHICLE_ID)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "To get goods, type /loadshipment as the driver.");
			}
			else if(TruckUsed[playerid] == closestcar && gPlayerCheckpointStatus[playerid] == CHECKPOINT_RETURNTRUCK)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "This is your Shipment Transport Vehicle. You have not returned it to the docks yet for your pay.");
			}
			else if(TruckUsed[playerid] == closestcar)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "This is your Shipment Transport Vehicle. You have not delivered your goods yet.");
			}
			else if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are already on another delivery. Type /cancel shipment to cancel that delivery.");
			}
		}
     	SendClientMessageEx(playerid, COLOR_GREEN,"_________________________________________________________");
    }
	else
	{
 		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not near a Shipment Transport Vehicle.");
 	}
    return 1;
}

CMD:clearcargo(playerid, params[])
{
	if(!IsACop(playerid))
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not a law enforcement officer!");
        return 1;
	}

	new carid = GetPlayerVehicleID(playerid);
 	new closestcar = GetClosestCar(playerid, carid);
  	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && IsATruckerCar(closestcar))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot clear the cargo while inside of a vehicle.");
		    return 1;
		}
		if(TruckContents{closestcar} == 0)
		{
		 	if(TruckDeliveringTo[closestcar] != INVALID_BUSINESS_ID && (Businesses[TruckDeliveringTo[closestcar]][bType] != BUSINESS_TYPE_GASSTATION || Businesses[TruckDeliveringTo[closestcar]][bType] == BUSINESS_TYPE_NEWCARDEALERSHIP))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You cannot take the content away.");
				return 1;
			}
		}
		new truckcontentname[50];
		new iTruckContents = TruckContents{closestcar};
		if(iTruckContents >= 0 && iTruckContents < 5)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "There are no illegal items in that Vehicle.");
			return 1;
		}
		else if(TruckDeliveringTo[closestcar] == INVALID_BUSINESS_ID && iTruckContents == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "There are no illegal items in that Vehicle.");
			return 1;
		}
		if(iTruckContents == 5)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}illegal weapons"); }
		else if(iTruckContents == 6)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}illegal drugs"); }
		else if(iTruckContents == 7)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}illegal materials"); }
		else format(truckcontentname, sizeof(truckcontentname), "{FF0606}illegal materials");
 		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(TruckUsed[i] == closestcar)
				{
					TruckUsed[i] = INVALID_VEHICLE_ID;
					TruckDeliveringTo[closestcar] = INVALID_BUSINESS_ID;
					TruckContents{closestcar} = 0;
					TruckRoute[closestcar] = 0;
					DisablePlayerCheckpoint(i);
					gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
					DeletePVar(i, "TruckDeliver");
					SendClientMessageEx(i, COLOR_WHITE, "Your delivery has failed. Law enforcement has confiscated the illegal goods.");
				}
			}	
		}
		new string[128];
		format(string, sizeof(string), "You removed the %s {FFFFFF}from the Vehicle.", truckcontentname);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "* %s has taken the illegal items from the Vehicle.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
   	else
	{
 		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not near a Shipment Transport Vehicle.");
 	}
    return 1;
}

CMD:hijackcargo(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20 || PlayerInfo[playerid][pJob3] == 20)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
     		if(!CheckPointCheck(playerid))
	        {
         		if(GetPVarInt(playerid, "LoadTruckTime") > 0)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "You are currently loading your Truck!");
					return 1;
	            }
	            if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "You are already on another delivery, type /cancel shipment to cancel that delivery.");
					return 1;
	            }
				if(TruckDeliveringTo[vehicleid] == 0 && TruckContents{vehicleid} == 0)
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "This Truck is empty, it does not contain any goods!");
				    return 1;
				}
				if(IsPlayerInRangeOfPoint(playerid, 65, -1572.767822, 81.137527, 3.554687))
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "You can not hijack when that close to the San Fierro Docks!");
					return 1;
				}
				if(!IsABoat(vehicleid))
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You are now attempting to hijack the truck, please wait....");
				} 
				else 
				{
					if(PlayerInfo[playerid][pTruckSkill] >= 200)
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You are now attempting to hijack the boat, please wait....");
					}
					else return SendClientMessageEx(playerid, COLOR_WHITE, "Water shipments are restricted to Level 4+ Shipment Contracter.");
				}

				TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 1);

				SetPVarInt(playerid, "LoadTruckTime", 10);
				SetTimerEx("HijackTruck", 1000, 0, "dd", playerid);
	        }
	        else return SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "You are not driving a Shipment Transport Vehicle!");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Shipment Contractor!");
	return 1;
}



CMD:loadshipment(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20 || PlayerInfo[playerid][pJob3] == 20)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if(!CheckPointCheck(playerid))
	        {
	            if(GetPVarInt(playerid, "LoadTruckTime") > 0)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "You are currently loading the Shipment!");
					return 1;
	            }
	            if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "You are already on another delivery, type /cancel shipment to cancel that delivery.");
					return 1;
	            }
				if(TruckContents{vehicleid} != 0)
				{
				    return SendClientMessageEx(playerid, COLOR_GRAD2, "That vehicle is already loaded.");
				}
				if(TruckDeliveringTo[vehicleid] != INVALID_BUSINESS_ID && TruckContents{vehicleid} == 0)
				{
				    return SendClientMessageEx(playerid, COLOR_GRAD2, "That vehicle is already loaded.");
				}
	            if(!IsABoat(vehicleid))
	            {
		            SetPlayerCheckpoint(playerid,-1572.767822, 81.137527, 3.554687, 4);
		            GameTextForPlayer(playerid, "~w~Waypoint set ~r~San Fierro Docks", 5000, 1);
		            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Pick up some goods to transport with your Truck at San Fierro Docks (see checkpoint on radar).");
				}
				else
				{
					if(PlayerInfo[playerid][pTruckSkill] >= 200)
					{
						SetPlayerCheckpoint(playerid,2098.6543,-104.3568,-0.4820, 4);
						GameTextForPlayer(playerid, "~w~Waypoint set ~r~Palamino Docks", 5000, 1);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Pick up some goods to transport with your Boat at Palamino Docks (see checkpoint on radar).");
					}
					else return SendClientMessageEx(playerid, COLOR_WHITE, "Water shipments are restricted to Level 4+ Shipment Contracter.");
				}
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_LOADTRUCK;
	        }
	        else return SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "You are not driving a Shipment Transport Vehicle!");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Shipment Contractor!");
	return 1;
}

CMD:useheroin(playerid, params[])
{
	if(PlayerInfo[playerid][pHeroin] < 10)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need at least 10 milligrams of heroin.");

	if(PlayerInfo[playerid][pSyringes] == 0)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You don't have any syringes.");

    if(gettime()-GetPVarInt(playerid, "HeroinLastUsed") < 300)
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only use heroin once every 5 minutes.");

    if(GetPVarInt(playerid, "Injured") != 1) {
		new szMessage[128];

		SetPVarInt(playerid, "HeroinLastUsed", gettime());
		PlayerInfo[playerid][pHeroin] -= 10;
		PlayerInfo[playerid][pSyringes] -= 1;

		SetPVarInt(playerid, "InjectHeroinStanding", SetTimerEx("InjectHeroinStanding", 5000, 0, "i", playerid));

		SendClientMessageEx(playerid, COLOR_GREEN, "You have injected heroin into yourself, the effects will begin in 5 seconds.");
		format(szMessage, sizeof(szMessage), "* %s injects heroin into himself.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);

        return 1;
	}

	new szMessage[128];

	SetPVarInt(playerid, "HeroinLastUsed", gettime());
	PlayerInfo[playerid][pHeroin] -= 10;
	PlayerInfo[playerid][pSyringes] -= 1;

	SetPVarInt(playerid, "Health", 30);
	SetPVarInt(playerid, "InjectHeroin", SetTimerEx("InjectHeroin", 5000, 0, "i", playerid));

	SendClientMessageEx(playerid, COLOR_GREEN, "You have injected heroin into yourself, the effects will begin in 5 seconds.");
	format(szMessage, sizeof(szMessage), "* %s injects heroin into himself.", GetPlayerNameEx(playerid));
	ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:makeheroin(playerid, params[]) {

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, -882.2048,1109.3385,5442.8193))
	    return SendClientMessageEx(playerid, COLOR_GREY, "You are not at the purification lab.");

	if(PlayerInfo[playerid][pRawOpium] == 0)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You don't have any raw opium to purify.");

	if(Purification[0] == 1)
	    return SendClientMessageEx(playerid, COLOR_GREY, "Only one player may attempt to purify their opium at a time.");

	new szMessage[128];
	SendClientMessageEx(playerid, COLOR_GREEN, "You must wait 30 seconds, for purification to be complete.");

    format(szMessage, sizeof(szMessage), "* %s begins the purification process.", GetPlayerNameEx(playerid));
	ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	Purification[0] = 1;
	SetPVarInt(playerid, "AttemptPurify", SetTimerEx("AttemptPurify", 1000, 1, "i", playerid));
	return 1;
}

CMD:plantopiumseeds(playerid, params[]) {
	if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4 && PlayerInfo[playerid][pJob3] != 4) {
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a drug dealer.");
	}
 	else if(PlayerInfo[playerid][pOpiumSeeds] > 0) {
		if(PlayerInfo[playerid][pWeedObject] > 0)
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "You already have a plant growing." );
		    return 1;
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot plant seeds while inside a vehicle!");
		for(new i = 0; i < MAX_PLANTS; ++i)
		{
		    if(Plants[i][pObject] == 0)
		    {
		        new
					szMessage[48],
					Float:xyz[3];

        		ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
				SendClientMessageEx(playerid, COLOR_GREEN, "You have planted some opium. It will take around 2 hours to grow.");
		        GetPlayerPos(playerid, xyz[0], xyz[1], xyz[2]);
		        xyz[2] -= 1.0;

		        PlayerInfo[playerid][pOpiumSeeds]--;
		        PlayerInfo[playerid][pWeedObject] = 1;
				PlacePlant(i, GetPlayerSQLId(playerid), 2, 859, PlayerInfo[playerid][pDrugsSkill], xyz[0], xyz[1], xyz[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				SavePlant(i);
				new string[128];
				format(string, sizeof(string), "%s (IP:%s) has placed opium plant (%d)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), i);
				Log("logs/plant.log", string);
				format(szMessage, sizeof(szMessage), "* %s plants some opium.", GetPlayerNameEx(playerid));
				ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "The server has reached the max number of plants.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough seeds to plant opium - head to the drug house and pick up some seeds (/getopiumseeds).");
	return 1;
}

CMD:plantpotseeds(playerid, params[]) {
	if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4 && PlayerInfo[playerid][pJob3] != 4) {
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a drug dealer.");
	}
 	else if(PlayerInfo[playerid][pWSeeds] > 0) {
		if(PlayerInfo[playerid][pWeedObject] > 0)
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "You already have a plant growing." );
		    return 1;
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot plant seeds while inside a vehicle!");
		for(new i = 0; i < MAX_PLANTS; ++i)
		{
		    if(Plants[i][pObject] == 0)
		    {
		        new
					szMessage[48],
					Float: xyz[3];

        		ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
				SendClientMessageEx(playerid, COLOR_GREEN, "You have planted some weed. It will take around 20-45 minutes to grow.");
		        GetPlayerPos(playerid, xyz[0], xyz[1], xyz[2]);
				xyz[2] -= 1.5;

		        Plants[i][pDrugsSkill] = PlayerInfo[playerid][pDrugsSkill];
		        PlayerInfo[playerid][pWeedObject] = 1;
		        PlayerInfo[playerid][pWSeeds]--;
                PlacePlant(i, GetPlayerSQLId(playerid), 1, 19473, PlayerInfo[playerid][pDrugsSkill], xyz[0], xyz[1], xyz[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
                SavePlant(i);
                new string[128];
				format(string, sizeof(string), "%s (IP:%s) has placed weed plant (%d)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), i);
				Log("logs/plant.log", string);
				format(szMessage, sizeof(szMessage), "* %s plants some weed.", GetPlayerNameEx(playerid));
				ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "The server has reached the max number of plants.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough seeds to plant weed - head to the drug house and pick up some seeds (/getseeds).");
	return 1;
}

CMD:getopiumseeds(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4 && PlayerInfo[playerid][pJob3] != 4)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're not a drug dealer.");

	else if(PlayerInfo[playerid][pOpiumSeeds] == 3)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only hold 3 bags of opium seeds.");

	else if(GetPlayerCash(playerid) < 75000)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You don't have $75,000.");

	else {

    	for (new i=0; i<MAX_POINTS; i++)
  		{
	   		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
	   		{
			    if(Points[i][Stock] < 1 && PlayerInfo[playerid][pDonateRank] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "   This drug house doesn't have any seeds.");
				if(PlayerInfo[playerid][pDonateRank] < 1)
				{
					new string[32];
					Points[i][Stock] -= 1;
					format(string, sizeof(string), " POT/OPIUM AVAILABLE: %d/1000.", Points[i][Stock]);
					UpdateDynamic3DTextLabelText(Points[i][TextLabel], COLOR_YELLOW, string);
				}
				PlayerInfo[playerid][pOpiumSeeds] += 1;
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have purchased a bag of opium seeds from the drug house.");
				GivePlayerCash(playerid, -75000);
				GameTextForPlayer(playerid, "~r~-$75000", 3000, 1 );
				for(new z = 0; z < sizeof(FamilyInfo); z++)
				{
					if(strcmp(Points[i][Owner], FamilyInfo[z][FamilyName], true) == 0)
					{
						FamilyInfo[z][FamilyBank] += 2500;
					}
				}
				return 1;
			}
   		}
   		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the drug house.");
	}
	return 1;
}

CMD:getseeds(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4 && PlayerInfo[playerid][pJob3] != 4)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a drug dealer.");
		return 1;
	}
	if(PlayerInfo[playerid][pWSeeds] > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You already have a bag of seeds, use them first.");
	    return 1;
	}
	if(GetPlayerCash(playerid) < 10000)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, " You do not have $10,000.");
	    return 1;
	}
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
  	{
	   	if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
	   	{
			mypoint = i;
		}
   	}
   	if (mypoint == -1)
   	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not at the Drug House!");
		return 1;
   	}
	if(Points[mypoint][Stock] < 1 && PlayerInfo[playerid][pDonateRank] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "   This drug house doesn't have any seeds.");
	if(PlayerInfo[playerid][pDonateRank] < 1)
	{
		new string[32];
		Points[mypoint][Stock] -= 1;
		format(string, sizeof(string), " POT/OPIUM AVAILABLE: %d/1000.", Points[mypoint][Stock]);
		UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
	}
	PlayerInfo[playerid][pWSeeds] += 3;
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " You have purchased a bag of Pot Seeds from the Drug House. ");
	GivePlayerCash(playerid, -10000);
	GameTextForPlayer(playerid, "~r~-$10000", 3000, 1 );
	for(new i = 0; i < sizeof(FamilyInfo); i++)
	{
		if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
		{
			FamilyInfo[i][FamilyBank] += 2500;
		}
	}
	return 1;
}

CMD:adestroyplant(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adestroyplant [player]");
		}
		else if(IsPlayerConnected(iTargetID)) {

			for(new i = 0; i < MAX_PLANTS; ++i)
			{
			    if(Plants[i][pOwner] == GetPlayerSQLId(iTargetID))
			    {
			        new
						szMessage[47 + MAX_PLAYER_NAME];

                    //foreach(new z : Player)
					for(new z = 0; z < MAX_PLAYERS; ++z)
					{
						if(IsPlayerConnected(z))
						{
							if(Plants[i][pOwner] == GetPlayerSQLId(z))
							{
								PlayerInfo[z][pWeedObject] = 0;
							}
						}	
					}
					format(szMessage, sizeof(szMessage), "You have destroyed %s's plant.", GetPlayerNameEx(iTargetID), Plants[i][pGrowth]);
					SendClientMessageEx(playerid, COLOR_GREY, szMessage);

					format(szMessage, sizeof(szMessage), "Administrator %s has destroyed your plant.", GetPlayerNameEx(playerid), Plants[i][pGrowth]);
					SendClientMessageEx(iTargetID, COLOR_GREY, szMessage);
                    new string[128];
					format(string, sizeof(string), "%s (IP:%s) has destroyed %s (IP:%s) plant (%d)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), GetPlayerNameEx(iTargetID), GetPlayerIpEx(iTargetID), i);
					Log("logs/plant.log", string);
                    PlayerInfo[iTargetID][pWeedObject] = 0;
                    DestroyPlant(i);
                    SavePlant(i);
					return 1;
			    }
			}
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You're not authorized to use this command.");
	return 1;
}

CMD:destroyplant(playerid, params[]) {
	if(IsACop(playerid) || IsAMedic(playerid)) {
		for(new i = 0; i < MAX_PLANTS; ++i)
		{
			if(IsValidDynamicObject(Plants[i][pObjectSpawned]) && IsPlayerInRangeOfPoint(playerid, 2.5, Plants[i][pPos][0], Plants[i][pPos][1], Plants[i][pPos][2]))
			{
				if(GetPlayerVirtualWorld(playerid) == Plants[i][pVirtual] && GetPlayerInterior(playerid) == Plants[i][pInterior]) {

					new
						szMessage[128];

					ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);

					switch(Plants[i][pPlantType]) {
	    				case 1:
					    {
							format(szMessage, sizeof(szMessage), "* You seized a marijuana plant weighing %d grams.", Plants[i][pGrowth]);
							SendClientMessageEx(playerid, COLOR_GREY, szMessage);
							format(szMessage, sizeof(szMessage), "* %s seizes the weed plant.", GetPlayerNameEx(playerid), GetPlayerNameEx(i));
							ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							//foreach(new z : Player)
							for(new z = 0; z < MAX_PLAYERS; ++z)
							{
								if(IsPlayerConnected(z))
								{
									if(Plants[i][pOwner] == GetPlayerSQLId(z))
									{
										PlayerInfo[z][pWeedObject] = 0;
									}
								}	
							}
							format(szMessage, sizeof(szMessage), "%s (IP:%s) has destroyed weed plant (%d)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), i);
							Log("logs/plant.log", szMessage);
							DestroyPlant(i);
							SavePlant(i);
							return 1;
						}
						case 2:
						{
						    new Grams = Random(10, 30);
						    format(szMessage, sizeof(szMessage), "* You seized a opium plant weighing %d milligrams.", Grams);
							SendClientMessageEx(playerid, COLOR_GREY, szMessage);
							format(szMessage, sizeof(szMessage), "* %s seizes the opium plant.", GetPlayerNameEx(playerid), GetPlayerNameEx(i));
							ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							//foreach(new z : Player)
							for(new z = 0; z < MAX_PLAYERS; ++z)
							{
								if(IsPlayerConnected(z))
								{
									if(Plants[i][pOwner] == GetPlayerSQLId(z))
									{
										PlayerInfo[z][pWeedObject] = 0;
									}
								}	
							}
							format(szMessage, sizeof(szMessage), "%s (IP:%s) has destroyed opium plant (%d)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), i);
							Log("logs/plant.log", szMessage);
							DestroyPlant(i);
							SavePlant(i);
							return 1;
						}
					}
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at a plant.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:checkplant(playerid, params[])
{
    for(new i = 0; i < MAX_PLANTS; ++i)
	{
		if(IsValidDynamicObject(Plants[i][pObjectSpawned]) && IsPlayerInRangeOfPoint(playerid, 2.5, Plants[i][pPos][0], Plants[i][pPos][1], Plants[i][pPos][2]))
		{
		    if(GetPlayerVirtualWorld(playerid) == Plants[i][pVirtual] && GetPlayerInterior(playerid) == Plants[i][pInterior])
		    {
		        switch(Plants[i][pPlantType])
		        {
		            case 1:
		            {
		                if(Plants[i][pGrowth] > 10)
		                {
		        			new
								szMessage[66 + MAX_PLAYER_NAME];

							format(szMessage, sizeof(szMessage), "Your plant currently carries %i grams - use /pickplant to claim it.", Plants[i][pGrowth]);
							SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
							return 1;
						}
						else SendClientMessageEx(playerid, COLOR_YELLOW, "This plant isn't ready to be picked yet.");
						return 1;
					}
					case 2:
					{
					    if(Plants[i][pGrowth] >= 120)
					    {
							SendClientMessageEx(playerid, COLOR_WHITE, "Your plant is currently ready to be harvested - use /pickplant to claim it.");
							return 1;
						}
						else SendClientMessageEx(playerid, COLOR_WHITE, "Your opium plant still needs more time to grow.");
						return 1;
					}
				}
		    }
		}
	}
	return SendClientMessageEx(playerid, COLOR_GREY, "You are not at a plant.");
}


CMD:pickplant(playerid, params[])
{
	for(new i = 0; i < MAX_PLANTS; ++i)
	{
		if(IsValidDynamicObject(Plants[i][pObjectSpawned]) && IsPlayerInRangeOfPoint(playerid, 2.5, Plants[i][pPos][0], Plants[i][pPos][1], Plants[i][pPos][2]))
		{
		    if(GetPlayerVirtualWorld(playerid) == Plants[i][pVirtual] && GetPlayerInterior(playerid) == Plants[i][pInterior])
		    {
		        switch(Plants[i][pPlantType])
		        {
		            case 1:
		            {
						if(Plants[i][pGrowth] > 10)
						{
							new szMessage[128];

							ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);

							format(szMessage, sizeof(szMessage), "You picked the plant and gathered %d grams of pot.", Plants[i][pGrowth]);
							SendClientMessageEx(playerid, COLOR_GREY, szMessage);
							format(szMessage, sizeof(szMessage), "* %s picks the weed plant.", GetPlayerNameEx(playerid));
							ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            //foreach(new z : Player)
							for(new z = 0; z < MAX_PLAYERS; ++z)
							{
								if(IsPlayerConnected(z))
								{
									if(Plants[i][pOwner] == GetPlayerSQLId(z))
									{
										PlayerInfo[z][pWeedObject] = 0;
									}
								}	
							}
							format(szMessage, sizeof(szMessage), "%s (IP:%s) has picked weed plant (%d) and recieved %d grams", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), i, Plants[i][pGrowth]);
							Log("logs/plant.log", szMessage);
							PlayerInfo[playerid][pPot] += Plants[i][pGrowth];
							DestroyPlant(i);
							SavePlant(i);
							return 1;
						}
						else SendClientMessageEx(playerid, COLOR_GREY, "This plant is not ready to be picked yet.");
						return 1;
					}
					case 2:
					{
					    if(Plants[i][pGrowth] >= 120)
					    {
							new szMessage[128],
								Grams = Random(10, 30);

							ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);

							format(szMessage, sizeof(szMessage), "You picked the plant and gathered %d milligrams of opium.", Grams);
							SendClientMessageEx(playerid, COLOR_GREY, szMessage);
							format(szMessage, sizeof(szMessage), "* %s picks the opium plant.", GetPlayerNameEx(playerid));
							ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							//foreach(new z : Player)
							for(new z = 0; z < MAX_PLAYERS; ++z)
							{
								if(IsPlayerConnected(z))
								{
									if(Plants[i][pOwner] == GetPlayerSQLId(z))
									{
										PlayerInfo[z][pWeedObject] = 0;
									}
								}	
							}
							format(szMessage, sizeof(szMessage), "%s (IP:%s) has picked opium plant (%d) and recieved %d milligrams", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), i, Grams);
							Log("logs/plant.log", szMessage);
							PlayerInfo[playerid][pRawOpium] += Grams;
							DestroyPlant(i);
							SavePlant(i);
							return 1;
					    }
					    else SendClientMessageEx(playerid, COLOR_GREY, "This plant is not ready to be picked yet.");
						return 1;
					}
				}
	   		}
		}
	}
	return SendClientMessageEx(playerid, COLOR_GREY, "You are not at a plant.");
}

CMD:levelones(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new szNoobs[156], zone[MAX_ZONE_NAME];
   		SendClientMessageEx(playerid,COLOR_WHITE,"Listing all level ones...");

    	//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(gPlayerLogged{playerid} > 0 && PlayerInfo[i][pLevel] == 1 && PlayerInfo[i][pConnectHours] == 0 && PlayerInfo[i][pAdmin] == 0)
				{
					GetPlayer3DZone(i, zone, sizeof(zone));
					format(szNoobs, sizeof(szNoobs), "* %s (ID %i) (Hours 0) - Location: %s", GetPlayerNameEx(i), i, zone);
					SendClientMessageEx(playerid, COLOR_WHITE, szNoobs);
				}
			}	
		}
		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(gPlayerLogged{playerid} > 0 && PlayerInfo[i][pLevel] == 1 && PlayerInfo[i][pConnectHours] != 0 && PlayerInfo[i][pAdmin] == 0)
				{
					GetPlayer3DZone(i, zone, sizeof(zone));
					format(szNoobs, sizeof(szNoobs), "* %s (ID %i) (Hours %i) - Location: %s", GetPlayerNameEx(i), i, PlayerInfo[i][pConnectHours], zone);
					SendClientMessageEx(playerid, COLOR_WHITE, szNoobs);
				}
			}	
		}
	}
	return 1;
}

CMD:paused(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2) {

    	new
			szMessage[42 + MAX_PLAYER_NAME];

	    SendClientMessageEx(playerid,COLOR_WHITE,"Listing all paused players...");
	    //foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(playerTabbed[i] != 0) {

					if(playerTabbed[i] > 60) format(szMessage, sizeof(szMessage), "* %s (ID %d), tabbed for %d minutes.", GetPlayerNameEx(i), i, playerTabbed[i] / 60);
					else format(szMessage, sizeof(szMessage), "* %s (ID %d), tabbed for %d seconds.", GetPlayerNameEx(i), i, playerTabbed[i]);

					if(PlayerInfo[i][pAdmin] >= 2) SendClientMessageEx(playerid,COLOR_RED, szMessage);
					else SendClientMessageEx(playerid,COLOR_GREY, szMessage);
				}
			}	
		}
   	}
    else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
	return 1;
}

CMD:afk(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2) {

    	new
			szMessage[36 + MAX_PLAYER_NAME];

	    SendClientMessageEx(playerid,COLOR_WHITE,"Listing all AFK players...");
	    //foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(playerAFK[i] != 0 && playerAFK[i] > 60) {
					format(szMessage,sizeof(szMessage),"* %s (ID %d), AFK for %d minutes.", GetPlayerNameEx(i), i, playerAFK[i] / 60);
					if(PlayerInfo[i][pAdmin] >= 2) SendClientMessageEx(playerid,COLOR_RED,szMessage);
					else SendClientMessageEx(playerid,COLOR_GREY,szMessage);
				}
			}	
  		}
   	}
    else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
	return 1;
}

CMD:vipnum(playerid, params[])
{
	SendClientMessageEx(playerid, -1, "This command has been temporarily disabled.");
	/*
    if(!(IsPlayerInRangeOfPoint(playerid, 3.0, 2549.548095, 1404.047729, 7699.584472 ) || IsPlayerInRangeOfPoint(playerid, 3.0, 1832.6000, 1375.1700, 1464.4600)) )
    {
    	SendClientMessageEx(playerid, COLOR_GREY, "You are not at the VIP phone number changing station!");
     	return 1;
   	}
    if(PlayerInfo[playerid][pDonateRank] < 2)
    {
    	SendClientMessageEx(playerid, COLOR_GRAD1, "You must be a Silver VIP or higher to use this function.");
     	return 1;
	}
	ShowPlayerDialog(playerid, VIPNUMMENU, DIALOG_STYLE_INPUT, "New Phone Number","New phone number:", "Submit", "Cancel"); */
	return 1;
}

CMD:safebalance(playerid, params[]) {
	if(PlayerInfo[playerid][pFMember] < INVALID_FAMILY_ID) {
		if(FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyUSafe] < 1) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "Your family doesn't have a safe.");
		}
		else
		{
			new string[128];

			new weaponsinlocker;
			for(new s = 0; s < 10; s++)
			{
				if(FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyGuns][s] != 0)
				{
					weaponsinlocker++;
				}
			}

			format(string, sizeof(string), " Safe: %s | Gunlockers: %d/10 | Cash: $%d | Pot: %d | Crack: %d | Materials: %d | Heroin: %d", FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyName], weaponsinlocker, FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCash], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyPot], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCrack], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMats], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyHeroin]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
	return 1;
}

CMD:safehelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________________");
	SendClientMessageEx(playerid, COLOR_WHITE, "SAFE HELP: Type a command for more information.");
	SendClientMessageEx(playerid, COLOR_WHITE, "SAFE: /safebalance /safedeposit /safewithdraw /fstoregun /fgetgun.");
	return 1;
}

CMD:shopplate(playerid, params[])
{
    if(PlayerInfo[playerid][pShopTech] >= 1 || PlayerInfo[playerid][pAdmin] >= 4)
	{
		new iVehType, iVehIndex, iTargetOwner, carid, orderid, plate[32];
        if(sscanf(params, "dds[32]", carid, orderid, plate))
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopplate [carid] [orderid] [plate/remove]");
		    SendClientMessageEx(playerid, COLOR_GREY, "COLORS: (black/white/blue/red/green/purple/yellow/lightblue/navy/beige/darkgreen/darkblue/darkgrey/gold/brown/darkbrown/darkred");
			SendClientMessageEx(playerid, COLOR_GREY, "/pink) USAGE: (red)Hi(white)how are you? NOTE: Each color counts for 8 characters");
			return 1;
		}

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				iVehIndex = GetPlayerVehicle(i, carid);
				if(iVehIndex != -1)
				{
					iVehType = 1;
					iTargetOwner = i;
					break;
				}
			}	
		}
		if(iVehType == 1)
		{
		    format(plate, sizeof(plate), "%s", str_replace("(black)", "{000000}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(white)", "{FFFFFF}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(blue)", "{0000FF}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(red)", "{FF0000}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(green)", "{008000}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(purple)", "{800080}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(yellow)", "{FFFF00}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(lightblue)", "{ADD8E6}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(navy)", "{000080}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(beige)", "{F5F5DC}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(darkgreen)", "{006400}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(darkblue)", "{00008B}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(darkgrey)", "{A9A9A9}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(gold)", "{FFD700}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(brown)", "{A52A2A}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(darkbrown)", "{5C4033}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(darkred)", "{8B0000}", plate));
			format(plate, sizeof(plate), "%s", str_replace("(pink)", "{FF5B77}", plate));

			new string[128], Float:X, Float:Y, Float:Z;
			GetVehiclePos(carid, X, Y, Z);
			if(strcmp(plate, "remove", true) == 0)
			{
				PlayerVehicleInfo[iTargetOwner][iVehIndex][pvPlate] = 0;
			}
			else
			{
				format(PlayerVehicleInfo[iTargetOwner][iVehIndex][pvPlate], 32, "%s", plate);
			}
			SetVehicleToRespawn(carid);
			SetVehiclePos(carid, X, Y, Z);
			g_mysql_SaveVehicle(iTargetOwner, iVehIndex);

			format(string, sizeof(string), "Plate set on %s (ID: %d) %s (ID: %d)", GetPlayerNameEx(iTargetOwner), iTargetOwner, GetVehicleName(carid), carid);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "(OrderID: %d) Plate: %s", orderid, plate);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s set %s %s (Slot %d) plate to %s (order %d)", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetOwner), GetVehicleName(carid), iVehIndex, plate, orderid);
			Log("logs/shoplog.log", string);
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD1, "This is not a person owned vehicle, you cannot give it a custom plate.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:shopcar(playerid, params[]) {
	if(PlayerInfo[playerid][pShopTech] >= 1) {

		new
			szInvoice[32],
			iColors[2],
			iTargetID,
			iModelID;

		if(sscanf(params, "uiiis[32]", iTargetID, iModelID, iColors[0], iColors[1], szInvoice)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopcar [player] [model] [color 1] [color 2] [invoice #]");
		}
		else if(!(400 <= iModelID <= 611)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid model specified (model IDs start at 400, and end at 611).");
		}
		else if(IsATrain(iModelID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Trains cannot be spawned during runtime.");
		}
		else if(IsRestrictedVehicle(iModelID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "You cannot issue restricted vehicles!");
		}
		else if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
		}
		else if(!vehicleCountCheck(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "That person can't have more vehicles - they own too many.");
		}
		else if(!vehicleSpawnCountCheck(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "That person has too many vehicles spawned - they must store one first.");
		}
		else {

			new
				Float: arr_fPlayerPos[4],
				szMessage[84];

			GetPlayerPos(iTargetID, arr_fPlayerPos[0], arr_fPlayerPos[1], arr_fPlayerPos[2]);
			GetPlayerFacingAngle(iTargetID, arr_fPlayerPos[3]);
			CreatePlayerVehicle(iTargetID, GetPlayerFreeVehicleId(iTargetID), iModelID, arr_fPlayerPos[0], arr_fPlayerPos[1], arr_fPlayerPos[2], arr_fPlayerPos[3], iColors[0], iColors[1], 2000000, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

			format(szMessage, sizeof(szMessage), "You have successfully created a %s for %s (invoice %s).", VehicleName[iModelID - 400], GetPlayerNameEx(iTargetID), szInvoice);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);

			format(szMessage, sizeof(szMessage), "%s created a %s (%i) for %s (invoice %s).", GetPlayerNameEx(playerid), VehicleName[iModelID - 400], iModelID, GetPlayerNameEx(iTargetID), szInvoice);
			Log("logs/shoplog.log", szMessage);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
    return 1;
}

CMD:destroypvehicle(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid, vehicleid;
		if(sscanf(params, "ud", giveplayerid, vehicleid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /destroypvehicle [player] [vehicleid]");
		if(!(400 <= GetVehicleModel(vehicleid) <= 612)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid vehicle specified.");
		new playervehicleid = GetPlayerVehicle(giveplayerid, vehicleid);
		if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: That person doesn't own that vehicle.");

		format(string, sizeof(string), "You have deleted %s's %s (vehicle ID %d).", GetPlayerNameEx(giveplayerid), GetVehicleName(vehicleid), vehicleid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "An Administrator has deleted your %s.", GetVehicleName(vehicleid));
		SendClientMessageEx(giveplayerid, COLOR_GREY, string);
		format(string, sizeof(string), "%s has destroyed %s's %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), GetVehicleName(vehicleid));
		Log("logs/playervehicle.log", string);
		DestroyPlayerVehicle(giveplayerid, playervehicleid);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not allowed to use this command.");
	return 1;
}

CMD:shopcardel(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] >= 1)
	{
		new string[128], invoicenum[32], giveplayerid, vehicleid;
		if(sscanf(params, "uds[32]", giveplayerid, vehicleid, invoicenum)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopcardel [player] [vehicleid] [invoice #]");

		new playervehicleid = GetPlayerVehicle(giveplayerid, vehicleid);
		if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: That person doesn't own that vehicle.");

		format(string, sizeof(string), "You have deleted %s's %s (vehicle ID %d).", GetPlayerNameEx(giveplayerid), GetVehicleName(vehicleid), vehicleid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "An Administrator has deleted your %s.", GetVehicleName(vehicleid));
		SendClientMessageEx(giveplayerid, COLOR_GREY, string);
		format(string, sizeof(string), "[SHOPCARDEL] %s deleted vehicle ID %d - Invoice %s for %s", GetPlayerNameEx(playerid), playervehicleid, invoicenum, GetPlayerNameEx(giveplayerid));
		Log("logs/shoplog.log", string);
		DestroyPlayerVehicle(giveplayerid, playervehicleid);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not allowed to use this command.");
	return 1;
}

/*CMD:buylock(playerid, params[])
{
    if(IsAt247(playerid))
	{
	    ShowPlayerDialog(playerid, DIALOG_CDLOCKBUY, DIALOG_STYLE_LIST, "24/7", "Alarm Lock		$10000\nElectric Lock		$500000\nIndustrial Lock		$50000", "Buy", "Cancel");
		return 1;
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in a 24-7 !");
	}
	return 1;
}*/

/*CMD:gbuylock(playerid, params[])
{

    if(!IsAt247(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in a 24-7 !");
		return 1;
	}
	if(PlayerInfo[playerid][pFMember] != INVALID_FAMILY_ID && PlayerInfo[playerid][pRank] >= 6)
	{
		ShowPlayerDialog(playerid, DIALOG_CDGLOCKBUY, DIALOG_STYLE_LIST, "24/7", "Alarm Lock		$10000\nElectric Lock		$500000\nIndustrial Lock		$50000", "Buy", "Cancel");
	}
	else
	{
 		SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be in a family and have rank 6 to use this command.");
	}
	return 1;

} */

CMD:random(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 1338) {

		new
			iHours,
			iBroadcast;

		if(sscanf(params, "dd", iHours, iBroadcast)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /random [hours] [broadcast]");
		}

		new
			arr_Winners[MAX_PLAYERS],
			iWinCount;

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(SeeSpecialTokens(i, iHours)) arr_Winners[iWinCount++] = i;
			}	
		}
		if(iWinCount > 0) {

			new
				iWinrar = arr_Winners[random(iWinCount)],
				szMessage[48 + MAX_PLAYER_NAME];

			if(iBroadcast == 1) {
				format(szMessage, sizeof(szMessage), "%s was just randomly selected! Congratulations!", GetPlayerNameEx(iWinrar));
				SendClientMessageToAllEx(COLOR_WHITE, szMessage);
			}
			else {
				format(szMessage, sizeof(szMessage), "%s (ID %d) was randomly selected.", GetPlayerNameEx(iWinrar), iWinrar);
				ABroadCast(COLOR_YELLOW, szMessage, 1338);
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Nobody online can win!");
	}
	return 1;
}

CMD:vrandom(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 1338) {

		new
			iHours,
			iBroadcast;

		if(sscanf(params, "dd", iHours, iBroadcast)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vrandom [hours] [broadcast]");
		}

		new
			arr_Winners[MAX_PLAYERS],
			iWinCount;

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(SeeSpecialTokens(i, iHours) && PlayerInfo[i][pDonateRank] > 0) arr_Winners[iWinCount++] = i;
			}	
		}
		if(iWinCount > 0) {

			new
				iWinrar = arr_Winners[random(iWinCount)],
				szMessage[48 + MAX_PLAYER_NAME];

			if(iBroadcast == 1) {
				format(szMessage, sizeof(szMessage), "%s was just randomly selected! Congratulations!", GetPlayerNameEx(iWinrar));
				SendClientMessageToAllEx(COLOR_WHITE, szMessage);
			}
			else {
				format(szMessage, sizeof(szMessage), "%s (ID %d) was randomly selected.", GetPlayerNameEx(iWinrar), iWinrar);
				ABroadCast(COLOR_YELLOW, szMessage, 1338);
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Nobody online can win!");
	}
	return 1;
}

CMD:specreset(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1338)
    {
		SendClientMessageEx(playerid, COLOR_GRAD2, "Resetting the special timer must be done through FTP, delete all the files in /stokens/ folder");
	}
	return 1;
}

CMD:pausespec(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1338)
    {
    	if(SpecTimer == 1)
     	{
     		SpecTimer = 0;
      		new sString[41 + MAX_PLAYER_NAME];
			format( sString, sizeof( sString ), "AdmCmd: %s has paused the special timer.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, sString, 1338 );
		}
		else
		{
  			SpecTimer = 1;
	    	new sString[41 + MAX_PLAYER_NAME];
    		format( sString, sizeof( sString ), "AdmCmd: %s has enabled the special timer.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, sString, 1338);
		}
	}
	return 1;
}

CMD:gifts(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337)
    {
     	if(Gifts == 0)
     	{
           	Gifts = 1;
           	new sString[41 + MAX_PLAYER_NAME];
			format( sString, sizeof( sString ), "AdmCmd: %s has enabled the /gift command.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, sString, 1337 );
		}
		else
		{
		    Gifts = 0;
		    new sString[41 + MAX_PLAYER_NAME];
	   		format( sString, sizeof( sString ), "AdmCmd: %s has disabled the /gift command.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, sString, 1337 );
		}
	}
	return 1;
}

CMD:vipgifts(playerid, params[])
{
	new string[128];

    if(PlayerInfo[playerid][pAdmin] >= 1338)
    {
     	if(VIPGifts == 0)
     	{
           	VIPGifts = 1;
           	new sString[128];
			format( sString, sizeof( sString ), "%s would like for you to come to Club VIP for free gifts and great times [20 minutes remains]", GetPlayerNameEx(playerid));
			SendVIPMessage(COLOR_LIGHTGREEN, sString);
			VIPGiftsTimeLeft = 20;
			format(VIPGiftsName, sizeof(VIPGiftsName), "%s", GetPlayerNameEx(playerid));
		}
		else
		{
		    VIPGifts = 0;
		    new sString[128];
	   		format( sString, sizeof( sString ), "AdmCmd: %s has disabled the /getgift command early", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, sString, 1337 );
			format(string, sizeof(string), "Club VIP is no longer giving away free gifts. Thanks for coming!", VIPGiftsName, VIPGiftsTimeLeft);
			SendVIPMessage(COLOR_LIGHTGREEN, string);
			VIPGiftsTimeLeft = 0;
		}
	}
	return 1;
}

CMD:xmas(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1338)
   	{
    	if(XMASGifts == 0)
     	{
     		XMASGifts = 1;
			new string[128];
			format( string, sizeof( string ), "%s would like for you to come to Pershing Square for free gifts and great times", GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTGREEN, string);
		}
		else
		{
  			XMASGifts = 0;
			new string[128];
   			format( string, sizeof( string ), "AdmCmd: %s has disabled the /getgift command", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, string, 1337 );
			format(string, sizeof(string), "Pershing Square is no longer giving away free gifts. Thanks for coming!", VIPGiftsName, VIPGiftsTimeLeft);
			SendClientMessageToAllEx(COLOR_LIGHTGREEN, string);
		}
	}
	return 1;
}

CMD:resetgift(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /resetgift [player]");

    if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		if(IsPlayerConnected(giveplayerid))
		{
	   		if(PlayerInfo[giveplayerid][pGiftTime] > 0)
    		{
				new string[128];
	    	    PlayerInfo[giveplayerid][pGiftTime] = 0;
	     	    format(string, sizeof(string), "%s's gift timer has been reset", GetPlayerNameEx(giveplayerid));
	     	    SendClientMessageEx(playerid, COLOR_YELLOW, string);
   			}
   			else
   			{
	   		    SendClientMessageEx(playerid, COLOR_GRAD2, "That players gift timer is already on 0!");
			}
		}
		else
		{
   			SendClientMessageEx(playerid, COLOR_GRAD2, "That person is not connected.");
		}
	}
	return 1;
}

CMD:giftnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
       	new range;
		if(sscanf(params, "d", range)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giftnear [range]");

		if(range < 1)
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "The range can not be lower than 1.");
			return 1;
		}

        new string[128];
        new count;
        //foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(ProxDetectorS(range, playerid, i))
				{
					if(PlayerInfo[i][pGiftTime] <= 0)
					{
						GiftPlayer(playerid, i);
						count++;
					}
				}
			}	
        }
        format(string, sizeof(string), "You have gifted everyone (%d) nearby.", count);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:resetgiftall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new string[128];
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has reset everyone's gift timer.", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_YELLOW, string, 2);
		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				PlayerInfo[i][pGiftTime] = 0;
			}	
		}
	}
	return 1;
}

CMD:gift(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gift [player]");

    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
 		if(Gifts == 1 || PlayerInfo[playerid][pAdmin] >= 1337)
   		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    if(PlayerInfo[giveplayerid][pGiftTime] > 0)
	           	{
	               	SendClientMessageEx(playerid, COLOR_GRAD2, "The person has already got a gift in the last 5 hours !");
					return 1;
	           	}
			    GiftPlayer(playerid, giveplayerid);
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GRAD2, "That person is not connected.");
			}
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "This command is not activated!");
		}
	}
	return 1;
}

CMD:setstpay(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 99999)
	{
	    new string[128];
		if(sscanf(params, "f", ShopTechPay))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Usage: /setstpay [value]");
			format(string, sizeof(string), "Current Pay: $%.2f", ShopTechPay);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
		format(string, sizeof(string), "UPDATE `misc` SET `ShopTechPay` = '%.2f'", ShopTechPay);
		mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);

		format(string, sizeof(string), "Shop Tech Pay set to $%.2f", ShopTechPay);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:setsec(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pHR] >= 2 || PlayerInfo[playerid][pAP] >= 2 || PlayerInfo[playerid][pSecurity] >= 2)
	{
	    new giveplayerid, task[8], string[128];
	    if(sscanf(params, "us[8]", giveplayerid, task))
		{
			SendClientMessage(playerid, COLOR_GREY, "USAGE: /setsec [playerid] [secondary task]");
			SendClientMessage(playerid, COLOR_GRAD6, "Secondary Tasks: FMod, GMod, SO, BA, ST, PR, HR, Sec");
			return 1;
		}
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(PlayerInfo[giveplayerid][pAdmin] > 2)
			{
				if(strcmp(task, "fmod", true) == 0)
				{
					if(PlayerInfo[giveplayerid][pFactionModerator] == 0)
					{
						PlayerInfo[giveplayerid][pFactionModerator] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "You have made them a Faction Moderator");
						SendClientMessage(giveplayerid, COLOR_WHITE, "You have been made a Faction Moderator");
						format(string, sizeof(string), "%s has given Faction Moderator to %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
					else
					{
						PlayerInfo[giveplayerid][pFactionModerator] = 0;
						SendClientMessageEx(playerid, COLOR_GREY, "You have taken their Faction Moderator");
						SendClientMessage(giveplayerid, COLOR_GREY, "You have had your Faction Moderator taken");
						format(string, sizeof(string), "%s has taken Faction Moderator from %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
				}
				else if(strcmp(task, "gmod", true) == 0)
				{
					if(PlayerInfo[giveplayerid][pGangModerator] == 0)
					{
						PlayerInfo[giveplayerid][pGangModerator] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "You have made them a Gang Moderator");
						SendClientMessage(giveplayerid, COLOR_WHITE, "You have been made a Gang Moderator");
						format(string, sizeof(string), "%s has given Gang Moderator to %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
					else
					{
						PlayerInfo[giveplayerid][pGangModerator] = 0;
						SendClientMessageEx(playerid, COLOR_GREY, "You have taken their Gang Moderator");
						SendClientMessage(giveplayerid, COLOR_GREY, "You have had your Gang Moderator taken");
						format(string, sizeof(string), "%s has taken Gang Moderator from %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
				}
				else if(strcmp(task, "so", true) == 0)
				{
					if(PlayerInfo[giveplayerid][pUndercover] == 0)
					{
						PlayerInfo[giveplayerid][pUndercover] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "You have made them a Special Operative");
						SendClientMessage(giveplayerid, COLOR_WHITE, "You have been made a Special Operative");
						format(string, sizeof(string), "%s has given Special Operative to %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
					else
					{
						PlayerInfo[giveplayerid][pUndercover] = 0;
						SendClientMessageEx(playerid, COLOR_GREY, "You have taken their Special Operative");
						SendClientMessage(giveplayerid, COLOR_GREY, "You have had your Special Operative permissions taken");
						format(string, sizeof(string), "%s has taken Special Operative permissions from %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
				}
				else if(strcmp(task, "ba", true) == 0)
				{
					if(PlayerInfo[giveplayerid][pBanAppealer] == 0)
					{
						PlayerInfo[giveplayerid][pBanAppealer] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "You have made them a Ban Appealer");
						SendClientMessage(giveplayerid, COLOR_WHITE, "You have been made a Ban Appealer");
						format(string, sizeof(string), "%s has given Ban Appealer to %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
					else
					{
						PlayerInfo[giveplayerid][pBanAppealer] = 0;
						SendClientMessageEx(playerid, COLOR_GREY, "You have taken their Ban Appealer");
						SendClientMessage(giveplayerid, COLOR_GREY, "You have had your Ban Appealer taken");
						format(string, sizeof(string), "%s has taken Ban Appealer from %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
				}
				else if(strcmp(task, "st", true) == 0)
				{
					if(PlayerInfo[giveplayerid][pShopTech] == 0)
					{
						PlayerInfo[giveplayerid][pShopTech] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "You have made them a Shop Technician");
						SendClientMessage(giveplayerid, COLOR_WHITE, "You have been made a Shop Technician");
						format(string, sizeof(string), "%s has given Shop Technician to %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
					else
					{
						PlayerInfo[giveplayerid][pShopTech] = 0;
						SendClientMessageEx(playerid, COLOR_GREY, "You have taken their Shop Technician");
						SendClientMessage(giveplayerid, COLOR_GREY, "You have had your Shop Technician taken");
						format(string, sizeof(string), "%s has taken Shop Technician from %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
				}
				else if(strcmp(task, "pr", true) == 0)
				{
					if(PlayerInfo[giveplayerid][pPR] == 0)
					{
						PlayerInfo[giveplayerid][pPR] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "You have made them a member of Public Relations");
						SendClientMessage(giveplayerid, COLOR_WHITE, "You have been made a member of Public Relations");
						format(string, sizeof(string), "%s has given Public Relations permissions to %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
					else
					{
						PlayerInfo[giveplayerid][pPR] = 0;
						SendClientMessageEx(playerid, COLOR_GREY, "You have taken their Public Relations permissions");
						SendClientMessage(giveplayerid, COLOR_GREY, "You have had your Public Relations permissions taken");
						format(string, sizeof(string), "%s has taken Public Relations permissions from %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
				}
				else if(strcmp(task, "hr", true) == 0)
				{
					if(PlayerInfo[giveplayerid][pHR] == 0)
					{
						PlayerInfo[giveplayerid][pHR] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "You have made them a member of Human Resources");
						SendClientMessage(giveplayerid, COLOR_WHITE, "You have been made a member of Human Resources");
						format(string, sizeof(string), "%s has given Human Resources permissions to %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
					else
					{
						PlayerInfo[giveplayerid][pHR] = 0;
						SendClientMessageEx(playerid, COLOR_GREY, "You have taken their Human Resources permissions");
						SendClientMessage(giveplayerid, COLOR_GREY, "You have had your Human Resources permissions taken");
						format(string, sizeof(string), "%s has taken Human Resources permissions from %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
				}
				else if(strcmp(task, "sec", true) == 0)
				{
					if(PlayerInfo[giveplayerid][pSecurity] == 0)
					{
						PlayerInfo[giveplayerid][pSecurity] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "You have made them a member of Security");
						SendClientMessage(giveplayerid, COLOR_WHITE, "You have been made a member of Security");
						format(string, sizeof(string), "%s has given Security permissions to %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
					else
					{
						PlayerInfo[giveplayerid][pSecurity] = 0;
						SendClientMessageEx(playerid, COLOR_GREY, "You have taken their Security permissions");
						SendClientMessage(giveplayerid, COLOR_GREY, "You have had your Security permissions taken");
						format(string, sizeof(string), "%s has taken Security permissions from %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						Log("logs/admin.log", string);
					}
				}
			}
			else SendClientMessage(playerid, COLOR_GRAD2, "They are not an admin!");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "That person is not connected.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	return 1;
}

CMD:resetstpay(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 99999)
	{
	    if(GetPVarInt(playerid, "resetstpay"))
	    {
	        mysql_function_query(MainPipeline, "UPDATE `shoptech` SET `total` = 0, dtotal = 0", false, "OnQueryFinish", "i", SENDDATA_THREAD);
            SendClientMessage(playerid, COLOR_WHITE, "Shop Tech Payments Reset");
	        DeletePVar(playerid, "resetstpay");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "WARNING: This command will reset the shop tech payment counters");
		    SendClientMessage(playerid, COLOR_WHITE, "This action cannot be undone, ARE YOU SURE YOU WISH TO CONTINUE?");
		    SendClientMessage(playerid, COLOR_WHITE, "Type this command again to proceed");
		    SetPVarInt(playerid, "resetstpay", 1);
		}
	}
	return 1;
}

CMD:giftall(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337)
    {
    	if(GiftAllowed || PlayerInfo[playerid][pAdmin] >= 99999)
     	{
			new string[128];
      		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has just sent a gift to all players.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW, string, 2);
			GiftAllowed = 0;
			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					GiftPlayer(playerid, i);
				}	
			}
		}
		else
		{
		    return SendClientMessageEx(playerid, COLOR_GRAD2, "This command has already been used, wait until the next paycheck!");
		}
	}
	return 1;
}

CMD:giftreset(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1338) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giftreset [player]");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	if(PlayerInfo[giveplayerid][pGiftTime] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "This player is already able to receive a gift.");
	new string[128];
	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has reset %s's gift timer.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	ABroadCast(COLOR_YELLOW, string, 2);
	PlayerInfo[giveplayerid][pGiftTime] = 0;
	return 1;
}

CMD:jobhelp(playerid, params[]) {
    return ShowPlayerDialog(playerid, JOBHELPMENU, DIALOG_STYLE_LIST, "Which job do you need help with?","Detective\nLawyer\nWhore\nDrug Dealer\nMechanic\nBodyguard\nArms Dealer\nBoxer\nTaxi Driver\nDrug Smuggling\nCraftsman\nBartender\nShipment Contractor\nPizza Boy", "Select", "Cancel");
}

CMD:dvsiren(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(DynVeh[GetPlayerVehicleID(playerid)] != -1)
		{
			for(new i = 0; i != MAX_DV_OBJECTS; i++)
			{
				if(DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][i] == 19420)
				{
					DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][i] = 19419;
					Streamer_SetIntData(STREAMER_TYPE_OBJECT, DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectID][i], E_STREAMER_MODEL_ID, 19419);
					SendClientMessageEx(playerid, COLOR_WHITE, "Siren enabled.");
				}
				else if(DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][i] == 19419)
				{
					DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][i] = 19420;
					Streamer_SetIntData(STREAMER_TYPE_OBJECT, DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectID][i], E_STREAMER_MODEL_ID, 19420);
					SendClientMessageEx(playerid, COLOR_WHITE, "Siren disabled.");
				}
				if(DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][i] == 19300)
				{
					DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][i] = 18646;
					Streamer_SetIntData(STREAMER_TYPE_OBJECT, DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectID][i], E_STREAMER_MODEL_ID, 18646);
					SendClientMessageEx(playerid, COLOR_WHITE, "Siren enabled.");
				}
				else if(DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][i] == 18646)
				{
					DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][i] = 19300;
					Streamer_SetIntData(STREAMER_TYPE_OBJECT, DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectID][i], E_STREAMER_MODEL_ID, 19300);
					SendClientMessageEx(playerid, COLOR_WHITE, "Siren disabled.");
				}
				if(DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][i] == 1899) // Hazard
				{
					DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][i] = 19294;
					Streamer_SetIntData(STREAMER_TYPE_OBJECT, DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectID][i], E_STREAMER_MODEL_ID, 19294);
					SendClientMessageEx(playerid, COLOR_WHITE, "Siren enabled.");
				}
				else if(DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][i] == 19294)
				{
					DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectModel][i] = 1899;
					Streamer_SetIntData(STREAMER_TYPE_OBJECT, DynVehicleInfo[DynVeh[GetPlayerVehicleID(playerid)]][gv_iAttachedObjectID][i], E_STREAMER_MODEL_ID, 1899);
					SendClientMessageEx(playerid, COLOR_WHITE, "Siren disabled.");
				}
			}
		    Streamer_Update(playerid);
		}
	}
	return 1;
}

/*CMD:testfundage(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_GRAD2, " You don't have access to this");
	for(new iGroupID; iGroupID < MAX_GROUPS; iGroupID++)
	{
	    if(arrGroupData[iGroupID][g_iAllegiance] == 1)
	    {
	        if(arrGroupData[iGroupID][g_iGroupType] == 1 || arrGroupData[iGroupID][g_iGroupType] == 3 || arrGroupData[iGroupID][g_iGroupType] == 6 || arrGroupData[iGroupID][g_iGroupType] == 7)
	        {
	            if(arrGroupData[iGroupID][g_iBudgetPayment] > 0)
	            {
	                if(Tax > arrGroupData[iGroupID][g_iBudgetPayment])
	                {
		                Tax -= arrGroupData[iGroupID][g_iBudgetPayment];
		                arrGroupData[iGroupID][g_iBudget] += arrGroupData[iGroupID][g_iBudgetPayment];
	                	new str[128], file[32];
		                format(str, sizeof(str), "Gov Paid $%d to %s budget fund.", arrGroupData[iGroupID][g_iBudgetPayment], arrGroupData[iGroupID][g_szGroupName]);
		                new month, day, year;
						getdate(year,month,day);
						format(file, sizeof(file), "grouppay/%d/%d-%d-%d.log", iGroupID, month, day, year);
						Log(file, str);
		                Misc_Save();
		                SaveGroup(iGroupID);
					}
					else
					{
						format(string, sizeof(string), "Warning: The Government Vault has insufficient funds to fund %s.", arrGroupData[iGroupID][g_szGroupName]);
		    			SendGroupMessage(5, COLOR_RED, string);
		    			SendFamilyMessage(iGroupID, COLOR_RED, string);
					}
	            }
			    for(new iDvSlotID = 0; iDvSlotID < MAX_DYNAMIC_VEHICLES; iDvSlotID++)
				{
				    if(DynVehicleInfo[iDvSlotID][gv_igID] != INVALID_GROUP_ID && DynVehicleInfo[iDvSlotID][gv_igID] == iGroupID)
				    {
					    if(DynVehicleInfo[iDvSlotID][gv_iModel] != 0 && (400 < DynVehicleInfo[iDvSlotID][gv_iModel] < 612))
					    {
					        if(arrGroupData[iGroupID][g_iBudget] >= DynVehicleInfo[iDvSlotID][gv_iUpkeep])
					        {
								arrGroupData[iGroupID][g_iBudget] -= DynVehicleInfo[iDvSlotID][gv_iUpkeep];
								new str[128], file[32];
				                format(str, sizeof(str), "Vehicle ID %d (Slot ID %d) Maintainence fee cost $%d to %s's budget fund.",DynVehicleInfo[iDvSlotID][gv_iSpawnedID], iDvSlotID, DynVehicleInfo[iDvSlotID][gv_iUpkeep], arrGroupData[iGroupID][g_szGroupName]);
				                new month, day, year;
								getdate(year,month,day);
								format(file, sizeof(file), "grouppay/%d/%d-%d-%d.log", iGroupID, month, day, year);
								Log(file, str);
							}
							else
							{
							    DynVehicleInfo[iDvSlotID][gv_iDisabled] = 1;
							}
					    }
					}
				}
				SaveGroup(iGroupID);
	        }
	    }
	}
	return 1;
}*/

CMD:viewbudget(playerid, params[])
{
	new i = PlayerInfo[playerid][pMember];
	new string[128];
	if(arrGroupData[i][g_iGroupType] == 1 || arrGroupData[i][g_iGroupType] == 3 || arrGroupData[i][g_iGroupType] == 6 || arrGroupData[i][g_iGroupType] == 7 || arrGroupData[i][g_iGroupType] == 4)
	{
	    SendClientMessage(playerid, 0x008EFC00, "            BALANCE SHEET            ");
		if(arrGroupData[i][g_szGroupName][0] && arrGroupData[i][g_hDutyColour] != 0) format(string, sizeof(string), "{%6x}%s {AFAFAF} [Balance: $%s] [Hourly Payments: $%s]| ", arrGroupData[i][g_hDutyColour], arrGroupData[i][g_szGroupName], number_format(arrGroupData[i][g_iBudget]), number_format(arrGroupData[i][g_iBudgetPayment]));
		else if(arrGroupData[i][g_szGroupName][0]) format(string, sizeof(string), "%s [Balance: $%s] [Hourly Payments: $%s]| ", arrGroupData[i][g_szGroupName], number_format(arrGroupData[i][g_iBudget]), number_format(arrGroupData[i][g_iBudgetPayment]));
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "Your agency does not receive government payments.");
	return 1;
}

CMD:setbudget(playerid, params[])
{
	if(arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] == 5)
	{
	    if(PlayerInfo[playerid][pRank] == Group_GetMaxRank(PlayerInfo[playerid][pMember]))
	    {
		    new
				iGroupID,
				iBudgetAmt,
				string[128];

			if(sscanf(params, "iii", iGroupID, iBudgetAmt))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setbudget [Group ID] [$ Per Budget Payment (Hourly)]");
				for(new i = 0; i < MAX_GROUPS; i++)
				{
				    if(arrGroupData[PlayerInfo[playerid][pMember]][g_iAllegiance] == arrGroupData[i][g_iAllegiance])
				    {
					    if(arrGroupData[i][g_iGroupType] == 1 || arrGroupData[i][g_iGroupType] == 3 || arrGroupData[i][g_iGroupType] == 6 || arrGroupData[i][g_iGroupType] == 7)
					    {
						    if(arrGroupData[i][g_szGroupName][0] && arrGroupData[i][g_hDutyColour] != 0) format(string, sizeof(string), "%d - {%6x}%s {AFAFAF} [Balance: $%s] [Current Budget: $%s]| ", i, arrGroupData[i][g_hDutyColour], arrGroupData[i][g_szGroupName], number_format(arrGroupData[i][g_iBudget]), number_format(arrGroupData[i][g_iBudgetPayment]));
							else if(arrGroupData[i][g_szGroupName][0]) format(string, sizeof(string), "%d - %s [Balance: $%s] [Current Budget: $%s]| ", i, arrGroupData[i][g_szGroupName], number_format(arrGroupData[i][g_iBudget]), number_format(arrGroupData[i][g_iBudgetPayment]));
							SendClientMessageEx(playerid, COLOR_GRAD2, string);
						}
					}
				}
				return 1;
			}
			if(0 <= iGroupID < MAX_GROUPS && (arrGroupData[iGroupID][g_iGroupType] == 1 || arrGroupData[iGroupID][g_iGroupType] == 3 || arrGroupData[iGroupID][g_iGroupType] == 6 || arrGroupData[iGroupID][g_iGroupType] == 7))
			{
			    if(arrGroupData[PlayerInfo[playerid][pMember]][g_iAllegiance] == arrGroupData[iGroupID][g_iAllegiance])
			    {
					arrGroupData[iGroupID][g_iBudgetPayment] = iBudgetAmt;
					format(string, sizeof(string), "You have set %s's Budget Payment to $%d. This will be issued hourly to pay for their vehicles, weapons and staffing", arrGroupData[iGroupID][g_szGroupName], iBudgetAmt);
					SendClientMessage(playerid, COLOR_GRAD1, string);
				}
				else return SendClientMessage(playerid, COLOR_GRAD2, "This agency is not under your government.");
			}
			else return SendClientMessage(playerid, COLOR_GRAD2, "Invalid Group ID");

	    }
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "You're not a Government Official!");
	return 1;
}

CMD:gwithdraw(playerid, params[])
{
	new iGroupID;
	new string[128], amount, reason[64];
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(sscanf(params, "dds[64]", iGroupID, amount, reason))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gwithdraw [groupid] [amount] [reason]");
			return 1;
		}
		if(!(-1 < iGroupID <= MAX_GROUPS))
		{
			SendClientMessageEx(playerid, COLOR_RED, "* Invalid Group ID");
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gwithdraw [groupid] [amount] [reason]");
			return 1;
		}
	}
	else if(-1 < PlayerInfo[playerid][pLeader] <= MAX_GROUPS && PlayerInfo[playerid][pRank] == Group_GetMaxRank(PlayerInfo[playerid][pLeader]))
	{
		iGroupID = PlayerInfo[playerid][pLeader];
		if(sscanf(params, "ds[64]", amount, reason))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gwithdraw [amount] [reason]");
			format(string, sizeof(string), "* VAULT BALANCE: $%d.", arrGroupData[iGroupID][g_iBudget]);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}
	}
	else return SendClientMessage(playerid, COLOR_GRAD3, " You are not a group leader or an authorized admin. ");



	if(amount < 0)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Invalid amount specified.");
		return 1;
	}
	if( arrGroupData[iGroupID][g_iBudget] > amount )
	{
		arrGroupData[iGroupID][g_iBudget] -= amount;
    	new str[128], file[32];
        format(str, sizeof(str), "%s has withdrawn $%d from %s's Budget Fund - reason: %s", GetPlayerNameEx(playerid), amount, arrGroupData[iGroupID][g_szGroupName], reason);
        new month, day, year;
		getdate(year,month,day);
		format(file, sizeof(file), "grouppay/%d/%d-%d-%d.log", iGroupID, month, day, year);
		Log(file, str);
        Misc_Save();
        SaveGroup(iGroupID);
		GivePlayerCash( playerid, amount );
		format( string, sizeof( string ), "You have withdrawn $%d from the group vault.", amount );
		SendClientMessageEx( playerid, COLOR_WHITE, string );
		format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has withdrawn $%d of the group money from their vault, reason: %s.",GetPlayerNameEx(playerid),amount,reason);
		ABroadCast( COLOR_YELLOW, string, 2);
 		format(string,sizeof(string),"%s has withdrawn $%s of the group money from %s's vault, reason: %s.",GetPlayerNameEx(playerid),number_format(amount),arrGroupData[iGroupID][g_szGroupName],reason);
		Log("logs/rpspecial.log", string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Insufficient funds are available.");
	}
	return 1;
}

CMD:gdonate(playerid, params[])
{
	new iGroupID = PlayerInfo[playerid][pMember];
	if((0 <= iGroupID <= MAX_GROUPS))
	{
		if(arrGroupData[iGroupID][g_iGroupType] == 1 || arrGroupData[iGroupID][g_iGroupType] == 3 || arrGroupData[iGroupID][g_iGroupType] == 6 || arrGroupData[iGroupID][g_iGroupType] == 7 || arrGroupData[iGroupID][g_iGroupType] == 4)
		{
			new string[128], moneys;
			if(sscanf(params, "d", moneys)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gdonate [amount]");

			if(moneys < 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "That is not enough.");
				return 1;
			}
			if(GetPlayerCash(playerid) < moneys)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have that much money.");
				return 1;
			}
			GivePlayerCash(playerid, -moneys);
			arrGroupData[iGroupID][g_iBudget] += moneys;
			new str[128], file[32];
            format(str, sizeof(str), "%s has donated $%s to %s budget fund.", GetPlayerNameEx(playerid), number_format(moneys), arrGroupData[iGroupID][g_szGroupName]);
            new month, day, year;
			getdate(year,month,day);
			format(file, sizeof(file), "grouppay/%d/%d-%d-%d.log", iGroupID, month, day, year);
			Log(file, str);
			SaveGroup(iGroupID);
			OnPlayerStatsUpdate(playerid);
			format(string, sizeof(string), "%s, you have donated $%s to your agency's budget.",GetPlayerNameEx(playerid), number_format(moneys));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessageEx(playerid, COLOR_GRAD1, string);
			format(string, sizeof(string), "%s has donated $%s to %s's budget vault.",GetPlayerNameEx(playerid), number_format(moneys), arrGroupData[iGroupID][g_szGroupName]);
			Log("logs/pay.log", string);
			return 1;
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2,  "You're not in a government agency!");
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a group.");
	}
	return 1;
}

CMD:ordercrates(playerid, params[])
{
	new iGroupID = PlayerInfo[playerid][pMember], string[128];
	if((0 <= iGroupID <= MAX_GROUPS) && PlayerInfo[playerid][pRank] >= (Group_GetMaxRank(iGroupID) - 4))
	{
		if(arrGroupData[iGroupID][g_iLockerCostType] == 0)
		{
			new moneys;
			if(sscanf(params, "d", moneys)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ordercrates [order amount]");
			if(!(0 <= moneys <= (MAX_LOCKER_STOCK/100))) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot order more than 15 crates!");
			format(string, sizeof(string), "You now have a total of %d of crates on order for %s.", moneys, arrGroupData[iGroupID][g_szGroupName]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			arrGroupData[iGroupID][g_iCratesOrder] = moneys;
			format(string, sizeof(string), "%s has just placed a Crate Order for %s.", GetPlayerNameEx(playerid), arrGroupData[iGroupID][g_szGroupName]);
			SendGroupMessage(1, TEAM_BLUE_COLOR, string);
			return 1;
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, "Your group does not require crates.");
	}
    else return SendClientMessage(playerid, COLOR_GRAD2, " You're not authorized to use this command.");
}

CMD:viewcrateorders(playerid, params[])
{
	new iGroupID = PlayerInfo[playerid][pMember];
	if((0 <= iGroupID <= MAX_GROUPS) && PlayerInfo[playerid][pRank] >= arrGroupData[iGroupID][g_iCrateIsland])
	{
		new
			szDialogStr[MAX_GROUPS * (GROUP_MAX_NAME_LEN + 32)],
			iCount;

		while(iCount < MAX_GROUPS) {
		    if(arrGroupData[iCount][g_iAllegiance] == arrGroupData[iGroupID][g_iAllegiance])
		    {
		        if(arrGroupData[iCount][g_iCratesOrder] > 0)
		        {
					if(arrGroupData[iCount][g_szGroupName][0])
						format(szDialogStr, sizeof szDialogStr, "%s\n(%i) {%s}%s{FFFFFF} - %d Crates [Current Stock: %d]", szDialogStr, iCount+1, Group_NumToDialogHex(arrGroupData[iCount][g_hDutyColour]), arrGroupData[iCount][g_szGroupName], arrGroupData[iCount][g_iCratesOrder], arrGroupData[iCount][g_iLockerStock]);
				}
			}
			++iCount;
		}
		if(!szDialogStr[0]) format(szDialogStr, sizeof(szDialogStr), "No orders to fill.");
		return ShowPlayerDialog(playerid, DIALOG_NOTHING, DIALOG_STYLE_MSGBOX, "Group List", szDialogStr, "Select", "Cancel");
	}
    else return SendClientMessage(playerid, COLOR_GRAD2, " You're not authorized to use this command.");
}
	
CMD:dvtrackcar(playerid, params[])
{
    new iGroupID = PlayerInfo[playerid][pMember],
		iFamilyID = PlayerInfo[playerid][pFMember];

	if((0 <= iGroupID <= MAX_GROUPS))
	{
		new vstring[2500];
		for(new i; i < MAX_DYNAMIC_VEHICLES; i++) {
			new iModelID = DynVehicleInfo[i][gv_iModel];
			if(400 <= iModelID < 612 && DynVehicleInfo[i][gv_igID] == iGroupID) {
				if(DynVehicleInfo[i][gv_iDisabled] == 1) {
					format(vstring, sizeof(vstring), "%s\n(%d)%s (Upkeep: $%s) (repo'd)", vstring, i, VehicleName[iModelID - 400], number_format(DynVehicleInfo[i][gv_iUpkeep]));
				}
				else if(DynVehicleInfo[i][gv_iDisabled] == 2) {
					format(vstring, sizeof(vstring), "%s\n(%d)%s (Upkeep: $%s) (stored)", vstring, i, VehicleName[iModelID - 400], number_format(DynVehicleInfo[i][gv_iUpkeep]));
				}
				else if(DynVehicleInfo[i][gv_iSpawnedID] != INVALID_VEHICLE_ID) {
					format(vstring, sizeof(vstring), "%s\n(%d) %s (Upkeep: $%s) (VID: %d)", vstring, i, VehicleName[iModelID - 400], number_format(DynVehicleInfo[i][gv_iUpkeep]), DynVehicleInfo[i][gv_iSpawnedID]);
				}
			}
		}
		ShowPlayerDialog(playerid, DV_TRACKCAR, DIALOG_STYLE_LIST, "Vehicle GPS Tracking", vstring, "Track", "Cancel");
	}
	else if((1 <= iFamilyID <= MAX_FAMILY))
	{
        new vstring[2500];
		for(new i; i < MAX_DYNAMIC_VEHICLES; i++) {
			new iModelID = DynVehicleInfo[i][gv_iModel];
			if(400 <= iModelID < 612 && DynVehicleInfo[i][gv_ifID] == iFamilyID) {
				if(DynVehicleInfo[i][gv_iDisabled] == 1) {
					format(vstring, sizeof(vstring), "%s\n(%d)%s (repo'd)", vstring, i, VehicleName[iModelID - 400]);
				}
				else if(DynVehicleInfo[i][gv_iDisabled] == 2) {
					format(vstring, sizeof(vstring), "%s\n(%d)%s (stored)", vstring, i, VehicleName[iModelID - 400]);
				}
				else if(DynVehicleInfo[i][gv_iSpawnedID] != INVALID_VEHICLE_ID) {
					format(vstring, sizeof(vstring), "%s\n(%d) %s (VID: %d)", vstring, i, VehicleName[iModelID - 400], DynVehicleInfo[i][gv_iSpawnedID]);
				}
			}
		}
		ShowPlayerDialog(playerid, DV_TRACKCAR, DIALOG_STYLE_LIST, "Vehicle GPS Tracking", vstring, "Track", "Cancel");
	}
	return 1;
}

CMD:grepocars(playerid, params[])
{
	new iGroupID = PlayerInfo[playerid][pMember], string[128];
	if((0 <= iGroupID <= MAX_GROUPS) && PlayerInfo[playerid][pRank] == Group_GetMaxRank(iGroupID))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Repossessed Agency Vehicles:");
	    SendClientMessageEx(playerid, COLOR_GRAD4, "NOTE: Type /gvbuyback to purchase these cars back when your agency can afford it.");
	    for(new iDvSlotID = 0; iDvSlotID < MAX_DYNAMIC_VEHICLES; iDvSlotID++)
		{
		    if(DynVehicleInfo[iDvSlotID][gv_igID] != INVALID_GROUP_ID && DynVehicleInfo[iDvSlotID][gv_igID] == iGroupID)
		    {
			    if(DynVehicleInfo[iDvSlotID][gv_iModel] != 0 && (400 < DynVehicleInfo[iDvSlotID][gv_iModel] < 612))
			    {
			        if(DynVehicleInfo[iDvSlotID][gv_iDisabled] == 1)
			        {
			            format(string, sizeof(string), "Vehicle ID: %d - %s - Buyback Cost $%d.", iDvSlotID, VehicleName[DynVehicleInfo[iDvSlotID][gv_iModel] - 400], floatround(DynVehicleInfo[iDvSlotID][gv_iUpkeep] * 2), floatround(DynVehicleInfo[iDvSlotID][gv_iUpkeep] / 2));
			            SendClientMessageEx(playerid, COLOR_GRAD1, string);
					}
			    }
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, " You're not authorized to use this command.");
	return 1;
}

CMD:gvbuyback(playerid, params[])
{
	new iVehicle[6];
	new iGroupID = PlayerInfo[playerid][pLeader], string[128];
	if((0 <= iGroupID <= MAX_GROUPS) && PlayerInfo[playerid][pRank] == Group_GetMaxRank(iGroupID))
	{
		if(sscanf(params, "s[6]", iVehicle)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gvbuyback [ID/all] *You may buy an individual car back, or all of your repo'd cars.");
			return SendClientMessageEx(playerid, COLOR_GREY, "Note: ID is indicated under /grepocars");
		}
		if(strcmp(iVehicle, "all", true) == 0)
		{
			for(new iDvSlotID = 0; iDvSlotID < MAX_DYNAMIC_VEHICLES; iDvSlotID++)
			{
				if(DynVehicleInfo[iDvSlotID][gv_igID] != INVALID_GROUP_ID && DynVehicleInfo[iDvSlotID][gv_igID] == iGroupID)
				{
					if(DynVehicleInfo[iDvSlotID][gv_iModel] != 0 && (400 < DynVehicleInfo[iDvSlotID][gv_iModel] < 612))
					{
						if(DynVehicleInfo[iDvSlotID][gv_iDisabled] == 1)
						{
							if(arrGroupData[iGroupID][g_iBudget] > floatround(DynVehicleInfo[iDvSlotID][gv_iUpkeep] * 2))
							{
								arrGroupData[iGroupID][g_iBudget] -= floatround(DynVehicleInfo[iDvSlotID][gv_iUpkeep] * 2);
								SaveGroup(iGroupID);
								DynVehicleInfo[iDvSlotID][gv_iDisabled] = 0;
								DynVeh_Save(iDvSlotID);
								DynVeh_Spawn(iDvSlotID);
								format(string, sizeof(string), "You have bought back your %s with ID %d for $%d", VehicleName[DynVehicleInfo[iDvSlotID][gv_iModel]-400], iDvSlotID, floatround(DynVehicleInfo[iDvSlotID][gv_iUpkeep] * 2));
								SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
								new str[128], file[32];
								format(str, sizeof(str), "Vehicle Slot ID %d buyback fee cost $%d to %s's budget fund.",iDvSlotID, floatround(DynVehicleInfo[iDvSlotID][gv_iUpkeep] * 2), arrGroupData[iGroupID][g_szGroupName]);
								new month, day, year;
								getdate(year,month,day);
								format(file, sizeof(file), "grouppay/%d/%d-%d-%d.log", iGroupID, month, day, year);
								Log(file, str);
							}
							else
							{
								format(string, sizeof(string), "Your agency could not afford to buy back your %s with ID %d for $%d", VehicleName[DynVehicleInfo[iDvSlotID][gv_iModel]-400], iDvSlotID, floatround(DynVehicleInfo[iDvSlotID][gv_iUpkeep] * 2));
								SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
								return 1;
							}
						}
				    }
				}
			}
			return 1;
		}
		else if((0 <= strval(iVehicle) <= MAX_DYNAMIC_VEHICLES))
		{
			new iDvSlotID = strval(iVehicle);
			if(DynVehicleInfo[iDvSlotID][gv_iDisabled] == 1 && DynVehicleInfo[iDvSlotID][gv_igID] == iGroupID)
			{
				if(arrGroupData[iGroupID][g_iBudget] > floatround(DynVehicleInfo[iDvSlotID][gv_iUpkeep] * 2))
				{
					arrGroupData[iGroupID][g_iBudget] -= floatround(DynVehicleInfo[iDvSlotID][gv_iUpkeep] * 2);
					SaveGroup(iGroupID);
					DynVehicleInfo[iDvSlotID][gv_iDisabled] = 0;
					DynVeh_Save(iDvSlotID);
					DynVeh_Spawn(iDvSlotID);
					format(string, sizeof(string), "You have bought back your %s with ID %d for $%d", VehicleName[DynVehicleInfo[iDvSlotID][gv_iModel]-400], iDvSlotID, floatround(DynVehicleInfo[iDvSlotID][gv_iUpkeep] * 2));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					new str[128], file[32];
					format(str, sizeof(str), "Vehicle Slot ID %d buyback fee cost $%d to %s's budget fund.",iDvSlotID, floatround(DynVehicleInfo[iDvSlotID][gv_iUpkeep] * 2), arrGroupData[iGroupID][g_szGroupName]);
					new month, day, year;
					getdate(year,month,day);
					format(file, sizeof(file), "grouppay/%d/%d-%d-%d.log", iGroupID, month, day, year);
					Log(file, str);
					return 1;
				}
				else
				{
					format(string, sizeof(string), "Your agency could not afford to buy back your %s with ID %d for $%d", VehicleName[DynVehicleInfo[iDvSlotID][gv_iModel]-400], iDvSlotID, floatround(DynVehicleInfo[iDvSlotID][gv_iUpkeep] * 2));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					return 1;
				}
			}
			else return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "That car has either not been repossessed or does not belong to your agency.");
		}
		else SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Invalid ID");
	}
	else SendClientMessage(playerid, COLOR_GRAD2, " You're not authorized to use this command.");
	return 1;
}

CMD:adjustdvrank(playerid, params[])
{
	if(gettime() < GetPVarInt(playerid, "DvAdjust_Time")) return SendClientMessageEx(playerid, COLOR_GREY, " You need to wait 10 seconds before using this command again !");
	if(PlayerInfo[playerid][pFMember] == INVALID_FAMILY_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a family!");
	if(PlayerInfo[playerid][pRank] < 6) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a family leader!");
	new vid, rank;
	if(sscanf(params, "dd", vid, rank))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Syntax: /adjustdvrank <vehicleid> <rank>");
		SendClientMessageEx(playerid, COLOR_GREY, "NOTE: Use /dl to get the vehicleid.");
		SendClientMessageEx(playerid, COLOR_GREY, "NOTE: Rank 0 = Disabled.");
		return 1;
	}	
	new iDvSlotID = DynVeh[vid];
	if(iDvSlotID == -1 || iDvSlotID > MAX_DYNAMIC_VEHICLES || DynVehicleInfo[iDvSlotID][gv_iSpawnedID] != vid) return SendClientMessageEx(playerid, COLOR_GRAD1, " Invalid Dynamic Vehicle ID Provided!");
	if(DynVehicleInfo[iDvSlotID][gv_ifID] != PlayerInfo[playerid][pFMember]) return SendClientMessageEx(playerid, COLOR_GRAD1, " This Vehicle is not owned by your family!");
	if(DynVehicleInfo[iDvSlotID][gv_igID] != INVALID_GROUP_ID) return SendClientMessageEx(playerid, COLOR_GRAD1, "This Vehicle is owned by a faction!");
	if(rank > 6 || rank < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Ranks can't go below 0 or above 6");
	new string[128];
	SetPVarInt(playerid, "DvAdjust_Time", gettime()+10);
	DynVehicleInfo[iDvSlotID][gv_irID] = rank;
	format(string, sizeof(string), "You have adjusted the rank of this vehicle to %d.", rank);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	DynVeh_Save(iDvSlotID);
	return 1;
}

CMD:dvpark(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid), iDvSlotID = DynVeh[vehicleid];
 		if(iDvSlotID == -1 || iDvSlotID > MAX_DYNAMIC_VEHICLES || DynVehicleInfo[iDvSlotID][gv_iSpawnedID] != vehicleid)
		{
			return SendClientMessageEx(playerid, COLOR_GRAD1, " Invalid Dynamic Vehicle ID Provided!" );
		}
		if(PlayerInfo[playerid][pAdmin] >= 4 || (PlayerInfo[playerid][pLeader] == DynVehicleInfo[iDvSlotID][gv_igID]) && DynVehicleInfo[iDvSlotID][gv_igID] != INVALID_GROUP_ID || DynVehicleInfo[iDvSlotID][gv_ifID] != 0 && (PlayerInfo[playerid][pFMember] == DynVehicleInfo[iDvSlotID][gv_ifID] && PlayerInfo[playerid][pRank] >=6)) {
			GetVehiclePos(vehicleid, DynVehicleInfo[iDvSlotID][gv_fX], DynVehicleInfo[iDvSlotID][gv_fY], DynVehicleInfo[iDvSlotID][gv_fZ]);
			GetVehicleZAngle(vehicleid, DynVehicleInfo[iDvSlotID][gv_fRotZ]);
			DynVehicleInfo[iDvSlotID][gv_iVW] = GetPlayerVirtualWorld(playerid);
			DynVehicleInfo[iDvSlotID][gv_iInt] = GetPlayerInterior(playerid);
			DynVeh_Save(iDvSlotID);
			DynVeh_Spawn(iDvSlotID);
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "You can't park this vehicle.");
	}
	return 1;
}

CMD:gotodv(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new moneys;
		if(sscanf(params, "i", moneys)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotodv [slot ID]");
		}
		if(DynVeh[DynVehicleInfo[moneys][gv_iSpawnedID]] != -1 && (0 <= moneys < MAX_DYNAMIC_VEHICLES))
		{

			new Float:cwx2,Float:cwy2,Float:cwz2;
			GetVehiclePos(DynVehicleInfo[moneys][gv_iSpawnedID], cwx2, cwy2, cwz2);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, cwx2, cwy2+1, cwz2);
				SetPlayerVirtualWorld(playerid,GetVehicleVirtualWorld(DynVehicleInfo[moneys][gv_iSpawnedID]));
				SetPlayerInterior(playerid, DynVehicleInfo[moneys][gv_iInt]);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, cwx2, cwy2+1, cwz2);
				SetPlayerVirtualWorld(playerid,GetVehicleVirtualWorld(DynVehicleInfo[moneys][gv_iSpawnedID]));
				SetPlayerInterior(playerid, DynVehicleInfo[moneys][gv_iInt]);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid, 0);
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_GRAD2, "That dynamic vehicle does not exist or is not spawned.");
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command.");
}

CMD:dvstatus(playerid, params[])
{
	new iDvSlotID, vehicleid;
	if(sscanf(params, "i", vehicleid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dvstatus [vehicleid]");
		return 1;
	}
	iDvSlotID = DynVeh[vehicleid];
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if(iDvSlotID != -1)
	    {
			new string[128];
			format(string,sizeof(string),"|___________ Dynamic Vehicle Status (ID: %d | Slot ID: %d) ___________|", vehicleid, iDvSlotID);
			SendClientMessageEx(playerid, COLOR_GREEN, string);
			format(string, sizeof(string), "X: %f | Y: %f | Z: %f | Model: %d | Upkeep: $%d | Maxhealth: %f", DynVehicleInfo[iDvSlotID][gv_fX], DynVehicleInfo[iDvSlotID][gv_fY], DynVehicleInfo[iDvSlotID][gv_fZ], DynVehicleInfo[iDvSlotID][gv_iModel], DynVehicleInfo[iDvSlotID][gv_iUpkeep], DynVehicleInfo[iDvSlotID][gv_fMaxHealth]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "Group: %d | Division: %d | Rank: %d | Type: %d | Disabled: %d | Family: %d", DynVehicleInfo[iDvSlotID][gv_igID], DynVehicleInfo[iDvSlotID][gv_igDivID], DynVehicleInfo[iDvSlotID][gv_irID], DynVehicleInfo[iDvSlotID][gv_iType], DynVehicleInfo[iDvSlotID][gv_iDisabled], DynVehicleInfo[iDvSlotID][gv_ifID]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "Obj Model 1: %d | Obj Model 2: %d | VW: %d | Int: %d | LoadMax: %d", DynVehicleInfo[iDvSlotID][gv_iAttachedObjectModel][0],DynVehicleInfo[iDvSlotID][gv_iAttachedObjectModel][1], DynVehicleInfo[iDvSlotID][gv_iVW], DynVehicleInfo[iDvSlotID][gv_iInt], DynVehicleInfo[iDvSlotID][gv_iLoadMax]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid Dynamic Vehicle Slot ID.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:dvcreate(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new
				iVehicle,
				iColors[2],
				string[128];

		if(sscanf(params, "iii", iVehicle, iColors[0], iColors[1])) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dvcreate [model ID] [color 1] [color 2]");
		}
		if(!(400 < iVehicle < 612)) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid Model ID");
		else if(IsATrain(iVehicle)) {
				SendClientMessageEx(playerid, COLOR_GREY, "Trains cannot be spawned during runtime.");
			}
		else if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
		}
		mysql_function_query(MainPipeline, "SELECT id from `groupvehs` WHERE vModel = 0 LIMIT 1;", true, "DynVeh_CreateDVQuery", "iiii", playerid, iVehicle, iColors[0], iColors[1]);
		format(string, sizeof(string), "%s has created a dynamic vehicle.", GetPlayerNameEx(playerid));
		Log("logs/dv.log", string);
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command.");
	return 1;
}

CMD:dvrespawnall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		if(GetPVarInt(playerid, "dvRespawnAll") == 0)
		{
			new
				szString[128];

			SendClientMessageEx(playerid, COLOR_WHITE, "Respawning all current dynamic vehicles...");
				
			for(new i = 0; i < MAX_DYNAMIC_VEHICLES; i++)
			{
				SetPVarInt(playerid, "dvRespawnAll", 1);
				DynVeh_Spawn(i);
			}
			
			format(szString, sizeof(szString), "{AA3333}AdmWarning{FFFF00}: %s has respawned all dynamic vehicles loaded on the server.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW, szString, 2);
			format(szString, sizeof(szString), "Administrator %s has respawned all dynamic vehicles loaded on the server.", GetPlayerNameEx(playerid));
			Log("logs/admin.log", szString);
			SetPVarInt(playerid, "dvRespawnAll", 0);
		}
		else
			return SendClientMessageEx(playerid, COLOR_GREY, "There is already a dynamic vehicle respawn request in progress.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You're not authorized to use this command!");
	return 1;
}

CMD:dvrespawn(playerid, params[])
{
	new szString[128],
		iGroupID = PlayerInfo[playerid][pMember],
	    iFamilyID = PlayerInfo[playerid][pFMember];
	    
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1 || PlayerInfo[playerid][pGangModerator] >= 1)
    {
		if((0 <= iGroupID <= MAX_GROUPS))
		{
			for(new i; i < MAX_DYNAMIC_VEHICLES; i++)
			{
			    new iModelID = DynVehicleInfo[i][gv_iModel];
			    if(400 <= iModelID < 612 && DynVehicleInfo[i][gv_igID] == iGroupID)
			    {
					if(!IsVehicleOccupied(DynVehicleInfo[i][gv_iSpawnedID]))
					{	
						DynVeh_Spawn(i);
					}	
			    }
			}
			format(szString, sizeof(szString), "** Respawning all dynamic group vehicles...");
			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pMember] == iGroupID) 
					{
						SendClientMessageEx(i, arrGroupData[iGroupID][g_hRadioColour] * 256 + 255, szString);
					}
				}	
			}
            format(szString, sizeof(szString), "%s has respawned group ID %d dynamic group vehicles.", GetPlayerNameEx(playerid), iGroupID+1);
   			Log("logs/group.log", szString);
		}
		else if((1 <= iFamilyID <= MAX_FAMILY))
		{
		    for(new i; i < MAX_DYNAMIC_VEHICLES; i++)
		    {
		        new iModelID = DynVehicleInfo[i][gv_iModel];
		        if(400 <= iModelID < 612 && DynVehicleInfo[i][gv_ifID] == iFamilyID)
		        {
					if(!IsVehicleOccupied(DynVehicleInfo[i][gv_iSpawnedID]))
					{
						DynVeh_Spawn(i);
					}	
		        }
		    }
			format(szString, sizeof(szString), "** Respawning all dynamic family vehicles...");	
		    //foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pFMember] == iFamilyID)
					{
						SendClientMessageEx(i, COLOR_LIGHTBLUE, szString);
					}
				}	
			}
		    format(szString, sizeof(szString), "%s has respawned family %d dynamic group vehicles.", GetPlayerNameEx(playerid), iFamilyID);
      		Log("logs/family.log", szString);
		}
	}
	return 1;
}

CMD:dvedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new vehicleid, name[24], Float:value, slot, string[128];
		if(sscanf(params, "is[24]F(0)D(0)", vehicleid, name, value, slot)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dvedit [vehicleid] [v parameter] [value] [slot] (if applicable - indicated by *)");
			SendClientMessageEx(playerid, COLOR_GREY, "Parameters: vmodel vcol1 vcol2 family groupid divid loadmax maxhealth upkeep vtype vw delete");
			SendClientMessageEx(playerid, COLOR_GREY, "Parameters: disabled objmodel* objx* objy* objz* objrx* objry* objrz* (Object Offsets)");
			SendClientMessageEx(playerid, COLOR_GREY, "Parameters: rank");
			return 1;
		}
		new iDvSlotID = DynVeh[vehicleid];
		if(iDvSlotID == -1 || iDvSlotID > MAX_DYNAMIC_VEHICLES || DynVehicleInfo[iDvSlotID][gv_iSpawnedID] != vehicleid) return SendClientMessageEx(playerid, COLOR_GRAD1, " Invalid Dynamic Vehicle ID Provided " );
		format(string, sizeof(string), "%s has edited DV Slot %d - %s.", GetPlayerNameEx(playerid), iDvSlotID, params);
		Log("logs/dv.log", string);
		if(strcmp(name, "delete", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_iModel] = 0;
			DynVehicleInfo[iDvSlotID][gv_iAttachedObjectModel][0] = INVALID_OBJECT_ID;
			DynVehicleInfo[iDvSlotID][gv_iAttachedObjectModel][1] = INVALID_OBJECT_ID;
			DynVehicleInfo[iDvSlotID][gv_igID] = INVALID_GROUP_ID;
			DynVehicleInfo[iDvSlotID][gv_igDivID] = 0;
			DynVehicleInfo[iDvSlotID][gv_ifID] = INVALID_FAMILY_ID;
			DynVehicleInfo[iDvSlotID][gv_fMaxHealth] = 1000;
			DynVehicleInfo[iDvSlotID][gv_iUpkeep] = 0;
			DynVeh_Save(iDvSlotID);
			DynVeh_Spawn(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have deleted the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "vw", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_iVW] = floatround(value);
			DynVeh_Save(iDvSlotID);
			DynVeh_Spawn(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the virtual world of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "disabled", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_iDisabled] = floatround(value);
			DynVeh_Save(iDvSlotID);
			DynVeh_Spawn(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "vmodel", true) == 0)
		{
			if(!(400 < value < 612)) return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid Model ID");
			DynVehicleInfo[iDvSlotID][gv_iModel] = floatround(value);
			DynVeh_Save(iDvSlotID);
			DynVeh_Spawn(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the vehicle model of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "vcol1", true) == 0)
		{
			if(!(0 <= value <= 255)) {
				return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
			}
			DynVehicleInfo[iDvSlotID][gv_iCol1] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the color (1) of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "vcol2", true) == 0)
		{
			if(!(0 <= value <= 255)) {
				return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
			}
			DynVehicleInfo[iDvSlotID][gv_iCol2] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the color (2) of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "groupid", true) == 0)
		{
			if(value == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_igID] = INVALID_GROUP_ID;
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have removed the group id flag of the dynamic vehicle");
				return 1;
			}
			if(!(0 <= value < MAX_GROUPS)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid group specified (Start at 1, end at "#MAX_GROUPS")");
			DynVehicleInfo[iDvSlotID][gv_igID] = floatround(value-1);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the group id flag of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "family", true) == 0)
		{
			if(value == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_ifID] = 0;
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have removed the family id flag of the dynamic vehicle");
				return 1;
			}
			if(!(0 <= value < MAX_FAMILY)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid group specified (Start at 1, end at "#MAX_GROUPS")");
			DynVehicleInfo[iDvSlotID][gv_ifID] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the family id flag of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "divid", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_igDivID] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the division id of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "rank", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_irID] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the rank id of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "loadmax", true) == 0)
		{
			if(!(0 < value < 6)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid group specified (Start at 1, end at 6)");
			DynVehicleInfo[iDvSlotID][gv_iLoadMax] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the load max of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "maxhealth", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_fMaxHealth] = (value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the maximum health of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "upkeep", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_iUpkeep] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the up keep of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "vtype", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_iType] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the vehicle type of the dynamic vehicle");
			return 1;
		}
		if(1 <= slot <= MAX_DV_OBJECTS)
		{
			if(strcmp(name, "objmodel", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_iAttachedObjectModel][slot-1] = floatround(value);
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object model of the dynamic vehicle");
				return 1;
			}
			if(strcmp(name, "objx", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_fObjectX][slot-1] = value;
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object position (X) of the dynamic vehicle");
				return 1;
			}
			if(strcmp(name, "objy", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_fObjectY][slot-1] = value;
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object position (Y) of the dynamic vehicle");
				return 1;
			}
			if(strcmp(name, "objz", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_fObjectZ][slot-1] = value;
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object position (Z) of the dynamic vehicle");
				return 1;
			}
			if(strcmp(name, "objrx", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_fObjectRX][slot-1] = value;
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object rotation (X) of the dynamic vehicle");
				return 1;
			}
			if(strcmp(name, "objry", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_fObjectRY][slot-1] = value;
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object rotation (Y) of the dynamic vehicle");
				return 1;
			}
			if(strcmp(name, "objrz", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_fObjectRZ][slot-1] = value;
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object rotation (Z) of the dynamic vehicle");
				return 1;
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, "Slot ID Must be between 1 and "#MAX_DV_OBJECTS"!");
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command.");
	return 1;
}

CMD:dveditslot(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new iDvSlotID, name[24], Float:value, slot, string[128];
		if(sscanf(params, "is[24]F(0)D(0)", iDvSlotID, name, value, slot)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dveditslot [dv slot id] [v parameter] [value] [slot] (if applicable - indicated by *)");
			SendClientMessageEx(playerid, COLOR_GREY, "Parameters: vmodel vcol1 vcol2 family groupid divid loadmax maxhealth upkeep vtype vw delete");
			SendClientMessageEx(playerid, COLOR_GREY, "Parameters: disabled objmodel* objx* objy* objz* objrx* objry* objrz* (Object Offsets)");
			SendClientMessageEx(playerid, COLOR_GREY, "Parameters: rank");
			return 1;
		}
		if(iDvSlotID > MAX_DYNAMIC_VEHICLES || DynVehicleInfo[iDvSlotID][gv_iModel] == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, " Invalid Dynamic Vehicle ID Provided " );
		format(string, sizeof(string), "%s has edited DV Slot %d - %s.", GetPlayerNameEx(playerid), iDvSlotID, params);
		Log("logs/dv.log", string);
		if(strcmp(name, "delete", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_iModel] = 0;
			DynVehicleInfo[iDvSlotID][gv_iAttachedObjectModel][0] = INVALID_OBJECT_ID;
			DynVehicleInfo[iDvSlotID][gv_iAttachedObjectModel][1] = INVALID_OBJECT_ID;
			DynVehicleInfo[iDvSlotID][gv_igID] = INVALID_GROUP_ID;
			DynVehicleInfo[iDvSlotID][gv_igDivID] = 0;
			DynVehicleInfo[iDvSlotID][gv_ifID] = INVALID_FAMILY_ID;
			DynVehicleInfo[iDvSlotID][gv_fMaxHealth] = 1000;
			DynVehicleInfo[iDvSlotID][gv_iUpkeep] = 0;
			DynVeh_Save(iDvSlotID);
			DynVeh_Spawn(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have deleted the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "vw", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_iVW] = floatround(value);
			DynVeh_Save(iDvSlotID);
			DynVeh_Spawn(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the virtual world of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "disabled", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_iDisabled] = floatround(value);
			DynVeh_Save(iDvSlotID);
			DynVeh_Spawn(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "vmodel", true) == 0)
		{
			if(!(400 < value < 612)) return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid Model ID");
			DynVehicleInfo[iDvSlotID][gv_iModel] = floatround(value);
			DynVeh_Save(iDvSlotID);
			DynVeh_Spawn(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the vehicle model of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "vcol1", true) == 0)
		{
			if(!(0 <= value <= 255)) {
				return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
			}
			DynVehicleInfo[iDvSlotID][gv_iCol1] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the color (1) of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "vcol2", true) == 0)
		{
			if(!(0 <= value <= 255)) {
				return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
			}
			DynVehicleInfo[iDvSlotID][gv_iCol2] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the color (2) of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "groupid", true) == 0)
		{
			if(value == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_igID] = INVALID_GROUP_ID;
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have removed the group id flag of the dynamic vehicle");
				return 1;
			}
			if(!(0 <= value < MAX_GROUPS)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid group specified (Start at 1, end at "#MAX_GROUPS")");
			DynVehicleInfo[iDvSlotID][gv_igID] = floatround(value-1);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the group id flag of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "family", true) == 0)
		{
			if(value == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_ifID] = 0;
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have removed the family id flag of the dynamic vehicle");
				return 1;
			}
			if(!(0 <= value < MAX_FAMILY)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid group specified (Start at 1, end at "#MAX_GROUPS")");
			DynVehicleInfo[iDvSlotID][gv_ifID] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the family id flag of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "divid", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_igDivID] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the division id of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "rank", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_irID] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the rank id of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "loadmax", true) == 0)
		{
			if(!(0 < value < 6)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid group specified (Start at 1, end at 6)");
			DynVehicleInfo[iDvSlotID][gv_iLoadMax] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the load max of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "maxhealth", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_fMaxHealth] = (value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the maximum health of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "upkeep", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_iUpkeep] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the up keep of the dynamic vehicle");
			return 1;
		}
		if(strcmp(name, "vtype", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_iType] = floatround(value);
			DynVeh_Save(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the vehicle type of the dynamic vehicle");
			return 1;
		}
		if(1 <= slot <= MAX_DV_OBJECTS)
		{
			if(strcmp(name, "objmodel", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_iAttachedObjectModel][slot-1] = floatround(value);
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object model of the dynamic vehicle");
				return 1;
			}
			if(strcmp(name, "objx", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_fObjectX][slot-1] = value;
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object position (X) of the dynamic vehicle");
				return 1;
			}
			if(strcmp(name, "objy", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_fObjectY][slot-1] = value;
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object position (Y) of the dynamic vehicle");
				return 1;
			}
			if(strcmp(name, "objz", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_fObjectZ][slot-1] = value;
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object position (Z) of the dynamic vehicle");
				return 1;
			}
			if(strcmp(name, "objrx", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_fObjectRX][slot-1] = value;
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object rotation (X) of the dynamic vehicle");
				return 1;
			}
			if(strcmp(name, "objry", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_fObjectRY][slot-1] = value;
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object rotation (Y) of the dynamic vehicle");
				return 1;
			}
			if(strcmp(name, "objrz", true) == 0)
			{
				DynVehicleInfo[iDvSlotID][gv_fObjectRZ][slot-1] = value;
				DynVeh_Spawn(iDvSlotID);
				DynVeh_Save(iDvSlotID);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the object rotation (Z) of the dynamic vehicle");
				return 1;
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, "Slot ID Must be between 1 and "#MAX_DV_OBJECTS"!");
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command.");
	return 1;
}

CMD:dvplate(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new vehicleid, plate[32];
        if(sscanf(params, "ds[32]", vehicleid, plate))
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dvplate [vehicleid] [plate/remove]");
		    SendClientMessageEx(playerid, COLOR_GREY, "COLORS: (black/white/blue/red/green/purple/yellow/lightblue/navy/beige/darkgreen/darkblue/darkgrey/gold/brown/darkbrown/darkred");
			SendClientMessageEx(playerid, COLOR_GREY, "/pink) USAGE: (red)Hi(white)how are you? NOTE: Each color counts for 8 characters");
			return 1;
		}
		new iDvSlotID = DynVeh[vehicleid];
		if(iDvSlotID == -1 || iDvSlotID > MAX_DYNAMIC_VEHICLES || DynVehicleInfo[iDvSlotID][gv_iSpawnedID] != vehicleid) return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid Dynamic Vehicle ID provided!");

		format(plate, sizeof(plate), "%s", str_replace("(black)", "{000000}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(white)", "{FFFFFF}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(blue)", "{0000FF}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(red)", "{FF0000}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(green)", "{008000}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(purple)", "{800080}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(yellow)", "{FFFF00}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(lightblue)", "{ADD8E6}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(navy)", "{000080}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(beige)", "{F5F5DC}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(darkgreen)", "{006400}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(darkblue)", "{00008B}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(darkgrey)", "{A9A9A9}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(gold)", "{FFD700}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(brown)", "{A52A2A}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(darkbrown)", "{5C4033}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(darkred)", "{8B0000}", plate));
		format(plate, sizeof(plate), "%s", str_replace("(pink)", "{FF5B77}", plate));

		if(strcmp(plate, "remove", true) == 0)
		{
			DynVehicleInfo[iDvSlotID][gv_iPlate] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have removed the custom plate of the dynamic vehicle");
		}
		else
		{
			format(DynVehicleInfo[iDvSlotID][gv_iPlate], 32, "%s", plate);
			DynVeh_Spawn(iDvSlotID);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have modified the custom plate of the dynamic vehicle");
		}

		DynVeh_Save(iDvSlotID);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:siren(playerid, params[])
{
	if(IsACop(playerid) || IsAHitman(playerid) || IsAGovernment(playerid) || IsAMedic(playerid))
	{
	    if(GetPVarType(playerid, "Siren"))
		{
			/* freeslot = FindFreeAttachedObjectSlot(playerid);
			if(freeslot == -1) { RemovePlayerAttachedObject(playerid, 8), freeslot = 8; } */
  			if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 3)) RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 3);
    		if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2)) RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2);
      		DeletePVar(playerid, "Siren");
      		SendClientMessageEx(playerid, COLOR_WHITE, "Siren disabled.");
			return 1;
		}
	    else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
			if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 3)) RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 3);
			if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2)) RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2);
			switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
			{
				case 415:
				{
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 3, 18646, 10, -0.20, 0.30, 0.3, -90, -30, 0);
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2, 18646, 10, -0.20, 0.30, 0.3, -90, -30, 0);
				}
				case 402:
				{
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 3, 18646, 10, -0.20, 0.5, 0.4, -90, -50, 0);
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2, 18646, 10, -0.20, 0.5, 0.4, -90, -50, 0);
				}
				case 541, 411:
				{
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 3, 18646, 10, 0.0, 0.2, 0.4, -90, -30, 0);
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2, 18646, 10, 0.0, 0.2, 0.4, -90, -30, 0);
				}
				case 451: {
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 3, 18646, 10, -0.30, 0.4, 0.6, -90, -50, 0);
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2, 18646, 10, -0.30, 0.4, 0.6, -90, -50, 0);
				}
				default:
				{
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 3, 18646, 10, -0.30, 0.4, 0.4, -90, -50, 0);
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2, 18646, 10, -0.30, 0.4, 0.4, -90, -50, 0);
				}
			}
			SetPVarInt(playerid, "Siren", 1);
			SendClientMessageEx(playerid, COLOR_WHITE, "Siren enabled.");
			return 1;
	    }
		SendClientMessage(playerid, COLOR_GRAD2, "This vehicle does not support mounted sirens.");
	}
	return 1;
}

CMD:deploy(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != INVALID_GROUP_ID)
	{
		new type, object[12];
		if(sscanf(params, "s[12]D(0)", object, type))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /deploy [object] [type (option for barricades)]");
			SendClientMessageEx(playerid, COLOR_GRAD1, "Objects: Cade, Spikes, Flare, Cone, Barrel");
			return 1;
		}
		else if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
		if(strcmp(object, "cade", true) == 0)
		{
			if(PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iBarricades])
			{
				for(new i; i < sizeof(Barricades); i++)
				{
					if(Barricades[i][sX] == 0 && Barricades[i][sY] == 0 && Barricades[i][sZ] == 0)
					{
						new Float: f_TempAngle, string[128];

						GetPlayerPos(playerid, Barricades[i][sX], Barricades[i][sY], Barricades[i][sZ]);
						GetPlayerFacingAngle(playerid, f_TempAngle);
						switch(type)
						{
							case 0:
							{
								Barricades[i][sObjectID] = CreateDynamicObject(981, Barricades[i][sX], Barricades[i][sY], Barricades[i][sZ], 0.0, 0.0, f_TempAngle);
								SetPlayerPos(playerid, Barricades[i][sX] + 2, Barricades[i][sY] + 2, Barricades[i][sZ] + 2);
							}
							case 1:
							{
								Barricades[i][sObjectID] = CreateDynamicObject(4504, Barricades[i][sX], Barricades[i][sY], Barricades[i][sZ] + 1.6996, 0.0, 0.0, f_TempAngle + 270);
								SetPlayerPos(playerid, Barricades[i][sX] + 10, Barricades[i][sY] + 10, Barricades[i][sZ] + 5);
							}
							case 2:
							{
								Barricades[i][sObjectID] = CreateDynamicObject(4505, Barricades[i][sX], Barricades[i][sY], Barricades[i][sZ] + 1.6996, 0.0, 0.0, f_TempAngle + 270);
								SetPlayerPos(playerid, Barricades[i][sX] + 10, Barricades[i][sY] + 10, Barricades[i][sZ] + 5);
							}
							case 3:
							{
								Barricades[i][sObjectID] = CreateDynamicObject(4514, Barricades[i][sX], Barricades[i][sY], Barricades[i][sZ] + 1.2394, 0.0, 0.0, f_TempAngle + 270);
								SetPlayerPos(playerid, Barricades[i][sX] + 10, Barricades[i][sY] + 10, Barricades[i][sZ] + 5);
							}
							case 4:
							{
								Barricades[i][sObjectID] = CreateDynamicObject(4526, Barricades[i][sX], Barricades[i][sY], Barricades[i][sZ] + 0.7227, 0.0, 0.0, f_TempAngle);
								SetPlayerPos(playerid, Barricades[i][sX] + 10, Barricades[i][sY] + 10, Barricades[i][sZ] + 5);
							}
							case 5:
							{
								Barricades[i][sObjectID] = CreateDynamicObject(978, Barricades[i][sX], Barricades[i][sY], Barricades[i][sZ], 0.0, 0.0, f_TempAngle);
								SetPlayerPos(playerid, Barricades[i][sX] + 2, Barricades[i][sY] + 2, Barricades[i][sZ]);
							}
							case 6:
							{
								Barricades[i][sObjectID] = CreateDynamicObject(979, Barricades[i][sX], Barricades[i][sY], Barricades[i][sZ], 0.0, 0.0, f_TempAngle);
								SetPlayerPos(playerid, Barricades[i][sX] + 2, Barricades[i][sY] + 2, Barricades[i][sZ]);
							}
							default:
							{
								Barricades[i][sObjectID] = CreateDynamicObject(981, Barricades[i][sX], Barricades[i][sY], Barricades[i][sZ], 0.0, 0.0, f_TempAngle);
								SetPlayerPos(playerid, Barricades[i][sX] + 2, Barricades[i][sY] + 2, Barricades[i][sZ] + 2);
							}
						}
						GetPlayer3DZone(playerid, Barricades[i][sDeployedAt], MAX_ZONE_NAME);
						Barricades[i][sDeployedBy] = GetPlayerNameEx(playerid);
						if(PlayerInfo[playerid][pAdmin] > 1 && PlayerInfo[playerid][pTogReports] != 1) Barricades[i][sDeployedByStatus] = 1;
						else Barricades[i][sDeployedByStatus] = 0;
						format(string,sizeof(string),"Barricade ID: %d successfully created.", i);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "HQ: A barricade has been deployed by %s at %s.", GetPlayerNameEx(playerid), Barricades[i][sDeployedAt]);
						//foreach(new x: Player)
						for(new x = 0; x < MAX_PLAYERS; ++x)
						{
							if(IsPlayerConnected(x))
							{
								if(PlayerInfo[x][pMember] == PlayerInfo[playerid][pMember]) SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
							}	
						}
						return 1;
					}
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more barricades, limit is " #MAX_BARRICADES# ".");
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		}
		else if(strcmp(object, "spikes", true) == 0)
		{
			if(PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iSpikeStrips])
			{
				for(new i; i < sizeof(SpikeStrips); i++)
				{
					if(SpikeStrips[i][sX] == 0 && SpikeStrips[i][sY] == 0 && SpikeStrips[i][sZ] == 0)
					{
						new
							Float: f_TempAngle,
							string[128];

						GetPlayerPos(playerid, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]);
						GetPlayerFacingAngle(playerid, f_TempAngle);
						SpikeStrips[i][sObjectID] = CreateDynamicObject(2899, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]-0.8, 0.0, 0.0, f_TempAngle);
						SpikeStrips[i][sPickupID] = CreateDynamicPickup(19300, 14, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]);
						GetPlayer3DZone(playerid, SpikeStrips[i][sDeployedAt], MAX_ZONE_NAME);
						SpikeStrips[i][sDeployedBy] = GetPlayerNameEx(playerid);
						if(PlayerInfo[playerid][pAdmin] > 1 && PlayerInfo[playerid][pTogReports] != 1) SpikeStrips[i][sDeployedByStatus] = 1;
						else SpikeStrips[i][sDeployedByStatus] = 0;
						format(string,sizeof(string),"Spike ID: %d successfully created.", i);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "HQ: A spike has been deployed by %s at %s.", GetPlayerNameEx(playerid), SpikeStrips[i][sDeployedAt]);
						//foreach(new x: Player)
						for(new x = 0; x < MAX_PLAYERS; ++x)
						{
							if(IsPlayerConnected(x))
							{
								if(PlayerInfo[x][pMember] == PlayerInfo[playerid][pMember]) SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
							}	
						}
						return 1;
					}
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more spikestrips, limit is " #MAX_SPIKES# ".");
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		}
		else if(strcmp(object, "flare", true) == 0)
		{
			if(PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iFlares])
			{
				for(new i; i < sizeof(Flares); i++)
				{
					if(Flares[i][sX] == 0 && Flares[i][sY] == 0 && Flares[i][sZ] == 0)
					{
						new
							Float: f_TempAngle,
							string[128];

						GetPlayerPos(playerid, Flares[i][sX], Flares[i][sY], Flares[i][sZ]);
						GetPlayerFacingAngle(playerid, f_TempAngle);
						Flares[i][sObjectID] = CreateDynamicObject(18728, Flares[i][sX], Flares[i][sY], Flares[i][sZ]-2.4, 0.0, 0.0, f_TempAngle);
						GetPlayer3DZone(playerid, Flares[i][sDeployedAt], MAX_ZONE_NAME);
						Flares[i][sDeployedBy] = GetPlayerNameEx(playerid);
						if(PlayerInfo[playerid][pAdmin] > 1 && PlayerInfo[playerid][pTogReports] != 1) Flares[i][sDeployedByStatus] = 1;
						else Flares[i][sDeployedByStatus] = 0;
						format(string,sizeof(string),"Flare ID: %d successfully created.", i);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						return 1;
					}
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more flares, limit is " #MAX_FLARES# ".");
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		}
		else if(strcmp(object, "cone", true) == 0)
		{
			if(PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iCones])
			{
				for(new i; i < sizeof(Cones); i++)
				{
					if(Cones[i][sX] == 0 && Cones[i][sY] == 0 && Cones[i][sZ] == 0)
					{
						new
							Float: f_TempAngle,
							string[128];

						GetPlayerPos(playerid, Cones[i][sX], Cones[i][sY], Cones[i][sZ]);
						GetPlayerFacingAngle(playerid, f_TempAngle);
						Cones[i][sObjectID] = CreateDynamicObject(1238, Cones[i][sX], Cones[i][sY], Cones[i][sZ]-0.7, 0.0, 0.0, f_TempAngle);
						GetPlayer3DZone(playerid, Cones[i][sDeployedAt], MAX_ZONE_NAME);
						Cones[i][sDeployedBy] = GetPlayerNameEx(playerid);
						if(PlayerInfo[playerid][pAdmin] > 1 && PlayerInfo[playerid][pTogReports] != 1) Cones[i][sDeployedByStatus] = 1;
						else Cones[i][sDeployedByStatus] = 0;
						format(string,sizeof(string),"Cone ID: %d successfully created.", i);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						return 1;
					}
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more cones, limit is " #MAX_CONES# ".");
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		}
		else if(strcmp(object, "barrel", true) == 0)
		{
			if(PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iBarrels])
			{
				for(new i; i < sizeof(Barrels); i++)
				{
					if(Barrels[i][sX] == 0 && Barrels[i][sY] == 0 && Barrels[i][sZ] == 0)
					{
						new
							Float: f_TempAngle,
							string[128];

						GetPlayerPos(playerid, Barrels[i][sX], Barrels[i][sY], Barrels[i][sZ]);
						GetPlayerFacingAngle(playerid, f_TempAngle);
						Barrels[i][sObjectID] = CreateDynamicObject(1237, Barrels[i][sX], Barrels[i][sY], Barrels[i][sZ]-1, 0.0, 0.0, f_TempAngle);
						GetPlayer3DZone(playerid, Barrels[i][sDeployedAt], MAX_ZONE_NAME);
						Barrels[i][sDeployedBy] = GetPlayerNameEx(playerid);
						if(PlayerInfo[playerid][pAdmin] > 1 && PlayerInfo[playerid][pTogReports] != 1) Barrels[i][sDeployedByStatus] = 1;
						else Barrels[i][sDeployedByStatus] = 0;
						format(string,sizeof(string),"Barrel ID: %d successfully created.", i);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						return 1;
					}
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more barrels, limit is " #MAX_BARRELS# ".");
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	return 1;
}

CMD:destroy(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != INVALID_GROUP_ID)
	{
		new type, object[12];
		if(sscanf(params, "s[12]d", object, type))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /destroy [object] [ID]");
			SendClientMessageEx(playerid, COLOR_GRAD1, "Objects: Cade, Spikes, Flare, Cone, Barrel");
			return 1;
		}
		else if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
		if(strcmp(object, "cade", true) == 0)
		{
			if(PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iBarricades])
			{
				if(!(0 <= type < sizeof(Barricades)) || (Barricades[type][sX] == 0 && Barricades[type][sY] == 0 && Barricades[type][sZ] == 0)) return SendClientMessageEx(playerid, COLOR_WHITE, "Invalid barricade ID.");
				else if(PlayerInfo[playerid][pAdmin] < 2 && Barricades[type][sDeployedByStatus] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot destroy a barricade that an Administrator deployed.");
				else
				{
					new string[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
					DestroyDynamicObject(Barricades[type][sObjectID]);
					Barricades[type][sX] = 0;
					Barricades[type][sY] = 0;
					Barricades[type][sZ] = 0;
					Barricades[type][sObjectID] = INVALID_OBJECT_ID;
					Barricades[type][sDeployedBy] = INVALID_PLAYER_ID;
					Barricades[type][sDeployedByStatus] = 0;
					format(string, sizeof(string), "Barricade ID: %d successfully deleted.", type);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "HQ: A barricade has been destroyed by %s at %s.", GetPlayerNameEx(playerid), Barricades[type][sDeployedAt]);
					//foreach(new x: Player)
					for(new x = 0; x < MAX_PLAYERS; ++x)
					{
						if(IsPlayerConnected(x))
						{
							if(PlayerInfo[x][pMember] == PlayerInfo[playerid][pMember]) SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
						}	
					}
					return 1;
				}
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		}
		else if(strcmp(object, "spikes", true) == 0)
		{
			if(PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iSpikeStrips])
			{
				if(!(0 <= type < sizeof(SpikeStrips)) || (SpikeStrips[type][sX] == 0 && SpikeStrips[type][sY] == 0 && SpikeStrips[type][sZ] == 0)) return SendClientMessageEx(playerid, COLOR_WHITE, "Invalid spike ID.");
				else if(PlayerInfo[playerid][pAdmin] < 2 && SpikeStrips[type][sDeployedByStatus] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot destroy a spikestrip that an Administrator deployed.");
				else
				{
					new string[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
					DestroyDynamicObject(SpikeStrips[type][sObjectID]);
					DestroyDynamicPickup(SpikeStrips[type][sPickupID]);
					SpikeStrips[type][sX] = 0;
					SpikeStrips[type][sY] = 0;
					SpikeStrips[type][sZ] = 0;
					SpikeStrips[type][sObjectID] = INVALID_OBJECT_ID;
					SpikeStrips[type][sDeployedBy] = INVALID_PLAYER_ID;
					SpikeStrips[type][sDeployedByStatus] = 0;
					format(string,sizeof(string),"Spike %d successfully deleted.", type);
					SendClientMessageEx(playerid, COLOR_WHITE, string);

					format(string, sizeof(string), "HQ: A spike has been destroyed by %s at %s.", GetPlayerNameEx(playerid), SpikeStrips[type][sDeployedAt]);
					//foreach(new x: Player)
					for(new x = 0; x < MAX_PLAYERS; ++x)
					{
						if(IsPlayerConnected(x))
						{
							if(PlayerInfo[x][pMember] == PlayerInfo[playerid][pMember]) SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
						}	
					}
					return 1;
				}
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		}
		else if(strcmp(object, "flare", true) == 0)
		{
			if(PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iFlares])
			{
				if(!(0 <= type < sizeof(Flares)) || (Flares[type][sX] == 0 && Flares[type][sY] == 0 && Flares[type][sZ] == 0)) return SendClientMessageEx(playerid, COLOR_WHITE, "Invalid flare ID.");
				else if(PlayerInfo[playerid][pAdmin] < 2 && Flares[type][sDeployedByStatus] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot destroy a flare that an Administrator deployed.");
				else
				{
					new string[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
					DestroyDynamicObject(Flares[type][sObjectID]);
					Flares[type][sX] = 0;
					Flares[type][sY] = 0;
					Flares[type][sZ] = 0;
					Flares[type][sObjectID] = INVALID_OBJECT_ID;
					Flares[type][sDeployedBy] = INVALID_PLAYER_ID;
					Flares[type][sDeployedByStatus] = 0;
					format(string,sizeof(string),"Flare ID: %d successfully deleted.", type);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					return 1;
				}
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		}
		else if(strcmp(object, "cone", true) == 0)
		{
			if(PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iCones])
			{
				if(!(0 <= type < sizeof(Cones)) || (Cones[type][sX] == 0 && Cones[type][sY] == 0 && Cones[type][sZ] == 0)) return SendClientMessageEx(playerid, COLOR_WHITE, "Invalid cone ID.");
				else if(PlayerInfo[playerid][pAdmin] < 2 && Cones[type][sDeployedByStatus] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot destroy a cone that an Administrator deployed.");
				else
				{
					new string[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
					DestroyDynamicObject(Cones[type][sObjectID]);
					Cones[type][sX] = 0;
					Cones[type][sY] = 0;
					Cones[type][sZ] = 0;
					Cones[type][sObjectID] = INVALID_OBJECT_ID;
					Cones[type][sDeployedBy] = INVALID_PLAYER_ID;
					Cones[type][sDeployedByStatus] = 0;
					format(string,sizeof(string),"Cone ID: %d successfully deleted.", type);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					return 1;
				}
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		}
		else if(strcmp(object, "barrel", true) == 0)
		{
			if(PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iBarrels])
			{
				if(!(0 <= type < sizeof(Barrels)) || (Barrels[type][sX] == 0 && Barrels[type][sY] == 0 && Barrels[type][sZ] == 0)) return SendClientMessageEx(playerid, COLOR_WHITE, "Invalid barrel ID.");
				else if(PlayerInfo[playerid][pAdmin] < 2 && Barrels[type][sDeployedByStatus] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot destroy a barrel that an Administrator deployed.");
				else
				{
					new string[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
					DestroyDynamicObject(Barrels[type][sObjectID]);
					Barrels[type][sX] = 0;
					Barrels[type][sY] = 0;
					Barrels[type][sZ] = 0;
					Barrels[type][sObjectID] = INVALID_OBJECT_ID;
					Barrels[type][sDeployedBy] = INVALID_PLAYER_ID;
					Barrels[type][sDeployedByStatus] = 0;
					format(string,sizeof(string),"Barrel ID: %d successfully deleted.", type);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					return 1;
				}
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	return 1;
}

CMD:cades(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != INVALID_GROUP_ID && arrGroupData[PlayerInfo[playerid][pMember]][g_iBarricades] != -1 && PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iBarricades])
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Current deployed barricades:");
		for(new i, string[56 + MAX_ZONE_NAME + MAX_PLAYER_NAME]; i < sizeof(Barricades); i++)
		{
			if(Barricades[i][sX] != 0 && Barricades[i][sY] != 0 && Barricades[i][sZ] != 0) // Checking for next available ID.
			{
				format(string, sizeof(string), "HQ: Barricade #%d | Deployed location: %s | Deployed by: %s", i, Barricades[i][sDeployedAt], Barricades[i][sDeployedBy]);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized.");
	}
	return 1;
}

CMD:spikes(playerid, params[])
{
	if (PlayerInfo[playerid][pMember] != INVALID_GROUP_ID && PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iSpikeStrips]) {
		SendClientMessageEx(playerid, COLOR_WHITE, "Current deployed spikes:");
		for(new i, string[56 + MAX_ZONE_NAME + MAX_PLAYER_NAME]; i < sizeof(SpikeStrips); i++)
		{
			if(SpikeStrips[i][sX] != 0 && SpikeStrips[i][sY] != 0 && SpikeStrips[i][sZ] != 0) // Checking for next available ID.
			{
				format(string, sizeof(string), "HQ: Spike ID: %d | Deployed location: %s | Deployed by: %s", i, SpikeStrips[i][sDeployedAt], SpikeStrips[i][sDeployedBy]);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
		}
	} else SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	return 1;
}

CMD:flares(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != INVALID_GROUP_ID && PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iFlares])
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Current deployed flares:");
		for(new i, string[58 + MAX_ZONE_NAME + MAX_PLAYER_NAME]; i < sizeof(Flares); i++)
		{
			if(Flares[i][sX] != 0 && Flares[i][sY] != 0 && Flares[i][sZ] != 0) // Checking for next available ID.
			{
				format(string, sizeof(string), "HQ: Flare ID: %d | Deployed location: %s | Deployed by: %s", i, Flares[i][sDeployedAt], Flares[i][sDeployedBy]);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized.");
	}
	return 1;
}

CMD:cones(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != INVALID_GROUP_ID && PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iCones])
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Current deployed cones:");
		for(new i, string[56 + MAX_ZONE_NAME + MAX_PLAYER_NAME]; i < sizeof(Cones); i++)
		{
			if(Cones[i][sX] != 0 && Cones[i][sY] != 0 && Cones[i][sZ] != 0) // Checking for next available ID.
			{
				format(string, sizeof(string), "HQ: Cone ID: %d | Deployed location: %s | Deployed by: %s", i, Cones[i][sDeployedAt], Cones[i][sDeployedBy]);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized.");
	}
	return 1;
}

CMD:barrels(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != INVALID_GROUP_ID && PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iBarrels])
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Current deployed barrels:");
		for(new i, string[56 + MAX_ZONE_NAME + MAX_PLAYER_NAME]; i < sizeof(Barrels); i++)
		{
			if(Barrels[i][sX] != 0 && Barrels[i][sY] != 0 && Barrels[i][sZ] != 0) // Checking for next available ID.
			{
				format(string, sizeof(string), "HQ: Barrel ID: %d | Deployed location: %s | Deployed by: %s", i, Barrels[i][sDeployedAt], Barrels[i][sDeployedBy]);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized.");
	}
	return 1;
}

CMD:eba(playerid, params[]) {
	return cmd_emergencybutton(playerid, params);
}

CMD:emergencybutton(playerid, params[]) {
	if(arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] == 7 || arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] == 7) {
		new
	    	string[128],
			Location[MAX_ZONE_NAME];

        if( PlayerCuffed[ playerid ] >= 1 || PlayerInfo[ playerid ][ pJailTime ] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerTied[playerid] > 0 ) {
			SendClientMessageEx( playerid, COLOR_WHITE, "You can't do this right now." );
		}

		GetPlayer2DZone(playerid, Location, MAX_ZONE_NAME);
	    //foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(IsACop(i)) {
					SendClientMessageEx(i, TEAM_BLUE_COLOR, "HQ: All Units APB: Reporter: Taxi Company Office");
					format(string, sizeof(string), "HQ: A distress signal is forwarded from the Taxi Company Office for %s at %s",GetPlayerNameEx(playerid), Location);
					SendClientMessageEx(i, TEAM_BLUE_COLOR, string);
				}
			}	
		}
		format(string, sizeof(string), "* An alarm engages in %s's taxi at %s. A message is dispatched to the Companies office.", GetPlayerNameEx(playerid), Location);
		SendTaxiMessage(TEAM_AZTECAS_COLOR, string);
		SendClientMessage(playerid, COLOR_WHITE, "You have pressed the emergency button, police have been informed.");
	}
	return 1;
}

CMD:backup(playerid, params[])
{
    if(IsACop(playerid) || IsAMedic(playerid))
	{
	    new code[10],
		zone[MAX_ZONE_NAME],
		string[128];
	    GetPlayer3DZone(playerid, zone, sizeof(zone));
		if(sscanf(params, "s[10]", code) && (Backup[playerid] == 0 || Backup[playerid] == 2)) {
			format(string, sizeof(string), "* %s requests backup over their radio.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "* %s is requesting backup at %s. {AA3333}Respond Code 3 [Lights and Sirens].", GetPlayerNameEx(playerid), zone);
            ShowBackupActiveForPlayer(playerid);
			Backup[playerid] = 1;

			foreach(Player, i)
			{
				if(PlayerInfo[playerid][pMember] == PlayerInfo[i][pMember])
				{
      				SetPlayerMarkerForPlayer(i, playerid, 0x2641FEAA);
					SendClientMessageEx(i, arrGroupData[PlayerInfo[playerid][pMember]][g_hRadioColour] * 256 + 255, string);
				}
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "Type '/backup' again to lower your request to code 2.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Type /nobackup to clear your backup request.");
			if(BackupClearTimer[playerid] != 0)
			{
				KillTimer(BackupClearTimer[playerid]);
				BackupClearTimer[playerid] = 0;
			}
			BackupClearTimer[playerid] = SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
		}
		else if(strcmp(code, "code2", true) == 0 && (Backup[playerid] == 0 || Backup[playerid] == 1))
		{
			format(string, sizeof(string), "* %s requests backup over their radio.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "* %s is requesting backup at %s. {00FF33}Respond Code 2 [No Lights and Sirens].", GetPlayerNameEx(playerid), zone);
            ShowBackupActiveForPlayer(playerid);
			Backup[playerid] = 2;

			foreach(Player, i)
			{
				if(PlayerInfo[playerid][pMember] == PlayerInfo[i][pMember])
				{
      				SetPlayerMarkerForPlayer(i, playerid, 0x00FF33AA);
					SendClientMessageEx(i,  arrGroupData[PlayerInfo[playerid][pMember]][g_hRadioColour] * 256 + 255, string);
				}
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "Type /backup again to upgrade your request to code 3.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Type /nobackup to clear your backup request.");
			if(BackupClearTimer[playerid] != 0)
			{
				KillTimer(BackupClearTimer[playerid]);
				BackupClearTimer[playerid] = 0;
			}
			BackupClearTimer[playerid] = SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
		}
		else if(code[0] && !(strcmp(code, "code2", true) == 0))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "Incorrect parameter - type /backup or /backup code2 only");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "  You already have an active backup request! Type /nobackup to cancel.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not a law enforcement officer or medic!");
	}
	return 1;
}

CMD:backupall(playerid, params[])
{
    if(IsACop(playerid) || IsAMedic(playerid))
	{
	    new
			zone[MAX_ZONE_NAME],
			string[128];
	    GetPlayer3DZone(playerid, zone, sizeof(zone));
		if(Backup[playerid] == 0 || Backup[playerid] == 1)
		{
			format(string, sizeof(string), "* %s requests backup over their radio.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "* %s is requesting backup at %s. {AA3333}Respond Code 3A [Lights and Sirens].", GetPlayerNameEx(playerid), zone);
            ShowBackupActiveForPlayer(playerid);
			Backup[playerid] = 3;
			foreach(Player, i)
			{
				if(IsACop(i) && arrGroupData[PlayerInfo[playerid][pMember]][g_iAllegiance] == arrGroupData[PlayerInfo[i][pMember]][g_iAllegiance])
				{
      				SetPlayerMarkerForPlayer(i, playerid, 0x2641FEAA);
					SendClientMessageEx(i, DEPTRADIO, string);
				}
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "Type /nobackup to clear your backup request.");
			if(BackupClearTimer[playerid] != 0)
			{
				KillTimer(BackupClearTimer[playerid]);
				BackupClearTimer[playerid] = 0;
			}
			BackupClearTimer[playerid] = SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "  You already have an active backup request! Type /nobackup to cancel.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not a law enforcement officer or medic!");
	}
	return 1;
}

CMD:backupint(playerid, params[])
{
    if(IsACop(playerid) || IsAMedic(playerid))
	{
	    new
			zone[MAX_ZONE_NAME],
			string[128];
	    GetPlayer3DZone(playerid, zone, sizeof(zone));
		if(Backup[playerid] == 0 || Backup[playerid] == 1)
		{
			format(string, sizeof(string), "* %s requests backup over their radio.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "* %s is requesting international backup at %s. {AA3333}Respond Code 3A [Lights and Sirens].", GetPlayerNameEx(playerid), zone);
            ShowBackupActiveForPlayer(playerid);
			Backup[playerid] = 4;
			foreach(Player, i)
			{
				if(IsACop(i))
				{
      				SetPlayerMarkerForPlayer(i, playerid, 0x2641FEAA);
					SendClientMessageEx(i, DEPTRADIO, string);
				}
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "Type /nobackup to clear your backup request.");
			if(BackupClearTimer[playerid] != 0)
			{
				KillTimer(BackupClearTimer[playerid]);
				BackupClearTimer[playerid] = 0;
			}
			BackupClearTimer[playerid] = SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "  You already have an active backup request! Type /nobackup to cancel.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not a law enforcement officer or medic!");
	}
	return 1;
}

CMD:nobackup(playerid, params[])
{
    BackupClear(playerid, 0);
	return 1;
}

CMD:lock(playerid, params[])
{
   	if(PlayerInfo[playerid][pLock] == 1)
	{
 		if(IsPlayerInAnyVehicle(playerid))
   		{
			if(PlayerInfo[playerid][pLockCar] != GetPlayerVehicleID(playerid) && PlayerInfo[playerid][pLockCar] != INVALID_VEHICLE_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a lock for this vehicle!");
   			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Can't lock vehicles as a passenger!");
   			new v = -1;
   			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					v = GetPlayerVehicle(i, GetPlayerVehicleID(playerid));
					if(v != -1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Can't lock player-owned vehicles!");
				}	
			}
   			if(PlayerInfo[playerid][pLockCar] == INVALID_VEHICLE_ID) PlayerInfo[playerid][pLockCar] = GetPlayerVehicleID(playerid);
      		if(LockStatus{GetPlayerVehicleID(playerid)} == 0)
        	{
				LockStatus{GetPlayerVehicleID(playerid)} = 1;
    			GameTextForPlayer(playerid, "~r~locked", 1000, 6);
       			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
          		vehicle_lock_doors(PlayerInfo[playerid][pLockCar]);
      		}
        	else
	        {
				LockStatus{GetPlayerVehicleID(playerid)} = 0;
   				vehicle_unlock_doors(PlayerInfo[playerid][pLockCar]);
      			GameTextForPlayer(playerid, "~g~unlocked", 1000, 6);
        		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
 	        }
   		}
	    else
	    {
     		new Float: x, Float: y, Float: z;
       		GetVehiclePos(PlayerInfo[playerid][pLockCar], x, y, z);
        	if(IsPlayerInRangeOfPoint(playerid, 4.0, x, y, z))
        	{
         		if(LockStatus{PlayerInfo[playerid][pLockCar]} == 0)
           		{
            		vehicle_lock_doors(PlayerInfo[playerid][pLockCar]);
            		GameTextForPlayer(playerid, "~r~locked", 1000, 6);
	            	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
 	            }
 	            else
 	            {
	            	vehicle_unlock_doors(PlayerInfo[playerid][pLockCar]);
	            	GameTextForPlayer(playerid, "~g~unlocked", 1000, 6);
	            	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
          		}
   	        }
   	        else
   	        {
            	SendClientMessageEx(playerid, COLOR_GRAD2, "You are not near your vehicle!");
	            return 1;
   	        }
       	}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " You do not have a lock!");
		return 1;
 	}
	return 1;
}

CMD:quitgroup(playerid, params[])
{
    if(PlayerInfo[playerid][pMember] >= 0 || PlayerInfo[playerid][pLeader] >= 0)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You have quit your group, you are now a civilian again.");
		new string[128];
		format(string, sizeof(string), "%s has quit the %s as a rank %i", GetPlayerNameEx(playerid), arrGroupData[PlayerInfo[playerid][pMember]][g_szGroupName], PlayerInfo[playerid][pRank]);
		Log("logs/group.log", string);
		PlayerInfo[playerid][pMember] = INVALID_GROUP_ID;
		PlayerInfo[playerid][pRank] = INVALID_RANK;
		PlayerInfo[playerid][pDuty] = 0;
		PlayerInfo[playerid][pLeader] = INVALID_GROUP_ID;
		PlayerInfo[playerid][pDivision] = INVALID_DIVISION;
		if(!IsValidSkin(GetPlayerSkin(playerid)))
		{
  			new rand = random(sizeof(CIV));
			SetPlayerSkin(playerid,CIV[rand]);
			PlayerInfo[playerid][pModel] = CIV[rand];
		}
		SetPlayerToTeamColor(playerid);
		player_remove_vip_toys(playerid);
		ResetPlayerWeaponsEx(playerid);
   		pTazer{playerid} = 0;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a group.");
	}
	return 1;
}

CMD:dvstorage(playerid, params[])
{
	new iGroupID = PlayerInfo[playerid][pMember];
	if((0 <= iGroupID <= MAX_GROUPS))
	{
		if(PlayerInfo[playerid][pLeader] == iGroupID)
		{
			if(IsPlayerInRangeOfPoint(playerid, 100.0, arrGroupData[iGroupID][g_fGaragePos][0], arrGroupData[iGroupID][g_fGaragePos][1], arrGroupData[iGroupID][g_fGaragePos][2]))
			{		
				new vstring[2500];
				for(new i; i < MAX_DYNAMIC_VEHICLES; i++)
				{
					new iModelID = DynVehicleInfo[i][gv_iModel];
					if(400 <= iModelID < 612 && DynVehicleInfo[i][gv_igID] == iGroupID)
					{
						if(DynVehicleInfo[i][gv_iDisabled] == 1) {
							format(vstring, sizeof(vstring), "%s\n(%d)%s (Disabled)", vstring, i, VehicleName[iModelID - 400]);
						}
						else if(DynVehicleInfo[i][gv_iDisabled] == 2) {
							format(vstring, sizeof(vstring), "%s\n(%d) %s (Stored)", vstring, i, VehicleName[iModelID - 400], DynVehicleInfo[i][gv_iSpawnedID]);
						}
						else if(DynVehicleInfo[i][gv_iSpawnedID] != INVALID_VEHICLE_ID) {
							format(vstring, sizeof(vstring), "%s\n(%d) %s (Spawned) [VehicleID : %d]", vstring, i, VehicleName[iModelID - 400], DynVehicleInfo[i][gv_iSpawnedID]);
						}
					}
				}
				ShowPlayerDialog(playerid, DV_STORAGE, DIALOG_STYLE_LIST, "Dynamic Group Vehicle Storage", vstring, "Track", "Cancel");	
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in range of your group garage!");	
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not a group leader!");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a group!");
	return 1;
}

CMD:vstorage(playerid, params[])
{
	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0 || PlayerInfo[playerid][pJailTime] > 0 || GetPVarInt(playerid, "Injured")) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot do this at this time.");
	if(PlayerInfo[playerid][pFreezeCar] == 0 || PlayerInfo[playerid][pAdmin] >= 2)
	{
		new vstring[4096], icount = GetPlayerVehicleSlots(playerid);
		new szCarLocation[MAX_ZONE_NAME];
		for(new i, iModelID; i < icount; i++)
		{
			if((iModelID = PlayerVehicleInfo[playerid][i][pvModelId] - 400) >= 0) 
			{
				Get3DZone(PlayerVehicleInfo[playerid][i][pvPosX], PlayerVehicleInfo[playerid][i][pvPosY], PlayerVehicleInfo[playerid][i][pvPosZ], szCarLocation, sizeof(szCarLocation));
				if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
					format(vstring, sizeof(vstring), "%s\n%s (impounded) | Location: DMV", vstring, VehicleName[iModelID]);
				}
				else if(PlayerVehicleInfo[playerid][i][pvDisabled]) {
					format(vstring, sizeof(vstring), "%s\n%s (disabled) | Location: Unknown", vstring, VehicleName[iModelID]);
				}
				else if(!PlayerVehicleInfo[playerid][i][pvSpawned]) {
					format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[iModelID]);
				}
				else format(vstring, sizeof(vstring), "%s\n%s (spawned) | Location: %s", vstring, VehicleName[iModelID], szCarLocation);
			}
			else strcat(vstring, "\nEmpty");
		}
		format(vstring, sizeof(vstring), "%s\n{40FFFF}Additional Vehicle Slot {FFD700}(Credits: %s){A9C4E4}", vstring, number_format(ShopItems[23][sItemPrice]));
		ShowPlayerDialog(playerid, VEHICLESTORAGE, DIALOG_STYLE_LIST, "Vehicle storage", vstring, "(De)spawn", "Cancel");
	}
	else { return SendClientMessageEx(playerid, COLOR_GRAD2, "Your vehicle assets have been frozen by the Judiciary.  Consult your local courthouse to have this cleared"); }
	return 1;
}

CMD:removepvehicle(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /removepvehicle [player]");
			return 1;
		}
		new vstring[1024];
		for(new i, iModelID; i < GetPlayerVehicleSlots(giveplayerid); i++) {
			if((iModelID = PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400) >= 0) {
				if(PlayerVehicleInfo[giveplayerid][i][pvImpounded]) {
					format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[iModelID]);
				}
				else if(PlayerVehicleInfo[giveplayerid][i][pvDisabled]) {
					format(vstring, sizeof(vstring), "%s\n%s (disabled)", vstring, VehicleName[iModelID]);
				}
				else if(!PlayerVehicleInfo[giveplayerid][i][pvSpawned]) {
					format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[iModelID]);
				}
				else format(vstring, sizeof(vstring), "%s\n%s (spawned)", vstring, VehicleName[iModelID]);
			}
			else strcat(vstring, "\nEmpty");
		}
		new string[64];
		SetPVarInt(playerid, "vehcheck_giveplayerid", giveplayerid);
		format(string, sizeof(string), "%s's Vehicle List", GetPlayerNameEx(giveplayerid));
		ShowPlayerDialog(playerid, ADMIN_VEHCHECK, DIALOG_STYLE_LIST, string, vstring, "Delete Car", "Cancel");
	}
	return 1;
}

CMD:trackcar(playerid, params[])
{
    if(GetPVarType(playerid, "RentedVehicle")) {
        ShowPlayerDialog(playerid, TRACKCAR2, DIALOG_STYLE_LIST, "Vehicle GPS Tracking", "Rented Vehicle\nOwned Vehicles", "Track", "Cancel");
	}
	else
	{
		new vstring[4096], icount = GetPlayerVehicleSlots(playerid);
		new szCarLocation[MAX_ZONE_NAME];
		for(new i, iModelID; i < icount; i++) 
		{
			if((iModelID = PlayerVehicleInfo[playerid][i][pvModelId] - 400) >= 0)
			{
				Get3DZone(PlayerVehicleInfo[playerid][i][pvPosX], PlayerVehicleInfo[playerid][i][pvPosY], PlayerVehicleInfo[playerid][i][pvPosZ], szCarLocation, sizeof(szCarLocation));
				if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
					format(vstring, sizeof(vstring), "%s\n%s (impounded) | Location: DMV", vstring, VehicleName[iModelID]);
				}
				else if(PlayerVehicleInfo[playerid][i][pvDisabled]) {
					format(vstring, sizeof(vstring), "%s\n%s (disabled) | Location: Unknown", vstring, VehicleName[iModelID]);
				}
				else if(!PlayerVehicleInfo[playerid][i][pvSpawned]) {
					format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[iModelID]);
				}
				else format(vstring, sizeof(vstring), "%s\n%s | Location: %s", vstring, VehicleName[iModelID], szCarLocation);
			}
		}
		ShowPlayerDialog(playerid, TRACKCAR, DIALOG_STYLE_LIST, "Vehicle GPS Tracking", vstring, "Track", "Cancel");
	}
	return 1;
}

CMD:makeadmin(playerid, params[])  {
	if(PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pAP] >= 2 || PlayerInfo[playerid][pHR] >= 3) {

		new
			iAdminValue,
			iTargetID;

		if(sscanf(params, "ui", iTargetID, iAdminValue)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /makeadmin [player] [level]");
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(PlayerInfo[iTargetID][pHelper] >= 1) {
				SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot make community advisors admins!");
			}
			if(PlayerInfo[iTargetID][pAdmin] == iAdminValue) return SendClientMessageEx(playerid, COLOR_GREY, "This person already has this administrator level.");
			else {

				new
					szMessage[47 + (MAX_PLAYER_NAME * 2)];

                PriorityReport[iTargetID] = TextDrawCreate(261.000000, 373.000000, "New Report");
				TextDrawBackgroundColor(PriorityReport[iTargetID], 255);
				TextDrawFont(PriorityReport[iTargetID], 2);
				TextDrawLetterSize(PriorityReport[iTargetID], 0.460000, 1.800000);
				TextDrawColor(PriorityReport[iTargetID], -65281);
				TextDrawSetOutline(PriorityReport[iTargetID], 0);
				TextDrawSetProportional(PriorityReport[iTargetID], 1);
				TextDrawSetShadow(PriorityReport[iTargetID], 1);

				
				new szRank[128];
				switch(iAdminValue) {
					case 0: format(szRank, sizeof(szRank), "AdmCmd: %s has removed %s's administrator rank.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					case 1: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s a Server Moderator.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					case 2: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s a Junior Administrator.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					case 3: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s a General Administrator.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					case 4: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s a Senior Administrator.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					case 1337: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s a Head Administrator.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					case 1338: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s a Lead Head Administrator.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					case 99999: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s an Executive Administrator.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					default: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s an undefined level administrator.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
				}	
				
				PlayerInfo[iTargetID][pAdmin] = iAdminValue;
				ABroadCast(COLOR_LIGHTRED, szRank, 2);
				Log("logs/admin.log", szMessage);
				
				switch(iAdminValue) {
					case 0: format(szRank, sizeof(szRank), "Your administrator rank has been removed by %s.", GetPlayerNameEx(playerid));
					case 1: format(szRank, sizeof(szRank), "You have been made a Server Moderator by %s.", GetPlayerNameEx(playerid));
					case 2: format(szRank, sizeof(szRank), "You have been made a Junior Administrator by %s.", GetPlayerNameEx(playerid));
					case 3: format(szRank, sizeof(szRank), "You have been made a General Administrator by %s.", GetPlayerNameEx(playerid));
					case 4: format(szRank, sizeof(szRank), "You have been made a Senior Administrator by %s.", GetPlayerNameEx(playerid));
					case 1337: format(szRank, sizeof(szRank), "You have been made a Head Administrator by %s.", GetPlayerNameEx(playerid));
					case 1338: format(szRank, sizeof(szRank), "You have been made a Lead Head Administrator by %s.", GetPlayerNameEx(playerid));
					case 99999: format(szRank, sizeof(szRank), "You have been made an Executive Administrator by %s.", GetPlayerNameEx(playerid));
					default: format(szRank, sizeof(szRank), "You have been made an undefined level administrator by %s.", GetPlayerNameEx(playerid));
				}
				SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szRank);
				
				switch(iAdminValue) {
					case 0: format(szRank, sizeof(szRank), "You have removed %s's administrator rank.", GetPlayerNameEx(iTargetID));
					case 1: format(szRank, sizeof(szRank), "You have made %s a Server Moderator.", GetPlayerNameEx(iTargetID));
					case 2: format(szRank, sizeof(szRank), "You have made %s a Junior Administrator.", GetPlayerNameEx(iTargetID));
					case 3: format(szRank, sizeof(szRank), "You have made %s a General Administrator.", GetPlayerNameEx(iTargetID));
					case 4: format(szRank, sizeof(szRank), "You have made %s a Senior Administrator.", GetPlayerNameEx(iTargetID));
					case 1337: format(szRank, sizeof(szRank), "You have made %s a Head Administrator.", GetPlayerNameEx(iTargetID));
					case 1338: format(szRank, sizeof(szRank), "You have made %s a Lead Head Administrator.", GetPlayerNameEx(iTargetID));
					case 99999: format(szRank, sizeof(szRank), "You have made %s an Executive Administrator.", GetPlayerNameEx(iTargetID));
					default: format(szRank, sizeof(szRank), "You have made %s an undefined level administrator.", GetPlayerNameEx(iTargetID));
				}
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szRank);
			}
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:unmodcar(playerid, params[]) {
	for(new d = 0; d < MAX_PLAYERVEHICLES; d++) if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId])) {
		new modList[512], string[16];
		new count = 0;
		for(new f = 0; f < MAX_MODS; f++) if(GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f) != 0) {
			if(f != 9 && f != 7 && f != 8) {
				format(modList, sizeof(modList), "%s\n%s - %s", modList, partType(f), partName(GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f)));
			}
			else format(modList, sizeof(modList), "%s\n%s", modList, partType(f));

			format(string, sizeof(string), "partList%d", count);
			SetPVarInt(playerid, string, GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f));
			count++;
		}
		if (count == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, " This vehicle does not have any modifications.");
			return 1;
		}
		format(modList, sizeof(modList), "%s\nAll", modList);
		format(string, sizeof(string), "partList%d", count);
		SetPVarInt(playerid, string, 999);
		count++;
		SetPVarInt(playerid, "modCount", count);
		return ShowPlayerDialog(playerid, UNMODCARMENU, DIALOG_STYLE_LIST, "Remove Modifications", modList, "Select", "Cancel");
	}
	SendClientMessageEx(playerid, COLOR_GREY, " You need to be inside a vehicle that you own.");
 	return 1;
}

CMD:deletecar(playerid, params[])
{
	new vstring[1024], icount = GetPlayerVehicleSlots(playerid);
	for(new i, iModelID; i < icount; i++) {
		if((iModelID = PlayerVehicleInfo[playerid][i][pvModelId] - 400) >= 0)
		{
			if(PlayerVehicleInfo[playerid][i][pvImpounded]) format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[iModelID]);
			else if(PlayerVehicleInfo[playerid][i][pvDisabled]) format(vstring, sizeof(vstring), "%s\n%s (disabled)", vstring, VehicleName[iModelID]);
			else if(!PlayerVehicleInfo[playerid][i][pvSpawned]) format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[iModelID]);
			else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[iModelID]);
		}
		else strcat(vstring, "\nEmpty");
	}
	return ShowPlayerDialog(playerid, DIALOG_DELETECAR, DIALOG_STYLE_LIST, "Delete Vehicle", vstring, "Delete", "Cancel");
}

CMD:parktrailer(playerid, params[]) {
	for(new i = 0, Float: fVehiclePos[4], iVehicleID; i != MAX_PLAYERVEHICLES; ++i) switch(GetVehicleModel((iVehicleID = PlayerVehicleInfo[playerid][i][pvId]))) {
		case 435, 450, 584, 591, 606, 607, 608, 610, 611: {
			GetVehiclePos(iVehicleID, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
			if(IsPlayerInRangeOfPoint(playerid, 10.0, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2])) {

				new
					szMessage[64];

				GetVehicleZAngle(iVehicleID, fVehiclePos[3]);
				UpdatePlayerVehicleParkPosition(playerid, i, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2], fVehiclePos[3], 1000.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

				format(szMessage, sizeof szMessage, "* %s has parked their trailer.", GetPlayerNameEx(playerid));
				return ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
		}
	}
	return 1;
}

CMD:park(playerid, params[])
{
	new
		iVehicle = GetPlayerVehicleID(playerid),
		iBusiness = GetCarBusiness(iVehicle),
		Float: XYZ[4];

    if(iVehicle == GetPVarInt(playerid, "RentedVehicle"))
	{
	    new Float:x, Float:y, Float:z, Float:health;
		GetVehicleHealth(iVehicle, health);
  		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the driver seat.");
		if(health < 800) return SendClientMessageEx(playerid, COLOR_GREY, " Your vehicle is too damaged to park it.");
		if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
		GetPlayerPos(playerid, x, y, z);

		SetTimerEx("ParkRentedVehicle", 1000, false, "iiifff", playerid, iVehicle, GetVehicleModel(iVehicle), x, y, z);
		SendClientMessageEx (playerid, COLOR_YELLOW, "Do not move to have your vehicle parked!");
		return 1;
	}
	if (iVehicle != 0 && iBusiness != INVALID_BUSINESS_ID)
	{
	 	if (iBusiness != PlayerInfo[playerid][pBusiness]) return SendClientMessageEx(playerid, COLOR_WHITE, "You're not authorized to park this vehicle.");
		new
			iSlot = GetBusinessCarSlot(iVehicle);

		GetVehiclePos(iVehicle, XYZ[0], XYZ[1], XYZ[2]);
		GetVehicleZAngle(iVehicle, XYZ[3]);

		Businesses[iBusiness][bParkPosX][iSlot] = XYZ[0];
		Businesses[iBusiness][bParkPosY][iSlot] = XYZ[1];
		Businesses[iBusiness][bParkPosZ][iSlot] = XYZ[2];
		Businesses[iBusiness][bParkAngle][iSlot] = XYZ[3];

		DestroyVehicle(Businesses[iBusiness][bVehID][iSlot]);
		Businesses[iBusiness][bVehID][iSlot] = CreateVehicle(Businesses[iBusiness][bModel][iSlot], Businesses[iBusiness][bParkPosX][iSlot], Businesses[iBusiness][bParkPosY][iSlot], Businesses[iBusiness][bParkPosZ][iSlot],
		Businesses[iBusiness][bParkAngle][iSlot], 0, 0, -1);

        SaveDealershipVehicle(iBusiness, iSlot);
		SendClientMessageEx(playerid, COLOR_WHITE, "You've parked this vehicle.");
		return 1;
	}

	if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
		new ownerid = PlayerInfo[playerid][pVehicleKeysFrom];
		if(IsPlayerConnected(ownerid))
		{
			new d = PlayerInfo[playerid][pVehicleKeys];
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[ownerid][d][pvId]))
			{
			    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the driver seat.");
				new Float:x, Float:y, Float:z, Float:health;
				GetVehicleHealth(PlayerVehicleInfo[ownerid][d][pvId], health);
				if(health < 800) return SendClientMessageEx(playerid, COLOR_GREY, " Your vehicle is too damaged to park it.");
				if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;

                GetPlayerPos(playerid, x, y, z);
                SetTimerEx("ParkVehicle", 1000, false, "iiiifff", playerid, ownerid, PlayerVehicleInfo[ownerid][d][pvId], d, x, y, z);
                SendClientMessageEx (playerid, COLOR_YELLOW, "Do not move to have your vehicle parked!");
				return 1;
			}
		}
	}
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
		{
			new Float:x, Float:y, Float:z, Float:health;
			GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the driver seat.");
			if(health < 800) return SendClientMessageEx(playerid, COLOR_GREY, " Your vehicle is too damaged to park it.");
			if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
			GetPlayerPos(playerid, x, y, z);

   			SetTimerEx("ParkVehicle", 1000, false, "iiiifff", playerid, INVALID_PLAYER_ID, PlayerVehicleInfo[playerid][d][pvId], d, x, y, z);
      		SendClientMessageEx (playerid, COLOR_YELLOW, "Do not move to have your vehicle parked!");
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "You need to be inside a vehicle that you own.");
	return 1;
}

CMD:apark(playerid, params[]) {
    if (PlayerInfo[playerid][pAdmin] >= 3)
	{
        //foreach(new ownerid: Player)
		for(new ownerid = 0; ownerid < MAX_PLAYERS; ++ownerid)
		{
			if(IsPlayerConnected(ownerid))
			{
				for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
				{
					if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[ownerid][d][pvId]))
					{
						if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the driver seat.");
						new Float:x, Float:y, Float:z, Float:angle, Float:health;
						if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
						if(IsARC(GetPlayerVehicleID(playerid))) // RC Vehicles
						{
							new Float:vehPos[3];
							GetVehiclePos(GetPlayerVehicleID(playerid),vehPos[0], vehPos[1], vehPos[2]);
							SetPlayerPos(playerid,vehPos[0], vehPos[1]+0.5, vehPos[2]+0.5);
						}
						GetVehicleHealth(PlayerVehicleInfo[ownerid][d][pvId], health);
						GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
						GetVehicleZAngle(PlayerVehicleInfo[ownerid][d][pvId], angle);
						SurfingCheck(GetPlayerVehicleID(playerid));
						UpdatePlayerVehicleParkPosition(ownerid, d, x, y, z, angle, health, GetPlayerVirtualWorld(ownerid), GetPlayerInterior(ownerid));
						IsPlayerEntering{playerid} = true;
						PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
						SetPlayerArmedWeapon(playerid, 0);

						new szMessage[128];

						format(szMessage, sizeof(szMessage),"* You have parked %s's %s.",GetPlayerNameEx(ownerid), VehicleName[PlayerVehicleInfo[ownerid][d][pvModelId] - 400]);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

						format(szMessage, sizeof(szMessage), "Your %s has been parked at another location by an admin. Use /trackcar to find it.", VehicleName[PlayerVehicleInfo[ownerid][d][pvModelId] - 400]);
						SendClientMessageEx(ownerid, COLOR_LIGHTBLUE, szMessage);
						return 1;
					}
				}
			}	
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:a(playerid, params[]) {
	return cmd_admin(playerid, params);
}

CMD:admin(playerid, params[])  {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(!isnull(params)) {

			new
				szMessage[128];

			if(PlayerInfo[playerid][pAdmin] == 2) format(szMessage, sizeof(szMessage), "* Junior Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 3) format(szMessage, sizeof(szMessage), "* General Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 4) format(szMessage, sizeof(szMessage), "* Senior Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 1337) format(szMessage, sizeof(szMessage), "* Head Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 1338) format(szMessage, sizeof(szMessage), "* Lead Head Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 99999) format(szMessage, sizeof(szMessage), "* Executive Admin %s: %s", GetPlayerNameEx(playerid), params);
			else format(szMessage, sizeof(szMessage), "* Undefined Admin (%i) %s: %s", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid), params);

			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pAdmin] >= 2)
					{
						SendClientMessage(i, COLOR_YELLOW, szMessage);
					}
				}	
			}
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/a)dmin [admin chat]");
	}
	return 1;
}

CMD:ha(playerid, params[]) {
	return cmd_headadmin(playerid, params);
}

CMD:headadmin(playerid, params[])  {
	if(PlayerInfo[playerid][pAdmin] >= 1337) {
		if(!isnull(params)) {

			new
				szMessage[128];

			if(PlayerInfo[playerid][pAdmin] == 1337) format(szMessage, sizeof(szMessage), "(PRIVATE) Head Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 1338) format(szMessage, sizeof(szMessage), "(PRIVATE) Lead Head Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 99999) format(szMessage, sizeof(szMessage), "(PRIVATE) Executive Admin %s: %s", GetPlayerNameEx(playerid), params);
			else format(szMessage, sizeof(szMessage), "(PRIVATE) Undefined Admin (%i) %s: %s", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid), params);

			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pAdmin] >= 1337)
					{
						SendClientMessage(i, COLOR_GREEN, szMessage);
					}
				}	
			}
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/ha)eadmin [Head admin+ chat]");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:staff(playerid, params[]) {
	if((PlayerInfo[playerid][pHelper] >= 2 || PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pDonateRank] == 5 || PlayerInfo[playerid][pWatchdog] >= 1) && advisorchat[playerid]) {
		if(!isnull(params)) {

			new
				szMessage[128];

			if(PlayerInfo[playerid][pAdmin] == 2) format(szMessage, sizeof(szMessage), "** Junior Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 3) format(szMessage, sizeof(szMessage), "** General Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 4) format(szMessage, sizeof(szMessage), "** Senior Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 1337) format(szMessage, sizeof(szMessage), "** Head Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 1338) format(szMessage, sizeof(szMessage), "** Lead Head Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 99999) format(szMessage, sizeof(szMessage), "** Executive Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pHelper] == 2) format(szMessage, sizeof(szMessage), "** Community Advisor %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pHelper] == 3) format(szMessage, sizeof(szMessage), "** Senior Advisor %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pHelper] >= 4) format(szMessage, sizeof(szMessage), "** Chief Advisor %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 1)
			{
				if(PlayerInfo[playerid][pSMod] != 0) format(szMessage, sizeof(szMessage), "** Senior Moderator %s: %s", GetPlayerNameEx(playerid), params);
				else format(szMessage, sizeof(szMessage), "** Server Moderator %s: %s", GetPlayerNameEx(playerid), params);
			}
			else if(PlayerInfo[playerid][pDonateRank] == 5) format(szMessage, sizeof(szMessage), "** VIP Moderator %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pWatchdog] == 1) format(szMessage, sizeof(szMessage), "** Watchdog %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pWatchdog] == 2) format(szMessage, sizeof(szMessage), "** Senior Watchdog %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pWatchdog] == 3) format(szMessage, sizeof(szMessage), "** RP Specialist %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pWatchdog] == 4) format(szMessage, sizeof(szMessage), "** Director of RP Improvement %s: %s", GetPlayerNameEx(playerid), params);
			else format(szMessage, sizeof(szMessage), "** Undefined Admin (%d) %s: %s", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid), params);

			SendAdvisorMessage(COLOR_COMBINEDCHAT, szMessage);
			Log("logs/staffchat.log", szMessage);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /staff [chat]");
	}
	return 1;
}

CMD:cnn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {
		if(!isnull(params)) {

			new
				szMessage[128];

			format(szMessage, sizeof(szMessage), "~b~%s: ~w~%s",GetPlayerNameEx(playerid), params);
			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					GameTextForPlayer(i, szMessage, 5000, 6);
				}	
			}
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cnn [message]. ~n~ = new line, ~r~ = red, ~g~ = green, ~b~ = blue, ~w~ = white, ~y~ = yellow.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:editcarspawn(playerid, params[])
{
    if(PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID) {
		SendClientMessageEx(playerid, COLOR_GREY, "You don't own a business.");
	}
	else if(Businesses[PlayerInfo[playerid][pBusiness]][bType] != BUSINESS_TYPE_NEWCARDEALERSHIP && Businesses[PlayerInfo[playerid][pBusiness]][bType] != BUSINESS_TYPE_OLDCARDEALERSHIP) {
		SendClientMessageEx(playerid, COLOR_GREY, "You don't own a vehicle dealership.");
	}
	else if(!IsPlayerInRangeOfPoint(playerid, 20.0, Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][0], Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][1], Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][2])) {
		SendClientMessageEx(playerid, COLOR_GREY, "The location needs to be near the business entrance.");
	}
	else if(PlayerInfo[playerid][pBusinessRank] < 5) {
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't high enough rank to edit the car dealership.");
	}
	else {
		new Float: Positionsz[4];
		GetPlayerPos(playerid, Positionsz[0], Positionsz[1], Positionsz[2]);
		GetPlayerFacingAngle(playerid, Positionsz[3]);
		Businesses[PlayerInfo[playerid][pBusiness]][bPurchaseX] = Positionsz[0];
		Businesses[PlayerInfo[playerid][pBusiness]][bPurchaseY] = Positionsz[1];
		Businesses[PlayerInfo[playerid][pBusiness]][bPurchaseZ] = Positionsz[2];
		Businesses[PlayerInfo[playerid][pBusiness]][bPurchaseAngle] = Positionsz[3];
		SendClientMessageEx(playerid, COLOR_WHITE, "You have moved the vehicle purchase spawn location.");
		SaveDealershipSpawn(PlayerInfo[playerid][pBusiness]);
	}
	return 1;
}

CMD:entrancefee(playerid, params[])
{
    if(PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a business.");
	}
	else if(Businesses[PlayerInfo[playerid][pBusiness]][bType] != BUSINESS_TYPE_GYM) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a gym.");
	}
	else if(!IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][0], Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][1], Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][2])) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You need to be standing near the gym entrance.");
	}
	else {
		new amount;
		if(sscanf(params, "d", amount)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /entrancefee [Price]");
		}
		else if(amount < 0 || amount > 10000) {
			return SendClientMessageEx(playerid, COLOR_GREY, "The price can't be set the price below $0 and above $10,000.");
		}

		else {
			new string[128];
			Businesses[PlayerInfo[playerid][pBusiness]][bGymEntryFee] = amount;
			format(string, sizeof(string), "You have set the gym entry fee to $%s.", number_format(amount));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			RefreshBusinessPickup(PlayerInfo[playerid][pBusiness]);
			SaveBusiness(PlayerInfo[playerid][pBusiness]);
		}
	}
	return 1;
}

CMD:editcarprice(playerid, params[])
{
    if(PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID) {
		SendClientMessageEx(playerid, COLOR_GREY, "You don't own a business.");
	}
	else if(Businesses[PlayerInfo[playerid][pBusiness]][bType] != BUSINESS_TYPE_NEWCARDEALERSHIP && Businesses[PlayerInfo[playerid][pBusiness]][bType] != BUSINESS_TYPE_OLDCARDEALERSHIP) {
		SendClientMessageEx(playerid, COLOR_GREY, "You don't own a vehicle dealership.");
	}
	else if(!IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][0], Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][1], Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][2])) {
		SendClientMessageEx(playerid, COLOR_GREY, "You need to be standing near the dealership entrance.");
	}
	else if(PlayerInfo[playerid][pBusinessRank] < Businesses[PlayerInfo[playerid][pBusiness]][bMinSupplyRank]) {
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't high enough rank to edit the car dealership.");
	}
	else {
		new vehicleid, amount;
		if(sscanf(params, "dd", vehicleid, amount)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editcarprice [VehicleID] [Price]");
		}
		else if(PlayerInfo[playerid][pBusiness] != GetCarBusiness(vehicleid)) {
			SendClientMessageEx(playerid, COLOR_GREY, "That vehicle is not part of your dealership.");
		}
		else if(amount < 0) {
			SendClientMessageEx(playerid, COLOR_GREY, "The price can't be set below 0");
		}
		else {

 			new
				iSlot = GetBusinessCarSlot(vehicleid),
				Message[128];

			Businesses[PlayerInfo[playerid][pBusiness]][bPrice][iSlot] = amount;
			format(Message, sizeof(Message), "%s For Sale | Price: $%s", GetVehicleName(Businesses[PlayerInfo[playerid][pBusiness]][bVehID][iSlot]), number_format(Businesses[PlayerInfo[playerid][pBusiness]][bPrice][iSlot]));
            UpdateDynamic3DTextLabelText(Businesses[PlayerInfo[playerid][pBusiness]][bVehicleLabel][iSlot], COLOR_LIGHTBLUE, Message);
			format(Message, sizeof(Message), "%s price has been set to $%s", GetVehicleName(vehicleid), number_format(amount));
			SendClientMessageEx(playerid, COLOR_WHITE, Message);
			SaveDealershipVehicle(PlayerInfo[playerid][pBusiness], iSlot);
		}
	}
	return 1;
}

CMD:deletecdveh(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {

		new
		    iBusiness,
			iVehicle;

		if(sscanf(params, "ii", iBusiness, iVehicle )) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /deletecdveh [business ID] [model id]");
		}
		else if(Businesses[iBusiness][bType] != BUSINESS_TYPE_NEWCARDEALERSHIP && Businesses[iBusiness][bType] != BUSINESS_TYPE_OLDCARDEALERSHIP) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Business is not a car dealership!");
		}
		else if(iBusiness != GetCarBusiness(iVehicle)) {
			SendClientMessageEx(playerid, COLOR_GREY, "That vehicle isn't a dealership vehicle.");
		}
		else {

			new
				ID = GetBusinessCarSlot(iVehicle);

			if(Businesses[iBusiness][bVehID][ID] != INVALID_VEHICLE_ID) {
			    if(IsValidDynamic3DTextLabel(Businesses[iBusiness][bVehicleLabel][ID])) DestroyDynamic3DTextLabel(Businesses[iBusiness][bVehicleLabel][ID]);
                DestroyVehicle(Businesses[iBusiness][bVehID][ID]);
               	Businesses[iBusiness][bModel][ID] = 0;
				Businesses[iBusiness][bParkPosX][ID] = 0;
  				Businesses[iBusiness][bParkPosY][ID] = 0;
			   	Businesses[iBusiness][bParkPosZ][ID] = 0;
		   	 	Businesses[iBusiness][bParkAngle][ID] = 0;
		   	 	Businesses[iBusiness][bVehID][ID] = 0;
		   	 	Businesses[iBusiness][bPrice][ID] = 0;
		   	 	SaveDealershipVehicle(iBusiness, ID);
	   	 		return 1;
       		}
			return SendClientMessageEx(playerid, COLOR_GREY, "The max number of vehicles for this business has been reached.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:createcdveh(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {

		new
		    iBusiness,
			iVehicle,
			iColors[2];

		if(sscanf(params, "iiii", iBusiness, iVehicle, iColors[0], iColors[1])) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /createcdveh [business ID] [model id] [color 1] [color 2]");
		}
		else if(!(400 <= iVehicle <= 611)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid model specified (model IDs start at 400, and end at 611).");
		}
		else if(IsATrain(iVehicle)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Trains cannot be spawned during runtime.");
		}
		else if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
		}
		else if(Businesses[iBusiness][bType] != BUSINESS_TYPE_NEWCARDEALERSHIP && Businesses[iBusiness][bType] != BUSINESS_TYPE_OLDCARDEALERSHIP) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Business is not a car dealership!");
		}
		else {

			new
				Float: fVehPos[4], label[50];

			GetPlayerPos(playerid, fVehPos[0], fVehPos[1], fVehPos[2]);
			GetPlayerFacingAngle(playerid, fVehPos[3]);
			for (new i; i < MAX_BUSINESS_DEALERSHIP_VEHICLES; i++)
			{
				if (Businesses[iBusiness][bVehID][i] == 0) {
					Businesses[iBusiness][bVehID][i] = CreateVehicle(iVehicle, fVehPos[0], fVehPos[1], fVehPos[2], fVehPos[3], iColors[0], iColors[1], -1);
					VehicleFuel[Businesses[iBusiness][bVehID][i]] = 100.0;

					Businesses[iBusiness][bModel][i] = iVehicle;

				 	Businesses[iBusiness][bParkPosX][i] = fVehPos[0];
	  				Businesses[iBusiness][bParkPosY][i] = fVehPos[1];
				   	Businesses[iBusiness][bParkPosZ][i] = fVehPos[2];
			   	 	Businesses[iBusiness][bParkAngle][i] = fVehPos[3];

					format(label, sizeof(label), "%s For Sale | Price: $%s", GetVehicleName(Businesses[iBusiness][bVehID][i]), number_format(Businesses[iBusiness][bPrice][i]));
					Businesses[iBusiness][bVehicleLabel][i] = CreateDynamic3DTextLabel(label,COLOR_LIGHTBLUE,Businesses[iBusiness][bParkPosX][i], Businesses[iBusiness][bParkPosY][i], Businesses[iBusiness][bParkPosZ][i],8.0,INVALID_PLAYER_ID, Businesses[iBusiness][bVehID][i]);

					Businesses[iBusiness][DealershipVehStock][i] = 1;
					Vehicle_ResetData(Businesses[iBusiness][bVehID][i]);
					SaveDealershipVehicle(iBusiness, i);
					return 1;
				}
			}
			return SendClientMessageEx(playerid, COLOR_GREY, "The max number of vehicles for this business has been reached.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}


CMD:veh(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {

		new
			iVehicle,
			iColors[2];

		if(sscanf(params, "iii", iVehicle, iColors[0], iColors[1])) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /veh [model ID] [color 1] [color 2]");
		}
		else if(!(400 <= iVehicle <= 611)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid model specified (model IDs start at 400, and end at 611).");
		}
		else if(IsATrain(iVehicle)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Trains cannot be spawned during runtime.");
		}
		else if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
		}
		else for(new iIterator; iIterator < sizeof(CreatedCars); iIterator++) if(iIterator >= 49) {
			return SendClientMessageEx(playerid, COLOR_GRAD1, "The maximum limit of 50 spawned vehicles has been reached.");
		}
		else if(CreatedCars[iIterator] == INVALID_VEHICLE_ID) {

			new
				Float: fVehPos[4];

			new fVW = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, fVehPos[0], fVehPos[1], fVehPos[2]);
			GetPlayerFacingAngle(playerid, fVehPos[3]);
			CreatedCars[iIterator] = CreateVehicle(iVehicle, fVehPos[0], fVehPos[1], fVehPos[2], fVehPos[3], iColors[0], iColors[1], -1);
			VehicleFuel[CreatedCars[iIterator]] = 100.0;
			Vehicle_ResetData(CreatedCars[iIterator]);
			LinkVehicleToInterior(CreatedCars[iIterator], GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(CreatedCars[iIterator], fVW);
			return SendClientMessageEx(playerid, COLOR_GREY, "Vehicle spawned!");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:cnnn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1337) {

		new
			iTextID,
			szMessage[128];

		if(sscanf(params, "is[128]", iTextID, szMessage)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cnnn [type 1-6] [message]. ~n~ = new line, ~r~ = red, ~g~ = green, ~b~ = blue, ~w~ = white, ~y~ = yellow.");
		}
		else if(!(0 <= iTextID <= 6 && iTextID != 2)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Text ID must be between 0 and 6, but not 2 (due to SA:MP bugs).");
		}
		else GameTextForAll(szMessage, 5000, iTextID);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:quitfamily(playerid, params[]) {
	return cmd_quitgang(playerid, params);
}

CMD:quitgang(playerid, params[])
{
    if(PlayerInfo[playerid][pFMember] != INVALID_FAMILY_ID)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have quit the family, you are now a civilian again.");
		new string[128], file[32], month, day, year;
		getdate(year,month,day);
		format(string, sizeof(string), "%s has quit %s as rank %i", GetPlayerNameEx(playerid), FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyName], PlayerInfo[playerid][pRank]);
		format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", PlayerInfo[playerid][pFMember], year, month, day);
		Log(file, string);
		PlayerInfo[playerid][pFMember] = INVALID_FAMILY_ID;
		PlayerInfo[playerid][pRank] = 0;
		PlayerInfo[playerid][pDivision] = -1;
		if(!IsValidSkin(GetPlayerSkin(playerid)))
		{
		    new rand = random(sizeof(CIV));
			SetPlayerSkin(playerid,CIV[rand]);
			PlayerInfo[playerid][pModel] = CIV[rand];
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
	}
	return 1;
}

CMD:warrant(playerid, params[])
{
	if(!IsAJudge(playerid))
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
  		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
  		return 1;
	}

	new string[128], crime[64], giveplayerid;
	if(sscanf(params, "us[64]", giveplayerid, crime)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /warrant [player] [crime]");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't place warrants on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
		if(!isnull(PlayerInfo[giveplayerid][pWarrant])) return SendClientMessageEx(playerid, COLOR_GRAD5, "That person has active warrants already.");
		format(PlayerInfo[giveplayerid][pWarrant], 64, crime);
		format(string, sizeof(string), "You are hereby commanded to apprehend and present to the court %s to answer the charges of:", GetPlayerNameEx(giveplayerid));
		SendGroupMessage(1, DEPTRADIO, string);
		format(string, sizeof(string), "%s", crime);
		SendGroupMessage(1, DEPTRADIO, string);
		return 1;
	}
	return 1;
}

CMD:warrantwd(playerid, params[])
{
    if(!IsAJudge(playerid))
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
  		return 1;
 	}
	if(PlayerInfo[playerid][pMember] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
  		return 1;
  	}

  	new string[128], giveplayerid;
  	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /warrantwd [player]");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't remove warrants on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
 		if(strlen(PlayerInfo[giveplayerid][pWarrant]) == 0) return SendClientMessageEx(playerid, COLOR_GRAD5, "That person doesn't have any active warrants.");
		format(PlayerInfo[giveplayerid][pWarrant], 128, "");
		format(string, sizeof(string), "You have successfully recalled %s's warrant.", GetPlayerNameEx(giveplayerid));
  		SendClientMessageEx(playerid, COLOR_GRAD2, string);
		return 1;
	}
	return 1;
}

CMD:warrantarrest(playerid, params[])
{
    new string[256];

    if(IsACop(playerid))
	{
	    if(JudgeOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_GRAD4, "There must be at least one judge online to do this!");
        if(!IsAtArrestPoint(playerid, 3))
		{
  			SendClientMessageEx(playerid, COLOR_GREY, "You aren't at a warrant arrest point.");
	    	return 1;
		}

		new suspect = GetClosestPlayer(playerid);
		if(IsPlayerConnected(suspect))
		{
			if(ProxDetectorS(5.0, playerid,suspect))
			{
				if(strlen(PlayerInfo[suspect][pWarrant]) < 1)
				{
	   				SendClientMessageEx(playerid, COLOR_GREY, "The person must have active warrants.");
				    return 1;
				}
				format(string, sizeof(string), "* You warrant arrested %s!", GetPlayerNameEx(suspect));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				ResetPlayerWeaponsEx(suspect);
				format(string, sizeof(string), "<< Defendant %s has been delivered to the courtroom pending trial by %s >>", GetPlayerNameEx(suspect), GetPlayerNameEx(playerid));
				SendGroupMessage(6, DEPTRADIO, string);
				SetPlayerInterior(suspect, 1);
				PlayerInfo[suspect][pInt] = 1;
				SetPlayerVirtualWorld(suspect, 0);
				PlayerInfo[suspect][pVW] = 0;
				new rand = random(sizeof(WarrantJail));
				SetPlayerFacingAngle(suspect, 0);
				SetPlayerPos(suspect, WarrantJail[rand][0], WarrantJail[rand][1], WarrantJail[rand][2]);
				if(rand != 0) courtjail[suspect] = 2;
				else courtjail[suspect] = 1;
				SetCameraBehindPlayer(suspect);
				DeletePVar(suspect, "IsFrozen");
				PlayerCuffed[suspect] = 0;
				DeletePVar(suspect, "PlayerCuffed");
				PlayerCuffedTime[suspect] = 0;
				PhoneOnline[suspect] = 1;
				PlayerInfo[suspect][pArrested] += 1;
				SetPlayerFree(suspect,playerid, "was warrant arrested");
				PlayerInfo[suspect][pWantedLevel] = 0;
				SetPlayerToTeamColor(suspect);
				SetPlayerWantedLevel(suspect, 0);
				WantLawyer[suspect] = 1;
				ClearAnimations(suspect);
				PlayerInfo[suspect][pBeingSentenced] = 60;
				SetPlayerColor(suspect, SHITTY_JUDICIALSHITHOTCH);
				SendClientMessageEx(suspect, COLOR_LIGHTBLUE, "You have been arrested for a pending warrant on you, you'll be attended by a judge soon.");
				Player_StreamPrep(suspect, WarrantJail[rand][0], WarrantJail[rand][1], WarrantJail[rand][2], FREEZE_TIME);
				
			}
		}
		else
		{
  			SendClientMessageEx(playerid, COLOR_GREY, "   No-one close enough to arrest.");
	    	return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not a law enforcement officer!");
   		return 1;
	}
	return 1;
}

CMD:adjourn(playerid, params[])
{
	new string[128], giveplayerid;

    if(!IsAJudge(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjourn [player]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(PlayerInfo[giveplayerid][pBeingSentenced])
	    {
	    	PlayerInfo[giveplayerid][pBeingSentenced] = 0;
	    	TogglePlayerControllable(giveplayerid, 1);
	    	DeletePVar(giveplayerid, "IsFrozen");
			PhoneOnline[giveplayerid] = 0;
			format(PlayerInfo[giveplayerid][pWarrant], 128, "");
	    	format(string, sizeof(string), "You have released %s from the courtroom.", GetPlayerNameEx(giveplayerid));
	    	SendClientMessageEx(playerid, COLOR_WHITE, string);
	    	format(string, sizeof(string), "%s has released you from the courtroom, you can now leave.", GetPlayerNameEx(playerid));
	    	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "The person needs to be on the courtroom being sentenced");
	}
	return 1;
}

CMD:sentence(playerid, params[]) {

	new giveplayerid;

    if(!IsAJudge(playerid)) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
	}
	else if(PlayerInfo[playerid][pRank] < 3) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
	}
	else if(sscanf(params, "u", giveplayerid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sentence [player]");
	}
	else if(IsPlayerConnected(giveplayerid)) {
		if(giveplayerid == playerid) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
		}
 		else if(PlayerInfo[giveplayerid][pBeingSentenced]) {
			PlayerInfo[giveplayerid][pBeingSentenced] = 0;
	    	TogglePlayerControllable(giveplayerid, 0);
	    	SetPVarInt(giveplayerid, "IsFrozen", 1);
			PhoneOnline[giveplayerid] = 1;
			PlayerInfo[giveplayerid][pWarrant][0] = 0;
			SetPlayerPos(giveplayerid, 1384.0507,-1688.8254,13.5341);
			SetPlayerInterior(giveplayerid, 0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
			new string[58 + MAX_PLAYER_NAME];
  			format(string, sizeof(string), "You have released %s from the courtroom.", GetPlayerNameEx(giveplayerid));
    		SendClientMessageEx(playerid, COLOR_WHITE, string);
	    	format(string, sizeof(string), "%s has released you from the courtroom, you can now leave.", GetPlayerNameEx(playerid));
	    	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "The person needs to be in the courtroom being sentenced.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:trial(playerid, params[])
{
	new string[128], giveplayerid;

    if(!IsAJudge(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /trial [player]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(PlayerInfo[giveplayerid][pBeingSentenced])
	    {
	    	PlayerInfo[giveplayerid][pBeingSentenced] += 10;
	    	format(string, sizeof(string), "You have extended %s's courtroom time by 10 minutes, courtroom time: %d", GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pBeingSentenced]);
	    	SendClientMessageEx(playerid, COLOR_WHITE, string);
	    	format(string, sizeof(string), "%s has extended your courtroom time by 10 minutes, courtroom time: %d", GetPlayerNameEx(playerid), PlayerInfo[giveplayerid][pBeingSentenced]);
	    	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "The person needs to be in the courtroom being sentenced");
	}
	return 1;
}

CMD:subpoena(playerid, params[])
{
	new string[128], dates[32], message[64], giveplayerid;

    if(!IsAJudge(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 1+ can do this.");
	if(sscanf(params, "us[32]s[64]", giveplayerid, dates, message)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /subpoena [player] [date] [message]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
	    SendClientMessageEx(giveplayerid, COLOR_WHITE, "|___________ Important Message from the Courts ___________|");
	    format(string, sizeof(string), "You have been summoned for a Court Appearance on the day of %s for the following reason(s): %s", dates, message);
		SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, "|_________________________________________________________|");
		format(string, sizeof(string), "You have summoned %s for a Court Appearance", GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:judgejail(playerid, params[])
{
    if(!IsAJudge(playerid))
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
  		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
  		return 1;
	}

	new string[128], giveplayerid, jailtime, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, jailtime, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /judgejail [player] [time (minutes)] [reason]");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
		if(!PlayerInfo[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_GRAD5, "That person isn't being sentenced!");
		if(jailtime < 0)
		{
			return SendClientMessageEx(playerid, COLOR_GRAD5, "Sentence must be at least 1 minute!");
		}
		if(jailtime > 360)
		{
			return SendClientMessageEx(playerid, COLOR_GRAD5, "Maximum sentence is 6 Hours / 360 Minutes");
		}
		PlayerInfo[giveplayerid][pJudgeJailType] = 1;
		PlayerInfo[giveplayerid][pJudgeJailTime] = jailtime*60;
		format(string, sizeof(string), "You have sentenced %s to fulfill %d minutes in jail, reason: %s", GetPlayerNameEx(giveplayerid), jailtime, reason);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "You have been sentenced to fulfill %d minutes in jail by %s, reason: %s", jailtime, GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		if(IsACop(giveplayerid))
		{
		    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE,"* You have been auto-removed from your faction by being sentenced to jail, you are now a civilian again.");
			PlayerInfo[giveplayerid][pMember] = INVALID_GROUP_ID;
			PlayerInfo[giveplayerid][pLeader] = INVALID_GROUP_ID;
			PlayerInfo[giveplayerid][pRank] = INVALID_RANK;
			PlayerInfo[giveplayerid][pDuty] = 0;
			if(!IsValidSkin(GetPlayerSkin(giveplayerid)))
			{
			    new rand = random(sizeof(CIV));
				SetPlayerSkin(giveplayerid,CIV[rand]);
				PlayerInfo[giveplayerid][pModel] = CIV[rand];
			}
			player_remove_vip_toys(giveplayerid);
			SetPlayerToTeamColor(giveplayerid);
			pTazer{giveplayerid} = 0;
		}
	}
	return 1;
}

CMD:judgeprison(playerid, params[])
{
    if(!IsAJudge(playerid))
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
  		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
  		return 1;
	}

	new string[128], giveplayerid, jailtime, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, jailtime, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /judgeprison [player] [time (mins)] [reason]");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(!PlayerInfo[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_GRAD5, "That person isn't being sentenced!");
		if(jailtime < 0)
		{
			return SendClientMessageEx(playerid, COLOR_GRAD5, "Sentence must be at least 1 minute!");
		}
		if(jailtime > 360)
		{
			return SendClientMessageEx(playerid, COLOR_GRAD5, "Maximum sentence is 6 Hours / 360 Minutes");
		}
		PlayerInfo[giveplayerid][pJudgeJailType] = 2;
		PlayerInfo[giveplayerid][pJudgeJailTime] = jailtime*60;
		format(string, sizeof(string), "You have sentenced %s to fulfill %d minutes in prison, reason: %s", GetPlayerNameEx(giveplayerid), jailtime, reason);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "You have been sentenced to fulfill %d minutes in prison by %s, reason: %s", jailtime, GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		if(IsACop(giveplayerid))
		{
		    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE,"* You have been auto-removed from your faction by being sentenced to jail, you are now a civilian again.");
			PlayerInfo[giveplayerid][pMember] = INVALID_GROUP_ID;
			PlayerInfo[giveplayerid][pLeader] = INVALID_GROUP_ID;
			PlayerInfo[giveplayerid][pRank] = INVALID_RANK;
			PlayerInfo[giveplayerid][pDuty] = 0;
			if(!IsValidSkin(GetPlayerSkin(giveplayerid)))
			{
			    new rand = random(sizeof(CIV));
				SetPlayerSkin(giveplayerid,CIV[rand]);
				PlayerInfo[giveplayerid][pModel] = CIV[rand];
			}
			player_remove_vip_toys(giveplayerid);
			SetPlayerToTeamColor(giveplayerid);
   			pTazer{giveplayerid} = 0;
		}
	}
	return 1;
}

CMD:judgefine(playerid, params[])
{
    if(!IsAJudge(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
  		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
  		return 1;
	}

	new giveplayerid, judgefine, reason[64], totalwealth;

	if(sscanf(params, "uds[64]", giveplayerid, judgefine, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /judgefine [player] [amount] [reason]");
	totalwealth = PlayerInfo[giveplayerid][pCash] + PlayerInfo[giveplayerid][pAccount];
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(!(1 <= judgefine <= 2000000)) return SendClientMessageEx(playerid, COLOR_GREY, "Fine amount cannot be lower than $1 or higher than $2,000,000!");
	if(totalwealth < 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "That person is already in debt - contact an administrator.");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(!PlayerInfo[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_GRAD5, "That person isn't being sentenced!");
		SetPVarInt(playerid, "judgefine", judgefine);
		SetPVarInt(playerid, "jfined", giveplayerid);
		SetPVarString(playerid, "jreason", reason);
		Group_ListGroups(playerid, DIALOG_JFINECONFIRM);
	}
	return 1;
}

CMD:probation(playerid, params[])
{
    if(!IsAJudge(playerid))
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
        return 1;
    }
    if(PlayerInfo[playerid][pRank] < 3)
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
        return 1;
    }

	new string[128], giveplayerid, probtime, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, probtime, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /probation [player] [time 1-360 Minutes] [reason and terms]");

    if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
    if(IsPlayerConnected(giveplayerid))
	{
        if(!PlayerInfo[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_GRAD5, "That person isn't being sentenced!");
        if(probtime < 1 && probtime > 360) return SendClientMessageEx(playerid, COLOR_GRAD5, "Time cannot be lower 1 minute or higher than 360 minutes!");
        PlayerInfo[giveplayerid][pProbationTime] = probtime;
        format(string, sizeof(string), "You have set %s in probation for %d minutes, reason and terms: %s", GetPlayerNameEx(giveplayerid), probtime, reason);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        format(string, sizeof(string), "You have been set in probation for %d minutes by %s, reason and terms: %s", probtime, GetPlayerNameEx(playerid), reason);
        SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:changeuserpin(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337 && PlayerInfo[playerid][pShopTech] < 2)
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
        return 1;
    }

    new string[128], accountName[20], password[64], query[512];
    if(sscanf(params, "s[20]s[64]", accountName, password))
		return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /changeuserpin [player name] [new pin]");

    if(strlen(password) > 4 || !IsNumeric(password))
        return SendClientMessageEx(playerid, COLOR_GREY, "The pin must be numbers, and must have 4 digits.");

    new passbuffer[129];
    WP_Hash(passbuffer, sizeof(passbuffer), password);

	format(string, sizeof(string), "Attempting to change %s's pin...", accountName);
    SendClientMessageEx(playerid, COLOR_YELLOW, string);

	format(string, sizeof(string), "AdmCmd: %s's pin was changed by %s.", accountName, GetPlayerNameEx(playerid));
    Log("logs/pin.log", string);

	SetPVarInt(playerid, "ChangePin", 1);

	new tmpName[24];
	mysql_escape_string(accountName, tmpName, MainPipeline);

    format(query,sizeof(query),"UPDATE `accounts` SET `Pin`='%s' WHERE `Username`='%s' AND `AdminLevel` < 2",passbuffer,tmpName);
	mysql_function_query(MainPipeline, query, false, "OnChangeUserPassword", "i", playerid);
	SetPVarString(playerid, "OnChangeUserPassword", tmpName);
	return 1;
}

CMD:changeuserpassword(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
        return 1;
    }

    new string[128], accountName[20], password[64], query[512];
    if(sscanf(params, "s[20]s[64]", accountName, password)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /changeuserpassword [player name] [new password]");

    new passbuffer[129];
    WP_Hash(passbuffer, sizeof(passbuffer), password);

	format(string, sizeof(string), "Attempting to change %s's password...", accountName);
    SendClientMessageEx(playerid, COLOR_YELLOW, string);

	format(string, sizeof(string), "AdmCmd: %s's password was changed by %s.", accountName, GetPlayerNameEx(playerid));
    Log("logs/password.log", string);

	new tmpName[24];
	mysql_escape_string(accountName, tmpName, MainPipeline);

    format(query,sizeof(query),"UPDATE `accounts` SET `Key`='%s' WHERE `Username`='%s' AND `AdminLevel` < 2",passbuffer,tmpName);
	mysql_function_query(MainPipeline, query, false, "OnChangeUserPassword", "i", playerid);
	SetPVarString(playerid, "OnChangeUserPassword", tmpName);
	return 1;
}

CMD:writecheck(playerid, params[])
{
	new string[128], giveplayerid, monies, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, monies, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /writecheck [Playerid/PartOfName] [Amount] [Reason]");

    if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
    if(monies > 1000 && PlayerInfo[playerid][pLevel] < 3)
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You must be level 3 to write a check for greater then 1000$ !");
        return 1;
    }
    if(monies < 1 || monies > 100000)
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You can't write a check for under 1$ or over 100,000$ !");
        return 1;
    }
	if(PlayerInfo[playerid][pCash] < 0 || PlayerInfo[playerid][pAccount] < 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Your cash on-hand or in the bank is currently at a negative value!");
	}
    if(PlayerInfo[playerid][pChecks] == 0)
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You must have a checkbook to write a check !");
        return 1;
    }
    if(gettime()-GetPVarInt(playerid, "LastTransaction") < 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only make a transaction once every 10 seconds, please wait!");
    if(strlen(reason) > 64) return SendClientMessageEx(playerid, COLOR_GRAD1, "Check details may not be longer than 64 characters in length.");
    if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You can't write a check to yourself!"); return 1; }
    if(ProxDetectorS(5.0, playerid, giveplayerid))
	{
     	new playermoney = PlayerInfo[playerid][pAccount];
      	if(monies > 0 && playermoney >= monies)
		{
			GivePlayerCashEx(playerid, TYPE_BANK, -monies);
			GivePlayerCashEx(giveplayerid, TYPE_BANK, monies);
			/*PlayerInfo[playerid][pAccount] = PlayerInfo[playerid][pAccount] - monies;
     		PlayerInfo[giveplayerid][pCheckCash] = PlayerInfo[giveplayerid][pCheckCash]+monies;*/
       		if(PlayerInfo[playerid][pDonateRank] == 0)
			{
   				new fee = (monies*8)/100;
       			GivePlayerCash(playerid, (0 - fee));
          		format(string, sizeof(string), "   You have written a check for $%d to %s (for %s) and have been charged an 8 percent fee.",monies,GetPlayerNameEx(giveplayerid),reason);
            	SendClientMessageEx(playerid, COLOR_GRAD1, string);
             	PlayerInfo[playerid][pChecks]--;
              	format(string, sizeof(string), "   You now have %d checks left.",PlayerInfo[playerid][pChecks]);
               	SendClientMessageEx(playerid, COLOR_GRAD1, string);
      		}
          	else
			{
   				format(string, sizeof(string), "   You have written a check for $%d to %s (for %s) and have not been charged the 8 percent fee.",monies,GetPlayerNameEx(giveplayerid),reason);
       			SendClientMessageEx(playerid, COLOR_GRAD1, string);
          		PlayerInfo[playerid][pChecks]--;
            	format(string, sizeof(string), "   You now have %d checks left.",PlayerInfo[playerid][pChecks]);
             	SendClientMessageEx(playerid, COLOR_GRAD1, string);
			}
   			format(string, sizeof(string), "   You have recieved a check for $%d from %s for: %s", monies,GetPlayerNameEx(playerid),reason);
      		SendClientMessageEx(giveplayerid, COLOR_GRAD1, string);
        	format(string, sizeof(string), "* %s takes out a checkbook, fills out a check and hands it to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
         	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
          	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
           	PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
           	SetPVarInt(playerid, "LastTransaction", gettime());

           	/*OnPlayerStatsUpdate(playerid);
			OnPlayerStatsUpdate(giveplayerid);*/

			new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
 			format(string, sizeof(string), "[CHECK] %s (IP:%s) has paid $%s to %s (IP:%s)", GetPlayerNameEx(playerid), ip, number_format(monies), GetPlayerNameEx(giveplayerid), ipex);
  			Log("logs/pay.log", string);
		}
  		else
		{
  			SendClientMessageEx(playerid, COLOR_GRAD1, "   Invalid transaction amount, or you do not have enough money to give that much!");
     	}
	}
 	else
	{
 		SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
   	}
    return 1;
}

CMD:bug(playerid, params[])
{
	if (PlayerInfo[playerid][pMember] != INVALID_GROUP_ID && PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iBugAccess])
	{
        new
			iTargetID;

        if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /bug [player]");
		}
        else if(PlayerInfo[iTargetID][pAdmin] >= 2) {
			SendClientMessageEx(playerid, COLOR_GREY, "You cannot place bugs on admins.");
		}
		else if(GetPVarInt(iTargetID, "AdvisorDuty") == 1) {
    		SendClientMessageEx(playerid, COLOR_GREY, "You cannot place bugs on advisors while they are on duty.");
		}
  		else if(PlayerInfo[iTargetID][pBugged] != INVALID_GROUP_ID) {

			new
				szMessage[32 + MAX_PLAYER_NAME];

    		PlayerInfo[iTargetID][pBugged] = INVALID_GROUP_ID;
     		format(szMessage,sizeof(szMessage),"The bug on %s has been disabled.", GetPlayerNameEx(iTargetID));
       		SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
		}
		else if(ProxDetectorS(4.0, playerid, iTargetID)) {

			new
				szMessage[28 + MAX_PLAYER_NAME];

			PlayerInfo[iTargetID][pBugged] = PlayerInfo[playerid][pMember];
	    	format(szMessage,sizeof(szMessage),"You have placed a bug on %s.",GetPlayerNameEx(iTargetID));
		    SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "You need to be close to the person.");
	} else SendClientMessageEx(playerid, COLOR_GREY, "You do not have access to this radio frequency.");
	return 1;
}

CMD:checkreportcount(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], adminname[MAX_PLAYER_NAME], tdate[11];
		if(sscanf(params, "s[24]s[11]", adminname, tdate)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /checkreportcount [admin name] [date (YYYY-MM-DD)]");
		new giveplayerid = ReturnUser(adminname);
		if(IsPlayerConnected(giveplayerid))
		{
			format(string, sizeof(string), "SELECT SUM(count) FROM `tokens_report` WHERE `playerid` = %d AND `date` = '%s'", GetPlayerSQLId(giveplayerid), tdate);
			mysql_function_query(MainPipeline, string, true, "QueryCheckCountFinish", "issi", playerid, GetPlayerNameEx(giveplayerid), tdate, 0);
			format(string, sizeof(string), "SELECT `count`, `hour` FROM `tokens_report` WHERE `playerid` = %d AND `date` = '%s' ORDER BY `hour` ASC", GetPlayerSQLId(giveplayerid), tdate);
			mysql_function_query(MainPipeline, string, true, "QueryCheckCountFinish", "issi", playerid, GetPlayerNameEx(giveplayerid), tdate, 1);
		}
		else
		{
			new tmpName[MAX_PLAYER_NAME];
			mysql_escape_string(adminname, tmpName);
			format(string, sizeof(string), "SELECT `id`, `Username` FROM `accounts` WHERE `Username` = '%s'", tmpName);
			mysql_function_query(MainPipeline, string, true, "QueryUsernameCheck", "isi", playerid, tdate, 0);
		}
    }
    return 1;
}

CMD:checkrequestcount(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pPR] > 0)
	{
		new string[128], adminname[MAX_PLAYER_NAME], tdate[11];
		if(sscanf(params, "s[24]s[11]", adminname, tdate)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /checkrequestcount [advisor name] [date (YYYY-MM-DD)]");
		new giveplayerid = ReturnUser(adminname);
		if(IsPlayerConnected(giveplayerid))
		{
			format(string, sizeof(string), "SELECT SUM(count) FROM `tokens_request` WHERE `playerid` = %d AND `date` = '%s'", GetPlayerSQLId(giveplayerid), tdate);
			mysql_function_query(MainPipeline, string, true, "QueryCheckCountFinish", "issi", playerid, GetPlayerNameEx(giveplayerid), tdate, 2);
			format(string, sizeof(string), "SELECT `count`, `hour` FROM `tokens_request` WHERE `playerid` = %d AND `date` = '%s' ORDER BY `hour` ASC", GetPlayerSQLId(giveplayerid), tdate);
			mysql_function_query(MainPipeline, string, true, "QueryCheckCountFinish", "issi", playerid, GetPlayerNameEx(giveplayerid), tdate, 3);
		}
		else
		{
			new tmpName[MAX_PLAYER_NAME];
			mysql_escape_string(adminname, tmpName);
			format(string, sizeof(string), "SELECT `id`, `Username` FROM `accounts` WHERE `Username` = '%s'", tmpName);
			mysql_function_query(MainPipeline, string, true, "QueryUsernameCheck", "isi", playerid, tdate, 1);
		}
    }
    return 1;
}

CMD:carkeys(playerid, params[])
{
    new vstring[4096], iValidVehicles;
	for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	{
	    if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID) {
	        if(PlayerVehicleInfo[playerid][i][pvAllowedPlayerId] != INVALID_PLAYER_ID) {
				format(vstring, sizeof(vstring), "%s\n%s | Keys: %s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], GetPlayerNameEx(PlayerVehicleInfo[playerid][i][pvAllowedPlayerId])), ++iValidVehicles;
			}
			else {
                format(vstring, sizeof(vstring), "%s\n%s | Keys: No-one", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			}
		}
        else if((PlayerVehicleInfo[playerid][i][pvImpounded] == 1 || PlayerVehicleInfo[playerid][i][pvSpawned] == 0) && PlayerVehicleInfo[playerid][i][pvModelId] != 0) {
            format(vstring, sizeof(vstring), "%s\n%s | Keys: Unavailable", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
		}
        else {
			format(vstring, sizeof(vstring), "%s\nEmpty", vstring);
		}
	}
	if(iValidVehicles != 0)
	{
		ShowPlayerDialog(playerid, REMOVEKEYS, DIALOG_STYLE_LIST, "Please select a vehicle.", vstring, "Remove Keys", "Cancel");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have any keys given out.");
	}
	return 1;
}

CMD:sb(playerid, params[]) return cmd_seatbelt(playerid, params);

CMD:seatbelt(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) == 0)
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in a vehicle!");
        return 1;
    }
	new string[60 + MAX_PLAYER_NAME];
    if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 0)
	{
        Seatbelt[playerid] = 1;
        if(IsABike(GetPlayerVehicleID(playerid)))
		{
            format(string, sizeof(string), "{FF8000}** {C2A2DA}%s reaches for their helmet, and puts it on.", GetPlayerNameEx(playerid));
            SendClientMessageEx(playerid, COLOR_WHITE, "You have put on your helmet.");
        }
        else
		{
            format(string, sizeof(string), "{FF8000}** {C2A2DA}%s reaches for their seatbelt, and buckles it up.", GetPlayerNameEx(playerid));
            SendClientMessageEx(playerid, COLOR_WHITE, "You have put on your seatbelt.");
        }

    }
    else if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 1)
	{
        Seatbelt[playerid] = 0;
        if(IsABike(GetPlayerVehicleID(playerid)))
		{
            format(string, sizeof(string), "{FF8000}** {C2A2DA}%s reaches for their helmet, and takes it off.", GetPlayerNameEx(playerid));
            SendClientMessageEx(playerid, COLOR_WHITE, "You have taken off your helmet.");
        }
        else
		{
            format(string, sizeof(string), "{FF8000}** {C2A2DA}%s reaches for their seatbelt, and unbuckles it.", GetPlayerNameEx(playerid));
            SendClientMessageEx(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
        }
    }
    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    return 1;
}

CMD:cb(playerid, params[]) return cmd_checkbelt(playerid, params);

CMD:checkbelt(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /checkbelt [player]");

    if(GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT)
	{
        SendClientMessageEx(playerid,COLOR_GREY,"That person is not in any vehicle!");
        return 1;
    }
    if (ProxDetectorS(9.0, playerid, giveplayerid))
	{
		new string[128];
        new stext[4];
        if(Seatbelt[giveplayerid] == 0) { stext = "off"; }
        else { stext = "on"; }
        if(IsABike(GetPlayerVehicleID(playerid)))
		{
            format(string, sizeof(string), "%s's helmet is currently %s." , GetPlayerNameEx(giveplayerid) , stext);
            SendClientMessageEx(playerid,COLOR_WHITE,string);

            format(string, sizeof(string), "* %s looks at %s, checking to see if they are wearing a helmet.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else
		{
            format(string, sizeof(string), "%s's seat belt is currently %s." , GetPlayerNameEx(giveplayerid) , stext);
            SendClientMessageEx(playerid,COLOR_WHITE,string);

            format(string, sizeof(string), "* %s peers through the window at %s, checking to see if they are wearing a seatbelt.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
    }
    else { SendClientMessageEx(playerid, COLOR_GREY, "You are not around that player!"); }
    return 1;
}

CMD:givekeys(playerid, params[])
{
	new
		giveplayerid;

    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givekeys [player]");
    if(IsPlayerConnected(giveplayerid))
	{
        if(playerid == giveplayerid) return 1;
        if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
            new
				iValidVehicles,
				vstring[4096];

			for(new i; i < MAX_PLAYERVEHICLES; i++) if(PlayerVehicleInfo[playerid][i][pvModelId] >= 400)
			{
				if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
					format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else if(PlayerVehicleInfo[playerid][i][pvDisabled] == 1)
					format(vstring, sizeof(vstring), "%s\n%s (disabled)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else if(PlayerVehicleInfo[playerid][i][pvSpawned] == 0)
					format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else
					format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]), ++iValidVehicles;
			}
			else strcat(vstring, "\nEmpty");
            if(iValidVehicles != 0)
			{
                GiveKeysTo[playerid] = giveplayerid;
                ShowPlayerDialog(playerid, GIVEKEYS, DIALOG_STYLE_LIST, "Please select a vehicle.", vstring, "Give Keys", "Cancel");
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have any vehicles for which you can give out keys.");
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GRAD1, "You're not close enough to that player.");
        }
    }
    return 1;
}

CMD:deliverpt(playerid, params[])
{
    if(IsAMedic(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
			new string[128], giveplayerid;
		    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /deliverpt [player]");

            new carid = GetPlayerVehicleID(playerid);
            new caridex = GetPlayerVehicleID(giveplayerid);
            if(IsAnAmbulance(carid))
			{
                if(carid == caridex)
				{
                    if(IsAtDeliverPatientPoint(playerid))
					{
                        if(playerid == giveplayerid)
						{
                            SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot deliver yourself to the hospital!");
                            return 1;
                        }
                        if(GetPVarInt(giveplayerid, "Injured") == 0)
						{
                            return SendClientMessageEx(playerid, COLOR_GRAD2, "That person is not injured!");
                        }
                        if(playerTabbed[giveplayerid] >= 1)
						{
                            SendClientMessageEx(playerid, COLOR_GRAD2, "That person is paused, you can't currently deliver him!");
                            return 1;
                        }
                        SetPlayerHealth(giveplayerid, 100);
                        if(GetPVarType(giveplayerid, "STD"))
						{
							DeletePVar(giveplayerid, "STD");
                            SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "* You are no longer infected with a STD anymore because of the hospital's help!");
                        }
                        GivePlayerCash(giveplayerid, -1000);
                        Tax += 1000;
                        GivePlayerCash(playerid,5000);
                        KillEMSQueue(giveplayerid);
                        SetPVarInt(giveplayerid, "MedicBill", 0);
                        SendClientMessageEx(giveplayerid, TEAM_CYAN_COLOR, "Doc: Your medical bill comes in at $1000. Have a nice day!");
                        format(string,sizeof(string),"You received $5000 for successfully delivering the patient!");
                        SendClientMessageEx(playerid, TEAM_CYAN_COLOR, string);
                        SetPlayerPos(giveplayerid, 1169.7588,-1351.5490,2423.0461);
                        Streamer_UpdateEx(giveplayerid, 1169.7588,-1351.5490,2423.0461);
                        Player_StreamPrep(giveplayerid, 1169.7588,-1351.5490,2423.0461,FREEZE_TIME);
                        SetPlayerInterior(giveplayerid, 1);
                        PlayerInfo[giveplayerid][pInt] = 1;
                        PlayerInfo[playerid][pPatientsDelivered]++;
                        format(string, sizeof(string), "EMS Driver %s has successfully delivered Patient %s to the hospital.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						SendGroupMessage(3, TEAM_MED_COLOR, string);
						PlayerInfo[giveplayerid][pHydration] = 100;
						new Float:X, Float:Y, Float:Z;
                        GetDynamicObjectPos(Carrier[0], X, Y, Z);
                        if(IsPlayerInRangeOfPoint(playerid, 5.0,1142.4733,-1326.3633,13.6259) || IsPlayerInRangeOfPoint(playerid, 5.0, 1165.1564,-1368.8240,26.6502)) // All Saints
						{
                            SetPlayerVirtualWorld(giveplayerid, 2);
                            PlayerInfo[giveplayerid][pVW] = 2;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,2027.0599,-1410.6870,16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2024.5742,-1382.7844,48.3359)) // County General
					 	{
                            SetPlayerVirtualWorld(giveplayerid, 1);
                            PlayerInfo[giveplayerid][pVW] = 1;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,1227.2339,306.4730,19.7028) || IsPlayerInRangeOfPoint(playerid, 5.0, 1233.3384,316.4022,24.7578)) // Montgomery
						{
                            SetPlayerVirtualWorld(giveplayerid, 5);
                            PlayerInfo[giveplayerid][pVW] = 5;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,-339.2989,1055.8138,19.7392) || IsPlayerInRangeOfPoint(playerid, 5.0, -334.1560,1051.4434,26.0125)) // Fort Carson
						{
                            SetPlayerVirtualWorld(giveplayerid, 4);
                            PlayerInfo[giveplayerid][pVW] = 4;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,-2695.5725,639.4147,14.4531) || IsPlayerInRangeOfPoint(playerid, 5.0, -2656.0339,615.2567,66.0938)) // SF
						{
                            SetPlayerVirtualWorld(giveplayerid, 6);
                            PlayerInfo[giveplayerid][pVW] = 6;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 250,X, Y, Z))
						{
                            SetPlayerVirtualWorld(giveplayerid, 7);
                            PlayerInfo[giveplayerid][pVW] = 7;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,-1528.814331, 2540.706054, 55.835937)) // El Quebrados
						{
                            SetPlayerVirtualWorld(giveplayerid, 99);
                            PlayerInfo[giveplayerid][pVW] = 99;
                        }
						else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1579.58,1768.88,10.82)) // LV
						{
							SetPlayerVirtualWorld(giveplayerid, 11720);
							PlayerInfo[giveplayerid][pVW] = 11720;
						}
						else if(IsPlayerInRangeOfPoint(playerid, 5.0, 225.3467,1981.8497,17.6406)) // Demorgan
						{
							SetPlayerVirtualWorld(giveplayerid, 13);
							PlayerInfo[giveplayerid][pVW] = 13;
						}
						else if(IsPlayerInRangeOfPoint(playerid, 5.0, -2482.4338,2231.1106,4.8463)) // TR - Bayside
						{
							SetPlayerVirtualWorld(giveplayerid, 14);
							PlayerInfo[giveplayerid][pVW] = 14;
						}
                    }
                    else
					{
                        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not near a deliver point - look out near the hospitals.");
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_GRAD2, "Patient must be in your car in order to deliver him.");
                }
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in an FDSA vehicle.");
            }
        }
    }
    return 1;
}

CMD:loadpt(playerid, params[])
{
    if(IsAMedic(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            SendClientMessageEx(playerid, COLOR_GREY, "   Cannot use this while you're in a car!");
            return 1;
        }

        new string[128], giveplayerid, seat;
        if(sscanf(params, "ud", giveplayerid, seat)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /loadpt [player] [seatid]");

        if(IsPlayerConnected(giveplayerid))
		{
            if(giveplayerid != INVALID_PLAYER_ID)
			{
                if(!(2 <= seat <= 3))
				{
                    SendClientMessageEx(playerid, COLOR_GRAD1, "The seat ID cannot be above 3 or below 2.");
                    return 1;
                }
                if(GetPVarInt(giveplayerid, "Injured") != 1)
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "That patient not injured - you can't load them.");
                    return 1;
                }
                if(IsPlayerInAnyVehicle(giveplayerid))
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "That patient is inside a car - you can't load them.");
                    return 1;
                }
                if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
                    if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot load yourself!"); return 1; }
                    if(PlayerInfo[giveplayerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command on jailed players.");
                    new carid = gLastCar[playerid];
                    if(IsAnAmbulance(carid))
					{
                        if(IsVehicleOccupied(carid, seat)) {
							SendClientMessageEx(playerid, COLOR_GREY, "That seat is occupied.");
							return 1;
						}
						if(IsPlayerInRangeOfVehicle(giveplayerid, carid, 10.0) && IsPlayerInRangeOfVehicle(playerid, carid, 10.0)) {
							format(string, sizeof(string), "* You were loaded by paramedic %s.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* You loaded patient %s.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s loads %s in the ambulance.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SetPVarInt(giveplayerid, "EMSAttempt", 3);
							ClearAnimations(giveplayerid);
							IsPlayerEntering{giveplayerid} = true;
							PutPlayerInVehicle(giveplayerid,carid,seat);
							TogglePlayerControllable(giveplayerid, false);
						}
						else SendClientMessageEx(playerid, COLOR_GREY, "Both you and your patient must be near the ambulance.");
                    }
                    else
					{
                        SendClientMessageEx(playerid, COLOR_GRAD2, "Your last car needs to be an ambulance!");
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_GREY, " You're not close enough to the person or your car!");
                    return 1;
                }
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
            return 1;
        }
    }
    else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not a medic!");
    }
    return 1;
}

CMD:triage(playerid, params[])
{
    if(IsAMedic(playerid))
	{
 		if(PlayerInfo[playerid][pTriageTime] != 0)
   		{
     		SendClientMessageEx(playerid, COLOR_GREY, "You must wait for 2 minutes to use this command.");
       		return 1;
	    }

	    new string[128], giveplayerid;
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /triage [player]");

   		if(IsPlayerConnected(giveplayerid))
   		{
    	    if(playerid == giveplayerid) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command on yourself.");
    	    if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
	    	    new Float: health;
	    	    GetPlayerHealth(giveplayerid, health);
	    	    if(health >= 85) SetPlayerHealth(giveplayerid, 100);
				else SetPlayerHealth(giveplayerid, health+15.0);
	    	    format(string, sizeof(string), "* %s has given %s 15 health.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	    	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[playerid][pTriageTime] = 120;
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
			}
 		}
	}
	return 1;
}

CMD:dmvrelease(playerid, params[]) {
	if(IsACop(playerid) || IsATowman(playerid))
    {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 833.60, 3.23, 1004.17)) {

			new
				iTargetID;

			if(sscanf(params, "u", iTargetID)) {
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dmvrelease [player]");
			}
			else if(IsPlayerConnected(iTargetID)) {

				new
					vstring[4096],
					iCount,
					pVehSlots = GetPlayerVehicleSlots(iTargetID);
					
				for(new i; i < pVehSlots; i++) {
					if(PlayerVehicleInfo[iTargetID][i][pvPrice] < 1) PlayerVehicleInfo[iTargetID][i][pvPrice] = 2000000;
					if(PlayerVehicleInfo[iTargetID][i][pvId] > INVALID_PLAYER_VEHICLE_ID) {
						if(PlayerVehicleInfo[iTargetID][i][pvTicket]) {
							format(vstring, sizeof(vstring), "%s\n%s (ticket - $%i)", vstring, VehicleName[PlayerVehicleInfo[iTargetID][i][pvModelId] - 400], PlayerVehicleInfo[iTargetID][i][pvTicket]);
							++iCount;
						}
						else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[iTargetID][i][pvModelId] - 400]);
					}	
					else if(PlayerVehicleInfo[iTargetID][i][pvImpounded]) {
						format(vstring, sizeof(vstring), "%s\n%s (impounded - $%i release)", vstring, VehicleName[PlayerVehicleInfo[iTargetID][i][pvModelId] - 400], (PlayerVehicleInfo[iTargetID][i][pvPrice] / 20) + PlayerVehicleInfo[iTargetID][i][pvTicket] + (PlayerInfo[iTargetID][pLevel] * 3000));
						++iCount;
					}
					else format(vstring, sizeof(vstring), "%s\nNone", vstring);
				}
				if(iCount) ShowPlayerDialog(playerid, MPSPAYTICKETSCOP, DIALOG_STYLE_LIST, "Vehicles", vstring, "Release", "Cancel"), SetPVarInt(playerid, "vRel", iTargetID);
				else SendClientMessageEx(playerid, COLOR_GRAD2, "This person doesn't have any tickets to be paid or vehicles to be released.");
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "You are not at the DMV release point in Dillimore (inside the DMV).");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
	return 1;
}

CMD:dmvmenu(playerid, params[])
{
	new vstring[1024], icount, icountz = GetPlayerVehicleSlots(playerid);
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 833.60, 3.23, 1004.17)) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not at the DMV release point in Dillimore (inside the DMV).");
	if(PlayerInfo[playerid][pFreezeCar] != 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot do this while having your assets frozen!");
	if(PlayerInfo[playerid][pCarLic] == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "A valid driver's license is required to release your vehicle from the impound, or pay any tickets.");
	
	for(new i; i < icountz; i++) {
		if(PlayerVehicleInfo[playerid][i][pvPrice] < 1) PlayerVehicleInfo[playerid][i][pvPrice] = 2000000;
		if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID) {
			if(PlayerVehicleInfo[playerid][i][pvTicket]) {
				format(vstring, sizeof(vstring), "%s\n%s (ticket - $%i)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], PlayerVehicleInfo[playerid][i][pvTicket]);
				++icount;
			}
			else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
		}	
		else if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
			format(vstring, sizeof(vstring), "%s\n%s (impounded - $%i release)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], (PlayerVehicleInfo[playerid][i][pvPrice] / 20) + PlayerVehicleInfo[playerid][i][pvTicket] + (PlayerInfo[playerid][pLevel] * 3000));
			++icount;
		}
		else format(vstring, sizeof(vstring), "%s\nNone", vstring);
	}	
	if(icount) {
		ShowPlayerDialog(playerid, MPSPAYTICKETS, DIALOG_STYLE_LIST, "Vehicles", vstring, "Release", "Cancel");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have any tickets to be paid or vehicles to be released.");
	return 1;
}

CMD:vmdc(playerid, params[])
{
    if(IsACop(playerid) || IsATowman(playerid) || PlayerInfo[playerid][pAdmin] >= 2)
    {
        new string[128], giveplayerid;
        if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vmdc [player]");

   		if(IsPlayerConnected(giveplayerid))
    	{
	        SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "*** %s' Vehicles  ***", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
	        for(new i=0; i<MAX_PLAYERVEHICLES; i++)
         	{
			    if(PlayerVehicleInfo[giveplayerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
				{
    				format(string, sizeof(string), "Vehicle registration: %d | Vehicle Name: %s | Ticket: $%d.",PlayerVehicleInfo[giveplayerid][i][pvId],GetVehicleName(PlayerVehicleInfo[giveplayerid][i][pvId]),PlayerVehicleInfo[giveplayerid][i][pvTicket]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
	    		}
				else if(PlayerVehicleInfo[giveplayerid][i][pvImpounded])
				{
    				format(string, sizeof(string), "Vehicle registration: Voided (impounded) | Vehicle Name: %s | Ticket: $%d.",VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId]-400],PlayerVehicleInfo[giveplayerid][i][pvTicket]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
	    		}
	    	}
	    	SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
   		}
    }
	return 1;
}

CMD:vticket(playerid, params[])
{
    if(IsACop(playerid) || IsATowman(playerid))
    {
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vticket [vehicle registration]");

        if(PlayerInfo[playerid][pTicketTime] != 0)
		{
            SendClientMessageEx(playerid, COLOR_GRAD2, "You must wait within a minute in order to use this command again!");
            return 1;
        }

        new Float: x, Float: y, Float: z, vehicleid = strval(params);
        GetVehiclePos(vehicleid, x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
		{
            if(vehicleid != INVALID_VEHICLE_ID)
			{
                //foreach(new i: Player)
				for(new i = 0; i < MAX_PLAYERS; ++i)
				{
					if(IsPlayerConnected(i))
					{
						new v = GetPlayerVehicle(i, vehicleid);
						if(v != -1)
						{
							new string[62 + MAX_PLAYER_NAME];
							PlayerVehicleInfo[i][v][pvTicket] += 1000;
							PlayerInfo[playerid][pTicketTime] = 60;
							format(string, sizeof(string), "You have issued a $1000 ticket on %s's %s.",GetPlayerNameEx(i), GetVehicleName(PlayerVehicleInfo[i][v][pvId]));
							SendClientMessageEx(playerid, COLOR_WHITE, string);
							return 1;
						}
					}	
                }
                SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle does not have any registration!");
            }
        }
        else return SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be near such vehicle!");
    }
    return 1;
}

CMD:vcheck(playerid, params[])
{
    if(IsACop(playerid) || IsATowman(playerid) || PlayerInfo[playerid][pAdmin] >= 2)
	{
        new carid = GetPlayerVehicleID(playerid);
        new closestcar = GetClosestCar(playerid, carid);
        if(IsTrailerAttachedToVehicle(carid))
		{
            new carbeingtowed = GetVehicleTrailer(carid);
            new dynveh = DynVeh[carbeingtowed];
			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					new v = GetPlayerVehicle(i, carbeingtowed);

					if(v != -1)
					{
						new string[78 + MAX_PLAYER_NAME];
						format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s | Ticket: $%s", carbeingtowed, GetVehicleName(PlayerVehicleInfo[i][v][pvId]), GetPlayerNameEx(i), number_format(PlayerVehicleInfo[i][v][pvTicket]));
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						return 1;
					}
				}	
            }
            if(dynveh != -1)
			{
			    if(DynVehicleInfo[dynveh][gv_igID] != -1 && DynVehicleInfo[dynveh][gv_ifID] == 0)
			    {
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s | Ticket: EXEMPT", carbeingtowed, GetVehicleName(carbeingtowed), arrGroupData[DynVehicleInfo[dynveh][gv_igID]][g_szGroupName]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
				}
				else if(DynVehicleInfo[dynveh][gv_igID] == -1 && DynVehicleInfo[dynveh][gv_ifID] != 0)
			    {
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s", carbeingtowed, GetVehicleName(carbeingtowed), FamilyInfo[DynVehicleInfo[dynveh][gv_ifID]][FamilyName]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
				}
            }
            SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle is not owned by anyone!");
        }
        else if(IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0) && !IsTrailerAttachedToVehicle(carid))
		{
		    new dynveh = DynVeh[closestcar];
            //foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{

					new v = GetPlayerVehicle(i, closestcar);
					if(v != -1)
					{
						new string[78 + MAX_PLAYER_NAME];
						format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s | Ticket: $%d | Speed: %.0f MPH", closestcar, GetVehicleName(PlayerVehicleInfo[i][v][pvId]), GetPlayerNameEx(i), PlayerVehicleInfo[i][v][pvTicket],  vehicle_get_speed(closestcar));
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						return 1;
					}
				}	
            }
            if(dynveh != -1)
			{
			    if(DynVehicleInfo[dynveh][gv_igID] != -1 && DynVehicleInfo[dynveh][gv_ifID] == 0)
			    {
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s | Ticket: EXEMPT", closestcar, GetVehicleName(closestcar), arrGroupData[DynVehicleInfo[dynveh][gv_igID]][g_szGroupName]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
				}
				else if(DynVehicleInfo[dynveh][gv_igID] == -1 && DynVehicleInfo[dynveh][gv_ifID] != 0)
			    {
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s", closestcar, GetVehicleName(closestcar), FamilyInfo[DynVehicleInfo[dynveh][gv_ifID]][FamilyName]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
				}
            }
            SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle is not owned by anyone!");
        }
        else SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You are not towing a vehicle/near to another vehicle.");
    }
    else return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
    return 1;
}

CMD:motd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337)
    {
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /motd [message]");
		new string[128];
    	format(string, sizeof(string), "AdmCmd: %s has changed the global motd to: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_LIGHTRED, string, 4);
		format(GlobalMOTD, sizeof(GlobalMOTD), "%s", params);
		SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the Global MOTD.");
		g_mysql_SaveMOTD();
	}
	return 1;
}

CMD:amotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337)
    {
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /amotd [message]");
		new string[128];
		format(AdminMOTD, sizeof(AdminMOTD), "%s", params);
		format(string, sizeof(string), "AdmCmd: %s has changed the admin motd to: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_LIGHTRED, string, 4);
		SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the Admin MOTD.");
		g_mysql_SaveMOTD();
	}
	return 1;
}

CMD:vipmotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337)
    {
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vipmotd [message]");
		new string[128];
		format(VIPMOTD, sizeof(VIPMOTD), "%s", params);
		format(string, sizeof(string), "AdmCmd: %s has changed the VIP motd to: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_LIGHTRED, string, 4);
		SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the VIP MOTD.");
		g_mysql_SaveMOTD();
	}
	return 1;
}

CMD:cmotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pHelper] >= 4 || PlayerInfo[playerid][pPR] > 0)
    {
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cmotd [message]");
		new string[128];
		format(CAMOTD, sizeof(CAMOTD), "%s", params);
		if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pPR] > 0)
		{
			format(string, sizeof(string), "AdmCmd: %s has changed the Community Advisor motd to: %s.", GetPlayerNameEx(playerid), params);
			ABroadCast( COLOR_LIGHTRED, string, 4);
		}
		else if(PlayerInfo[playerid][pHelper] >= 4)
		{
		    format(string, sizeof(string), "CACmd: %s has changed the Community Advisor motd to: %s.", GetPlayerNameEx(playerid), params);
			CBroadCast( COLOR_YELLOW, string, 2);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the Community Advisor MOTD.");
		g_mysql_SaveMOTD();
	}
	return 1;
}

CMD:pmotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 99999 || PlayerInfo[playerid][pShopTech] >= 3 || PlayerInfo[playerid][pPR] >= 2)
    {
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pmotd [message/off]");
		new string[128];
		if(strcmp(params, "off", true) == 0)
		{
		    format(pMOTD, sizeof(pMOTD), "");
		    format(string, sizeof(string), "AdmCmd: %s has turned off the Global MOTD", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, string, 4);

			SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the pMOTD.");
			g_mysql_SaveMOTD();
			return 1;
		}
		format(pMOTD, sizeof(pMOTD), "%s", params);

		format(string, sizeof(string), "AdmCmd: %s has changed the global motd to: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_LIGHTRED, string, 4);

		SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the pMOTD.");
		g_mysql_SaveMOTD();
	}
	return 1;
}

CMD:sellmycar(playerid, params[])
{
    if(PlayerInfo[playerid][pFreezeCar] == 1)
    {
   		return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: Your car assets are frozen, you cannot sell a car!");
	}
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
        if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
 		{
			if(PlayerInfo[playerid][pBackpack] > 0 && PlayerInfo[playerid][pBStoredV] == PlayerVehicleInfo[playerid][d][pvSlotId] && !GetPVarInt(playerid, "confirmvehsell")) 
			{
				SetPVarInt(playerid, "confirmvehsell", 1);
				return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: You have a backpack stored in this car, withdraw it first or you will loose it, please confirm!");
			}
            new Float:health;
            GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
            if(PlayerInfo[playerid][pLevel] == 1)
			{
                SendClientMessageEx(playerid, COLOR_GREY, "You have to be level 2 or higher to be able to sell vehicles.");
                return 1;
            }
            if(health < 500) return SendClientMessageEx(playerid, COLOR_GREY, " Your vehicle is too damaged to sell it.");

            new string[128], giveplayerid, price;
			if(sscanf(params, "ud", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellmycar [player] [price]");

            if(price < 1 || price > 1000000000) return SendClientMessageEx(playerid, COLOR_GREY, "Price must be higher than 0 and less than 1,000,000,000.");
            if(PlayerInfo[giveplayerid][pLevel] == 1)
			{
                SendClientMessageEx(playerid, COLOR_GREY, "The person has to be Level 2 or higher to be able to sell vehicles to them.");
                return 1;
            }
            if(playerid == giveplayerid)
			{
                SendClientMessageEx(playerid, COLOR_GREY, "You can not use this command on yourself.");
                return 1;
            }
            if(IsRestrictedVehicle(PlayerVehicleInfo[playerid][d][pvModelId]))
            {
                SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to sell this restricted vehicle.");
                return 1;
            }
			if(gettime()-GetPVarInt(playerid, "LastTransaction") < 60)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can only sell a car once every 60 seconds, please wait!");
				return 1;
			}
			if(PlayerVehicleInfo[playerid][d][pvTicket] > 0)
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle currently has unpaid tickets, you need to pay them before selling.");
			    return 1;
			}
            if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Player is currently not connected to the server.");
            if (ProxDetectorS(8.0, playerid, giveplayerid))
		 	{
		 	    if(PlayerInfo[giveplayerid][pFreezeCar] == 1)
	 		    {
	            	SendClientMessageEx(giveplayerid, COLOR_WHITE, "ERROR: Your car assets are frozen, you cannot buy a car!");
	            	SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: Their car assets are frozen, they cannot buy a car!");
	            	return 1;
				}
				SetPVarInt(playerid, "LastTransaction", gettime());
                VehicleOffer[giveplayerid] = playerid;
                VehicleId[giveplayerid] = d;
                VehiclePrice[giveplayerid] = price;
                format(string, sizeof(string), "* You offered %s to buy this %s for $%s.", GetPlayerNameEx(giveplayerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), number_format(price));
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                format(string, sizeof(string), "* %s has offered you their %s (VID: %d) for $%s, (type /accept car) to buy.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), PlayerVehicleInfo[playerid][d][pvId], number_format(price));
                SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				DeletePVar(playerid, "confirmvehsell");
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "That person is not near you.");
                return 1;
            }
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, " You need to be inside a vehicle that you own.");
    return 1;
}

CMD:sellmyhouse(playerid, params[])
{
	if(servernumber == 2) return SendClientMessage(playerid, COLOR_WHITE, "This command is disabled!");
	if(Homes[playerid] > 0)
	{
		if(PlayerInfo[playerid][pFreezeHouse] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: Your house assets are frozen, you cannot sell your house!");
		new string[128], giveplayerid, price;
		if(sscanf(params, "ud", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellmyhouse [player] [price]");
		if(price < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Price must be higher than 0.");
		if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Player is currently not connected to the server.");
		if(Homes[giveplayerid] >= MAX_OWNABLE_HOUSES && PlayerInfo[giveplayerid][pDonateRank] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "They cannot own another home.");
		if(Homes[giveplayerid] >= 3) return SendClientMessageEx(playerid, COLOR_GREY, "They cannot own another home.");		
		if(PlayerInfo[giveplayerid][pFreezeHouse] == 1)
		{
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "ERROR: Your house assets are frozen, you cannot buy a house!");
			SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: Their house assets are frozen, you cannot sell them a house!");
			return 1;
		}

		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExtVW] && GetPlayerInterior(playerid) == HouseInfo[i][hExtIW])
			{
				if(PlayerInfo[giveplayerid][pLevel] >= HouseInfo[PlayerInfo[playerid][pPhousekey]][hLevel])
				{
					if(ProxDetectorS(8.0, playerid, giveplayerid) && GetPlayerVirtualWorld(giveplayerid) == HouseInfo[i][hExtVW] && GetPlayerInterior(giveplayerid) == HouseInfo[i][hExtIW])
					{
						if(PlayerInfo[playerid][pBackpack] > 0 && HouseInfo[i][hSQLId] == PlayerInfo[playerid][pBStoredH] && !GetPVarInt(playerid, "confirmhousell")) 
						{
							SetPVarInt(playerid, "confirmhousell", 1);
							return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: You have a backpack stored in this house, withdraw it first or you will loose it, please confirm!");
						}
						HouseOffer[giveplayerid] = playerid;
						HousePrice[giveplayerid] = price;
						House[giveplayerid] = i;
						format(string, sizeof(string), "* You offered %s to buy your house for $%s.", GetPlayerNameEx(giveplayerid), number_format(price));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s has offered you their house for $%s, (type /accept house) to buy.", GetPlayerNameEx(playerid), number_format(price));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						DeletePVar(playerid, "confirmhousell");
						return 1;
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, "That person is not near you.");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "The person you are trying to sell your house to is not the appropriate level to buy this house.");
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
    return 1;
}

CMD:gotopveh(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2) {

        new iTargetID;

        if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotopveh [player]");
		}
		else if(IsPlayerConnected(iTargetID)) {

			new szVehString[8024], icount = GetPlayerVehicleSlots(iTargetID);
			if(!GetPlayerVehicleCount(iTargetID)) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Player doesn't own any vehicles.");
			new szCarLocation[MAX_ZONE_NAME];
			for(new i, iModelID; i < icount; i++) 
			{
				Get3DZone(PlayerVehicleInfo[iTargetID][i][pvPosX], PlayerVehicleInfo[iTargetID][i][pvPosY], PlayerVehicleInfo[iTargetID][i][pvPosZ], szCarLocation, sizeof(szCarLocation));
				if((iModelID = PlayerVehicleInfo[iTargetID][i][pvModelId] - 400) >= 0)
				{
					if(PlayerVehicleInfo[iTargetID][i][pvImpounded]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (impounded) | Location: DMV", szVehString, VehicleName[iModelID]);
					}
					else if(PlayerVehicleInfo[iTargetID][i][pvDisabled]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (disabled) | Location: Unknown", szVehString, VehicleName[iModelID]);
					}
					else if(!PlayerVehicleInfo[iTargetID][i][pvSpawned]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (stored)", szVehString, VehicleName[iModelID]);
					}
					else format(szVehString, sizeof(szVehString), "%s\n%s (ID %i) | Location: %s", szVehString, VehicleName[iModelID], PlayerVehicleInfo[iTargetID][i][pvId], szCarLocation);
				}
			}
		    ShowPlayerDialog(playerid, GOTOPLAYERCAR, DIALOG_STYLE_LIST, "Vehicle Teleportation", szVehString, "Teleport", "Cancel");
       		SetPVarInt(playerid, "playeraffectedcarTP", iTargetID);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		{

		}
  	}
	return 1;
}

CMD:pvlock(playerid, params[])
{
    new Float: x, Float: y, Float: z;
    if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
        new ownerid = PlayerInfo[playerid][pVehicleKeysFrom];
        if(IsPlayerConnected(ownerid))
		{
            new d = PlayerInfo[playerid][pVehicleKeys];
            if(PlayerVehicleInfo[ownerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
            if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
			{
                if(PlayerVehicleInfo[ownerid][d][pvLock] > 0)
				{
					if(PlayerVehicleInfo[ownerid][d][pvLocksLeft] <= 0) {
						SendClientMessageEx(playerid, COLOR_GREY, "The lock has been damaged as result of a lock pick!");
						return 1;
					}
                    if(PlayerVehicleInfo[ownerid][d][pvLocked] == 0)
					{
                        GameTextForPlayer(playerid,"~r~Vehicle Locked!",5000,6);
                        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 1;
                        LockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
                        return 1;
                    }
                    else
					{
                        GameTextForPlayer(playerid,"~g~Vehicle Unlocked!",5000,6);
                        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 0;
                        UnLockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
                        return 1;
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_GREY, " You don't have a lock system installed on this vehicle.");
					return 1;
                }
            }
        }
    }
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
    {
        if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
			if(PlayerVehicleInfo[playerid][d][pvLocksLeft] <= 0) {
				SendClientMessageEx(playerid, COLOR_GREY, "The lock has been damaged as result of a lock pick, please buy a new one!");
				return 1;
			}
            if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 0)
			{
                GameTextForPlayer(playerid,"~r~Vehicle Locked!",5000,6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerVehicleInfo[playerid][d][pvLocked] = 1;
                LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
                return 1;
            }
            else if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 1)
			{
                GameTextForPlayer(playerid,"~g~Vehicle Unlocked!",5000,6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerVehicleInfo[playerid][d][pvLocked] = 0;
                UnLockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
                return 1;

            }
            SendClientMessageEx(playerid, COLOR_GREY, " You don't have a lock system installed on this vehicle.");
            return 1;
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, " You are not near any vehicle that you own.");
    return 1;
}

CMD:vehid(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid))
    {
		new string[128];
    	new idcar = GetPlayerVehicleID(playerid);
		format(string, sizeof(string), "* Vehicle Name: %s | Vehicle Model:%d | Vehicle ID: %d.",GetVehicleName(idcar), GetVehicleModel(idcar), idcar);
		SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	return 1;
}

CMD:reloadpvehicles(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 3)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /reloadpvehicles [player]");

	UnloadPlayerVehicles(giveplayerid);
	LoadPlayerVehicles(giveplayerid);

	format(string, sizeof(string), " You have successfully reloaded %s's Vehicles.", GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GREY, string);

	return 1;
}

CMD:reloadpveh(playerid, params[])
{
	return cmd_reloadpvehicles(playerid, params);
}	

CMD:unloadpvehicles(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessageEx(playerid, COLOR_GREY, "You're not authorized to use this command!");
	
	//foreach(new p: Player) 
	for(new p = 0; p < MAX_PLAYERS; ++p)
	{
		if(IsPlayerConnected(p))
		{
			UnloadPlayerVehicles(p);
		}	
	}
	SendClientMessageEx(playerid, COLOR_GREY, "You have successfully unloaded all vehicles.");
	return 1;
}

CMD:loadpvehicles(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessageEx(playerid, COLOR_GREY, "You're not authorized to use this command!");
	
	//foreach(new p: Player) 
	for(new p = 0; p < MAX_PLAYERS; ++p)
	{
		if(IsPlayerConnected(p))
		{	
			LoadPlayerVehicles(p);
		}	
	}
	SendClientMessageEx(playerid, COLOR_GREY, "You have successfully loaded all vehicles.");
	return 1;
}	

CMD:createpvehicle(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new iColors[2], iTargetID, iModelID;

		if(sscanf(params, "uiii", iTargetID, iModelID, iColors[0], iColors[1])) SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /createpvehicle [player] [model] [color 1] [color 2]");
		else if(!(400 <= iModelID <= 611)) SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid model specified (model IDs start at 400, and end at 611).");
		else if(IsATrain(iModelID)) SendClientMessageEx(playerid, COLOR_GREY, "Trains cannot be spawned during runtime.");
		else if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255)) SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
		else if(!vehicleCountCheck(iTargetID)) SendClientMessageEx(playerid, COLOR_GREY, "That person can't have more vehicles - they own too many.");
		else if(!vehicleSpawnCountCheck(iTargetID)) SendClientMessageEx(playerid, COLOR_GREY, "That person has too many vehicles spawned - they must store one first.");
		else
		{
			new Float: arr_fPlayerPos[4], szMessage[84];

			GetPlayerPos(iTargetID, arr_fPlayerPos[0], arr_fPlayerPos[1], arr_fPlayerPos[2]);
			GetPlayerFacingAngle(iTargetID, arr_fPlayerPos[3]);
			CreatePlayerVehicle(iTargetID, GetPlayerFreeVehicleId(iTargetID), iModelID, arr_fPlayerPos[0], arr_fPlayerPos[1], arr_fPlayerPos[2], arr_fPlayerPos[3], iColors[0], iColors[1], 2000000, GetPlayerVirtualWorld(iTargetID), GetPlayerInterior(iTargetID));

			format(szMessage, sizeof(szMessage), "You have successfully created a %s for %s.", VehicleName[iModelID - 400], GetPlayerNameEx(iTargetID));
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			format(szMessage, sizeof(szMessage), "%s created a %s (%i) for %s.", GetPlayerNameEx(playerid), VehicleName[iModelID - 400], iModelID, GetPlayerNameEx(iTargetID));
			Log("logs/playervehicle.log", szMessage);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
    return 1;
}

CMD:shopvest(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1 && PlayerInfo[playerid][pAdmin] < 1338)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, slot, invoice[64];
	if(sscanf(params, "uds[64]", giveplayerid, slot, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopvest [player] [slot(0-9)] [invoice #]");

	PlayerToyInfo[giveplayerid][slot][ptModelID] = 19142;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 1;
	PlayerToyInfo[giveplayerid][slot][ptTradable] = 1;
	g_mysql_NewToy(giveplayerid, slot);
	format(string, sizeof(string), "You have been given a police vest in slot %d, use /toys to manage it", slot);
	SendClientMessageEx(giveplayerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "You have given %s a police vest in slot %d", GetPlayerNameEx(giveplayerid), slot);
	SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "[SHOPVEST] %s has given %s a police vest toy - Invoice %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
	Log("logs/shoplog.log", string);

	g_mysql_SaveToys(giveplayerid, slot);
	return 1;
}

CMD:listtoys(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1) {

		new
			giveplayerid, stringg[4096], string[64];

		if(sscanf(params, "u", giveplayerid)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /listtoys [player]");
		}
		else if(IsPlayerConnected(giveplayerid))
		{
			new icount = GetPlayerToySlots(giveplayerid);
		    for(new x;x<icount;x++)
			{
				new name[24] = "None";

				for(new i;i<sizeof(HoldingObjectsAll);i++)
				{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[giveplayerid][x][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						break;
					}
				}
				if(PlayerToyInfo[giveplayerid][x][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
				{
				    format(name, sizeof(name), "ID: %d", PlayerToyInfo[giveplayerid][x][ptModelID]);
				}
				format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[giveplayerid][x][ptBone]]);
			}
			format(string, sizeof(string), "Listing %s's Toys - Select a Slot", GetPlayerNameEx(giveplayerid));
			ShowPlayerDialog(playerid, LISTTOYS_DELETETOY, DIALOG_STYLE_LIST, string, stringg, "Delete", "Cancel");
			SetPVarInt(playerid, "listtoys_giveplayerid", giveplayerid);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	return 1;
}

CMD:shoplaser(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1 && PlayerInfo[playerid][pAdmin] < 1338)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, slot, color[32], invoice[64];
	if(sscanf(params, "udss[64]", giveplayerid, slot, color, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shoplaser [player] [slot(0-9)] [red/green/orange/yellow/pink/blue] [invoice #]");

	if(strcmp(color,"red",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 18643;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptTradable] = 1;
		g_mysql_NewToy(giveplayerid, slot);
	}
	else if(strcmp(color,"green",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19083;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptTradable] = 1;
		g_mysql_NewToy(giveplayerid, slot);
	}
	else if(strcmp(color,"orange",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19082;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptTradable] = 1;
		g_mysql_NewToy(giveplayerid, slot);
	}
	else if(strcmp(color,"yellow",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19084;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptTradable] = 1;
		g_mysql_NewToy(giveplayerid, slot);
	}
	else if(strcmp(color,"pink",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19081;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptTradable] = 1;
		g_mysql_NewToy(giveplayerid, slot);
	}
	else if(strcmp(color,"blue",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19080;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptTradable] = 1;
		g_mysql_NewToy(giveplayerid, slot);
	}
	format(string, sizeof(string), "You have been given a %s laser in slot %d, use /toys to manage it", color, slot);
	SendClientMessageEx(giveplayerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "You have given %s a %s laser in slot %d", GetPlayerNameEx(giveplayerid), color, slot);
	SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "[SHOPLASER] %s has given %s a laser toy - Invoice %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
	Log("logs/shoplog.log", string);

	g_mysql_SaveToys(giveplayerid, slot);
	return 1;
}

CMD:permaban(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /permaban [player] [reason]");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				format(string, sizeof(string), "AdmCmd: %s was banned, reason: Attempting to ban a higher admin.", GetPlayerNameEx(giveplayerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[playerid][pBanned] = 3;
				SystemBan(playerid, "[System] (Attempting to ban a higer admin)");
				SetTimerEx("KickEx", 1000, 0, "i", playerid);
			}
			else
			{
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s(IP:%s) was permanently banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was permanently banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pPermaBanned] = 3;
                new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));

				AddBan(playerid, giveplayerid, reason);
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, reason, 3, GetPlayerNameEx(playerid));

				format(string, sizeof(string), "UPDATE `bans` SET `status` = 3 WHERE `ip_address` = '%s'", ip);
				mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);

				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
			}
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}


CMD:banaccount(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
		return 1;
	}

	new string[128], playername[MAX_PLAYER_NAME], reason[64];
	if(sscanf(params, "s[24]s[64]", playername, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /banaccount [player name] [reason]");

    new giveplayerid = ReturnUser(playername);
	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
		{
			format(string, sizeof(string), "AdmCmd: %s has been auto-banned, reason: Trying to /ban a higher admin.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW,string,2);
			PlayerInfo[playerid][pBanned] = 1;
			SystemBan(playerid, "[System] (Attempting to ban a higher admin)");
			Kick(giveplayerid);
		}
		else
		{
			new playerip[32];
			GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
			format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
			Log("logs/ban.log", string);
			SendClientMessageEx(playerid, COLOR_WHITE, "The person is online and has been banned!");
			format(string, sizeof(string), "AdmCmd: %s was banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			PlayerInfo[giveplayerid][pBanned] = 1;
			new ip[32];
			GetPlayerIp(giveplayerid,ip,sizeof(ip));
			AddBan(playerid, giveplayerid, reason);
			MySQLBan(GetPlayerSQLId(giveplayerid),ip,reason,1,GetPlayerNameEx(playerid));
			format(string, sizeof(string), "Banned account (%s)", GetPlayerNameEx(giveplayerid));
			SystemBan(giveplayerid, string);
			SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
		}
	}
	else
	{
		new query[128], tmpName[24];

		mysql_escape_string(playername, tmpName);
		format(query, sizeof(query), "UPDATE `accounts` SET `Band`=1 WHERE `Username`='%s' AND `AdminLevel` < 2 AND `PermBand` < 3", tmpName);
		mysql_function_query(MainPipeline, query, false, "OnBanPlayer", "i", playerid);

		SetPVarString(playerid, "OnBanPlayer", tmpName);
		SetPVarString(playerid, "OnBanPlayerReason", reason);

		format(query,sizeof(query), "SELECT `id`, `IP` FROM `accounts` WHERE `Username`='%s'", tmpName);
		mysql_function_query(MainPipeline, query, true, "OnBanIP", "i", playerid);

		format(string,sizeof(string),"Attempting to ban %s...", tmpName);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

CMD:ip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ip [ip]");

		new string[128], IP[32];

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				GetPlayerIp(i, IP, sizeof(IP));
				if(strfind(IP, params, true) != -1 && PlayerInfo[i][pAdmin] <= PlayerInfo[playerid][pAdmin])
				{
					format(string, sizeof(string), "Player: %s (ID: %d) (Level: %d) | IP: %s", GetPlayerNameEx(i), i, PlayerInfo[i][pLevel],  IP);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
			}	
		}
	}

	return 1;
}

CMD:unbanip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pBanAppealer] >= 1)
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /unbanip [ip]");
		if(IsValidIP(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "That is not a valid IP address!");

		new string[128];
		RemoveBan(playerid, params);
		format(string, 128, "AdmCmd: %s has unbanned IP %s", GetPlayerNameEx(playerid), params);
		ABroadCast(COLOR_LIGHTRED,string,2);
		format(string, sizeof(string), "AdmCmd: %s has unbanned IP %s", GetPlayerNameEx(playerid), params);
		Log("logs/ban.log", string);
		print(string);
	}

	return 1;
}

CMD:banip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[150], ip[32], reason[64];
		if(sscanf(params, "s[32]s[64]", ip, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /banip [ip] [reason]");
		if(IsValidIP(ip)) return SendClientMessageEx(playerid, COLOR_WHITE, "That is not a valid IP address!");
		format(string, sizeof(string), "INSERT INTO `ip_bans` (`ip`, `date`, `reason`, `admin`) VALUES ('%s', NOW(), '%s', '%s')", ip, g_mysql_ReturnEscaped(reason, MainPipeline), GetPlayerNameEx(playerid));
		mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);
		format(string, 128, "AdmCmd: IP %s was banned by %s, reason: %s", ip, GetPlayerNameEx(playerid), reason);
		ABroadCast(COLOR_LIGHTRED,string,2);
		format(string, 128, "AdmCmd: IP %s was banned by %s, reason: %s", ip, GetPlayerNameEx(playerid), reason);
		Log("logs/ban.log", string);
		print(string);
	}

	return 1;
}

CMD:unlockveh(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new vehicleid;
		if(sscanf(params, "d", vehicleid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /unlockveh [vehicle id]");

		if(IsValidVehicleID(vehicleid))
		{
			vehicle_unlock_doors(vehicleid);
			GameTextForPlayer(playerid, "~g~unlocked", 1000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid vehicle ID");
		}
	}
	return 1;
}

CMD:unban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pBanAppealer] >= 1)
	{
		new string[128], query[256], tmpName[24];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /unban [player name]");

		mysql_escape_string(params, tmpName, MainPipeline);
		SetPVarString(playerid, "OnUnbanPlayer", tmpName);

		format(query, sizeof(query), "UPDATE `accounts` SET `Band`=0, `Warnings`=0, `Disabled`=0 WHERE `Username`='%s' AND `PermBand` < 3", tmpName);
		format(string, sizeof(string), "Attempting to unban %s...", tmpName);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		mysql_function_query(MainPipeline, query, false, "OnUnbanPlayer", "i", playerid);

		format(query, sizeof(query), "SELECT `IP` FROM `accounts` WHERE `Username`='%s'", tmpName);
		mysql_function_query(MainPipeline, query, true, "OnUnbanIP", "i", playerid);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
	}
	return 1;
}



CMD:ounsuspend(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pAP] >= 2 || PlayerInfo[playerid][pHR] >= 3)
	{
		new string[128], query[512], tmpName[24];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ounsuspend [player name]");

		mysql_escape_string(params, tmpName);
		SetPVarString(playerid, "OnSetSuspended", tmpName);
		format(query,sizeof(query),"UPDATE `accounts` SET `Disabled` = 0 WHERE `Username` = '%s' AND `AdminLevel` < 1338 AND `AdminLevel` > 1", tmpName);
		mysql_function_query(MainPipeline, query, false, "OnSetSuspended", "ii", playerid, false);

		format(string,sizeof(string),"Attempting to unsuspend %s's account...",tmpName);
		SendClientMessageEx(playerid,COLOR_YELLOW,string);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:osetrmutes(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pAP] >= 2 || PlayerInfo[playerid][pHR] >= 3) {

		new
			szPlayerName[MAX_PLAYER_NAME],
			iMuteCount;

		if(sscanf(params, "s[24]i", szPlayerName, iMuteCount)) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /osetrmutes [player name] [mutes]");
		}
		else if(iMuteCount >= 0) {

			new
				szQuery[128];

			mysql_escape_string(szPlayerName, szPlayerName);
			format(szQuery, sizeof szQuery, "UPDATE `accounts` SET `ReportMutedTotal` = %i, `ReportMuted` = 0, `ReportMutedTime` = 0 WHERE `Username` = '%s'", iMuteCount, szPlayerName);
			mysql_function_query(MainPipeline, szQuery, false, "Query_OnExecution", "ii", playerid);
			SetPVarString(playerid, "QueryEx_Name", szPlayerName);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Mutes cannot be set to less than zero.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
	return 1;
}

CMD:destroycar(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {
		if(IsPlayerInAnyVehicle(playerid)) {
			for(new i = 0; i < sizeof(CreatedCars); ++i) if(CreatedCars[i] == GetPlayerVehicleID(playerid)) {
				DestroyVehicle(CreatedCars[i]);
				CreatedCars[i] = INVALID_VEHICLE_ID;
				return SendClientMessageEx(playerid, COLOR_GREY, "You have successfully despawned this vehicle.");
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "This vehicle is not admin-spawned.");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in any vehicle.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:setfightstyle(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid, fightstyle;
		if(sscanf(params, "ud", giveplayerid, fightstyle))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setfightstyle [player] [fightstyle]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available fighting styles: 4, 5, 6, 7, 15, 26.");
			return 1;
		}

		if(fightstyle > 3 && fightstyle < 8 || fightstyle == 15 || fightstyle == 26)
		{
			format(string, sizeof(string), " Your fighting style has been changed to %d.", fightstyle);
			SendClientMessageEx(giveplayerid,COLOR_YELLOW,string);
			format(string, sizeof(string), " You have changed %s's fighting style to %d.", GetPlayerNameEx(giveplayerid), fightstyle);
			SendClientMessageEx(playerid,COLOR_YELLOW,string);
			SetPlayerFightingStyle(giveplayerid, fightstyle);
			PlayerInfo[playerid][pFightStyle] = fightstyle;
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:setinsurance(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid, insurance;
		if(sscanf(params, "ud", giveplayerid, insurance))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setinsurance [player] [insurance]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available Insurances: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9");
			return 1;
		}

		if(insurance >= 0 && insurance <= 9)
		{
			format(string, sizeof(string), " Your insurance has been changed to %d.", insurance);
			SendClientMessageEx(giveplayerid,COLOR_YELLOW,string);
			format(string, sizeof(string), " You have changed %s's insurance to %d.", GetPlayerNameEx(giveplayerid), insurance);
			SendClientMessageEx(playerid,COLOR_YELLOW,string);
			PlayerInfo[giveplayerid][pInsurance] = insurance;
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:setmyname(playerid, params[])
{
	new string[128], query[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setmyname [newname]");

	if (PlayerInfo[playerid][pUndercover] >= 1 || PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 4)
	{
		if(GetPVarInt(playerid, "TempName") == 0)
		{
		    if(strlen(params) > MAX_PLAYER_NAME)
			{
				format(string, sizeof(string), "You can't select a name that's above %d characters.", MAX_PLAYER_NAME);
				return SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			new tmpName[24];
			mysql_escape_string(params, tmpName);

			format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `Username`='%s'", tmpName);
			SetPVarString(playerid, "OnSetMyName", tmpName);
			mysql_function_query(MainPipeline, query, true, "OnSetMyName", "i", playerid);
		}
		else
		{
			new name[MAX_PLAYER_NAME];
			GetPVarString(playerid, "TempNameName", name, sizeof(name));
			if(strlen(name) > 0)
			{
				SetPlayerName(playerid, name);
				SetPVarInt(playerid, "TempName", 0);
				format(string, sizeof(string), "You changed your name back to %s.", name);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				SendClientMessageEx(playerid, COLOR_GRAD2, "NOTE: Your stats will now save again.");
			}
		}
	}
	return 1;
}

CMD:setname(playerid, params[])
{
	new giveplayerid, string[128], name[MAX_PLAYER_NAME];
	if(sscanf(params, "us[24]", giveplayerid, name)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setname [playerid] [newname]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 4)
		{
		    if(strlen(name) > MAX_PLAYER_NAME)
			{
				format(string, sizeof(string), "You can't select a name that's above %d characters.", MAX_PLAYER_NAME);
				return SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			new query[128], tmpName[MAX_PLAYER_NAME];
			mysql_escape_string(name, tmpName);
			if(strcmp(name, tmpName, false) == 0)
			{
	   			SetPVarString(playerid, "OnSetName", tmpName);

				format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `Username`='%s'", tmpName);
				mysql_function_query(MainPipeline, query, true, "OnSetName", "ii", playerid, giveplayerid);
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid characters!");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You aren't authorised to use this command.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "No Such Player");
	}
	return 1;
}

CMD:togchatreports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2) {

	    if(GetPVarType(playerid, "TogReports")) {

	        DeletePVar(playerid, "TogReports");
	        SendClientMessageEx(playerid, COLOR_WHITE, "You will now see all reports.");
	    }
	    else {
	        SetPVarInt(playerid, "TogReports", 1);
	        SendClientMessageEx(playerid, COLOR_WHITE, "You will now see priority reports only.");
	    }
	}
	return 1;
}

CMD:togreports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pUndercover] >= 1)
	{
		switch(PlayerInfo[playerid][pTogReports])
		{
			case 0:
			{
				PlayerInfo[playerid][pTogReports] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have went into spec ops mode, you will be unable to see admin messages.");
			}
			case 1:
			{
				PlayerInfo[playerid][pTogReports] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "You are now out of spec ops mode, you will be able to see admin messages.");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You aren't authorized to use this command.");
	}
	return 1;
}

CMD:blowup(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /blowup [player]");
	if((PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin]) && giveplayerid != playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on the same/greater level admin than you!");
	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 4)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				format(string, sizeof(string), "You have successfuly exploded %s (ID: %d).",GetPlayerNameEx(giveplayerid),giveplayerid);
				SendClientMessageEx(playerid,COLOR_GRAD2,string);
				new Float:boomx, Float:boomy, Float:boomz;
				GetPlayerPos(giveplayerid,boomx, boomy, boomz);
				CreateExplosion(boomx, boomy , boomz, 7, 1);
				format(string, sizeof(string), "AdmCmd: %s has exploded %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				Log("logs/admin.log", string);
			}
			else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
		}
	}
	return 1;
}

CMD:givenos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givenos [player]");

		if(giveplayerid == INVALID_PLAYER_ID) return 1;
		if(!IsPlayerConnected(giveplayerid)) return 1;
		if(IsPlayerInAnyVehicle(giveplayerid))
		{
			new VehicleID = GetPlayerVehicleID(giveplayerid), Model = GetVehicleModel(VehicleID);
			switch(Model)
			{
			case 448,461,462,463,468,471,509,510,521,522,523,581,586,449: return
				SendClientMessageEx(playerid,COLOR_GRAD1,"ERROR: You can not tune this vehicle!");
			}
			AddVehicleComponent(VehicleID, 1010); PlayerPlaySound(giveplayerid,1133,0.0,0.0,0.0);//NOS
			format(string, sizeof(string), " Successfully added nos to %s's vehicle.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid,COLOR_GRAD1,string);
			format(string, sizeof(string), "AdmCmd: %s has given nos to %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("logs/admin.log", string);
		}
		else
		{
			SendClientMessageEx(playerid,COLOR_GRAD1,"ERROR: person must be in a vehicle.");
		}
	}
	else
	{
		SendClientMessageEx(playerid,COLOR_GRAD1,"You are not authorized to use that command.");
	}
	return 1;
}

CMD:countdown(playerid, params[])
{
	if(IsARacer(playerid) && PlayerInfo[playerid][pTogReports] == 1 && PlayerInfo[playerid][pAdmin] >= 4) {
	    if(CountDown == 0) {
        	SetTimerEx("Countdown", 100, false, "i", playerid); //Keep this at 100milliseconds
        } else {
            SendClientMessageEx(playerid, COLOR_WHITE, "There is already a countdown currently started.");
        }
    } else if(IsARacer(playerid)) {
        if(CountDown == 0) {
        	SetTimerEx("Countdown", 100, false, "i", playerid); //Keep this at 100milliseconds
        } else {
            SendClientMessageEx(playerid, COLOR_WHITE, "There is already a countdown currently started.");
        }
    } else if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pTogReports] == 0) {
        if(CountDown == 0) {
        	SetTimerEx("Countdown", 100, false, "i", playerid); //Keep this at 100milliseconds
        } else {
            SendClientMessageEx(playerid, COLOR_WHITE, "There is already a countdown currently started.");
        }
    }
    return 1;
}

CMD:reporttips(playerid, params[])
{
	ShowPlayerDialog(playerid,7955,DIALOG_STYLE_MSGBOX,"Report tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.\n- For shop orders use the /shoporder command","Close", "");
	return 1;
}

CMD:ipwhitelist(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], query[256], giveplayer[MAX_PLAYER_NAME], ip[16];
		if(sscanf(params, "s[24]s[16]", giveplayer, ip))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ipwhitelist [admin name] [IP]");
			return 1;
		}

		new tmpName[24], tmpIP[16];
		mysql_escape_string(giveplayer, tmpName, MainPipeline);
		mysql_escape_string(ip, tmpIP, MainPipeline);
		SetPVarString(playerid, "OnIPWhitelist", tmpName);

		format(query, sizeof(query), "UPDATE `accounts` SET `SecureIP`='%s' WHERE `Username`='%s' AND `AdminLevel` <= %d", tmpIP, tmpName, PlayerInfo[playerid][pAdmin]);
		mysql_function_query(MainPipeline, query, false, "OnIPWhitelist", "i", playerid);

		format(string, sizeof(string), "Attempting to whitelist %s on %s's account...", tmpIP, tmpName);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

CMD:setcapping(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {
		if(isnull(params)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setcapping [ping]");
		}

		new
			iPingas = strval(params);

		if(!(250 <= iPingas <= 1000)) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "The specified ping limit can not be lower than 250 or higher than 1000.");
		}

		new
			szMessage[58 + MAX_PLAYER_NAME];

		format(szMessage, sizeof(szMessage), "AdmCmd: %s has adjusted the /capture ping limit to %d.", GetPlayerNameEx(playerid), iPingas);
		ABroadCast(COLOR_LIGHTRED, szMessage, 4);
		pointpinglimit = iPingas;
	}
	return 1;
}

CMD:hosp(playerid, params[]) {
	return cmd_hospital(playerid, params);
}

CMD:hospital(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid))
		{
			if(PlayerInfo[playerid][pHospital] > 0)
			{
				DeletePVar(playerid, "HospitalTimer");
				HospitalSpawn(playerid);
				PlayerInfo[playerid][pHospital] = 0;
				return SendClientMessageEx(playerid, COLOR_GREY, "You have released yourself from the hospital.");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hospital [player]");
		}
		else
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(PlayerInfo[giveplayerid][pHospital] > 0)
				{
					format(string, sizeof(string), " You have forced %s out of the hospital.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SendClientMessageEx(giveplayerid, COLOR_WHITE, "You have been forced out of the hospital by an Admin.");
					DeletePVar(giveplayerid, "HospitalTimer");
					HospitalSpawn(giveplayerid);
					PlayerInfo[giveplayerid][pHospital] = 0;
					DeletePVar(giveplayerid, "MedicBill");
				}
				else SendClientMessageEx(playerid, COLOR_GRAD2, "That person is not in the hospital!");
			}
			else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
	}
	return 1;
}

CMD:revive(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /revive [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(string, sizeof(string), " You have revived %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "You have been revived by an Admin.");
				format(string, sizeof(string), "AdmCmd: %s has been revived by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/admin.log", string);

				KillEMSQueue(giveplayerid);
   				ClearAnimations(giveplayerid);
   				SetPlayerHealth(giveplayerid, 100);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That person is not injured!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:revivenear(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], radius, count;
		if(sscanf(params, "d", radius)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /revivenear [radius]");

		if(radius < 1 || radius > 100)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Radius must be higher than 0 and lower than 100!");
			return 1;
		}
        //foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(GetPVarInt(i, "Injured") == 1)
				{
					if(ProxDetectorS(radius, playerid, i))
					{
						SetPlayerHealth(i, 100);
						count++;
					}
					SendClientMessageEx(i, COLOR_WHITE, "You have been revived by an Admin.");
					KillEMSQueue(i);
					ClearAnimations(i);
					SetPlayerHealth(i, 100);
					format(string, sizeof(string), "AdmCmd: %s has been revived by %s", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
					Log("logs/admin.log", string);
				}
			}	
        }
		format(string, sizeof(string), "You have revived everyone (%d) nearby.", count);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:forcedeath(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /forcedeath [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(string, sizeof(string), " You have forced %s to death.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "You have been forced to death by an Admin.");
				KillEMSQueue(giveplayerid);
				ResetPlayerWeaponsEx(giveplayerid);
				SpawnPlayer(giveplayerid);
				format(string, sizeof(string), "AdmCmd: %s has forced death %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				Log("logs/admin.log", string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That person is not injured!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:giveweapon(playerid, params[])
{
	if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot do this while being in the Hunger Games Event!");
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		return 1;
	}
	if(GetPVarInt( playerid, "EventToken") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
	new Float:health;
	GetPlayerHealth(playerid, health);
	if (health < 80)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give weapons if your health is below 80!");
		return 1;
	}

	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||PlayerInfo[playerid][pHospital]!=0||GetPlayerState(playerid) == 7)
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You can not give weapons in a vehicle!");
		return 1;
	}

	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		new string[58];
		format(string, sizeof(string), "You must wait %d seconds before giving another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}

	new string[128], giveplayerid, weapon[64];
	if(sscanf(params, "us[64]", giveplayerid, weapon))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giveweapon [player] [weapon name]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: sdpistol, shotgun, 9mm, mp5, uzi, tec9, rifle, deagle, ak47, m4, spas12, sniper");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: flowers, knuckles, baseballbat, cane, shovel, poolcue, golfclub, katana, dildo, parachute");
		return 1;
	}
	if (!IsPlayerConnected(giveplayerid)) {
		return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	if(IsPlayerInAnyVehicle(giveplayerid))
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You can not give weapons to players in vehicles!");
		return 1;
	}
	if(giveplayerid == playerid)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give a weapon to yourself!");
		return 1;
	}
	if(!ProxDetectorS(3.0, playerid, giveplayerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
		return 1;
	}
	if(PlayerInfo[playerid][pMember] != PlayerInfo[giveplayerid][pMember] && PlayerInfo[playerid][pMember] != INVALID_GROUP_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give weapons to players outside your faction!");
		return 1;
	}
	if(PlayerInfo[giveplayerid][pConnectHours] < 2 || PlayerInfo[giveplayerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "That person is currently restricted from possessing weapons");
	if(IsPlayerInAnyVehicle(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Please exit the vehicle, before using this command.");
	if(strcmp(weapon, "sdpistol", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 2 ] == 23)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 2 ] != 23 && PlayerInfo[giveplayerid][pGuns][ 2 ] != 24)
			{
				if(PlayerInfo[playerid][pDonateRank] > 2 || PlayerInfo[playerid][pFamed] > 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give away weapons if you're Gold+ VIP/Famed+!");

				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your silenced pistol.");
				format(string, sizeof(string), "* %s has given %s their silenced pistol.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 23);
				GivePlayerValidWeapon(giveplayerid, 23, 60000);
				/*new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s(IP:%s) has given %s (IP:%s) their silenced pistol.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/pay.log", string);*/
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person already has a silenced pistol or Desert Eeagle!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	if(strcmp(weapon, "9mm", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 2 ] == 22)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 2 ] != 22 && PlayerInfo[giveplayerid][pGuns][ 2 ] != 24)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your 9mm pistol.");
				format(string, sizeof(string), "* %s has given %s their 9mm pistol.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 22);
				GivePlayerValidWeapon(giveplayerid, 22, 60000);
				/*new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their 9mm pistol.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/pay.log", string);*/
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person already has a silenced pistol or Desert Eeagle!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "shotgun", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 3 ] == 25)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 3 ] != 25 && PlayerInfo[giveplayerid][pGuns][ 3 ] != 27)
			{
				if(PlayerInfo[playerid][pDonateRank] > 2 || PlayerInfo[playerid][pFamed] > 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give away weapons if you're Gold+ VIP/Famed+!");

				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your shotgun.");
				format(string, sizeof(string), "* %s has given %s their shotgun.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 25);
				GivePlayerValidWeapon(giveplayerid, 25, 60000);
				/*new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s(IP:%s) has given %s (IP:%s) their shotgun.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/pay.log", string);*/
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person already has a MP5, Micro SMG or Tec-9!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "mp5", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 4 ] == 29)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 4 ] != 28 && PlayerInfo[giveplayerid][pGuns][ 4 ] != 29 && PlayerInfo[giveplayerid][pGuns][ 4 ] != 32)
			{
				if(PlayerInfo[playerid][pDonateRank] > 2 || PlayerInfo[playerid][pFamed] > 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give away weapons if you're Gold+ VIP/Famed+!");

				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your MP5.");
				format(string, sizeof(string), "* %s has given %s their MP5.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 29);
				GivePlayerValidWeapon(giveplayerid, 29, 60000);
				/*new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their MP5.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/pay.log", string);*/
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person already has a MP5!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "uzi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 4 ] == 28)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 4 ] != 28 && PlayerInfo[giveplayerid][pGuns][ 4 ] != 29 && PlayerInfo[giveplayerid][pGuns][ 4 ] != 32)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your Micro SMG.");
				format(string, sizeof(string), "* %s has given %s their Micro SMG.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 28);
				GivePlayerValidWeapon(giveplayerid, 28, 60000);
				/*new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their Micro SMG.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/pay.log", string);*/
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person already has a MP5, Micro SMG or Tec-9!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "tec9", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 4 ] == 32)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 4 ] != 28 && PlayerInfo[giveplayerid][pGuns][ 4 ] != 29 && PlayerInfo[giveplayerid][pGuns][ 4 ] != 32)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your Tec-9.");
				format(string, sizeof(string), "* %s has given %s their Tec-9.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 32);
				GivePlayerValidWeapon(giveplayerid, 32, 60000);
				/*new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their Tec-9.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/pay.log", string);*/
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person already has a MP5, Micro SMG or Tec-9!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "deagle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 2 ] == 24)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 2 ] != 24)
			{
				if(PlayerInfo[playerid][pDonateRank] > 2 || PlayerInfo[playerid][pFamed] > 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give away weapons if you're Gold+ VIP/Famed+!");

				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your Desert Eagle.");
				format(string, sizeof(string), "* %s has given %s their Desert Eagle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 24);
				GivePlayerValidWeapon(giveplayerid, 24, 60000);
				/*new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their Desert Eagle.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/pay.log", string);*/
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person already has a Desert Eeagle!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "rifle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 6 ] == 33)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 6 ] != 33 && PlayerInfo[giveplayerid][pGuns][ 6 ] != 34)
			{
				if(PlayerInfo[playerid][pFamed] > 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give away this weapon as you're Famed+!");
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your rifle.");
				format(string, sizeof(string), "* %s has given %s their rifle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 33);
				GivePlayerValidWeapon(giveplayerid, 33, 60000);
				/*new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their rifle.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/pay.log", string);*/
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person already has a rifle!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "ak47", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 5 ] == 30)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 5 ] != 30 && PlayerInfo[giveplayerid][pGuns][ 5 ] != 31)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your AK-47.");
				format(string, sizeof(string), "* %s has given %s their AK-47.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 30);
				GivePlayerValidWeapon(giveplayerid, 30, 60000);
				/*new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their AK-47.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/pay.log", string);*/
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person already has a AK-47 or M4!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "m4", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 5 ] == 31)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 5 ] != 31)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your M4.");
				format(string, sizeof(string), "* %s has given %s their M4.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 31);
				GivePlayerValidWeapon(giveplayerid, 31, 60000);
				/*new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their M4.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/pay.log", string);*/
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person already has a M4!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "spas12", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 3 ] == 27)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 3 ] != 27)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your SPAS-12.");
				format(string, sizeof(string), "* %s has given %s their SPAS-12.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 27);
				GivePlayerValidWeapon(giveplayerid, 27, 60000);
				/*new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their SPAS-12.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/pay.log", string);*/
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person already has a SPAS-12!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "sniper", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 6 ] == 34)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 6 ] != 34)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your sniper rifle.");
				format(string, sizeof(string), "* %s has given %s their sniper rifle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 34);
				GivePlayerValidWeapon(giveplayerid, 34, 60000);
				/*new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their sniper rifle.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/pay.log", string);*/
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person already has a sniper rifle!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "flowers", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 10 ] == 14)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your flowers.");
			format(string, sizeof(string), "* %s has given %s their flowers.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 14);
			GivePlayerValidWeapon(giveplayerid, 14, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their flowers.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "knuckles", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 0 ] == 1)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your brass knuckles.");
			format(string, sizeof(string), "* %s has given %s their brass knuckles.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 1);
			GivePlayerValidWeapon(giveplayerid, 1, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their brass knuckles.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "baseballbat", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 5)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your baseball bat.");
			format(string, sizeof(string), "* %s has given %s their baseball bat.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 5);
			GivePlayerValidWeapon(giveplayerid, 5, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their baseball bat.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "cane", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 10 ] == 15)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your cane.");
			format(string, sizeof(string), "* %s has given %s their cane.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 15);
			GivePlayerValidWeapon(giveplayerid, 15, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their cane.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "shovel", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 6 ] == 6)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your shovel.");
			format(string, sizeof(string), "* %s has given %s their shovel.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 6);
			GivePlayerValidWeapon(giveplayerid, 6, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their shovel.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "golfclub", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 2)
		{
			if(PlayerInfo[playerid][pDonateRank] > 2 || PlayerInfo[playerid][pFamed] > 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give away weapons if you're Gold+ VIP/Famed+!");

			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your golf club.");
			format(string, sizeof(string), "* %s has given %s golf club.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 2);
			GivePlayerValidWeapon(giveplayerid, 2, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their golf club.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "katana") == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 8)
		{
			if(PlayerInfo[playerid][pDonateRank] > 2 || PlayerInfo[playerid][pFamed] > 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give away weapons if you're Gold+ VIP/Famed+!");

			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your katana.");
			format(string, sizeof(string), "* %s has given %s their katana.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 8);
			GivePlayerValidWeapon(giveplayerid, 8, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their katana.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "dildo", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 10 ] == 10)
		{
			if(PlayerInfo[playerid][pDonateRank] > 2 || PlayerInfo[playerid][pFamed] > 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give away weapons if you're Gold+ VIP/Famed+!");

			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your dildo.");
			format(string, sizeof(string), "* %s has given %s their dildo.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 10);
			GivePlayerValidWeapon(giveplayerid, 10, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their dildo.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "parachute", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 11 ] == 46)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your parachute.");
			format(string, sizeof(string), "* %s has given %s their parachute.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 46);
			GivePlayerValidWeapon(giveplayerid, 46, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
			format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their parachute.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You have entered an invalid weapon name.");
	}
	return 1;
}

CMD:dropgun(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dropgun [weapon name]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: sdpistol, shotgun, 9mm, mp5, uzi, tec9, rifle, deagle, ak47, m4, spas12, sniper, camera");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: flowers, knuckles, baseballbat, cane, shovel, poolcue, golfclub, katana, dildo, parachute");
		if (IsAHitman(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: knife");
		}
		if(IsACop(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: nitestick, mace, smoke, chainsaw, fire");
		}

		return 1;
		}

	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You can not drop weapons in a vehicle!");
		return 1;
	}
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		return 1;
	}
	if(GetPVarInt( playerid, "EventToken") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
	new string[128];
	if(strcmp(params, "sdpistol", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 2 ] == 23)
		{
			if(pTazer{playerid} == 1) return SendClientMessageEx(playerid, COLOR_RED, "You cannot drop your tazer.");
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your silenced pistol.");
			format(string, sizeof(string), "* %s has dropped their silenced pistol.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 23);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "camera", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 9 ] == 43)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your camera.");
			format(string, sizeof(string), "* %s has dropped their camera.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 43);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "nitestick", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 3)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your nitestick.");
			format(string, sizeof(string), "* %s has dropped their nitestick.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 3);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "mace", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][9] == 41)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your mace.");
			format(string, sizeof(string), "* %s has dropped their mace.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 41);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "knife", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 4)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your knife.");
			format(string, sizeof(string), "* %s has dropped their knife.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 4);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "9mm", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 2 ] == 22)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your 9mm pistol.");
			format(string, sizeof(string), "* %s has dropped their 9mm pistol.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 22);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "shotgun", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 3 ] == 25)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your shotgun.");
			format(string, sizeof(string), "* %s has dropped their shotgun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 25);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "mp5", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 4 ] == 29)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your MP5.");
			format(string, sizeof(string), "* %s has dropped their MP5.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 29);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "uzi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 4 ] == 28)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your Micro SMG.");
			format(string, sizeof(string), "* %s has dropped their Micro SMG.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 28);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "uzi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 4 ] == 32)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your Tec-9.");
			format(string, sizeof(string), "* %s has dropped their Tec-9.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 32);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "deagle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 2 ] == 24)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your Desert Eagle.");
			format(string, sizeof(string), "* %s has dropped their Desert Eagle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 24);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "rifle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 6 ] == 33)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your rifle.");
			format(string, sizeof(string), "* %s has dropped their rifle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 33);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "ak47", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 5 ] == 30)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your AK-47.");
			format(string, sizeof(string), "* %s has dropped their AK-47.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 30);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "m4", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 5 ] == 31)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your M4.");
			format(string, sizeof(string), "* %s has dropped their M4.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 31);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "spas12", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 3 ] == 27)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your SPAS-12.");
			format(string, sizeof(string), "* %s has dropped their SPAS-12.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 27);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "sniper", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 6 ] == 34)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your sniper rifle.");
			format(string, sizeof(string), "* %s has dropped their sniper rifle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 34);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "flowers", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 10 ] == 14)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your flowers.");
			format(string, sizeof(string), "* %s has dropped their flowers.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 14);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "knuckles", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 0 ] == 1)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your brass knuckles.");
			format(string, sizeof(string), "* %s has dropped their brass knuckles.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "baseballbat", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 5)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your baseball bat.");
			format(string, sizeof(string), "* %s has dropped their baseball bat.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 5);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "cane", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 10 ] == 15)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your cane.");
			format(string, sizeof(string), "* %s has dropped their cane.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pGuns][ 10 ] = 0;
			RemovePlayerWeapon(playerid, 15);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "shovel", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 6)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your shovel.");
			format(string, sizeof(string), "* %s has dropped their shovel.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 6);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "golfclub", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 2)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your golf club.");
			format(string, sizeof(string), "* %s has dropped their golf club.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 2);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "katana") == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 8)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your katana.");
			format(string, sizeof(string), "* %s has dropped their katana.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 8);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "dildo", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 10 ] == 10)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your dildo.");
			format(string, sizeof(string), "* %s has dropped their dildo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 10);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "parachute", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 11 ] == 46)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your parachute.");
			format(string, sizeof(string), "* %s has dropped their parachute.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 46);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "smoke", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 8 ] == 17)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your smoke grenade.");
			format(string, sizeof(string), "* %s has dropped their smoke grenade.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 17);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "chainsaw", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 9)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your chainsaw.");
			format(string, sizeof(string), "* %s has dropped their chainsaw.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 9);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "fire", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 9 ] == 42)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your fire extinguisher.");
			format(string, sizeof(string), "* %s has dropped their fire extinguisher.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 42);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "minigun", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 7 ] == 38)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your minigun.");
			format(string, sizeof(string), "* %s has dropped their minigun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 38);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "poolcue", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 7)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your pool cue.");
			format(string, sizeof(string), "* %s has dropped their pool cue.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 7);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You have entered an invalid weapon name.");
	}
	return 1;
}

CMD:buddyinvite(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "You need to be Silver VIP+ to use this function!");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /buddyinvite [player]");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "That person is not connected!");	
	if(PlayerInfo[giveplayerid][pDonateRank] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Unable to invite: That person is already a VIP.");
	new days, daytime, string[128];
	if(PlayerInfo[playerid][pDonateRank] == 2)
	{
		daytime = 7;
	}
	else if(PlayerInfo[playerid][pDonateRank] == 3)
	{
		daytime = 1;
	}
	else if(PlayerInfo[playerid][pDonateRank] >= 4)
	{
		daytime = 0;
	}
	ConvertTime(gettime() - PlayerInfo[playerid][pVIPInviteDay], .ctd=days);
	if(days >= 1 && PlayerInfo[playerid][pDonateRank] >= 4)
	{
		PlayerInfo[playerid][pVIPInviteDay] = gettime();
		PlayerInfo[playerid][pBuddyInvites] = 3;
	}	
	if(days < daytime && PlayerInfo[playerid][pAdmin] < 1338) return SendClientMessageEx(playerid, COLOR_WHITE, "You must wait 7 days as silver or 1 day as gold, before inviting another person to become a VIP.");
	if(PlayerInfo[playerid][pDonateRank] >= 4 && PlayerInfo[playerid][pBuddyInvites] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You must wait 7 days as silver or 1 day as gold, before inviting another person to become a VIP.");
	PlayerInfo[giveplayerid][pDonateRank] = 1;
	PlayerInfo[giveplayerid][pTempVIP] = 3;
	PlayerInfo[giveplayerid][pBuddyInvited] = 1;
	format(string, sizeof(string), "You have invited %s to become a Bronze VIP for 3 hours.", GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "You have been invited by %s to become a Bronze VIP for 3 hours. Enjoy!", GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "BUDDY INVITE: %s has invited %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	Log("logs/setvip.log", string);
	if(PlayerInfo[playerid][pDonateRank] >= 4)
	{
		PlayerInfo[playerid][pBuddyInvites]--;
		format(string, sizeof(string), "Platinum VIP: You have %d invites left for today.", PlayerInfo[playerid][pBuddyInvites]);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	else
	{
		PlayerInfo[playerid][pVIPInviteDay] = gettime();
	}
	format(string, sizeof(string), "UPDATE `accounts` SET `VIPInviteDay` = %d, `BuddyInvites` = %d WHERE `id` = '%d'",
	PlayerInfo[playerid][pVIPInviteDay], PlayerInfo[playerid][pBuddyInvites], GetPlayerSQLId(playerid));
	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);	
	return 1;
}

CMD:travel(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 13.0, 2491.7783,2397.6230,4.2109))
	{
	    if(PlayerInfo[playerid][pFamed] >= 1)
	    {
	        if(isnull(params))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /travel [famed]");
				return 1;
			}
            if(strcmp(params,"famed",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1010.7523, -1121.7469, 24.1332);
					SetVehicleZAngle(tmpcar, 180.0373);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "Famed: You have traveled to the front of the famed lounge.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "You're not inside a vehicle!");
				}
			}
		}
		else
		    return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not part of famed!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 13.0, -4429.944824, 905.032470, 987.078186))
	{
		if(PlayerInfo[playerid][pDonateRank] > 0)
		{
			if(isnull(params))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /travel [location]");
				SendClientMessageEx(playerid, COLOR_GRAD1, "Locations: LS, SF, RC, LSVIP, SFVIP, LVVIP, FC, BAYSIDE");
				return 1;
			}

			if(strcmp(params,"ls",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to Los Santos with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}

			if(strcmp(params,"sf",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1605.0,720.0,12.0);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to San Fierro with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}
			if(strcmp(params,"rc",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1253.70, 343.73, 19.41);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to Red County with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}
			if(strcmp(params,"lsvip",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1826.76, -1538.57, 13.25);
					SetPlayerFacingAngle(playerid, 255.08);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to the VIP Lounge with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}
			if(strcmp(params,"sfvip",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -2441.009521, 522.708923, 29.785852);
					SetPlayerFacingAngle(playerid, 181.54);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to the VIP Lounge with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}
			if(strcmp(params,"lvvip",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1875.7731, 1366.0796, 16.8998);
					SetPlayerFacingAngle(playerid, 255.08);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to the VIP Lounge with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}
			if(strcmp(params,"fc",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 162.7059, 1180.0232, 14.6859);
					SetPlayerFacingAngle(playerid, 255.08);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to the VIP Lounge with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}
			if(strcmp(params,"bayside",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -2465.7285, 2238.6355, 4.6803);
					SetPlayerFacingAngle(playerid, 255.08);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to the VIP Lounge with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}
		}
	}
	return 1;
}

CMD:setcode(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 99999)
	{
		new code[32], string[128], bypass;
		if (sscanf(params, "s[32]d", code, bypass))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Usage: /setcode <code> <bypass 0/1>");
			SendClientMessageEx(playerid, COLOR_GREY, "If code is 'off', the active code will be disabled.");
			return 1;
		}

		format(GiftCode, 32, code);
		GiftCodeBypass = bypass;
        g_mysql_SaveMOTD();
		mysql_function_query(MainPipeline, "UPDATE `accounts` SET `GiftCode` = 0;", false, "OnQueryFinish", "i", SENDDATA_THREAD);
		//foreach(new i : Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pGiftCode] == 1)
					PlayerInfo[i][pGiftCode] = 0;
			}		
		}


		if (strcmp(code, "off") == 0)
		{
			format(string, sizeof(string), "You have disabled the gift code.");
		}
		else
		{
			format(string, sizeof(string), "You have set the gift code to \"%s\".", code);
		}

		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}

	return 1;
}

CMD:giftcode(playerid, params[])
{
	if (isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /giftcode <code>");
		return 1;
	}
	if(PlayerInfo[playerid][pLevel] < 3) {
		SendClientMessageEx(playerid, COLOR_GREY, "You must be at least level 3 to use this command.");
		return 1;
	}
	if (strcmp(GiftCode, "off") == 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "No gift codes are currently active.");
		return 1;
	}
	else
	{
	    if (strcmp(params, GiftCode) == 0)
		{
		    if(GiftCodeBypass > 0)
		    {
		        if(PlayerInfo[playerid][pGiftCode] == 0)
		        {
		            SendClientMessageEx(playerid, COLOR_WHITE, "The code you entered was valid!");
		        	PlayerInfo[playerid][pGiftCode] = 1;
		        	GiftPlayer(MAX_PLAYERS, playerid);
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "You have already entered the gift code.");
				}
			}
			else
			{
			    if(PlayerInfo[playerid][pGiftTime] == 0)
			    {
					if(PlayerInfo[playerid][pGiftCode] == 0)
					{
					    SendClientMessageEx(playerid, COLOR_WHITE, "The code you entered was valid!");
			  			PlayerInfo[playerid][pGiftCode] = 1;
			  			GiftPlayer(MAX_PLAYERS, playerid);
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_GREY, "You have already entered the gift code.");
					}
			    }
			    else
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "You have already received a gift in the last 5 hours.");
			    }
			}
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "You have entered a invalid gift code.");
		}
	}
	return 1;
}

CMD:dynamicgift(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
			return 1;
		}

		new string[128], Float:Position[4];
		if(dynamicgift == 0)
		{
			GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
			GetPlayerFacingAngle(playerid, Position[3]);
			dynamicgift = CreateDynamicObject(19054, Position[0], Position[1], Position[2]-0.4, 0.0, 0.0, Position[3], -1, -1, -1, 200.0);
			dynamicgift3DText = CreateDynamic3DTextLabel("/getgift\nTo reach inside.",COLOR_YELLOW,Position[0], Position[1], Position[2]+0.25,8.0);
			SetPlayerPos(playerid, Position[0], Position[1], Position[2]+3);
			format(string, sizeof(string), "AdmCmd: %s has placed the dynamic gift.", GetPlayerNameEx(playerid));
			
			if(IsDynamicGiftBoxEnabled == true)
			{
				SendClientMessageEx(playerid, COLOR_RED, "Due to the Dynamic Giftbox being enabled, you may view the content inside the giftbox.");
				
				if(PlayerInfo[playerid][pAdmin] == 99999) 
				{
					SendClientMessageEx(playerid, COLOR_RED, "Executive Admin Note: You must fill up the giftbox with /dgedit.");
				}
				ShowPlayerDynamicGiftBox(playerid);
			}
			ABroadCast( COLOR_LIGHTRED, string, 1337);
		}
		else
		{
			DestroyDynamicObject(dynamicgift);
			dynamicgift = 0;
			DestroyDynamic3DTextLabel( Text3D:dynamicgift3DText );
			format(string, sizeof(string), "AdmCmd: %s has destroyed the dynamic gift.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, string, 1337);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:nextgift(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pGiftTime] < 1)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "You're now able to receive a gift from the giftbox or the safe.");
	}
	else {	
		format(string, sizeof(string), "You will be able to receive a gift in %d minutes.", PlayerInfo[playerid][pGiftTime]);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}	
	return 1;
}

CMD:getgift(playerid, params[])
{
	new string[128], year, month, day;
	getdate(year, month, day);

	if(IsPlayerInRangeOfPoint(playerid, 3.0,2546.680908, 1403.430786, 7699.584472) || IsPlayerInRangeOfPoint(playerid, 3.0,1726.1000, 1370.1000, 1449.9000) || IsPlayerInRangeOfPoint(playerid, 3.0,1763.5000, 1432.5000, 2015.7000) || IsPlayerInRangeOfPoint(playerid, 3.0,772.4000, 1743.2000, 1938.8800))
	{
		if(PlayerInfo[playerid][pDonateRank] >= 1)
		{
			if(VIPGifts == 0 && PlayerInfo[playerid][pDonateRank] < 4)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "The safe is locked!");
				return 1;
			}
			if(PlayerInfo[playerid][pGiftTime] > 0)
			{
			    format(string, sizeof(string),"Item: Reset Gift Timer\nYour Credits: %s\nCost: {FFD700}%s{A9C4E4}\nCredits Left: %s", number_format(PlayerInfo[playerid][pCredits]), number_format(ShopItems[17][sItemPrice]), number_format(PlayerInfo[playerid][pCredits]-ShopItems[17][sItemPrice]));
	    		ShowPlayerDialog( playerid, DIALOG_SHOPGIFTRESET, DIALOG_STYLE_MSGBOX, "Reset Gift Timer", string, "Purchase", "Exit" );
				SendClientMessageEx(playerid, COLOR_GRAD2, "You have already received a gift in the last 5 hours!");
				return 1;
			}
			format(string, sizeof(string), "* %s reaches inside the safe with their eyes closed.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GiftPlayer(MAX_PLAYERS, playerid);
		}
	}
	else if(dynamicgift != 0)
	{
		new Float:Position[3];
		GetDynamicObjectPos(dynamicgift, Position[0], Position[1], Position[2]);

		if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2]))
		{
			if(PlayerInfo[playerid][pLevel] >= 3)
			{
				if(PlayerInfo[playerid][pGiftTime] > 0)
				{
				    format(string, sizeof(string),"Item: Reset Gift Timer\nYour Credits: %s\nCost: {FFD700}%s{A9C4E4}\nCredits Left: %s", number_format(PlayerInfo[playerid][pCredits]), number_format(ShopItems[17][sItemPrice]), number_format(PlayerInfo[playerid][pCredits]-ShopItems[17][sItemPrice]));
	    			ShowPlayerDialog( playerid, DIALOG_SHOPGIFTRESET, DIALOG_STYLE_MSGBOX, "Reset Gift Timer", string, "Purchase", "Exit" );
					SendClientMessageEx(playerid, COLOR_GRAD2, "You have already received a gift in the last 5 hours!");
					return 1;
				}
				format(string, sizeof(string), "* %s reaches inside the bag of gifts with their eyes closed.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				
				if(IsDynamicGiftBoxEnabled == true)
				{
					GiftPlayer(MAX_PLAYERS, playerid, 1);
				}
				else if(IsDynamicGiftBoxEnabled == false)
				{
					GiftPlayer(MAX_PLAYERS, playerid);
				}
				if(month == 12 && day == 25) // Christmas event.
				{
					PlayerInfo[playerid][pHungerTimer] = 0;
					PlayerInfo[playerid][pHungerDeathTimer] = 0;
					PlayerInfo[playerid][pHunger] += 83;
					
					if(PlayerInfo[playerid][pHunger] > 100) 
						PlayerInfo[playerid][pHunger] = 100;

					SendClientMessageEx(playerid, COLOR_GRAD2, "* Your hunger has been refilled!  Merry christmas!");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "* You must be at least level 3 to use this, sorry!");
			}
		}
	}
	return 1;
}

CMD:viplocker(playerid, params[]) {
    #if defined zombiemode
	if(zombieevent == 1 && GetPVarType(playerid, "pIsZombie")) return SendClientMessageEx(playerid, COLOR_GREY, "Zombies can't use this.");
	#endif
	if(IsPlayerInRangeOfPoint(playerid, 7.0, 2555.747314, 1404.106079, 7699.584472) /*LS Main*/ 
	|| IsPlayerInRangeOfPoint(playerid, 7.0, 1832.0533, 1380.7281, 1464.3822) /*LV Main*/ 
	|| IsPlayerInRangeOfPoint(playerid, 7.0, 772.4844, 1715.7213, 1938.0391) /*LV Plat*/
	|| IsPlayerInRangeOfPoint(playerid, 7.0, 1378.0017, 1747.4668, 927.3564) /*Olympics*/)
	switch(PlayerInfo[playerid][pDonateRank]) {
		case 0: SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a VIP.");
		case 1: ShowPlayerDialog(playerid, 7483, DIALOG_STYLE_LIST, "VIP Locker", "First Aid Kit (Free)\nKevlar Vest ($15000)\nWeapons\nClothes Corner\nJob Center\nVIP Color", "Select", "Cancel");
		case 2: ShowPlayerDialog(playerid, 7483, DIALOG_STYLE_LIST, "VIP Locker", "First Aid Kit (Free)\nKevlar Vest ($10000)\nWeapons\nClothes Corner\nJob Center\nVIP Color", "Select", "Cancel");
		default: ShowPlayerDialog(playerid, 7483, DIALOG_STYLE_LIST, "VIP Locker", "First Aid Kit (Free)\nKevlar Vest (Free)\nWeapons\nClothes Corner\nJob Center\nVIP Color", "Select", "Cancel");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You're not at the VIP locker.");
	return 1;
}

CMD:rc(playerid, params[])
{
	#if defined zombiemode
	if(zombieevent == 1 && GetPVarType(playerid, "pIsZombie")) return SendClientMessageEx(playerid, COLOR_GREY, "Zombies can't use this.");
	#endif
	new ccar = GetClosestCar(playerid);
	if(IsARC(ccar) && IsPlayerInRangeOfVehicle(playerid, ccar, 5.0))
	{
		if(IsPlayerInVehicle(playerid,ccar))
		{
			new Float:vehPos[3];
			GetVehiclePos(ccar,vehPos[0], vehPos[1], vehPos[2]);
			SetPlayerPos(playerid,vehPos[0], vehPos[1]+0.5, vehPos[2]+0.5);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					new v = GetPlayerVehicle(i, ccar);
					if(v != -1 && PlayerVehicleInfo[i][v][pvLocked] == 0)
					{
						new Float:playerPos[3];
						GetPlayerPos(playerid,playerPos[0],playerPos[1],playerPos[2]);
						SetPlayerPos(playerid,playerPos[0],playerPos[1],playerPos[2]-500);
						IsPlayerEntering{playerid} = true;
						PutPlayerInVehicle(playerid, ccar, 0);
					}
				}	
			}
		}
	}
	return 1;
}

CMD:oipcheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
		return 1;
	}

	new query[128], name[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", name)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /oipcheck [name]");

	new tmpName[24];
	mysql_escape_string(name, tmpName, MainPipeline);

	format(query, sizeof(query), "SELECT `AdminLevel`, `Username`, `IP` FROM `accounts` WHERE `Username` = '%s'", tmpName);
	mysql_function_query(MainPipeline, query, true, "OnIPCheck", "i", playerid);
	return 1;
}

CMD:ipcheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ipcheck [player]");

		if(giveplayerid == INVALID_PLAYER_ID) return 1;
		if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		
		if(PlayerInfo[giveplayerid][pAdmin] <= 1 || (PlayerInfo[giveplayerid][pAdmin] <= PlayerInfo[playerid][pAdmin] && PlayerInfo[playerid][pAdmin] >= 1338))
		{
			new playerip[32];
			GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
			format(string, sizeof(string), "(ID: %d) - (Name: %s) - (IP: %s)", giveplayerid, GetPlayerNameEx(giveplayerid), playerip);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has IP Checked %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			if(PlayerInfo[giveplayerid][pAdmin] >= 2) Log("logs/adminipcheck.log", string); else Log("logs/ipcheck.log", string);
			return 1;
		}
		if(PlayerInfo[giveplayerid][pAdmin] >= 2)
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				format(string, sizeof(string), "%s has tried to check the IP address of a higher admin\nPlease report this to SIU/OED or an EA", GetPlayerNameEx(playerid));
				for(new i; i < MAX_PLAYERS; i++)
				{
					if(PlayerInfo[i][pAdmin] >= 4) ShowPlayerDialog(i, DIALOG_NOTHING, DIALOG_STYLE_MSGBOX, "{FFFF00}AdminWarning - {FF0000}Report ASAP", string, "Close", "");
				}
			}
			format(string, sizeof(string), "%s tried to IP check %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("logs/adminipcheck.log", string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:pfine(playerid, params[])
{
	new string[128], giveplayerid, percentage, minimum, reason[64];
	if(sscanf(params, "udds[64]", giveplayerid, percentage, minimum, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pfine [player] [percentage] [minimum] [reason]");

	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(IsPlayerConnected(giveplayerid))
		{
			new totalwealth = PlayerInfo[giveplayerid][pAccount] + GetPlayerCash(giveplayerid);
			if(PlayerInfo[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hSafeMoney];
			if(PlayerInfo[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hSafeMoney];
			if(PlayerInfo[giveplayerid][pPhousekey3] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hSafeMoney];
			if(totalwealth < 1) return SendClientMessageEx(giveplayerid, COLOR_GRAD2, "That person does not have any money!");

			new fine = percentage * totalwealth / 100;
			if(percentage < 1 || percentage > 100) return SendClientMessageEx(playerid, COLOR_GRAD2, "Percentage must be greater than 0 and below 100.");
			else if(minimum < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Minimum amount must be greater than 0.");
			
			if(minimum > fine)
			{
				//GivePlayerCash(giveplayerid, -minimum);
				GivePlayerCashEx(giveplayerid, TYPE_ONHAND, -minimum);
				format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(minimum), GetPlayerNameEx(playerid), reason);
				Log("logs/admin.log", string);
				format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: %s", GetPlayerNameEx(giveplayerid), number_format(minimum), GetPlayerNameEx(playerid), reason);
			}
			else
			{
				//GivePlayerCash(giveplayerid, -fine);
				GivePlayerCashEx(giveplayerid, TYPE_ONHAND, -fine);
				format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fine), GetPlayerNameEx(playerid), reason);
				Log("logs/admin.log", string);
				format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: %s", GetPlayerNameEx(giveplayerid), number_format(fine), GetPlayerNameEx(playerid), reason);
			}

			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			//OnPlayerStatsUpdate(giveplayerid);
			return 1;
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:fine(playerid, params[])
{
	new string[128], giveplayerid, amount, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, amount, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fine [player] [amount] [reason]");

	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(IsPlayerConnected(giveplayerid))
		{
			if (amount < 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "Amount must be greater than 0");
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(amount), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: %s", GetPlayerNameEx(giveplayerid), number_format(amount), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			GivePlayerCash(giveplayerid, -amount);
			OnPlayerStatsUpdate(giveplayerid);
			return 1;
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not a level three admin.");
	}
	return 1;
}

CMD:sfine(playerid, params[])
{
	new string[128], giveplayerid, amount, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, amount, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sfine [player] [amount] [reason]");

	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(IsPlayerConnected(giveplayerid))
		{
			if (amount < 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "Amount must be greater than 0");
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s(%d) was silent fined $%s by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(amount), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was silent fined $%s by %s, reason: %s", GetPlayerNameEx(giveplayerid), number_format(amount), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 2);
			format(string, sizeof(string), "You have been silent fined $%s by %s, reason: %s", number_format(amount), GetPlayerNameEx(playerid), reason);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
			GivePlayerCash(giveplayerid, -amount);
			OnPlayerStatsUpdate(giveplayerid);
			return 1;
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not a level three admin.");
	}
	return 1;
}

CMD:listguns(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /listguns [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			new weapons[13][2], weaponname[50];
			if(GetPVarInt(giveplayerid, "EventToken") != 0 || GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That person is at an event/paintball so the weapons may appear as non-server sided.");
			}
			SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
			format(string, sizeof(string), "Weapons on %s:", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			for (new i = 0; i < 13; i++)
			{
				GetPlayerWeaponData(giveplayerid, i, weapons[i][0], weapons[i][1]);
				if(weapons[i][0] > 0)
				{
					if(PlayerInfo[giveplayerid][pGuns][i] == weapons[i][0])
					{
						GetWeaponName(weapons[i][0], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "%s (%d).", weaponname, weapons[i][0]);
						SendClientMessageEx(playerid, COLOR_GRAD1, string);
					}
					else
					{
						GetWeaponName(weapons[i][0], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "%s (%d) (non server-side).", weaponname, weapons[i][0]);
						SendClientMessageEx(playerid, COLOR_GRAD1, string);
					}
				}
			}
			SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:gotomapicon(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
		return 1;
	}

	new mapiconid;
	if(sscanf(params, "d", mapiconid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotomapicon [mapiconid]");

	if(mapiconid >= MAX_DMAPICONS || mapiconid < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotomapicon [mapiconid]");
		return 1;
	}
	SetPlayerPos(playerid, DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ]);
	SetPlayerVirtualWorld(playerid, DMPInfo[mapiconid][dmpVW]);
	SetPlayerInterior(playerid, DMPInfo[mapiconid][dmpInt]);
	return 1;
}

CMD:gotofpoint(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 2) 
	{
		new points, string[128];
		if(sscanf(params, "d", points)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotofpoint [pointid]");
		if(points < 1 || points > 9) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid point id!");
		
		SetPlayerPos(playerid, Points[points][Pointx], Points[points][Pointy], Points[points][Pointz]), SetPlayerVirtualWorld(playerid, Points[points][pointVW]);
		format(string, sizeof(string), "You have teleported to family point %d", points);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You're not authorized to use this command!");
	return 1;
}	

CMD:gotopoint(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
		return 1;
	}

	new points;
	if(sscanf(params, "d", points)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotopoint [pointid]");

	if(points >= MAX_EVENTPOINTS || points < 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotopoint [pointid]");
		return 1;
	}
	SetPlayerPos(playerid, EventPoints[points][epPosX], EventPoints[points][epPosY], EventPoints[points][epPosZ]);
	SetPlayerVirtualWorld(playerid, EventPoints[points][epVW]);
	SetPlayerInterior(playerid, EventPoints[points][epInt]);
	return 1;
}

CMD:createpoint(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
		return 1;
	}

	new string[128], flagable, pointid, prize[64];
	if(sscanf(params, "dds[64]", flagable, pointid, prize)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /createpoint [flagable] [pointid] [prize]");

	if(EventPoints[pointid][epObjectID] != 0)
	{
		DestroyDynamicPickup(EventPoints[pointid][epObjectID]);
		EventPoints[pointid][epObjectID] = 0;
		if(IsValidDynamic3DTextLabel(EventPoints[pointid][epText3dID]))
		{
			DestroyDynamic3DTextLabel(EventPoints[pointid][epText3dID]);
		}

		EventPoints[pointid][epPosX] = 0.0;
		EventPoints[pointid][epPosY] = 0.0;
		EventPoints[pointid][epPosZ] = 0.0;
		EventPoints[pointid][epVW] = 0;
		EventPoints[pointid][epInt] = 0;
	}
	new Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);
	new tvw = GetPlayerVirtualWorld(playerid);
	new tint = GetPlayerInterior(playerid);

	EventPoints[pointid][epPosX] = x;
	EventPoints[pointid][epPosY] = y;
	EventPoints[pointid][epPosZ] = z;
	EventPoints[pointid][epVW] = tvw;
	EventPoints[pointid][epInt] = tint;
	EventPoints[pointid][epFlagable] = flagable;
	format(EventPoints[pointid][epPrize], 64, "%s", prize);

	format(string,sizeof(string),"Event Point (ID: %d)\nPrize: %s\nType /claimpoint to claim your prize!", pointid, EventPoints[pointid][epPrize]);
	EventPoints[pointid][epObjectID] = CreateDynamicPickup(1274, 1, EventPoints[pointid][epPosX], EventPoints[pointid][epPosY], EventPoints[pointid][epPosZ], EventPoints[pointid][epVW]);
	EventPoints[pointid][epText3dID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, EventPoints[pointid][epPosX], EventPoints[pointid][epPosY], EventPoints[pointid][epPosZ]+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, EventPoints[pointid][epVW], EventPoints[pointid][epInt]);

	format(string,sizeof(string),"You have placed PointID %d at your current position.", pointid);
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	return 1;
}

CMD:deletepoint(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
		return 1;
	}

	new string[128], pointid;
	if(sscanf(params, "d", pointid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /deletepoint [pointid]");

	if(pointid >= MAX_EVENTPOINTS || pointid < 0)
	{
		return 1;
	}
	if(EventPoints[pointid][epObjectID] != 0)
	{
		DestroyDynamicPickup(EventPoints[pointid][epObjectID]);
		EventPoints[pointid][epObjectID] = 0;
		if(IsValidDynamic3DTextLabel(EventPoints[pointid][epText3dID]))
		{
			DestroyDynamic3DTextLabel(EventPoints[pointid][epText3dID]);
		}

		EventPoints[pointid][epPosX] = 0.0;
		EventPoints[pointid][epPosY] = 0.0;
		EventPoints[pointid][epPosZ] = 0.0;
		EventPoints[pointid][epVW] = 0;
		EventPoints[pointid][epInt] = 0;
		EventPoints[pointid][epFlagable] = 0;
		format(EventPoints[pointid][epPrize], 64, "");

		format(string,sizeof(string),"You have deleted PointID %d from the server.", pointid);
		SendClientMessageEx(playerid, COLOR_GRAD2, string);
	}
	return 1;
}

CMD:claimpoint(playerid, params[])
{
	for(new p = 0; p < MAX_EVENTPOINTS; p++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, EventPoints[p][epPosX], EventPoints[p][epPosY], EventPoints[p][epPosZ]))
		{
			if(EventPoints[p][epObjectID] != 0)
			{
				new string[128];

				format(string, sizeof(string), " Congratulations you have won a Special Prize (%s)!", EventPoints[p][epPrize]);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
				SendClientMessageEx(playerid, COLOR_GRAD2, " Note: This prize may take up to 48 hours to be rewarded..");
				if(EventPoints[p][epFlagable] == 1)
				{
					format(string, 128, "Special Prize (%s)", EventPoints[p][epPrize]);
                    AddFlag(playerid, INVALID_PLAYER_ID, string);
				}
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has just found PointID %d, they are now pending a special prize.", GetPlayerNameEx(playerid), p);
				ABroadCast(COLOR_YELLOW, string, 4);

				format(string, sizeof(string), "AdmCmd: %s has just found PointID %d, Prize: %s", GetPlayerNameEx(playerid), p, EventPoints[p][epPrize]);
				Log("logs/gifts.log", string);

				DestroyDynamicPickup(EventPoints[p][epObjectID]);
				EventPoints[p][epObjectID] = 0;

				if(IsValidDynamic3DTextLabel(EventPoints[p][epText3dID]))
				{
					DestroyDynamic3DTextLabel(EventPoints[p][epText3dID]);
				}

				EventPoints[p][epPosX] = 0.0;
				EventPoints[p][epPosY] = 0.0;
				EventPoints[p][epPosZ] = 0.0;
				EventPoints[p][epVW] = 0;
				EventPoints[p][epInt] = 0;
				EventPoints[p][epFlagable] = 0;
				format(EventPoints[p][epPrize], 64, "");
			}
		}
	}
	return 1;
}

CMD:serverstats(playerid, params[])
{
	new
		string[128],
		iVehCount,
		x;

	while(x < MAX_VEHICLES) if(GetVehicleModel(++x)) ++iVehCount;

	format(string,sizeof(string),"Server Statistics - Version %s (recorded since the 20th of August, 2010).",SERVER_GM_TEXT);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "* Objects: %d | Pickups: %d | Map icons: %d | 3D text labels: %d | Text draws: %d | Loaded houses: %d",CountDynamicObjects(),CountDynamicPickups(),CountDynamicMapIcons(),CountDynamic3DTextLabels(),textdrawscount,MAX_HOUSES);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "* Logins: %d | Connections: %d | Registrations: %d | Hackers autobanned: %d | Uptime: %d hours",TotalLogin, TotalConnect, TotalRegister, TotalAutoBan, TotalUptime);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "* Players connected: %d | Peak person count: %d (%d/%d/%d) | person vehicles loaded: %d | Total vehicles: %i",Iter_Count(Player),MaxPlayersConnected,MPDay,MPMonth,MPYear,PlayerCars, iVehCount);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:capture(playerid, params[])
{
    if(servernumber == 2)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This command is disabled!");
	    return 1;
	}
	new string[128];
	new myvw = GetPlayerVirtualWorld(playerid);

	new mypoint = -1;
	if(GetPVarInt(playerid,"Injured") == 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, " You can not capture while injured!");
		return 1;
	}
	if (PlayerInfo[playerid][pFMember] == INVALID_FAMILY_ID || PlayerInfo[playerid][pRank] < 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, " You are not high rank enough to capture!");
		return 1;
	}
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]))
		{
			if(myvw == Points[i][pointVW])
			{
				mypoint = i;
			}
		}		
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, " You are not at the capture place!");
		return 1;
	}
	if (Points[mypoint][Vulnerable] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, " This point is not ready for takeover.");
		return 1;
	}
	if (Points[mypoint][TimeToClaim])
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, " This point is already being captured!");
		return 1;
	}
	if(GetPlayerPing(playerid) > pointpinglimit)
	{
		format(string,sizeof(string), " You can not capture with %d+ ping!", pointpinglimit);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		return 1;
	}
	format(string,sizeof(string), " %s is attempting to capture the point (VW: %d).", GetPlayerNameEx(playerid), Points[mypoint][pointVW]);
	ProxDetector(70.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
	GetPlayerPos(playerid, Points[mypoint][Capturex], Points[mypoint][Capturey], Points[mypoint][Capturez]);

	Points[mypoint][ClaimerId] = playerid;
	Points[mypoint][TimeToClaim] = 1;
	Points[mypoint][TimeLeft] = 10;
	SetTimerEx("ProgressTimer", 1000, 0, "d", mypoint);
	return 1;
}

CMD:points(playerid, params[])
{
	new string[128];

	for(new i; i < MAX_POINTS; i++)
	{
		if (Points[i][Type] >= 0)
		{
			if(Points[i][pointID] != 0)
			{
				format(string, sizeof(string), "Point ID: %d | Name: %s | Owner: %s | Captured By: %s | Hours: %d",
				Points[i][pointID], Points[i][Name],Points[i][Owner],Points[i][CapperName],Points[i][Vulnerable]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
	}
	return 1;
}

CMD:pointtime(playerid, params[])
{
	new point, string[128];
	if(sscanf(params, "i", point)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pointtime [pointid]");
	
	if(point < 1 || point > 9) return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid ID!");
	
	if(Points[point-1][TakeOverTimerStarted])
	{
		if(Points[point-1][TakeOverTimer] > 0)
		{
			format(string, sizeof(string), "Time left until fully captured: %d minutes.", Points[point-1][TakeOverTimer]);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, "This point is not being captured at the moment.");
	}	
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "This point is not being captured at the moment.");
	return 1;
}

CMD:payday(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337) {
	    PlayerInfo[playerid][pConnectSeconds] = 3600;
		PayDay(playerid);
	}
	return 1;
}

CMD:togvip(playerid, params[]) {
	if(PlayerInfo[playerid][pDonateRank] >= 1 || PlayerInfo[playerid][pAdmin] >= 2) {
		if(PlayerInfo[playerid][pVIPTogged] == 1) {
			PlayerInfo[playerid][pVIPTogged] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "VIP chat disabled.");
		}
		else {
			PlayerInfo[playerid][pVIPTogged] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "VIP chat enabled.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You're not a VIP.");
	return 1;
}

CMD:v(playerid, params[]) {
	if(PlayerInfo[playerid][pDonateRank] >= 1 || PlayerInfo[playerid][pAdmin] >= 2) {
		if(isnull(params)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /v [message]");
		}
		else if(gettime() < GetPVarInt(playerid, "timeVIP")) {

			new
				szMessage[64];

			format(szMessage, sizeof(szMessage), "You must wait %d seconds before speaking again in this channel.", GetPVarInt(playerid, "timeVIP") - gettime());
			SendClientMessageEx(playerid, COLOR_GREY, szMessage);
		}
		else if(PlayerInfo[playerid][pVIPTogged] == 0) {
		    SendClientMessageEx(playerid, COLOR_GREY, "You have VIP chat toggled - /togvip to enable it.");
		}
		else if(PlayerInfo[playerid][pVMuted] > 0) {
			SendClientMessageEx(playerid, COLOR_GREY, "You are muted from the VIP chat channel.");
		}
		else {

			new szMessage[128];
			
			if(PlayerInfo[playerid][pAdmin] >= 2 && GetPVarInt(playerid, "Undercover") == 0)
			{
				format(szMessage, sizeof(szMessage), "** %s %s: %s", GetAdminRankName(PlayerInfo[playerid][pAdmin]), GetPlayerNameEx(playerid), params);
			}
			else if(GetPVarInt(playerid, "Undercover") == 1 || PlayerInfo[playerid][pDonateRank] > 0)
			{
				format(szMessage, sizeof(szMessage), "** %s %s: %s", GetVIPRankName(PlayerInfo[playerid][pDonateRank]), GetPlayerNameEx(playerid), params);
				SetPVarInt(playerid, "timeVIP", gettime()+5);
			}
			
			SendVIPMessage(COLOR_VIP, szMessage);
		}
	}
	return 1;
}

CMD:orders(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] > 0 || PlayerInfo[playerid][pAdmin] >= 4)
	{
 		new string[128];
        SendClientMessageEx(playerid, COLOR_GREEN, "____________________ SHOP ORDERS _____________________");
		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pOrder] > 0 && OrderAssignedTo[i] == INVALID_PLAYER_ID)
				{
					new playerip[32];
					GetPlayerIp(i, playerip, sizeof(playerip));

					new orderid = PlayerInfo[i][pOrder];

					if(PlayerInfo[i][pOrderConfirmed]) {
						format(string, sizeof(string), "%s(%d) | Order ID: %d (Confirmed) | IP: %s | Assigned to: Nobody", GetPlayerNameEx(i), i, orderid, playerip);
					} else {
						format(string, sizeof(string), "%s(%d) | Order ID: %d (Invalid) | IP: %s | Assigned to: Nobody", GetPlayerNameEx(i), i, orderid, playerip);
					}
					SendClientMessageEx(playerid, COLOR_SHOP, string);
				}
				else if(PlayerInfo[i][pOrder] > 0 && OrderAssignedTo[i] != INVALID_PLAYER_ID)
				{
					new playerip[32];
					GetPlayerIp(i, playerip, sizeof(playerip));

					new orderid = PlayerInfo[i][pOrder];

					if(PlayerInfo[i][pOrderConfirmed]) {
						format(string, sizeof(string), "%s(%d) | Order ID: %d (Confirmed) | IP: %s | Assigned to: %s", GetPlayerNameEx(i), i, orderid, playerip, GetPlayerNameEx(OrderAssignedTo[i]));
					} else {
						format(string, sizeof(string), "%s(%d) | Order ID: %d (Invalid) | IP: %s | Assigned to: %s", GetPlayerNameEx(i), i, orderid, playerip, GetPlayerNameEx(OrderAssignedTo[i]));
					}
					SendClientMessageEx(playerid, COLOR_SHOP, string);
				}
			}	
		}
  		SendClientMessageEx(playerid, COLOR_WHITE, "Use /givemeorder /processorder /denyorder");
        SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________________");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	return 1;
}

CMD:givemeorder(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] > 0 || PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givemeorder [player]");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pOrder] > 0)
			{
			    if(IsPlayerConnected(OrderAssignedTo[giveplayerid]))
			    {
			        if(GetPVarInt(playerid, "OrderAssignedTo") == giveplayerid)
			        {
			            DeletePVar(playerid, "OrderAssignedTo");
			        }
			        else
			        {
					    SendClientMessageEx(playerid, COLOR_WHITE, "That order ID has already been assigned to another admin!");
					    SendClientMessageEx(playerid, COLOR_WHITE, "If you are sure you wish to take the order anyway, type this command again.");
					    SetPVarInt(playerid, "OrderAssignedTo", giveplayerid);
				        return 1;
					}
			    }
		    	new string[128];
		    	new orderid = PlayerInfo[giveplayerid][pOrder];
				format(string, sizeof(string), "AdmCmd: %s assigned himself to shop order ID %d from %s (ID: %d).", GetPlayerNameEx(playerid), orderid, GetPlayerNameEx(giveplayerid), giveplayerid);
				ShopTechBroadCast(COLOR_ORANGE, string);

				format(string, sizeof(string), "%s is now reviewing your shop order ID %d.", GetPlayerNameEx(playerid), orderid);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				OrderAssignedTo[giveplayerid] = playerid;
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "That person does not have any shop orders pending!");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");

	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	return 1;
}

/*CMD:adjustoid(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] > 0 || PlayerInfo[playerid][pAdmin] >= 1338)
	{
	    new giveplayerid, orderid, string[128];
		if(sscanf(params, "ui", giveplayerid, orderid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjustoid [player] [new orderid]");
		SendClientMessageEx(playerid, COLOR_WHITE, "Processing..");
  		PlayerInfo[giveplayerid][pOrder] = orderid;
		format(string, sizeof(string), "%s/~nggami/idcheck.php?id=%d", WEB_SERVER, orderid);
		HTTP(giveplayerid, HTTP_GET, string, "", "HttpCallback_ShopIDCheck");
		format(string, sizeof(string), "%s has edited %s's Order ID to %d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), orderid);
		Log("logs/shoporders.log", string);
	}
	return 1;
}*/

CMD:processorder(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] > 0 || PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /processorder [player]");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(OrderAssignedTo[giveplayerid] != playerid)
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "You must be assigned to that order ID to process it, use /givemeorder");
		        return 1;
		    }
			if(PlayerInfo[giveplayerid][pOrder] > 0)
			{
		    	new string[128];
		    	new orderid = PlayerInfo[giveplayerid][pOrder];
				format(string, sizeof(string), "AdmCmd: %s has processed shop order ID %d from %s (ID: %d).", GetPlayerNameEx(playerid), orderid, GetPlayerNameEx(giveplayerid), giveplayerid);
				ShopTechBroadCast(COLOR_ORANGE, string);

				format(string, sizeof(string), "%s has processed your shop order ID %d.", GetPlayerNameEx(playerid), orderid);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				new playerip[32], giveplayerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				GetPlayerIp(giveplayerid, giveplayerip, sizeof(giveplayerip));

				if(PlayerInfo[giveplayerid][pOrderConfirmed])
				{
				    format(string, sizeof(string), "SELECT `id` FROM `orders` WHERE `id` = '%d'", PlayerInfo[giveplayerid][pOrder]);
					mysql_function_query(MainPipeline, string, true, "OnProcessOrderCheck", "ii", playerid, giveplayerid);
					SetPVarInt(playerid, "processorder", orderid);
				}
				else
				{
					format(string, sizeof(string), "%s(IP: %s) has processed shop order ID %d from %s(IP: %s).", GetPlayerNameEx(playerid), playerip, orderid, GetPlayerNameEx(giveplayerid), giveplayerip);
					Log("logs/shoporders.log", string);
				}

				PlayerInfo[giveplayerid][pOrder] = 0;
				PlayerInfo[giveplayerid][pOrderConfirmed] = 0;
				OrderAssignedTo[giveplayerid] = INVALID_PLAYER_ID;
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "That person does not have any shop orders pending!");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");

	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	return 1;
}

CMD:denyorder(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] > 0 || PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /denyorder [player] [reason]");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(OrderAssignedTo[giveplayerid] != playerid)
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "You must be assigned to that order ID to deny it, use /givemeorder");
		        return 1;
		    }
			if(PlayerInfo[giveplayerid][pOrder] > 0)
			{
		    	new string[128];
		    	new orderid = PlayerInfo[giveplayerid][pOrder];
				format(string, sizeof(string), "AdmCmd: %s has denied shop order ID %d from %s (ID: %d), reason: %s", GetPlayerNameEx(playerid), orderid, GetPlayerNameEx(giveplayerid), giveplayerid, reason);
				ShopTechBroadCast(COLOR_ORANGE, string);

				format(string, sizeof(string), "%s has denied your shop order ID %d, reason: %s", GetPlayerNameEx(playerid), orderid, reason);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				new playerip[32], giveplayerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				GetPlayerIp(giveplayerid, giveplayerip, sizeof(giveplayerip));

				format(string, sizeof(string), "%s(IP: %s) has denied shop order ID %d from %s(IP: %s), reason: %s", GetPlayerNameEx(playerid), playerip, orderid, GetPlayerNameEx(giveplayerid), giveplayerip, reason);
				Log("logs/shoporders.log", string);

				PlayerInfo[giveplayerid][pOrder] = 0;
				OrderAssignedTo[giveplayerid] = INVALID_PLAYER_ID;
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "That person does not have any shop orders pending!");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	return 1;
}

CMD:shoporder(playerid, params[])
{
	if(PlayerInfo[playerid][pOrder] != 0)
	{
	    new string[128];
	    new orderid = PlayerInfo[playerid][pOrder];
		format(string, sizeof(string), "You already have shop order ID %d pending, if you wish to cancel that type /cancelorder", orderid);
 		SendClientMessageEx(playerid, COLOR_WHITE, string);
	    return 1;
	}
	if (GetPVarInt(playerid, "ShopOrderTimer") > 0)
	{
		new string[128];
		format(string, sizeof(string), "You must wait %d seconds before submitting another shop order.", GetPVarInt(playerid, "ShopOrderTimer"));
		SendClientMessageEx(playerid,COLOR_GREY, string);
		return 1;
	}
	ShowPlayerDialog(playerid, DIALOG_SHOPORDER, DIALOG_STYLE_INPUT, "Shop Order", "This is for shop orders from http://shop.ng-gaming.net\n\nIf you do not have a shop order then please cancel this dialog box now.\n\nWarning: Abuse of this feature may result to an indefinite block from this command.\n\nPlease enter your shop order ID (if you do not know it put 1):", "Submit", "Cancel" );
	return 1;
}

CMD:cancelorder(playerid, params[])
{
	if(PlayerInfo[playerid][pOrder] != 0)
	{
	    new string[128];
	    new orderid = PlayerInfo[playerid][pOrder];
		new playerip[32];
		GetPlayerIp(playerid, playerip, sizeof(playerip));
		format(string, sizeof(string), "%s (IP: %s) canceled their shop order (ID %i).", GetPlayerNameEx(playerid), playerip, orderid);
		Log("logs/shoporders.log", string);

		format(string, sizeof(string), "You have canceled your shop order (ID %i). If you wish to submit another order, type /shoporder.", orderid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		PlayerInfo[playerid][pOrder] = 0;
		OrderAssignedTo[playerid] = INVALID_PLAYER_ID;
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "You do not have any shop orders pending!");
	}
	return 1;
}

CMD:searchvipm(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pShopTech] >= 1)
	{
	    new
	        count,
	        vipm,
	        string[128];

 		if(sscanf(params, "d", vipm)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /searchvipm [vipm]");

  		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pVIPM] == vipm)
				{
					format(string, sizeof(string), "%s (%d) | VIPM: %d", GetPlayerNameEx(i), i, vipm);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					count++;
				}
				if(PlayerInfo[i][pVIPMO] == vipm)
				{
					format(string, sizeof(string), "%s (%d) | VIPM Old: %d", GetPlayerNameEx(i), i, vipm);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					count++;
				}
				else if(count == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No person online matched that VIPM number.");
			}	
    	}
	}
	return 1;
}

CMD:sellvip(playerid, params[]) {
	if(!(1 <= PlayerInfo[playerid][pDonateRank] <= 3)) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can only sell Bronze, Silver, and Gold VIP.");
	}
	else if(PlayerInfo[playerid][pVIPM] == 0) {
		SendClientMessageEx(playerid, COLOR_GREY, "You currently don't have a VIP ID assigned. Contact a Shop Tech.");
	}
	else if(PlayerInfo[playerid][pVIPSellable] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Your VIP is not sellable.");
	}
  	else if(PlayerInfo[playerid][pVIPExpire] - 604800 < gettime()) {
		SendClientMessageEx(playerid, COLOR_GREY, "Your VIP expires in less than a week - you can't sell it.");
	}
	else if(PlayerInfo[playerid][pVIPSold] > gettime()) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can only sell your VIP once every two hours.");
	}
	else {

		new
			player,
			price,
			string[128],
			viptype[7];

		if(sscanf(params, "ud", player, price)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellvip [player] [price]");
		}
		else if(price < 0) {
			SendClientMessageEx(playerid, COLOR_GREY, "The price can't be below zero.");
		}
		else if(player == playerid) {
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't sell VIP to yourself.");
		}
		else if(!IsPlayerConnected(player)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(PlayerInfo[player][pVIPSold] > gettime()) {
			SendClientMessageEx(playerid, COLOR_GREY, "That person can only buy VIP once every two hours.");
		}
		else if (ProxDetectorS(10.0, playerid, player))
		{
			switch(PlayerInfo[playerid][pDonateRank])
			{
				case 1: viptype = "Bronze";
				case 2: viptype = "Silver";
				case 3: viptype = "Gold";
				default: viptype = "Error";
			}
			SetPVarInt(player, "VIPSell", playerid);
			SetPVarInt(player, "VIPCost", price);
			SetPVarString(player, "VIPSeller", GetPlayerNameEx(playerid));
			format(string, sizeof(string), "Seller: %s\nVIP level: %s \nPrice: %d \nVIP ID: %d\nExpires: %s\n\nDo you wish to purchase %s VIP from %s for $%d?", GetPlayerNameEx(playerid), viptype, price, PlayerInfo[playerid][pVIPM], date(PlayerInfo[playerid][pVIPExpire], 2), viptype, GetPlayerNameEx(playerid), price);
			ShowPlayerDialog(player, SELLVIP, DIALOG_STYLE_MSGBOX, "Purchase VIP", string, "Purchase", "Decline");
			format(string, sizeof(string), "You offered %s $%d for your %s VIP.", GetPlayerNameEx(player), price, viptype);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "That person is not near you.");
	}
    return 1;
}


CMD:newgvip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pShopTech] >= 1)
	{
	    new
	        iOrderID,
	        iTargetID,
	        szIP[16],
			szMessage[128];

		if(sscanf(params, "ud", iTargetID, iOrderID)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /newgvip [Player] [OrderID]");
		}
		else if(!IsPlayerConnected(iTargetID)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else {
			if(PlayerInfo[iTargetID][pGVip] != 0 && GetPVarInt(playerid, "ConfirmGVip") == 0) {
	    	    SetPVarInt(playerid, "ConfirmGVip", 1);
	    	    SendClientMessageEx(playerid, COLOR_WHITE, "That person has been issued gold vip before, if you are sure you want to issue him gold vip again");
	    	    SendClientMessageEx(playerid, COLOR_WHITE, "re-type this command (/newgvip). If he ordered a gold vip renewal use the other command (/renewgvip).");
	    	}
	    	else
	    	{
	        	DeletePVar(playerid, "ConfirmGVip");
		    	if(PlayerInfo[iTargetID][pVIPM] != 0) {
		    	    PlayerInfo[iTargetID][pVIPMO] = PlayerInfo[iTargetID][pVIPM];
					PlayerInfo[iTargetID][pVIPM] = VIPM;
					VIPM++;
				} else {
				    PlayerInfo[iTargetID][pVIPM] = VIPM;
					VIPM++;
				}
				PlayerInfo[iTargetID][pVIPExpire] = gettime()+2592000;
				format(szMessage, sizeof(szMessage), "AdmCmd: %s has set %s's VIP level to Gold (3).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
				ABroadCast(COLOR_LIGHTRED,szMessage, 1337);
				format(szMessage, sizeof(szMessage), "Your VIP level has been set to Gold by Admin %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(iTargetID, COLOR_WHITE, szMessage);
				if (PlayerInfo[playerid][pAdmin] < 1337) {
					format(szMessage, sizeof(szMessage), "AdmCmd: %s has set %s's VIP level to Gold (3).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					SendClientMessageEx(playerid, COLOR_LIGHTRED, szMessage);
				}
        	    PlayerInfo[iTargetID][pDonateRank] = 3;
				PlayerInfo[iTargetID][pTempVIP] = 0;
				PlayerInfo[iTargetID][pBuddyInvited] = 0;
				PlayerInfo[iTargetID][pGVip] = 1;
				LoadPlayerDisabledVehicles(iTargetID);
				GetPlayerIp(iTargetID, szIP, sizeof(szIP));
				format(szMessage, sizeof(szMessage), "[GVIP] %s has set %s's (IP:%s) VIP level to Gold (3). (VIPM - %d | OrderID - %d)", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), szIP, PlayerInfo[iTargetID][pVIPM], iOrderID);
				Log("logs/setvip.log", szMessage);
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:renewgvip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pShopTech] >= 1)
	{
	    new
	        iOrderID,
	        iTargetID,
	        szIP[16],
			szMessage[128],
			months;

		if(sscanf(params, "udd", iTargetID, iOrderID, months)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /renewgvip [player] [order ID] [months]");
		}
		else if(!IsPlayerConnected(iTargetID)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(PlayerInfo[iTargetID][pGVip] == 0) {
		    SendClientMessageEx(playerid, COLOR_GREY, "That person has never purchased Gold VIP.");
		}
		else {
			if(PlayerInfo[iTargetID][pVIPM] != 0) {
    			PlayerInfo[iTargetID][pVIPMO] = PlayerInfo[iTargetID][pVIPM];
				PlayerInfo[iTargetID][pVIPM] = VIPM;
				VIPM++;
			} else {
				PlayerInfo[iTargetID][pVIPM] = VIPM;
				VIPM++;
			}
			PlayerInfo[iTargetID][pVIPExpire] = gettime()+(2592000*months);
			format(szMessage, sizeof(szMessage), "AdmCmd: %s has set %s's VIP level to Gold (3).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
			ABroadCast(COLOR_LIGHTRED,szMessage, 1337);
			format(szMessage, sizeof(szMessage), "Your VIP level has been set to Gold by Admin %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(iTargetID, COLOR_WHITE, szMessage);
			if (PlayerInfo[playerid][pAdmin] < 1337) {
				format(szMessage, sizeof(szMessage), "AdmCmd: %s has set %s's VIP level to Gold (3).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
				SendClientMessageEx(playerid, COLOR_LIGHTRED, szMessage);
			}
   			PlayerInfo[iTargetID][pDonateRank] = 3;
			PlayerInfo[iTargetID][pTempVIP] = 0;
			PlayerInfo[iTargetID][pBuddyInvited] = 0;
			GetPlayerIp(iTargetID, szIP, sizeof(szIP));
			format(szMessage, sizeof(szMessage), "[GVIP RENEWAL] %s has set %s's (IP:%s) VIP level to Gold (3). (VIPM - %d | OrderID - %d | Months: %d)", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), szIP, PlayerInfo[iTargetID][pVIPM], iOrderID, months);
			Log("logs/setvip.log", szMessage);
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:setvip(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new string[128], giveplayerid, level, months, orderid[32];
		if(sscanf(params, "udds[32]", giveplayerid, level, months, orderid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setvip [player] [level] [months] [orderID]");
			SendClientMessageEx(playerid, COLOR_GRAD3, "Available Levels: |0| None |1| Bronze |2| Silver |4| Platinum |5| Moderator");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
   			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(level < 0 || level > 5)
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "VIP Level can not be below 0 or above 5!");
					return 1;
				}
				if(level == 3)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "VIP Level can not be set to 3 through this command");
				    return 1;
				}
				PlayerInfo[giveplayerid][pDonateRank] = level;
				PlayerInfo[giveplayerid][pTempVIP] = 0;
				PlayerInfo[giveplayerid][pBuddyInvited] = 0;
				PlayerInfo[giveplayerid][pVIPSellable] = 0;
				LoadPlayerDisabledVehicles(giveplayerid);
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				if(level == 0)
				{
					if (PlayerInfo[playerid][pAdmin] < 1337)
					{
						format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to None (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to None (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Your VIP level has been set to None by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
					PlayerInfo[giveplayerid][pTokens] = 0;

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to None (%d) (order #%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, orderid);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 1)
				{
					if (PlayerInfo[playerid][pAdmin] < 1337)
					{
						format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Bronze (%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level, orderid);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					if(PlayerInfo[giveplayerid][pVIPM] == 0)
					{
						PlayerInfo[giveplayerid][pVIPM] = VIPM;
						VIPM++;
					}
					PlayerInfo[giveplayerid][pVIPExpire] = gettime()+2592000*months;
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Bronze (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Your VIP level has been set to Bronze by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to Bronze (%d) (order #%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, orderid);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 2)
				{
					if (PlayerInfo[playerid][pAdmin] < 1337)
					{
						format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Silver (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					if(PlayerInfo[giveplayerid][pVIPM] == 0)
					{
						PlayerInfo[giveplayerid][pVIPM] = VIPM;
						VIPM++;
					}
					PlayerInfo[giveplayerid][pVIPExpire] = gettime()+2592000*months;
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Silver (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Your VIP level has been set to Silver by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to Silver (%d) (order #%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, orderid);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 3)
				{
				    if(!GetPVarType(playerid, "ConfirmGold")) {
				        SendClientMessageEx(playerid, COLOR_WHITE, "You are about to set someone's vip level to gold. If this is a gold vip order please use the new system.");
				        SendClientMessageEx(playerid, COLOR_WHITE, "For a new purchase of Gold Vip use(/newgvip).For renewals use(/renewgvip). If you wish to continue using this command type it again(/setvip)");
				        SetPVarInt(playerid, "ConfirmGold", 1);
				    }
				    else {
				        DeletePVar(playerid, "ConfirmGold");
						if (PlayerInfo[playerid][pAdmin] < 1337)
						{
							format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Gold (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
							SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
						}
						if(PlayerInfo[giveplayerid][pVIPM] == 0)
						{
						    PlayerInfo[giveplayerid][pVIPM] = VIPM;
							VIPM++;
						}
						PlayerInfo[giveplayerid][pVIPExpire] = gettime()+2592000*months;
						format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Gold (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						ABroadCast(COLOR_LIGHTRED,string, 1337);
						format(string, sizeof(string), "Your VIP level has been set to Gold by Admin %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to Gold (%d) (order #%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, orderid);
						Log("logs/setvip.log", string);
						return 1;
					}
				}
				if(level == 4)
				{
					if(PlayerInfo[playerid][pAdmin] < 1338 && PlayerInfo[playerid][pShopTech] < 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
					if (PlayerInfo[giveplayerid][pAdmin] < 1337)
					{
						format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Platinum (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					if(PlayerInfo[giveplayerid][pVIPM] == 0)
					{
					   	PlayerInfo[giveplayerid][pVIPM] = VIPM;
						VIPM++;
					}
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Platinum (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Your VIP level has been set to Platinum by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

					// Level 5 Arms Job - Platinum VIP
					PlayerInfo[giveplayerid][pArmsSkill] = 401;

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to Platinum (%d) (order #%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, orderid);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 5)
				{
					if (PlayerInfo[playerid][pAdmin] < 1337)
					{
						format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Moderator (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					if(PlayerInfo[giveplayerid][pVIPM] == 0)
					{
					    PlayerInfo[giveplayerid][pVIPM] = VIPM;
						VIPM++;
					}
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Moderator (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Your VIP level has been set to Moderator by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to Moderator (%d) (order #%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, orderid);
					Log("logs/setvip.log", string);
					return 1;
				}
			}
			Misc_Save();
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:giftgvip(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid, days,reason[32];
		if(sscanf(params, "uds[32]", giveplayerid, days, reason))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giftgvip [player] [days] [reason]");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pDonateRank] = 3;
			PlayerInfo[giveplayerid][pTempVIP] = 0;
			PlayerInfo[giveplayerid][pBuddyInvited] = 0;
			new playerip[32];
			GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
			PlayerInfo[giveplayerid][pVIPExpire] = gettime()+86400*days;
			format(string, sizeof(string), "AdmCmd: %s has gifted %s Gold VIP for %d days (%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), days, reason);
			ABroadCast(COLOR_LIGHTRED,string, 1337);
			format(string, sizeof(string), "Your VIP level has been set to Gold by Admin %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
			format(string, sizeof(string), "AdmCmd: %s has gifted %s Gold VIP for %d days (%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), days, reason);
			Log("logs/setvip.log", string);
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:ofine(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{

		new string[128], query[256], name[MAX_PLAYER_NAME], amount, reason[64];
		if(sscanf(params, "s[24]ds[64]", name, amount, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ofine [name] [amount] [reason]");
        new giveplayerid = ReturnUser(name);
		if(IsPlayerConnected(giveplayerid))
		{
            if (amount < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Amount must be greater than 0");
			format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(amount), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: %s", GetPlayerNameEx(giveplayerid), number_format(amount), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			GivePlayerCash(giveplayerid, -amount);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
		}
		else
		{
			new tmpName[24];
			mysql_escape_string(name, tmpName);
			SetPVarString(playerid, "OnFine", tmpName);
			SetPVarInt(playerid, "OnFineAmount", amount);
			SetPVarString(playerid, "OnFineReason", reason);


			format(query, sizeof(query), "UPDATE `accounts` SET `Money` = `Money` - %d WHERE `PermBand` < 3 AND `Band` = 0 AND `AdminLevel` < 2 AND `Username`='%s'", amount, tmpName);
			mysql_function_query(MainPipeline, query, false, "OnFine", "i", playerid);

			format(string, sizeof(string), "Attempting to fine $%s from %s's account...", number_format(amount), tmpName);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not a level three admin.");
	}
	return 1;
}

CMD:giveobject(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new string[1024], giveplayerid, object;
		if(sscanf(params, "ud", giveplayerid, object)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giveobject [player] [object]");
		if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified");
		
		SetPVarInt(playerid, "giveplayeridtoy", giveplayerid);
		SetPVarInt(playerid, "toyid", object);
		new icount = GetPlayerToySlots(giveplayerid);
		for(new x;x<icount;x++)
		{
		    new name[24];
		    format(name, sizeof(name), "None");

			for(new i;i<sizeof(HoldingObjectsAll);i++)
			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[giveplayerid][x][ptModelID])
		        {
          			format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}
			if(PlayerToyInfo[giveplayerid][x][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
			{
			    format(name, sizeof(name), "ID: %d", PlayerToyInfo[giveplayerid][x][ptModelID]);
			}
			format(string, sizeof(string), "%s(%d) %s (Bone: %s)\n", string, x, name, HoldingBones[PlayerToyInfo[giveplayerid][x][ptBone]]);
		}
   		ShowPlayerDialog(playerid, GIVETOY, DIALOG_STYLE_LIST, "Select a slot", string, "Select", "Cancel");
	}
	else {
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	}	
	return 1;	
}		

CMD:shopobject(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] >= 1)
	{
		ShowPlayerDialog(playerid, SHOPOBJECT_ORDERID, DIALOG_STYLE_INPUT, "Shop Objects - Order ID", "Please enter the Order ID", "OK", "Cancel");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:charity(playerid, params[])
{
	new string[128], moneys;
	if(sscanf(params, "d", moneys)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /charity [amount]");

	if(moneys < 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "That is not enough.");
		return 1;
	}
	if(GetPlayerCash(playerid) < moneys)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have that much money.");
		return 1;
	}
	GivePlayerCash(playerid, -moneys);
	format(string, sizeof(string), "%s, thank you for your donation of $%d.",GetPlayerNameEx(playerid), moneys);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	//Log("logs/pay.log", string);
	return 1;
}

CMD:accent(playerid, params[])
{
	new accent;
	if(sscanf(params, "d", accent))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /accent [accent ID]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Accents: Normal [1], British [2], Asian [4], Scottish [6], Irish [7], Russian [8]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Accents: American [9], Spanish [10], Southern [11], Italian [13], Gangsta [14], Australian [15], Arabic [16]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Accents: Balkan [17], Canadian [18], Jamaican [19], Israeli [20], Dutch [21], Brazilian [22], German [23], Turkish [24]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Accents: Kiwi [25], French [26], Korean [27], Thai [28], Swedish [29], Danish [30], Norwegian [31]");
		return 1;
	}

	switch(accent)
	{
		case 1:
		{
			PlayerInfo[playerid][pAccent] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Normal accent, use /accent to change it." );
		}
		case 2:
		{
			PlayerInfo[playerid][pAccent] = 2;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the British accent, use /accent to change it." );
		}
		case 3:
		{
			PlayerInfo[playerid][pAccent] = 3;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Japanese accent, use /accent to change it." );
		}
		case 4:
		{
			PlayerInfo[playerid][pAccent] = 4;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Chinese accent, use /accent to change it." );
		}
		case 5:
		{
			PlayerInfo[playerid][pAccent] = 5;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Korean accent, use /accent to change it." );
		}
		case 6:
		{
			PlayerInfo[playerid][pAccent] = 6;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Scottish accent, use /accent to change it." );
		}
		case 7:
		{
			PlayerInfo[playerid][pAccent] = 7;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Irish accent, use /accent to change it." );
		}
		case 8:
		{
			PlayerInfo[playerid][pAccent] = 8;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Russian accent, use /accent to change it." );
		}
		case 9:
		{
			PlayerInfo[playerid][pAccent] = 9;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the American accent, use /accent to change it." );
		}
		case 10:
		{
			PlayerInfo[playerid][pAccent] = 10;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Spanish accent, use /accent to change it." );
		}
		case 11:
		{
			PlayerInfo[playerid][pAccent] = 11;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Texan accent, use /accent to change it." );
		}
		case 12:
		{
			PlayerInfo[playerid][pAccent] = 12;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Cuban accent, use /accent to change it." );
		}
		case 13:
		{
			PlayerInfo[playerid][pAccent] = 13;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Italian accent, use /accent to change it." );
		}
		case 14:
		{
			PlayerInfo[playerid][pAccent] = 14;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Gangsta accent, use /accent to change it." );
		}
		case 15:
		{
			PlayerInfo[playerid][pAccent] = 15;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Australian accent, use /accent to change it." );
		}
		case 16:
		{
			PlayerInfo[playerid][pAccent] = 16;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Arabic accent, use /accent to change it." );
		}
		case 17:
		{
			PlayerInfo[playerid][pAccent] = 17;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Balkan accent, use /accent to change it." );
		}
		case 18:
		{
			PlayerInfo[playerid][pAccent] = 18;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Canadian accent, use /accent to change it." );
		}
		case 19:
		{
			PlayerInfo[playerid][pAccent] = 19;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Jamaican accent, use /accent to change it." );
		}
		case 20:
		{
			PlayerInfo[playerid][pAccent] = 20;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Israeli accent, use /accent to change it." );
		}
		case 21:
	    {
	        PlayerInfo[playerid][pAccent] = 21;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Dutch accent, use /accent to change it." );
	    }
		case 22:
	    {
	        PlayerInfo[playerid][pAccent] = 22;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Brazilian accent, use /accent to change it." );
	    }
   		case 23:
	    {
	        PlayerInfo[playerid][pAccent] = 23;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the German accent, use /accent to change it." );
	    }
	    case 24:
	    {
	        PlayerInfo[playerid][pAccent] = 24;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Turkish accent, use /accent to change it." );
	    } 
		case 25:
	    {
	        PlayerInfo[playerid][pAccent] = 25;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Kiwi accent, use /accent to change it." );
	    }
		case 26:
	    {
	        PlayerInfo[playerid][pAccent] = 26;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the French accent, use /accent to change it." );
	    }
		case 27:
	    {
	        PlayerInfo[playerid][pAccent] = 27;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Korean accent, use /accent to change it." );
	    }
		case 28:
	    {
	        PlayerInfo[playerid][pAccent] = 28;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Thai accent, use /accent to change it." );
	    }
		case 29:
		{
			PlayerInfo[playerid][pAccent] = 29;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Swedish accent, use /accent to change it." );
		}
		case 30:
		{
			PlayerInfo[playerid][pAccent] = 30;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Danish accent, use /accent to change it." );
		}
		case 31:
		{
			PlayerInfo[playerid][pAccent] = 31;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Norwegian accent, use /accent to change it." );
		}
	}
	return 1;
}

CMD:check(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /check [player]");
		if(IsPlayerConnected(giveplayerid)) ShowStats(playerid, giveplayerid);
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
	return 1;
}

CMD:checkinv(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /checkinv [player]");
		if(IsPlayerConnected(giveplayerid)) ShowInventory(playerid, giveplayerid);
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
	return 1;
}

/*CMD:ocheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
		return 1;
	}

	SendClientMessageEx(playerid, COLOR_GRAD1, "This command has been disabled due to MySQL Database Performance Issues.");
	SendClientMessageEx(playerid, COLOR_GRAD1, "Contact an admin with database access to obtain specific account information.");

	return 1;
}*/

CMD:trunkput(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		return 1;
	}
	if(GetPVarInt( playerid, "EventToken") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid)) { SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being inside the vehicle!"); return 1; }
	if(GetPVarInt(playerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command!");

	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /trunkput [weapon] [slot]");

	new pvid = -1, Float: x, Float: y, Float: z;

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
			pvid = d;
			break;
		}
	}
	if(pvid == -1) return SendClientMessageEx(playerid,COLOR_GREY,"You are not near any vehicle that you own.");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(PlayerVehicleInfo[playerid][pvid][pvId],engine,lights,alarm,doors,bonnet,boot,objective);
	if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return SendClientMessageEx(playerid, COLOR_GRAD3, "You can't take/put stuff inside the trunk if it's closed!(/car trunk to open it)");
	if(GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 510)  return SendClientMessageEx(playerid,COLOR_GREY,"That vehicle doesn't have a trunk.");

	new Float: Health;
	GetPlayerHealth(playerid, Health);
	if(Health < 80.0) return SendClientMessageEx(playerid,COLOR_GREY,"You cannot store weapons in a car when your health lower than 80.");
	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before depositing another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}
	
	new maxslots = PlayerVehicleInfo[playerid][pvid][pvWepUpgrade]+1;
	if(slot > maxslots)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
		return 1;
	}

	if( PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You have a weapon stored in that slot already.");
		return 1;
	}

	new weapon;
	if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
	{
		if(pTazer{playerid} == 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot store a tazer!");
		if( PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a silenced pistol into your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s deposited their silenced pistol in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a Desert Eagle in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s deposited their Desert Eagle in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a shotgun in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s deposited their Shotgun in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a combat shotgun in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s deposited their Combat Shotgun in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an MP5 in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][4];
			format(string,sizeof(string), "* %s deposited their MP5 in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}

	else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an AK-47 in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s deposited their AK-47 in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an M4 in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s deposited their M4 in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a rifle in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s deposited their rifle in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a sniper rifle in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s deposited their sniper rifle in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "golfclub", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][1] == 2 && PlayerInfo[playerid][pAGuns][1] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a golf club in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][1];
			format(string,sizeof(string), "* %s deposited their golf club in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "baseballbat", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][1] == 5 && PlayerInfo[playerid][pAGuns][1] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a baseball bat in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][1];
			format(string,sizeof(string), "* %s deposited their baseball bat in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "shovel", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][1] == 6 && PlayerInfo[playerid][pAGuns][1] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a shovel in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][1];
			format(string,sizeof(string), "* %s deposited their shovel in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "poolcue", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][1] == 7 && PlayerInfo[playerid][pAGuns][1] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a pool cue in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][1];
			format(string,sizeof(string), "* %s deposited their pool cue in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "katana", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][1] == 8 && PlayerInfo[playerid][pAGuns][1] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a katana in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][1];
			format(string,sizeof(string), "* %s deposited their katana in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "cane", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][10] == 15 && PlayerInfo[playerid][pAGuns][1] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a cane in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][10];
			format(string,sizeof(string), "* %s deposited their cane in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "flowers", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][10] == 14 && PlayerInfo[playerid][pAGuns][1] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited flowers in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][10];
			format(string,sizeof(string), "* %s deposited their flowers in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "parachute", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][11] == 46 && PlayerInfo[playerid][pAGuns][1] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a parachute in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][11];
			format(string,sizeof(string), "* %s deposited their parachute in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "dildo", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][10] == 10 && PlayerInfo[playerid][pAGuns][1] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a dildo in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][10];
			format(string,sizeof(string), "* %s deposited their dildo in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}	
	else { SendClientMessageEx(playerid,COLOR_GREY,"   Invalid weapon name!"); return 1; }
	if(weapon == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that weapon.");
	if(PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] == 0)
	{
		PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] = weapon;
		RemovePlayerWeapon(playerid, weapon);
		g_mysql_SaveVehicle(playerid, pvid);
	}
	return 1;
}

CMD:trunktake(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while you're inside a vehicle.");
	if(PlayerInfo[playerid][pAccountRestricted] != 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "Your account is restricted!");
	else if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
	else if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
	else if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
	else if(GetPVarInt(playerid, "GiveWeaponTimer") >= 1)
	{
		new szMessage[59];
		format(szMessage, sizeof(szMessage), "   You must wait %d seconds before getting another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		return SendClientMessageEx(playerid, COLOR_GREY, szMessage);
	}

	new
		Float: fVehPos[3],
		iWeaponSlot = strval(params);

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++) {
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) {
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], fVehPos[0], fVehPos[1], fVehPos[2]);
			if(IsPlayerInRangeOfPoint(playerid, 4.0, fVehPos[0], fVehPos[1], fVehPos[2])) {
				if(isnull(params)) {

					new
						szMessage[64];

					format(szMessage, sizeof(szMessage), "*** %s's %s Safe ***", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]));
					SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
					for(new s = 0; s < 3; s++) if(PlayerVehicleInfo[playerid][d][pvWeapons][s] != 0) {

						new
							szWeapon[16];

						GetWeaponName(PlayerVehicleInfo[playerid][d][pvWeapons][s], szWeapon, sizeof(szWeapon));
						format(szMessage, sizeof(szMessage), "Slot %d: %s", s+1, szWeapon);
						SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
					}
					return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /trunktake [slot]");
				}
				else if(GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 509) {
					return SendClientMessageEx(playerid,COLOR_GREY,"That vehicle doesn't have a trunk.");
				}

				new
					engine, lights, alarm, doors, bonnet, boot, objective;

				GetVehicleParamsEx(PlayerVehicleInfo[playerid][d][pvId], engine, lights, alarm, doors, bonnet, boot, objective);

				if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) {
					return SendClientMessageEx(playerid, COLOR_GRAD3, "You can't take weapons from the trunk if it's closed! /car trunk to open it.");
				}
				else if(!(1 <= iWeaponSlot <= PlayerVehicleInfo[playerid][d][pvWepUpgrade] + 1)) {
					return SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot specified.");
				}
				else if(PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1] != 0) {
					new
						szWeapon[16],
						szMessage[128];

					GetWeaponName(PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1], szWeapon, sizeof(szWeapon));
					GivePlayerValidWeapon(playerid, PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1], 60000);
					PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1] = 0;
					g_mysql_SaveVehicle(playerid, d);

					format(szMessage, sizeof(szMessage), "You have withdrawn a %s from your car gun locker.", szWeapon);
					SendClientMessageEx(playerid, COLOR_WHITE, szMessage);

					format(szMessage, sizeof(szMessage), "* %s has withdrawn a %s from their car safe.", GetPlayerNameEx(playerid), szWeapon);
					return ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
			}
		}
	}
	return SendClientMessageEx(playerid,COLOR_GREY,"You are not near any vehicle that you own.");
}

CMD:storegun(playerid, params[])
{
	if(Homes[playerid] > 0)
	{
		if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		new string[128], weaponchoice[32], slot;
		if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /storegun [weapon] [slot]");

		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW])
			{
				if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
				{
					format(string, sizeof(string), "   You must wait %d seconds before depositing another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
					SendClientMessageEx(playerid,COLOR_GREY,string);
					return 1;
				}

				new maxslots = HouseInfo[i][hGLUpgrade];
				if(slot > maxslots)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
					return 1;
				}

				if( HouseInfo[i][hWeapons][slot-1] != 0)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You have a weapon stored in that slot already.");
					return 1;
				}

				new weapon;
				if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
				{
					if( PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0 )
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a silenced pistol into your gun locker.");
						weapon = PlayerInfo[playerid][pGuns][2];
						format(string,sizeof(string), "* %s deposited their silenced pistol in their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
				}
				else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
				{
					if( PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0 )
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a Desert Eagle in your gun locker.");
						weapon = PlayerInfo[playerid][pGuns][2];
						format(string,sizeof(string), "* %s deposited their Desert Eagle in their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
				}
				else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
				{
					if( PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0 )
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a shotgun in your gun locker.");
						weapon = PlayerInfo[playerid][pGuns][3];
						format(string,sizeof(string), "* %s deposited their Shotgun in their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
				}
				else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
				{
					if( PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0 )
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a combat shotgun in your gun locker.");
						weapon = PlayerInfo[playerid][pGuns][3];
						format(string,sizeof(string), "* %s deposited their Combat Shotgun in their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
				}
				else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
				{
					if( PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0 )
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an MP5 in your gun locker.");
						weapon = PlayerInfo[playerid][pGuns][4];
						format(string,sizeof(string), "* %s deposited their MP5 in their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
				}
				else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
				{
					if( PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0 )
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an AK-47 in your gun locker.");
						weapon = PlayerInfo[playerid][pGuns][5];
						format(string,sizeof(string), "* %s deposited their AK-47 in their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
				}
				else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
				{
					if( PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0 )
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an M4 in your gun locker.");
						weapon = PlayerInfo[playerid][pGuns][5];
						format(string,sizeof(string), "* %s deposited their M4 in their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
				}
				else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
				{
					if( PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0 )
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a rifle in your gun locker.");
						weapon = PlayerInfo[playerid][pGuns][6];
						format(string,sizeof(string), "* %s deposited their rifle in their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
				}
				else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
				{
					if( PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0 )
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a sniper rifle in your gun locker.");
						weapon = PlayerInfo[playerid][pGuns][6];
						format(string,sizeof(string), "* %s deposited their sniper rifle in their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
				}
				else if(strcmp(weaponchoice, "uzi", true, strlen(weaponchoice)) == 0)
				{
					if( PlayerInfo[playerid][pGuns][4] == 28 && PlayerInfo[playerid][pAGuns][4] == 0 )
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an uzi in your gun locker.");
						weapon = PlayerInfo[playerid][pGuns][4];
						format(string,sizeof(string), "* %s deposited their uzi in their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
				}
				else if(strcmp(weaponchoice, "tec9", true, strlen(weaponchoice)) == 0)
				{
					if( PlayerInfo[playerid][pGuns][4] == 32 && PlayerInfo[playerid][pAGuns][4] == 0 )
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a tec9 in your gun locker.");
						weapon = PlayerInfo[playerid][pGuns][4];
						format(string,sizeof(string), "* %s deposited their tec9 in their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
				}
				if(weapon == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that weapon.");
				if(HouseInfo[i][hWeapons][slot-1] == 0)
				{
					HouseInfo[i][hWeapons][slot-1] = weapon;
					RemovePlayerWeapon(playerid, weapon);
					SaveHouse(i);
					return 1;
				}
				else { SendClientMessageEx(playerid,COLOR_GREY,"   Invalid weapon name!"); return 1; }
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You're not in a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}

CMD:getgun(playerid, params[])
{
	if(Homes[playerid] > 0)
	{
		new string[128], slot;

		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW])
			{
				if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");

				if(sscanf(params, "d", slot))
				{
					new weaponname[50];
					SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
					format(string, sizeof(string), "*** %s's Safe ***", GetPlayerNameEx(playerid));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					for(new s = 0; s < 5; s++)
					{
						if( HouseInfo[i][hWeapons][s] != 0 )
						{
							GetWeaponName(HouseInfo[i][hWeapons][s], weaponname, sizeof(weaponname));
							format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
						}
					}
					SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /getgun [slot]");
					return 1;
				}

				if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
				{
					format(string, sizeof(string), "   You must wait %d seconds before getting another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
					SendClientMessageEx(playerid,COLOR_GREY,string);
					return 1;
				}
				new maxslots = HouseInfo[i][hGLUpgrade];
				if(slot > maxslots)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
					return 1;
				}

				if(HouseInfo[i][hWeapons][slot-1] != 0)
				{
					new weaponname[50];
					GetWeaponName(HouseInfo[i][hWeapons][slot-1], weaponname, sizeof(weaponname));
					GivePlayerValidWeapon(playerid, HouseInfo[i][hWeapons][slot-1], 60000);
					HouseInfo[i][hWeapons][slot-1] = 0;
					if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a silenced pistol from your gun locker.");
						format(string,sizeof(string), "* %s has withdrawn a silenced pistol from their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
					if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a Desert Eagle from your gun locker.");
						format(string,sizeof(string), "* %s has withdrawn a Desert Eagle from their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
					if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a shotgun from your gun locker.");
						format(string,sizeof(string), "* %s has withdrawn a shotgun from their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
					if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a combat shotgun from your gun locker.");
						format(string,sizeof(string), "* %s has withdrawn a combat shotgun from their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
					if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an MP5 from your gun locker.");
						format(string,sizeof(string), "* %s has withdrawn an MP5 from their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
					if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an AK-47 from your gun locker.");
						format(string,sizeof(string), "* %s has withdrawn an AK-47 from their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
					if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an M4 from your gun locker.");
						format(string,sizeof(string), "* %s has withdrawn an M4 from their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
					if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a rifle from your gun locker.");
						format(string,sizeof(string), "* %s has withdrawn a rifle from their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					}
					if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a sniper rifle from your gun locker.");
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
						format(string,sizeof(string), "* %s has withdrawn a sniper rifle from their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					if(strcmp(weaponname, "micro smg", true, strlen(weaponname)) == 0)
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an uzi from your gun locker.");
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
						format(string,sizeof(string), "* %s has withdrawn an uzi from their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					if(strcmp(weaponname, "tec9", true, strlen(weaponname)) == 0)
					{
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an uzi from your gun locker.");
						SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
						format(string,sizeof(string), "* %s has withdrawn an uzi from their house safe.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					SaveHouse(i);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
					return 1;
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You're not in a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}


CMD:hwithdraw(playerid, params[])
{
	if(Homes[playerid] > 0)
	{
		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW])
			{
				new itemid, amount, string[128];

				if(sscanf(params, "dd", itemid, amount))
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hwithdraw [itemid] [amount]");
					SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials - (5) Heroin");
					return 1;
				}
				if(itemid < 1 || itemid > 5) {
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hwithdraw [itemid] [amount]");
					SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials - (5) Heroin");
					return 1;
				}

				if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't withdraw less than 1.");

				switch(itemid)
				{
					case 1: // Cash
					{
						if(HouseInfo[i][hSafeMoney] >= amount)
						{
							HouseInfo[i][hSafeMoney] -= amount;
							GivePlayerCash(playerid, amount);
							OnPlayerStatsUpdate(playerid);
							SaveHouse(i);
							format(string, sizeof(string), "You have withdrawn $%d from your house safe.", amount);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s (SQL: %d) has withdrawn $%d from their house (ID: %d) safe.", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), amount, i);
							Log("logs/hsafe.log", string);
							return 1;
						}
						else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to withdraw!");
					}
					case 2: // Pot
					{
						if(HouseInfo[i][hPot] >= amount)
						{
							HouseInfo[i][hPot] -= amount;
							PlayerInfo[playerid][pPot] += amount;
							OnPlayerStatsUpdate(playerid);
							SaveHouse(i);
							format(string, sizeof(string), "You have withdrawn %d pot from your house safe.", amount);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s (SQL: %d) has withdrawn %d pot from their house (ID: %d) safe.", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), amount, i);
							Log("logs/hsafe.log", string);
							return 1;
						}
						else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to withdraw!");
					}
					case 3: // Crack
					{
						if(HouseInfo[i][hCrack] >= amount)
						{
							HouseInfo[i][hCrack] -= amount;
							PlayerInfo[playerid][pCrack] += amount;
							OnPlayerStatsUpdate(playerid);
							SaveHouse(i);
							format(string, sizeof(string), "You have withdrawn %d crack from your house safe.", amount);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s (SQL: %d) has withdrawn %d crack from their house (ID: %d) safe.", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), amount, i);
							Log("logs/hsafe.log", string);
							return 1;
						}
						else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to withdraw!");
					}
					case 4: // Materials
					{
						if(HouseInfo[i][hMaterials] >= amount)
						{
							HouseInfo[i][hMaterials] -= amount;
							PlayerInfo[playerid][pMats] += amount;
							OnPlayerStatsUpdate(playerid);
							SaveHouse(i);
							format(string, sizeof(string), "You have withdrawn %d materials from your house safe.", amount);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s (SQL: %d) has withdrawn %d materials from their house (ID: %d) safe.", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), amount, i);
							Log("logs/hsafe.log", string);
							return 1;
						}
						else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to withdraw!");
					}
					case 5: // Heroin
					{
						if(HouseInfo[i][hHeroin] >= amount)
						{
							HouseInfo[i][hHeroin] -= amount;
							PlayerInfo[playerid][pHeroin] += amount;
							OnPlayerStatsUpdate(playerid);
							SaveHouse(i);
							format(string, sizeof(string), "You have withdrawn %d heroin from your house safe.", amount);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "%s (SQL: %d) has withdrawn %d heroin from their house (ID: %d) safe.", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), amount, i);
							Log("logs/hsafe.log", string);
							return 1;
						}
						else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to withdraw!");
					}
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You're not in a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}

CMD:hdeposit(playerid, params[])
{
	if(Homes[playerid] > 0)
	{
		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW])
			{
				new string[128], itemid, amount;

				if(sscanf(params, "dd", itemid, amount))
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hdeposit [itemid] [amount]");
					SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials - (5) Heroin");
					return 1;
				}
				if(itemid < 1 || itemid > 5) {
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hdeposit [itemid] [amount]");
					SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials - (5) Heroin");
					return 1;
				}

				if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't deposit less than 1.");
				switch(itemid)
				{
					case 1: // Cash
					{
						if(PlayerInfo[playerid][pCash] >= amount) PlayerInfo[playerid][pCash] -= amount;
						else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");

						HouseInfo[i][hSafeMoney] += amount;
						format(string, sizeof(string), "You have deposited $%d to your house's safe.", amount);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						OnPlayerStatsUpdate(playerid);
						SaveHouse(i);
						format(string, sizeof(string), "%s (SQL: %d) has deposited $%d into their house (ID: %d) safe.", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), amount, i);
						Log("logs/hsafe.log", string);
						return 1;
					}
					case 2: // Pot
					{
						if(PlayerInfo[playerid][pPot] >= amount) PlayerInfo[playerid][pPot] -= amount;
						else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");

						HouseInfo[i][hPot] += amount;
						format(string, sizeof(string), "You have deposited %d Pot to your house's safe.", amount);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						OnPlayerStatsUpdate(playerid);
						SaveHouse(i);
						format(string, sizeof(string), "%s (SQL: %d) has deposited %d pot into their house (ID: %d) safe.", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), amount, i);
						Log("logs/hsafe.log", string);
						return 1;
					}
					case 3: // Crack
					{
						if(PlayerInfo[playerid][pCrack] >= amount) PlayerInfo[playerid][pCrack] -= amount;
						else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");

						HouseInfo[i][hCrack] += amount;
						format(string, sizeof(string), "You have deposited %d Crack to your house's safe.", amount);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						OnPlayerStatsUpdate(playerid);
						SaveHouse(i);
						format(string, sizeof(string), "%s (SQL: %d) has deposited %d crack into their house (ID: %d) safe.", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), amount, i);
						Log("logs/hsafe.log", string);
						return 1;
					}
					case 4: // Materials
					{
						if(PlayerInfo[playerid][pMats] >= amount) PlayerInfo[playerid][pMats] -= amount;
						else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");

						HouseInfo[i][hMaterials] += amount;
						format(string, sizeof(string), "You have deposited %d Materials to your house's safe.", amount);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						OnPlayerStatsUpdate(playerid);
						SaveHouse(i);
						format(string, sizeof(string), "%s (SQL: %d) has deposited %d materials into their house (ID: %d) safe.", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), amount, i);
						Log("logs/hsafe.log", string);
						return 1;
					}
					case 5: // Heroin
					{
						if(PlayerInfo[playerid][pHeroin] >= amount) PlayerInfo[playerid][pHeroin] -= amount;
						else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");

						HouseInfo[i][hHeroin] += amount;
						format(string, sizeof(string), "You have deposited %d Heroin to your house's safe.", amount);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						OnPlayerStatsUpdate(playerid);
						SaveHouse(i);
						format(string, sizeof(string), "%s (SQL: %d) has deposited %d heroin into their house (ID: %d) safe.", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), amount, i);
						Log("logs/hsafe.log", string);
						return 1;
					}
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You're not in a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}

CMD:hbalance(playerid, params[])
{
	if(Homes[playerid] > 0)
	{
		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW])
			{
				new string[128];
				SendClientMessageEx(playerid, COLOR_GREEN, "|___________________________________ House Safe ___________________________________|");
				format(string, sizeof(string), "Cash: $%s | Pot: %s | Crack: %s | Materials: %s | Heroin: %s", number_format(HouseInfo[i][hSafeMoney]), number_format(HouseInfo[i][hPot]), number_format(HouseInfo[i][hCrack]), number_format(HouseInfo[i][hMaterials]), number_format(HouseInfo[i][hHeroin]));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(playerid, COLOR_GREEN, "|__________________________________________________________________________________|");
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You're not in a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}

CMD:closet(playerid, params[])
{
	if(Homes[playerid] > 0)
	{
		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW])
			{
				if(HouseInfo[i][hClosetX] != 0)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hClosetX], HouseInfo[i][hClosetY], HouseInfo[i][hClosetZ]))
					{
						return DisplaySkins(playerid);
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, "You aren't near your closet!");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a closet in this house!");
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You're not in a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}

CMD:closetadd(playerid, params[])
{
	if(Homes[playerid] > 0)
	{
		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW])
			{
				if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetX] != 0)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetZ]))
					{
						CountSkins(playerid);
						if((PlayerInfo[playerid][pDonateRank] <= 0 && PlayerInfo[playerid][pSkins] <= 10) || (PlayerInfo[playerid][pDonateRank] > 0 && PlayerInfo[playerid][pSkins] <= 25))
						{
							new string[128];
							new skinid = GetPlayerSkin(playerid);
							AddSkin(playerid, skinid);
							format(string, sizeof(string), "You have added skin ID %d to your closet.", skinid);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
							return 1;
						}
						else return SendClientMessageEx(playerid, COLOR_GREY, "Your closet doesn't have anymore space for clothes!");
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, "You aren't near your closet!");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a closet in this house!");
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You're not in a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}

CMD:closetremove(playerid, params[])
{
	if(Homes[playerid] > 0)
	{
		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW])
			{
				if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetX] != 0)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetZ]))
					{
						new query[128];
						format(query, sizeof(query), "SELECT `skinid` FROM `house_closet` WHERE playerid = %d ORDER BY `skinid` ASC", GetPlayerSQLId(playerid));
						mysql_function_query(MainPipeline, query, true, "SkinQueryFinish", "ii", playerid, Skin_Query_Delete);
						return 1;
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, "You aren't near your closet!");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a closet in this house!");
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You're not in a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}

CMD:ad(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "The /ad command has been removed - use /ads or /advertisements.");
	return 1;
}

CMD:ads(playerid, params[]) {
	return cmd_advertisements(playerid, params);
}

CMD:advertisements(playerid, params[]) {
	if(gPlayerLogged{playerid} == 0) {
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
	}
	else if(GetPVarType(playerid, "Injured")) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use advertisements while injured.");
	}
	else if(PlayerCuffed[playerid] != 0) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use advertisements right now.");
	}
	else if(PlayerInfo[playerid][pJailTime] > 0) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use advertisements while in jail.");
	}
	else ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
	return 1;
}

CMD:gov(playerid, params[])
{
	new
		iGroupID = PlayerInfo[playerid][pLeader],
	 	iRank = PlayerInfo[playerid][pRank];

	if ((0 <= iGroupID < MAX_GROUPS) && iRank >= arrGroupData[iGroupID][g_iGovAccess]) {
		if(!isnull(params)) {
			new string[128];
			format(string, sizeof(string), "** %s %s %s: %s **", arrGroupData[iGroupID][g_szGroupName], arrGroupRanks[iGroupID][iRank], GetPlayerNameEx(playerid), params);
   			SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
			SendClientMessageToAllEx(arrGroupData[iGroupID][g_hDutyColour] * 256 + 255, string);
			Log("logs/gov.log", string);
		} else SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/gov)ernment [text]");
	} else SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	return 1;
}

CMD:gmotd(playerid, params[])
{
	new iGroupID = PlayerInfo[playerid][pLeader];
	if (0 <= iGroupID < MAX_GROUPS) {
		if (!isnull(params)) {
		    strcpy(arrGroupData[iGroupID][g_szGroupMOTD], params, 128);
			SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the group MOTD.");
			SaveGroup(iGroupID);
			new string[256];
			format(string,sizeof(string),"%s has changed MOTD for %s to: %s", GetPlayerNameEx(playerid), arrGroupData[iGroupID][g_szGroupName], params);
			Log("logs/group.log", string);
		} else SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gmotd [message]");
	} else SendClientMessageEx(playerid, COLOR_GREY, "Only group leaders may use this command.");
	return 1;
}

CMD:setautoreply(playerid, params[])
{
	if(strlen(PlayerInfo[playerid][pAutoTextReply]) > 0)
	{
		strdel(PlayerInfo[playerid][pAutoTextReply], 0, 64);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled auto reply.");
		return 1;
	}

	if(PlayerInfo[playerid][pDonateRank] < 2)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't a VIP.");
		return 1;
	}

	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setautoreply [text]");
		return 1;
	}

	new string[128];
	if(strlen(params) >= 1 && strlen(params) < 63)
	{
		format(PlayerInfo[playerid][pAutoTextReply], 64, "%s", params);
		format(string, sizeof(string), "You have changed your autotext response to: %s", params);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Your autotext response must consist of at least 1 character and can't exceed 64 characters.");
	}
	return 1;
}

CMD:switchgroup(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] || PlayerInfo[playerid][pFactionModerator] >= 4) {
		Group_ListGroups(playerid, DIALOG_SWITCHGROUP);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized.");
	return 1;
}

CMD:switchfam(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pGangModerator] >= 1 || PlayerInfo[playerid][pFactionModerator] >= 4)
	{
		new string[128], familyid;
		if(sscanf(params, "d", familyid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /switchfam [familyid]");
		if(familyid < 1 || familyid > MAX_FAMILY) return SendClientMessageEx(playerid, COLOR_WHITE, "Invalid Family Number.");
		format(string, sizeof(string), "You have switched to family ID %d (%s).", familyid, FamilyInfo[familyid][FamilyName]);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		PlayerInfo[playerid][pRank] = 6;
		PlayerInfo[playerid][pFMember] = familyid;
		PlayerInfo[playerid][pMember] = INVALID_GROUP_ID;
		PlayerInfo[playerid][pLeader] = INVALID_GROUP_ID;

	}
	return 1;
}

CMD:groupcsfban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /groupcsfban [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if( PlayerInfo[giveplayerid][pMember] >= 0 || PlayerInfo[giveplayerid][pLeader] >= 0 )
			{
				PlayerInfo[giveplayerid][pCSFBanned] = 1;
				format(string, sizeof(string), "You have been group-banned, by %s, from ALL Civil Service Groups.", GetPlayerNameEx( playerid ));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[giveplayerid][pMember] = INVALID_GROUP_ID;
				PlayerInfo[giveplayerid][pLeader] = INVALID_GROUP_ID;
				PlayerInfo[giveplayerid][pDivision] = INVALID_DIVISION;
				PlayerInfo[giveplayerid][pRank] = INVALID_RANK;
				PlayerInfo[giveplayerid][pDuty] = 0;
				PlayerInfo[giveplayerid][pModel] = NOOB_SKIN;
				SetPlayerToTeamColor(giveplayerid);
				SetPlayerSkin(giveplayerid, NOOB_SKIN);
				format(string, sizeof(string), "You have faction-banned %s from all CSF groups.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't kick someone from a faction if they're not a leader / member.");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	return 1;
}

CMD:groupunban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new giveplayerid, group;
		if(sscanf(params, "ud", giveplayerid, group)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /groupunban [player] [groupid]");

		if(IsPlayerConnected(giveplayerid))
		{
			new string[256];
			SetPVarInt(playerid, "GroupUnBanningPlayer", giveplayerid);
			SetPVarInt(playerid, "GroupUnBanningGroup", group);
			format(string,sizeof(string),"DELETE FROM `groupbans` WHERE  `PlayerID` = %d AND `GroupBan` = %d", GetPlayerSQLId(giveplayerid), group);
			mysql_function_query(MainPipeline, string, false, "Group_QueryFinish", "ii", GROUP_QUERY_UNBAN, playerid);
			format(string, sizeof(string), "Attempting to unban %s from group %d...", GetPlayerNameEx(giveplayerid), group);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	return 1;
}


CMD:groupcsfunban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /faccsfunban [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if( PlayerInfo[giveplayerid][pCSFBanned] == 0 ) return SendClientMessageEx( playerid, COLOR_WHITE, "That person isn't banned from Civil Service Groups." );
			PlayerInfo[giveplayerid][pCSFBanned] = 0;
			format(string, sizeof(string), "You have unbanned person %s from all Civil Service Groups.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "You have been unbanned from Civil Service Groups, by %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	return 1;
}

CMD:groupban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1)
	{
		new giveplayerid, group , reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, group, reason))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /groupban [player] [group id] [reason]");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if( group >= 0 && group < MAX_GROUPS )
			{
				SetPVarInt(playerid, "GroupBanningPlayer", giveplayerid);
				SetPVarInt(playerid, "GroupBanningGroup", group);
				new string[256];
				format(string,sizeof(string),"INSERT INTO `groupbans` (`PlayerID`, `GroupBan`, `BanReason`, `BanDate`) VALUES (%d, %d, '%s', NOW())", GetPlayerSQLId(giveplayerid), group, reason);
				mysql_function_query(MainPipeline, string, false, "Group_QueryFinish", "ii", GROUP_QUERY_ADDBAN, playerid);
				format(string, sizeof(string), "Attempting to ban %s from group %d...", GetPlayerNameEx(giveplayerid), group);
			    SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid group id.");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	return 1;
}

CMD:gangwarn(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pGangModerator] >= 1 || PlayerInfo[playerid][pFactionModerator] >= 4)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gangwarn [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 2)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "Admins can not be gang warned!");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pGangWarn] >= 3)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That person is already banned from gangs.");
				return 1;
			}
			PlayerInfo[giveplayerid][pGangWarn] += 1;
			if(PlayerInfo[giveplayerid][pGangWarn] == 3)
			{
				format(string, sizeof(string), "AdmCmd: %s(%d) was banned from gangs by %s (had 3 Gang Warnings), reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/admin.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned from gangs by %s (had 3 Gang Warnings), reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				ABroadCast(COLOR_LIGHTRED, string, 2);
				format(string, sizeof(string), "You have been banned from gangs by %s (had 3 Gang Warnings), reason: %s", GetPlayerNameEx(playerid), reason);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pFMember] = INVALID_FAMILY_ID;
				PlayerInfo[giveplayerid][pRank] = 0;
				PlayerInfo[giveplayerid][pModel] = NOOB_SKIN;
				SetPlayerSkin(giveplayerid, NOOB_SKIN);
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s was gang warned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 2);
			format(string, sizeof(string), "AdmCmd: %s(%d) was gang warned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "You were given a gang warning by %s, reason: %s", GetPlayerNameEx(playerid), reason);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:gangban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pGangModerator] >= 1)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gangban [player] [reason]");
		if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		if(PlayerInfo[giveplayerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Admins can not be gang warned!");
		if(PlayerInfo[giveplayerid][pGangWarn] >= 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "That person is already banned from gangs.");
		format(string, sizeof(string), "AdmCmd: %s(%d) was banned from gangs by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), reason);
		Log("logs/admin.log", string);
		format(string, sizeof(string), "AdmCmd: %s was banned from gangs by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
		ABroadCast(COLOR_LIGHTRED, string, 2);
		format(string, sizeof(string), "You have been banned from gangs by %s, reason: %s", GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
		PlayerInfo[giveplayerid][pGangWarn] = 3;
		PlayerInfo[giveplayerid][pFMember] = INVALID_FAMILY_ID;
		PlayerInfo[giveplayerid][pRank] = 0;
		PlayerInfo[giveplayerid][pModel] = NOOB_SKIN;
		SetPlayerSkin(giveplayerid, NOOB_SKIN);
	}
	return 1;
}

CMD:gangunban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pGangModerator] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gangunban [player]");

		if( IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pGangWarn] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "That person isn't banned from gangs." );
			format(string, sizeof(string), "You have unbanned %s from gangs.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "You have been unbanned from gangs by Admin %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
			PlayerInfo[giveplayerid][pGangWarn] = 0;

			format(string, sizeof(string), "AdmCmd: %s(%d) has been unbanned from gangs by %s.", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been unbanned from gangs by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, string, 2);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	return 1;
}

CMD:hshowbadge(playerid, params[])
{
	if(IsAHitman(playerid))
	{
		new giveplayerid, rank, faction, division;
		if(sscanf(params, "uiii", giveplayerid, faction, rank, division))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hshowbadge [player] [faction] [rank] [division]");
			return 1;
		}
		new oldfaction = PlayerInfo[playerid][pMember];
		new oldrank = PlayerInfo[playerid][pRank];
		new olddivision = PlayerInfo[playerid][pDivision];
		PlayerInfo[playerid][pMember] = faction;
		PlayerInfo[playerid][pRank] = rank;
		PlayerInfo[playerid][pDivision] = division;
		cmd_showbadge(playerid, params);
		PlayerInfo[playerid][pMember] = oldfaction;
		PlayerInfo[playerid][pRank] = oldrank;
		PlayerInfo[playerid][pDivision] = olddivision;
	}
	return 1;
}

CMD:showbadge(playerid, params[])
{
	if(0 <= PlayerInfo[playerid][pMember] < MAX_GROUPS)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /showbadge [player]");

		if(giveplayerid != INVALID_PLAYER_ID) {
			if(ProxDetectorS(5.0, playerid, giveplayerid)) {

				new	infoArrays[3][GROUP_MAX_NAME_LEN];

				GetPlayerGroupInfo(playerid, infoArrays[0], infoArrays[1], infoArrays[2]);

				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
				format(string, sizeof(string), "%s %s is a duly sworn member of the %s.", infoArrays[0], GetPlayerNameEx(playerid), infoArrays[2]);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Current Assignment: %s.", infoArrays[1]);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				switch(arrGroupData[PlayerInfo[playerid][pMember]][g_iAllegiance]) {
					case 1: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the San Andreas Government.");
					case 2: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the Nation of Tierra Robada.");
				}
				if(IsACop(playerid)) SendClientMessageEx(giveplayerid, COLOR_WHITE, "Official has the authority to arrest.");
				else if(arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] != 2) SendClientMessageEx(giveplayerid, COLOR_WHITE, "Official has the authority to assist in arrests.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
				format(string, sizeof(string), "* %s shows their badge to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			} else SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
		} else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	} else SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a civil service group.");
	return 1;
}

CMD:groupkick(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /groupkick [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pMember] >= 0 || PlayerInfo[giveplayerid][pLeader] >= 0)
			{
				format(string, sizeof(string), "Administrator %s has group-kicked %s from %s (%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), arrGroupData[PlayerInfo[giveplayerid][pMember]][g_szGroupName], PlayerInfo[giveplayerid][pMember]+1);
				Log("logs/group.log", string);
				format(string, sizeof(string), "You have been faction-kicked, by %s.", GetPlayerNameEx( playerid ));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[giveplayerid][pDuty] = 0;
				PlayerInfo[giveplayerid][pMember] = INVALID_GROUP_ID;
				PlayerInfo[giveplayerid][pRank] = INVALID_RANK;
				PlayerInfo[giveplayerid][pLeader] = INVALID_GROUP_ID;
				PlayerInfo[giveplayerid][pDivision] = INVALID_DIVISION;
				if(!IsValidSkin(GetPlayerSkin(giveplayerid)))
				{
					new rand = random(sizeof(CIV));
					SetPlayerSkin(giveplayerid,CIV[rand]);
					PlayerInfo[giveplayerid][pModel] = CIV[rand];
				}
				player_remove_vip_toys(giveplayerid);
				pTazer{giveplayerid} = 0;
				SetPlayerToTeamColor(giveplayerid);
				format(string, sizeof(string), "You have group-kicked %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't kick someone from a group if they're not a member.");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
	}
	return 1;
}

CMD:m(playerid, params[]) {
	if(!isnull(params))
	{
		if(IsACop(playerid) || IsAMedic(playerid) || IsAHitman(playerid) || IsAGovernment(playerid) || IsAJudge(playerid))
		{
			new
				szMessage[128];

			format(szMessage, sizeof(szMessage), "(megaphone) %s: %s", GetPlayerNameEx(playerid), params);
			ProxDetector(60.0, playerid, szMessage, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW,1);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "   You do not have authority to use the megaphone.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/m)egaphone [megaphone chat]");
	return 1;
}

CMD:togradio(playerid, params[])
{
    if(GetPVarInt(playerid, "togRadio") == 0)
    {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You have toggled off your radio, you may re-enable it by typing this command again.");
        SetPVarInt(playerid, "togRadio", 1);
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You have toggled on your radio.");
        SetPVarInt(playerid, "togRadio", 0);
	} return 1;
}

CMD:radio(playerid, params[]) {
	return cmd_r(playerid, params);
}

CMD:r(playerid, params[]) {

	new
		iGroupID = PlayerInfo[playerid][pMember],
		iRank = PlayerInfo[playerid][pRank];

	if (0 <= iGroupID < MAX_GROUPS) {
 		if (iRank >= arrGroupData[iGroupID][g_iRadioAccess]) {
			if(GetPVarInt(playerid, "togRadio") == 0) {
				if(!isnull(params))
				{
					new string[128], employer[GROUP_MAX_NAME_LEN], rank[GROUP_MAX_RANK_LEN], division[GROUP_MAX_DIV_LEN];
					format(string, sizeof(string), "(radio) %s", params);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 15.0, 5000);
					GetPlayerGroupInfo(playerid, rank, division, employer);
					format(string, sizeof(string), "** %s (%s) %s: %s **", rank, division, GetPlayerNameEx(playerid), params);
					//foreach(new i: Player)
					for(new i = 0; i < MAX_PLAYERS; ++i)
					{
						if(IsPlayerConnected(i))
						{
							if(GetPVarInt(i, "togRadio") == 0)
							{
								if(PlayerInfo[i][pMember] == iGroupID && iRank >= arrGroupData[iGroupID][g_iRadioAccess]) {
									SendClientMessageEx(i, arrGroupData[iGroupID][g_hRadioColour] * 256 + 255, string);
								}
								if(GetPVarInt(i, "BigEar") == 4 && GetPVarInt(i, "BigEarGroup") == iGroupID) {
									new szBigEar[128];
									format(szBigEar, sizeof(szBigEar), "(BE) %s", string);
									SendClientMessageEx(i, arrGroupData[iGroupID][g_hRadioColour] * 256 + 255, szBigEar);
								}
							}
						}	
					}
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/r)adio [radio chat]");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Your radio is currently turned off, type /togradio to turn it back on.");	
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "You do not have access to this radio frequency.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You are not in a group.");
	return 1;
}

CMD:int(playerid, params[])
{
	return cmd_international(playerid, params);
}

CMD:international(playerid, params[])
{
	new iGroupID = PlayerInfo[playerid][pMember],
	    iRank = PlayerInfo[playerid][pRank];

	if(0 <= iGroupID < MAX_GROUPS)
	{
	    if(iRank >= arrGroupData[iGroupID][g_iIntRadioAccess])
	    {
	        if(!isnull(params))
	        {
	            new szRadio[128], szEmployer[GROUP_MAX_NAME_LEN], szRank[GROUP_MAX_RANK_LEN], szDivision[GROUP_MAX_DIV_LEN];
	            GetPlayerGroupInfo(playerid, szRank, szDivision, szEmployer);
	            format(szRadio, sizeof(szRadio), "** %s %s (%s) %s: %s **", szEmployer, szRank, szDivision, GetPlayerNameEx(playerid), params);
	            //foreach(new i: Player)
				for(new i = 0; i < MAX_PLAYERS; ++i)
				{
					if(IsPlayerConnected(i))
					{				
						if((0 <= PlayerInfo[i][pMember] < MAX_GROUPS) && PlayerInfo[i][pRank] >= arrGroupData[PlayerInfo[i][pMember]][g_iIntRadioAccess])
						{
							SendClientMessageEx(i, 0x869688FF, szRadio);
						}
					}	
	            }
	            format(szRadio, sizeof(szRadio), "(radio) %s", params);
             	SetPlayerChatBubble(playerid, szRadio, COLOR_WHITE, 15.0, 5000);
             }
             else return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/int(ernational) [text]");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "You do not have access to this radio frequency!");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You're not in a group!");
	return 1;
}

CMD:togdept(playerid, params[])
{
    if(GetPVarInt(playerid, "togDept") == 0)
    {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You have toggled off your department radio, you may re-enable it by typing this command again.");
        SetPVarInt(playerid, "togDept", 1);
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You have toggled on your department radio.");
        SetPVarInt(playerid, "togDept", 0);
	} return 1;
}

CMD:dept(playerid, params[])
{
	new
		iGroupID = PlayerInfo[playerid][pMember],
		iRank = PlayerInfo[playerid][pRank];

	if(0 <= iGroupID < MAX_GROUPS)
	{
		if(iRank >= arrGroupData[iGroupID][g_iDeptRadioAccess])
		{
			if(GetPVarInt(playerid, "togDept") == 0)
			{
				if(!isnull(params))
				{
					new szRadio[128], RadioBubble[128], szEmployer[GROUP_MAX_NAME_LEN], szRank[GROUP_MAX_RANK_LEN], szDivision[GROUP_MAX_DIV_LEN];
					GetPlayerGroupInfo(playerid, szRank, szDivision, szEmployer);
					format(szRadio, sizeof(szRadio), "** %s %s (%s) %s: %s **", szEmployer, szRank, szDivision, GetPlayerNameEx(playerid), params);
					format(RadioBubble, sizeof(RadioBubble), "(radio) %s",params);
					SetPlayerChatBubble(playerid, RadioBubble, COLOR_WHITE, 15.0, 5000);
					//foreach(new i: Player)
					for(new i = 0; i < MAX_PLAYERS; ++i)
					{
						if(IsPlayerConnected(i))
						{
							if(GetPVarInt(i, "togDept") == 0)
							{
								if((0 <= PlayerInfo[i][pMember] < MAX_GROUPS) && PlayerInfo[i][pRank] >= arrGroupData[PlayerInfo[i][pMember]][g_iDeptRadioAccess] && arrGroupData[iGroupID][g_iAllegiance] == arrGroupData[PlayerInfo[i][pMember]][g_iAllegiance])
								{
									SendClientMessageEx(i, DEPTRADIO, szRadio);
								}
								else if(GetPVarInt(i, "BigEar") == 4 && GetPVarInt(i, "BigEarGroup") == iGroupID)
								{
									new szBigEar[128];
									format(szBigEar, sizeof(szBigEar), "(BE) %s", szRadio);
									SendClientMessageEx(i, iGroupID, szBigEar);
								}
								else if((PlayerInfo[i][pMember] == INVALID_GROUP_ID || (0 <= PlayerInfo[i][pMember] < MAX_GROUPS) && PlayerInfo[i][pRank] < arrGroupData[PlayerInfo[i][pMember]][g_iDeptRadioAccess]) && PlayerInfo[i][pReceiver] > 0)
								{
									if(GetPVarType(i, "pReceiverOn"))
									{
										if(GetPVarInt(i, "pReceiverMLeft") > 0)
										{
											format(szRadio, sizeof(szRadio), "** (receiver) %s: %s", GetPlayerNameEx(playerid), params);
											SendClientMessageEx(i, DEPTRADIO, szRadio);
											SetPVarInt(i, "pReceiverMLeft", GetPVarInt(i, "pReceiverMLeft") - 1);
										}
										else
										{
											PlayerInfo[i][pReceiver]--;
											SetPVarInt(i, "pReceiverMLeft", 4);
											return SendClientMessageEx(i, DEPTRADIO, "Your receiver ran out of batteries!");
										}
									}
								}
							}
						}	
					}
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/dept) [department chat]");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Your department radio is currently turned off, turn it on by typing /togdept.");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "You do not have access to this radio frequency.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You are not in a group.");
	return 1;
}

CMD:order(playerid, params[])
{
	if (IsAHitman(playerid))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
		if(IsPlayerInRangeOfPoint(playerid, 4.0, -71.419654846191,1360.4097900391,1080.2185058594) || IsPlayerInRangeOfPoint(playerid, 6.0, 1415.727905, -1299.371093, 15.054657))
		{
			if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
			new Hitman[32], skin = -1;
			if(sscanf(params, "s[32]D", Hitman, skin))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /order [name]");
				SendClientMessageEx(playerid, COLOR_GRAD2, " Rank 1: Knife ($800), SDPistol ($1000), Shotgun ($1500), Skin ($2500), Desert Eagle ($5000), MP5 ($2500), Kevlar Vest ($6000), firstaid ($500)");
				SendClientMessageEx(playerid, COLOR_GRAD2, " Rank 2: Rifle ($3000), AK47 ($10,000), M4 ($12,000)");
				SendClientMessageEx(playerid, COLOR_GRAD2, " Rank 3: SPAS-12 ($35,000), Sniper ($35,000)");
				SendClientMessageEx(playerid, COLOR_GRAD2, " Rank 4: C4 ($50,000)");
				return 1;
			}
			else if(strcmp(Hitman,"skin",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1) {
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that!");
				}
				else if(IsInvalidSkin(skin)) {
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /order skin [skin ID]");
				}
				else if(GetPlayerCash(playerid) >= 2500) {
					SetPlayerSkin(playerid, skin);
					PlayerInfo[playerid][pModel] = skin;
					GivePlayerCash(playerid, -2500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"You have purchased a skin!");
				}
				else SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that!");
			}
			else if(strcmp(Hitman,"Knife",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 800)
				{
					GivePlayerValidWeapon(playerid, 4, 3);
					GivePlayerCash(playerid, -800);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a knife!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"firstaid",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 500)
				{
					SetPlayerHealth(playerid, 100);
					GivePlayerCash(playerid, -500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a firstaid!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"SDPistol",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 1000)
				{
					GivePlayerValidWeapon(playerid, 23, 99999);
					GivePlayerCash(playerid, -1000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a silenced pistol!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Shotgun",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 1500)
				{
					GivePlayerValidWeapon(playerid, 25, 99999);
					GivePlayerCash(playerid, -1500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a shotgun!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Deagle",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) > 5000)
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerCash(playerid, -5000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a Desert Eagle!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"MP5",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, " You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 2500)
				{
					GivePlayerValidWeapon(playerid, 29, 99999);
					GivePlayerCash(playerid, -2500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased an MP5!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Rifle",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 2)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 3000)
				{
					GivePlayerValidWeapon(playerid, 33, 99999);
					GivePlayerCash(playerid, -3000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a rifle!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"AK47",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 2)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "   you are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 10000)
				{
					GivePlayerValidWeapon(playerid, 30, 99999);
					GivePlayerCash(playerid, -10000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased an AK-47!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"M4",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 2)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 12000)
				{
					GivePlayerValidWeapon(playerid, 31, 99999);
					GivePlayerCash(playerid, -12000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased an M4!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Vest",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 6000)
				{
					SetPlayerArmor(playerid, 99);
					GivePlayerCash(playerid, -6000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a kevlar vest!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Spas12",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 3)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 35000)
				{
					GivePlayerValidWeapon(playerid, 27, 99999);
					GivePlayerCash(playerid, -35000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a SPAS-12!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Sniper",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 3)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 35000)
				{
					GivePlayerValidWeapon(playerid, 34, 99999);
					GivePlayerCash(playerid, -35000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a sniper rifle!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"C4",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 4)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Yyou are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 50000)
				{
					PlayerInfo[playerid][pC4Get] = 1;
					PlayerInfo[playerid][pBombs]++;
					GivePlayerCash(playerid, -50000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased one block of C4!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You are not at the gun shack!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not a member of the hitman agency!");
		return 1;
	}
	return 1;
}

// Going to add these to 24-7 later

/*
CMD:blindfold(playerid, params[]) {
	return cmd_bf(playerid, params);
}

CMD:bf(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /(b)lind(f)old [player]");

	if(IsPlayerConnected(giveplayerid))
	{
        if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
	        if(ProxDetectorS(6.0, playerid, giveplayerid))
			{
                new vehicle = GetPlayerVehicleID(playerid);
                if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, vehicle))
				{
                    if(GetPVarInt(giveplayerid, "BlindFolded") == 0) {
		    	        if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You may not blindfold yourself."); return 1; }
	  			        format(string, sizeof(string), "%s has placed a blindfold over your eyes, your vision has been blocked.", GetPlayerNameEx(playerid));
				        SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "You have placed a blindfold over %s's eyes.", GetPlayerNameEx(giveplayerid));
				        SendClientMessageEx(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "* %s has placed a blindfold over %s's eyes.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				        TextDrawShowForPlayer(giveplayerid, BFText);
				        SetPVarInt(giveplayerid, "BlindFolded", 1);
				    }
     			    else {
		    	        if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, " You may not un-blindfold yourself !"); return 1; }
	  			        format(string, sizeof(string), "%s has removed the blindfold from over your eyes !", GetPlayerNameEx(playerid));
				        SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				        format(string, sizeof(string), " ** You have removed the blindfold from over %s's eyes.", GetPlayerNameEx(giveplayerid));
				        SendClientMessageEx(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "* %s has removed a blindfold from over %s's eyes.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				        TextDrawHideForPlayer(giveplayerid, BFText);
				        DeletePVar(giveplayerid, "BlindFolded");
    			    }
    		    }
    		    else
    		    {
        		    SendClientMessageEx(playerid, COLOR_GREY, "You must be the driver in order to use this command.");
    			    return 1;
			    }
		    }
		    else
		    {
			    SendClientMessageEx(playerid, COLOR_GREY, " That person is not in-range of you.");
			    return 1;
		    }
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
    return 1;
}
*/

CMD:hgate(playerid, params[])
{
	return cmd_movegate(playerid, params);
}

CMD:movegate(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /movegate [pass]");
	new Float:X, Float:Y, Float:Z;
	for(new i = 0; i < sizeof(GateInfo); i++)
	{
		GetDynamicObjectPos(GateInfo[i][gGATE], X, Y, Z);
		if(GateInfo[i][gGroupID] == -1 && GateInfo[i][gFamilyID] == -1 && IsPlayerInRangeOfPoint(playerid,GateInfo[i][gRange], X, Y, Z))
		{
			if(GateInfo[i][gLocked] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "This gate is currently locked.");
			if(GateInfo[i][gAutomate] == 1) return 1;
			if(strcmp(params, GateInfo[i][gPass], true) == 0)
			{
				if(GateInfo[i][gStatus] == 0)
				{
					MoveDynamicObject(GateInfo[i][gGATE], GateInfo[i][gPosXM], GateInfo[i][gPosYM], GateInfo[i][gPosZM], GateInfo[i][gSpeed], GateInfo[i][gRotXM], GateInfo[i][gRotYM], GateInfo[i][gRotZM]);
					GateInfo[i][gStatus] = 1;
					if(GateInfo[i][gTimer] != 0)
					{
						switch(GateInfo[i][gTimer])
						{
							case 1: SetTimerEx("MoveTimerGate", 3000, false, "i", i);
							case 2: SetTimerEx("MoveTimerGate", 5000, false, "i", i);
							case 3: SetTimerEx("MoveTimerGate", 7000, false, "i", i);
							case 4: SetTimerEx("MoveTimerGate", 10000, false, "i", i);
						}
					}
				}
				else if(GateInfo[i][gStatus] == 1 && GateInfo[i][gTimer] == 0)
				{
					MoveDynamicObject(GateInfo[i][gGATE], GateInfo[i][gPosX], GateInfo[i][gPosY], GateInfo[i][gPosZ], GateInfo[i][gSpeed], GateInfo[i][gRotX], GateInfo[i][gRotY], GateInfo[i][gRotZ]);
					GateInfo[i][gStatus] = 0;
				}
			}
		}
	}
	return 1;
}

CMD:admingatepw(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new string[128], gateid, pass[24];
		if(sscanf(params, "ds[24]", gateid, pass)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /admingatepw [gateid] [pass]");

		if(strlen(pass) > 24)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " Must be 24 characters or less! ");
			return 1;
		}
		format(string, sizeof(string), "Gate Password for gate %d changed to %s", gateid, pass);
		format(GateInfo[gateid][gPass], 24, "%s", pass);
		SendClientMessageEx(playerid, COLOR_GRAD2, string);
		SaveGate(gateid);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:housegatepw(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GREY, "/housegatepw has been changed to /setgatepass!");
	return 1;
}

CMD:setgatepass(playerid, params[])
{
	new Float:X, Float:Y, Float:Z, string[128];
	if(Homes[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You don't own a home!");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setgatepass [pass]");
	if(strlen(params) > 24) return SendClientMessageEx(playerid, COLOR_GRAD2, " Must be 24 characters or less! ");

	for(new i = 0; i < sizeof(GateInfo); i++)
	{
		GetDynamicObjectPos(GateInfo[i][gGATE], X, Y, Z);
		if(IsPlayerInRangeOfPoint(playerid, GateInfo[i][gRange], X, Y, Z))
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[GateInfo[i][gHID]][hOwnerID] && GateInfo[i][gGroupID] == -1 && GateInfo[i][gFamilyID] == -1)
			{
				format(GateInfo[i][gPass], 24, "%s", params);
				SaveGate(i);
				format(string, sizeof(string), "House Gate Password for gate %d changed to: %s", i, params);
				return SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, "* You're not near a gate that you own!");
	return 1;
}

CMD:lockgate(playerid, params[])
{
	new Float:X, Float:Y, Float:Z, string[56];
    for(new i = 0; i < sizeof(GateInfo); i++)
	{
		GetDynamicObjectPos(GateInfo[i][gGATE], X, Y, Z);
		if(IsPlayerInRangeOfPoint(playerid, GateInfo[i][gRange], X, Y, Z) && GetPlayerVirtualWorld(playerid) == GateInfo[i][gVW])
		{
			if(GateInfo[i][gGroupID] == -1 && GateInfo[i][gFamilyID] == -1)
			{
				if(GetPlayerSQLId(playerid) == HouseInfo[GateInfo[i][gHID]][hOwnerID])
				{
					if(GateInfo[i][gLocked] == 0)
					{
						GateInfo[i][gLocked] = 1;
						format(string, sizeof(string), "* %s has locked their gate.", GetPlayerNameEx(playerid));
						ProxDetector(GateInfo[i][gRange], playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					}
					else
					{
						GateInfo[i][gLocked] = 0;
						format(string, sizeof(string), "* %s has unlocked their gate.", GetPlayerNameEx(playerid));
						ProxDetector(GateInfo[i][gRange], playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						if(GateInfo[i][gAutomate] == 1)
						{
							//foreach(new p : Player)
							for(new p = 0; p < MAX_PLAYERS; ++p)
							{
								if(IsPlayerConnected(p))
								{			
									SetTimerEx("AutomaticGateTimer", 1000, false, "ii", p, i);
								}
							}
						}
					}
				}
			}
			else if(GateInfo[i][gGroupID] != -1 && GateInfo[i][gFamilyID] == -1)
			{
				if(PlayerInfo[playerid][pLeader] == GateInfo[i][gGroupID])
				{
					if(GateInfo[i][gLocked] == 0)
					{
						GateInfo[i][gLocked] = 1;
						format(string, sizeof(string), "* %s has locked the gate.", GetPlayerNameEx(playerid));
						ProxDetector(GateInfo[i][gRange], playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					}
					else
					{
						GateInfo[i][gLocked] = 0;
						format(string, sizeof(string), "* %s has unlocked the gate.", GetPlayerNameEx(playerid));
						ProxDetector(GateInfo[i][gRange], playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						if(GateInfo[i][gAutomate] == 1)
						{
							//foreach(new p : Player)
							for(new p = 0; p < MAX_PLAYERS; ++p)
							{
								if(IsPlayerConnected(p))
								{							
									SetTimerEx("AutomaticGateTimer", 1000, false, "ii", p, i);
								}
							}
						}
					}
				}
			}
			else if(GateInfo[i][gGroupID] == -1 && GateInfo[i][gFamilyID] != -1)
			{
				if(PlayerInfo[playerid][pFMember] == GateInfo[i][gFamilyID] && PlayerInfo[playerid][pRank] == 6)
				{
					if(GateInfo[i][gLocked] == 0)
					{
						GateInfo[i][gLocked] = 1;
						format(string, sizeof(string), "* %s has locked the gate.", GetPlayerNameEx(playerid));
						ProxDetector(GateInfo[i][gRange], playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					}
					else
					{
						GateInfo[i][gLocked] = 0;
						format(string, sizeof(string), "* %s has unlocked the gate.", GetPlayerNameEx(playerid));
						ProxDetector(GateInfo[i][gRange], playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						if(GateInfo[i][gAutomate] == 1)
						{
							//foreach(new p : Player)
							for(new p = 0; p < MAX_PLAYERS; ++p)
							{
								if(IsPlayerConnected(p))
								{							
									SetTimerEx("AutomaticGateTimer", 1000, false, "ii", p, i);
								}
							}
						}
					}
				}
			}
			else if(GateInfo[i][gGroupType] != 0)
			{
				if(PlayerInfo[playerid][pFactionModerator] >= 1)
				{
					if(GateInfo[i][gLocked] == 0)
					{
						GateInfo[i][gLocked] = 1;
						format(string, sizeof(string), "* %s has locked the gate.", GetPlayerNameEx(playerid));
						ProxDetector(GateInfo[i][gRange], playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						format(string, sizeof(string), "%s has locked gate ID %d.", GetPlayerNameEx(playerid), i);
						Log("logs/gedit.log", string);
					}
					else
					{
						GateInfo[i][gLocked] = 0;
						format(string, sizeof(string), "* %s has unlocked the gate.", GetPlayerNameEx(playerid));
						ProxDetector(GateInfo[i][gRange], playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						if(GateInfo[i][gAutomate] == 1)
						{
							//foreach(new p : Player)
							for(new p = 0; p < MAX_PLAYERS; ++p)
							{
								if(IsPlayerConnected(p))
								{			
									SetTimerEx("AutomaticGateTimer", 1000, false, "ii", p, i);
								}
							}	
						}
						format(string, sizeof(string), "%s has locked gate ID %d.", GetPlayerNameEx(playerid), i);
						Log("logs/gedit.log", string);
					}
				}
			}
		}
	}
	return 1;
}

CMD:su(playerid, params[]) {
	if(IsACop(playerid)) {
		if(PlayerInfo[playerid][pJailTime] > 0) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this in jail/prison.");
		}

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/su)spect [player]");
		}
		else if(!IsPlayerConnected(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
		else if(IsACop(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use this command on a law enforcement officer.");
		}
		else if(PlayerInfo[iTargetID][pWantedLevel] >= 6) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Target is already most wanted.");
		}
		else {
		    SetPVarInt(playerid, "suspect_TargetID", iTargetID);
		    ShowPlayerCrimeDialog(playerid);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	return 1;
}

CMD:reply(playerid, params[])
{
	new string[128];
	new reportid = INVALID_REPORT_ID;
	for(new i = 0; i < MAX_REPORTS; i++)
	{
		if(Reports[i][ReportFrom] == playerid && Reports[i][CheckingReport] != INVALID_PLAYER_ID)
		{
			reportid = i;
		}
	}
	if(reportid == INVALID_REPORT_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have any reports being reviewed at the moment.");
		return 1;
	}
	if (IsPlayerConnected(Reports[reportid][CheckingReport]))
	{
		format(string, sizeof(string), "%s(ID: %d) replies: %s", GetPlayerNameEx(playerid), playerid, params);
		SendClientMessageEx(Reports[reportid][CheckingReport], COLOR_YELLOW, string);

		format(string, sizeof(string), "Reply sent to %s: %s", GetPlayerNameEx(Reports[reportid][CheckingReport]), params);
		SendClientMessageEx(playerid,  COLOR_YELLOW, string);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Player not connected.");
	return 1;
}

CMD:awithdraw(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not at an ATM!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /awithdraw [amount]");
		format(string, sizeof(string), "  You have $%d in your account.", PlayerInfo[playerid][pAccount]);
		SendClientMessageEx(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if (amount > PlayerInfo[playerid][pAccount] || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You don't have that much!");
		return 1;
	}
	if(gettime()-GetPVarInt(playerid, "LastTransaction") < 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only make a transaction once every 10 seconds, please wait!");
    SetPVarInt(playerid, "LastTransaction", gettime());
	if(PlayerInfo[playerid][pDonateRank] == 0)
	{
		new fee;
		fee = 3*amount/100;
		PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-fee;
		format(string, sizeof(string), "-$%d money as a 3 percent fee.", fee);
		SendClientMessageEx(playerid, COLOR_GRAD2, string);
	}
	PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-amount;
	GivePlayerCash(playerid,amount);
	format(string, sizeof(string), "  You have withdrawn $%s from your account. Current balance: $%s ", number_format(amount), number_format(PlayerInfo[playerid][pAccount]));
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	OnPlayerStatsUpdate(playerid);
	return 1;
}

CMD:adeposit(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not at an ATM!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adeposit [amount]");
		format(string, sizeof(string), "  You have $%d in your account.", PlayerInfo[playerid][pAccount]);
		SendClientMessageEx(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if (amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You don't have that much.");
		return 1;
	}
	if(gettime()-GetPVarInt(playerid, "LastTransaction") < 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only make a transaction once every 10 seconds, please wait!");
    SetPVarInt(playerid, "LastTransaction", gettime());
	if(PlayerInfo[playerid][pDonateRank] == 0)
	{
		new fee;
		fee = 3*amount/100;
		PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-fee;
		format(string, sizeof(string), "-$%d money (3 percent fee).", fee);
		SendClientMessageEx(playerid, COLOR_GRAD2, string);
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = PlayerInfo[playerid][pAccount];
	PlayerInfo[playerid][pAccount]=amount+PlayerInfo[playerid][pAccount];
	SendClientMessageEx(playerid, COLOR_WHITE, "|___ ATM STATEMENT ___|");
	format(string, sizeof(string), "  Old Balance: $%s", number_format(curfunds));
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Deposit: $%s", number_format(amount));
	SendClientMessageEx(playerid, COLOR_GRAD4, string);
	SendClientMessageEx(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), "  New Balance: $%s", number_format(PlayerInfo[playerid][pAccount]));
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	OnPlayerStatsUpdate(playerid);
	return 1;
}

CMD:abalance(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not at an ATM!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new string[128];
	format(string, sizeof(string), "  You have $%s in your account.", number_format(PlayerInfo[playerid][pAccount]));
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:awiretransfer(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "   You must be at least level 3!");
		return 1;
	}

	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not at an ATM!");
		return 1;
	}
	if(PlayerInfo[playerid][pCash] < 0 || PlayerInfo[playerid][pAccount] < 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Your cash on-hand or in the bank is currently at a negative value!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
    if(gettime()-GetPVarInt(playerid, "LastTransaction") < 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only make a transaction once every 10 seconds, please wait!");
	new string[128], giveplayerid, amount;
	if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /awiretransfer [player] [amount]");

	if (IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(gPlayerLogged{giveplayerid} == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* The player you are trying to transfer money to is not logged in!");
			new playermoney = PlayerInfo[playerid][pAccount];
			if (amount > 0 && playermoney >= amount)
			{
				if(PlayerInfo[playerid][pDonateRank] == 0)
				{
					new fee;
					fee = 3*amount/100;
					PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-fee;
					format(string, sizeof(string), "-$%d money (3 percent fee).", fee);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
				GivePlayerCashEx(playerid, TYPE_BANK, -amount);
				GivePlayerCashEx(giveplayerid, TYPE_BANK, amount);
				/*PlayerInfo[playerid][pAccount] -= amount;
				PlayerInfo[giveplayerid][pAccount] += amount;*/
				format(string, sizeof(string), "   You have transferred $%s to %s's account.", number_format(amount), GetPlayerNameEx(giveplayerid),giveplayerid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "   $%s has been transferred to your bank account from %s.", number_format(amount), GetPlayerNameEx(playerid), playerid);
				SendClientMessageEx(giveplayerid, COLOR_GRAD1, string);
				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
				format(string, sizeof(string), "[ATM] %s (IP:%s) has transferred $%s to %s (IP:%s).", GetPlayerNameEx(playerid), ip, number_format(amount), GetPlayerNameEx(giveplayerid), ipex);
				if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[giveplayerid][pAdmin] >= 2) Log("logs/adminpay.log", string); else Log("logs/pay.log", string);
				if(amount >= 420000)
				{
					if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[giveplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[ATM] %s has transferred $%s to %s", GetPlayerNameEx(playerid), number_format(amount), GetPlayerNameEx(giveplayerid));
						if(!strcmp(GetPlayerIpEx(playerid),  GetPlayerIpEx(giveplayerid), true)) strcat(string, " (1)");
						ABroadCast(COLOR_YELLOW,string, 4);
					}
					else ABroadCast(COLOR_YELLOW,string,2);
				}
				PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
				SetPVarInt(playerid, "LastTransaction", gettime());

				/*OnPlayerStatsUpdate(playerid);
				OnPlayerStatsUpdate(giveplayerid);*/
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:withdraw(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) == 0 || !IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new string[128], amount;

	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /withdraw [amount]");
		format(string, sizeof(string), "  You have $%d in your account.", PlayerInfo[playerid][pAccount]);
		SendClientMessageEx(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if (amount > PlayerInfo[playerid][pAccount] || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You don't have that much!");
		return 1;
	}
	if(gettime()-GetPVarInt(playerid, "LastTransaction") < 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only make a transaction once every 10 seconds, please wait!");
    SetPVarInt(playerid, "LastTransaction", gettime());
	GivePlayerCash(playerid,amount);
	PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-amount;
	format(string, sizeof(string), "  You have withdrawn $%s from your account. Current balance: $%s ", number_format(amount), number_format(PlayerInfo[playerid][pAccount]));
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	OnPlayerStatsUpdate(playerid);
	return 1;
}

CMD:deposit(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) == 0 || !IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new string[128], amount;

	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /deposit [amount]");
		format(string, sizeof(string), "  You have $%d in your account.", PlayerInfo[playerid][pAccount]);
		SendClientMessageEx(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if (amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You don't have that much.");
		return 1;
	}
	if(gettime()-GetPVarInt(playerid, "LastTransaction") < 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only make a transaction once every 10 seconds, please wait!");
    SetPVarInt(playerid, "LastTransaction", gettime());
	GivePlayerCash(playerid,-amount);
	new curfunds = PlayerInfo[playerid][pAccount];
	PlayerInfo[playerid][pAccount]=amount+PlayerInfo[playerid][pAccount];
	SendClientMessageEx(playerid, COLOR_WHITE, "|___ BANK STATEMENT ___|");
	format(string, sizeof(string), "  Old Balance: $%s", number_format(curfunds));
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Deposit: $%s", number_format(amount));
	SendClientMessageEx(playerid, COLOR_GRAD4, string);
	SendClientMessageEx(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), "  New Balance: $%s", number_format(PlayerInfo[playerid][pAccount]));
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	OnPlayerStatsUpdate(playerid);
	return 1;
}

CMD:balance(playerid, params[])
{
	new string[128];
	if(GetPlayerVirtualWorld(playerid) == 0 || !IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
	if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	format(string, sizeof(string), "You have $%s in your account.", number_format(PlayerInfo[playerid][pAccount]));
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:wiretransfer(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "   You must be at least level 3!");
		return 1;
	}
	if(GetPlayerVirtualWorld(playerid) == 0 || !IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
	if(PlayerInfo[playerid][pCash] < 0 || PlayerInfo[playerid][pAccount] < 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Your cash on-hand or in the bank is currently at a negative value!");
		return 1;
	}
	if(gettime()-GetPVarInt(playerid, "LastTransaction") < 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only make a transaction once every 10 seconds, please wait!");
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new string[128], giveplayerid, amount;
	if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /wiretransfer [player] [amount]");


	if (IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(gPlayerLogged{giveplayerid} == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* The player you are trying to transfer money to is not logged in!");
			new playermoney = PlayerInfo[playerid][pAccount] ;
			if (amount > 0 && playermoney >= amount)
			{
				GivePlayerCashEx(playerid, TYPE_BANK, -amount);
				GivePlayerCashEx(giveplayerid, TYPE_BANK, amount);
				/*PlayerInfo[playerid][pAccount] -= amount;
				PlayerInfo[giveplayerid][pAccount] += amount;*/
				format(string, sizeof(string), "   You have transferred $%s to %s's account.", number_format(amount), GetPlayerNameEx(giveplayerid),giveplayerid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "   You have recieved $%s to into your account from %s.", number_format(amount), GetPlayerNameEx(playerid), playerid);
				SendClientMessageEx(giveplayerid, COLOR_GRAD1, string);
				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
				format(string, sizeof(string), "[BANK] %s (IP:%s) has transferred $%s to %s (IP:%s).", GetPlayerNameEx(playerid), ip, number_format(amount), GetPlayerNameEx(giveplayerid), ipex);
				if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[giveplayerid][pAdmin] >= 2) Log("logs/adminpay.log", string); else Log("logs/pay.log", string);
				if(amount >= 500000)
				{
					if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[giveplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[BANK] %s has transferred $%s to %s", GetPlayerNameEx(playerid), number_format(amount), GetPlayerNameEx(giveplayerid));
						if(!strcmp(GetPlayerIpEx(playerid),  GetPlayerIpEx(giveplayerid), true)) strcat(string, " (1)");
						ABroadCast(COLOR_YELLOW,string, 4);
					}
					else ABroadCast(COLOR_YELLOW,string,2);
				}
				PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
				SetPVarInt(playerid, "LastTransaction", gettime());
				/*OnPlayerStatsUpdate(playerid);
				OnPlayerStatsUpdate(giveplayerid);*/
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:asellhouse(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));

		new string[128], house;
		if(sscanf(params, "d", house)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /asellhouse [houseid]");

		HouseInfo[house][hLock] = 1;
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"Administrator %s (IP: %s) has admin-sold house ID %d (was owned by %s).", GetPlayerNameEx(playerid), ip, house, HouseInfo[house][hOwnerName]);
		Log("logs/house.log", string);
		ClearHouse(house);
		format( HouseInfo[house][hOwnerName], 128, "Nobody" );
		HouseInfo[house][hOwnerID] = -1;
		HouseInfo[house][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~You have sold house %d.", house);
		GameTextForPlayer(playerid, string, 10000, 3);
		SaveHouse(house);
		DestroyDynamicPickup(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreateDynamicPickup(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ], .worldid = HouseInfo[house][hExtVW], .interiorid = HouseInfo[house][hExtIW]);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(string, sizeof(string), "This home is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\n/buyhouse to buy it.",HouseInfo[house][hDescription],HouseInfo[house][hValue],HouseInfo[house][hLevel]);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 10.0, .testlos = 1, .worldid = HouseInfo[house][hExtVW], .interiorid = HouseInfo[house][hExtIW], .streamdistance = 10.0);
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:call(playerid, params[])
{
	new string[128], phonenumb;

	if(sscanf(params, "d", phonenumb)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /call [phonenumber]");

	if (PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"You can't use your phone while in jail.");
		return 1;
	}
	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"You can't use your phone whilist restrained.");
		return 1;
	}
	if(PlayerInfo[playerid][pPnumber] == 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a cell phone.");
		return 1;
	}
	if(PhoneOnline[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Your phone is off.");
		return 1;
	}
	if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen")) {
   		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
	}
	format(string, sizeof(string), "* %s takes out a cellphone.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	if(phonenumb == 911)
	{
		if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Cannot use this whilist in prison!");
		if(GetPVarType(playerid, "Has911Call")) SendClientMessageEx(playerid, COLOR_GREY, "You can only have one active call at a time. (/cancelcall)");
		else if(PlayerInfo[playerid][p911Muted] != 0) ShowPlayerDialog(playerid, 7955, DIALOG_STYLE_MSGBOX, "Call Blocked", "You are currently blocked from using 911 emergency services. This is generally caused by abuse of services.\n\n((Use /report to report for an unmute))", "Close", "");
		else 
			ShowPlayerDialog(playerid, DIALOG_911MENU, DIALOG_STYLE_LIST, "911 Emergency Services", "Emergency\nMedical\nPolice Assistance (Non-Emergency)\nTowing\nVehicle Burglary (In Progress)", "Select", "End Call");
		return 1;
	}
	if(phonenumb == PlayerInfo[playerid][pPnumber])
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You just get a busy tone...");
		return 1;
	}
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are already on a call...");
		return 1;
	}
	//foreach(new i: Player)
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
			{
				new giveplayerid = i;
				Mobile[playerid] = giveplayerid; //caller connecting
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
						if(PhoneOnline[giveplayerid] > 0)
						{
							SendClientMessageEx(playerid, COLOR_GREY, "That player's phone is switched off.");
							Mobile[playerid] = INVALID_PLAYER_ID;
							return 1;
						}
						if(Mobile[giveplayerid] != INVALID_PLAYER_ID)
						{
							SendClientMessageEx(playerid, COLOR_GRAD2, "You just get a busy tone...");
							Mobile[playerid] = INVALID_PLAYER_ID;
							return 1;
						}
						if(Spectating[giveplayerid]!=0)
						{
							SendClientMessageEx(playerid, COLOR_GRAD2, "You just get a busy tone...");
							Mobile[playerid] = INVALID_PLAYER_ID;
							return 1;
						}
						if (Mobile[giveplayerid] == INVALID_PLAYER_ID)
						{
							format(string, sizeof(string), "Your mobile is ringing - type /p to answer it. [Caller ID: %s]", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);
							RingTone[giveplayerid] = 10;
							format(string, sizeof(string), "* %s's phone begins to ring.", GetPlayerNameEx(i));
							SendClientMessageEx(playerid, COLOR_WHITE, "HINT: You now use T to talk on your cellphone, type /hangup to hang up.");
							ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							new Float:rX, Float:rY, Float:rZ;
							GetPlayerPos(giveplayerid, rX, rY, rZ);
							//SendRingtoneToArea(playerid, 100, rX, rY, rZ);
							//SendAudioToPlayer(playerid, 60, 100);
							CellTime[playerid] = 1;
							SetPlayerAttachedObject(playerid, 8, 330, 6);
							return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						}
					}
				}
			}
		}	
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "Your call can not be completed as dialed, please check the number and try again.");
	return 1;
}

CMD:t(playerid, params[])
{
	return cmd_sms(playerid, params);
}

CMD:txt(playerid, params[])
{
	return cmd_sms(playerid, params);
}

CMD:sms(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You haven't logged in yet!");
	if(PlayerInfo[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "  You don't have a cell phone.");
	if(PhoneOnline[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Your phone is off.");
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerInfo[playerid][pHospital] != 0) return SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't use your phone whilist restrained.");
	if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You can not use your phone while in jail or prison!");

	new string[128], phonenumb, text[100];
	if(sscanf(params, "ds[100]", phonenumb, text)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/t)ext [phonenumber] [text chat]");

	if(Spectating[playerid] == 0)
	{
		format(string, sizeof(string), "* %s takes out a cellphone.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}

	if(phonenumb == 555)
	{
		if ((strcmp("yes", text, true, strlen(text)) == 0) && (strlen(text) == strlen("yes")))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Text message delivered.");
			SendClientMessageEx(playerid, COLOR_YELLOW, "SMS: I'm watching you, Sender: MOLE (555)");
			//SendAudioToPlayer(playerid, 47, 100);
			RingTone[playerid] = 20;
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_YELLOW, "SMS: I'm watching you, Sender: MOLE (555)");
			//SendAudioToPlayer(playerid, 47, 100);
			RingTone[playerid] = 20;
			return 1;
		}
	}
	//foreach(new i: Player)
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
			{
				new giveplayerid = i;
				if(Mobile[giveplayerid] != INVALID_PLAYER_ID)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player's phone is busy (on a call).");
					return 1;
				}
				Mobile[playerid] = giveplayerid; //caller connecting
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{

						if(PhoneOnline[giveplayerid] > 0)
						{
							SendClientMessageEx(playerid, COLOR_GREY, "That player's phone is switched off.");
							Mobile[playerid] = INVALID_PLAYER_ID;
							return 1;
						}
						//foreach(new u: Player)
						for(new u = 0; u < MAX_PLAYERS; ++u)
						{
							if(IsPlayerConnected(u))
							{
								if(GetPVarInt(u, "BigEar") == 6 && (GetPVarInt(u, "BigEarPlayer") == playerid || GetPVarInt(u, "BigEarPlayer") == giveplayerid))
								{
									format(string, sizeof(string), "(BE) %s SMS to %s: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), text);
									SendClientMessageEx(u,COLOR_YELLOW, string);
								}
							}	
						}
						if(PlayerInfo[playerid][pPhonePrivacy] == 1)
						{
							format(string, sizeof(string), "SMS: %s, Sender: Unknown.", text, GetPlayerNameEx(playerid));
						}
						else
						{
							format(string, sizeof(string), "SMS: %s, Sender: %s (%d)", text, GetPlayerNameEx(playerid), PlayerInfo[playerid][pPnumber]);
						}

						if(i != playerid)
						{
							if(PlayerInfo[i][pSmslog] > 0)
							{
								new query[384], ftext[128];
								mysql_escape_string(text, ftext);
								if(PlayerInfo[playerid][pPhonePrivacy] == 1) format(query, sizeof(query), "INSERT INTO `sms` (`id`, `sender`, `senderid`, `sendernumber`, `receiver`, `receiverid`, `receivernumber`, `message`, `date`) VALUES (NULL, '%s', %d, 0, '%s', %d, %d, '%s', NOW())", GetPlayerNameExt(playerid), GetPlayerSQLId(playerid), GetPlayerNameExt(i), GetPlayerSQLId(i), phonenumb, ftext);
								else format(query, sizeof(query), "INSERT INTO `sms` (`id`, `sender`, `senderid`, `sendernumber`, `receiver`, `receiverid`, `receivernumber`, `message`, `date`) VALUES (NULL, '%s', %d, %d, '%s', %d, %d, '%s', NOW())", GetPlayerNameExt(playerid), GetPlayerSQLId(playerid), PlayerInfo[playerid][pPnumber], GetPlayerNameExt(i), GetPlayerSQLId(i), phonenumb, ftext);
								mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
							}
						}

						//format(string, sizeof(string), "* %s's phone beeps.", sendername);
						RingTone[giveplayerid] =20;
						SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);
						SendClientMessageEx(playerid, COLOR_YELLOW, string);
						SendClientMessageEx(playerid, COLOR_WHITE, "Text Message Delivered");
						format(string, sizeof(string), "~r~$-%d", 25);
						GameTextForPlayer(playerid, string, 5000, 1);
						GivePlayerCash(playerid,-25);
						//PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						//SendAudioToPlayer(playerid, 47, 100);
						//SendAudioToPlayer(giveplayerid, 47, 100);
						Mobile[playerid] = INVALID_PLAYER_ID;

						if(strcmp(PlayerInfo[giveplayerid][pAutoTextReply], "Nothing", true) != 0)
						{
							format(string, sizeof(string), "SMS: %s, Sender: %s [automated response] (%d)", PlayerInfo[giveplayerid][pAutoTextReply], GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pPnumber]);
							SendClientMessageEx(playerid, COLOR_YELLOW, string);
						}

						return 1;
					}
				}
			}
		}	
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "  Message delivery failed...");
	return 1;
}

CMD:p(playerid, params[]) {
	return cmd_pickup(playerid, params);
}

CMD:pickup(playerid, params[])
{
	new string[128];
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are already on a call...");
		return 1;
	}
	if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen") || PlayerInfo[playerid][pHospital]) {
   		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
	}
	//foreach(new i: Player)
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			if(Mobile[i] == playerid)
			{
				Mobile[playerid] = i; //caller connecting
				SendClientMessageEx(i,  COLOR_GRAD2, "   They picked up the call.");
				format(string, sizeof(string), "* %s answers their cellphone.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RingTone[playerid] = 0;
				SetPlayerAttachedObject(playerid, 8, 330, 6);
				return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			}
		}	
	}
	return 1;
}

CMD:h(playerid, params[]) {
	return cmd_hangup(playerid, params);
}

CMD:hangup(playerid,params[])
{
	new string[128];

	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||PlayerInfo[playerid][pHospital]!=0)
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
		return 1;
	}
	new caller = Mobile[playerid];
	if((IsPlayerConnected(caller) && caller != INVALID_PLAYER_ID))
	{
		if(caller < MAX_PLAYERS)
		{
			SendClientMessageEx(caller,  COLOR_GRAD2, "   They hung up.");
			format(string, sizeof(string), "* %s puts away their cellphone.", GetPlayerNameEx(caller));
			ProxDetector(30.0, caller, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			CellTime[caller] = 0;
			Mobile[caller] = INVALID_PLAYER_ID;
		}
		CellTime[playerid] = 0;
		SendClientMessageEx(playerid,  COLOR_GRAD2, "   You hung up.");
		format(string, sizeof(string), "* %s puts away their cellphone.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Mobile[playerid] = INVALID_PLAYER_ID;
		CellTime[playerid] = 0;
		RingTone[playerid] = 0;
		RemovePlayerAttachedObject(playerid, 8);
		RemovePlayerAttachedObject(caller, 8);
		SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		return 1;
	}
	SendClientMessageEx(playerid,  COLOR_GRAD2, "   Your phone is in your pocket.");
	return 1;
}

CMD:calls(playerid, params[])
{
	if(0 <= PlayerInfo[playerid][pMember] < MAX_GROUPS)
	{
		new string[128];
		SendClientMessageEx(playerid, COLOR_DBLUE, "____________________ 911 CALLS ____________________");
		for(new i = 999; i >= 0; i--) // Why in hell would we run 4 unnecessary loops here?
		{
			if(Calls[i][BeingUsed] == 1)
			{
				for(new j; j < arrGroupData[PlayerInfo[playerid][pMember]][g_iJCount]; j++)
				{
					if(strcmp(arrGroupJurisdictions[PlayerInfo[playerid][pMember]][j][g_iAreaName], Calls[i][Area], true) == 0 || strcmp(arrGroupJurisdictions[PlayerInfo[playerid][pMember]][j][g_iAreaName], Calls[i][MainZone], true) == 0)
					{
						if(Calls[i][Type] == 0 && IsACop(playerid))
						{
							format(string, sizeof(string), "[EMERGENCY] %s | Call #%i | Description: %s | 10-20: %s | Pending: %d minutes", GetPlayerNameEx(Calls[i][CallFrom]), i, Calls[i][Description], Calls[i][Area], Calls[i][TimeToExpire]);
							SendClientMessageEx(playerid, COLOR_RED, string);
						}
						else if(Calls[i][Type] == 1 && IsAMedic(playerid))
						{
							format(string, sizeof(string), "%s | Call #%i | Description: %s | 10-20: %s | Pending: %d minutes", GetPlayerNameEx(Calls[i][CallFrom]), i, Calls[i][Description], Calls[i][Area], Calls[i][TimeToExpire]);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
						}
						else if(Calls[i][Type] == 2 && IsACop(playerid))
						{
							format(string, sizeof(string), "%s | Call #%i | Description: %s | 10-20: %s | Pending: %d minutes", GetPlayerNameEx(Calls[i][CallFrom]), i, Calls[i][Description], Calls[i][Area], Calls[i][TimeToExpire]);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
						}
						else if(Calls[i][Type] == 3 && (IsACop(playerid) || IsATowman(playerid)))
						{
							format(string, sizeof(string), "[TOWING] %s | Call #%i | Description: %s | 10-20: %s | Pending: %d minutes", GetPlayerNameEx(Calls[i][CallFrom]), i, Calls[i][Description], Calls[i][Area], Calls[i][TimeToExpire]);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
						}
						else if(Calls[i][Type] == 4 && IsACop(playerid))
						{
							format(string, sizeof(string), "%s | Call #%i | Description: %s | 10-20: %s | Pending: %d minutes", GetPlayerNameEx(Calls[i][CallFrom]), i, Calls[i][Description], Calls[i][Area], Calls[i][TimeToExpire]);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
						}
					}
				}
			}
		}
		/* for(new i = 999; i >= 0; i--)
		{
			if(Calls[i][BeingUsed] == 1)
			{
				for(new j; j < arrGroupData[PlayerInfo[playerid][pMember]][g_iJCount]; j++)
				{
					if(strcmp(arrGroupJurisdictions[PlayerInfo[playerid][pMember]][j][g_iAreaName], Calls[i][Area], true) == 0 || strcmp(arrGroupJurisdictions[PlayerInfo[playerid][pMember]][j][g_iAreaName], Calls[i][MainZone], true) == 0)
					{
						if(Calls[i][Type] == 1 && IsAMedic(playerid))
						{
							format(string, sizeof(string), "%s | Call #%i | Description: %s | 10-20: %s | Pending: %d minutes", GetPlayerNameEx(Calls[i][CallFrom]), i, Calls[i][Description], Calls[i][Area], Calls[i][TimeToExpire]);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
						}
					}
				}
			}
		}
		for(new i = 999; i >= 0; i--)
		{
			if(Calls[i][BeingUsed] == 1)
			{
				for(new j; j < arrGroupData[PlayerInfo[playerid][pMember]][g_iJCount]; j++)
				{
					if(strcmp(arrGroupJurisdictions[PlayerInfo[playerid][pMember]][j][g_iAreaName], Calls[i][Area], true) == 0 || strcmp(arrGroupJurisdictions[PlayerInfo[playerid][pMember]][j][g_iAreaName], Calls[i][MainZone], true) == 0)
					{
						if(Calls[i][Type] == 2 && IsACop(playerid))
						{
							format(string, sizeof(string), "%s | Call #%i | Description: %s | 10-20: %s | Pending: %d minutes", GetPlayerNameEx(Calls[i][CallFrom]), i, Calls[i][Description], Calls[i][Area], Calls[i][TimeToExpire]);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
						}
					}
				}
			}
		}
		for(new i = 999; i >= 0; i--)
		{
			if(Calls[i][BeingUsed] == 1)
			{
				for(new j; j < arrGroupData[PlayerInfo[playerid][pMember]][g_iJCount]; j++)
				{
					if(strcmp(arrGroupJurisdictions[PlayerInfo[playerid][pMember]][j][g_iAreaName], Calls[i][Area], true) == 0 || strcmp(arrGroupJurisdictions[PlayerInfo[playerid][pMember]][j][g_iAreaName], Calls[i][MainZone], true) == 0)
					{
						if(Calls[i][Type] == 3 && (IsACop(playerid) || IsATowman(playerid)))
						{
							format(string, sizeof(string), "[TOWING] %s | Call #%i | Description: %s | 10-20: %s | Pending: %d minutes", GetPlayerNameEx(Calls[i][CallFrom]), i, Calls[i][Description], Calls[i][Area], Calls[i][TimeToExpire]);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
						}
					}
				}
			}
		} */
		SendClientMessageEx(playerid, COLOR_DBLUE, "___________________________________________________");
	}
	return 1;
}

CMD:ac(playerid, params[])
{
	return cmd_acceptcall(playerid, params);
}

CMD:acceptcall(playerid, params[])
{
	if(0 <= PlayerInfo[playerid][pMember] < MAX_GROUPS)
	{
		new string[128], callid;
		if(sscanf(params, "d", callid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ac [call #]");

		if(callid < 0 || callid > 999) return SendClientMessageEx(playerid, COLOR_GREY, "   Call number cannot be below 0 or above 999!");
		if(Calls[callid][BeingUsed] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "   There is no pending call with that number!");
		if(playerid == Calls[callid][CallFrom]) return SendClientMessageEx(playerid, COLOR_GREY, "   You can't accept your own call!");
		if(((Calls[callid][Type] == 0 || Calls[callid][Type] == 4) && !IsACop(playerid)) || (Calls[callid][Type] == 1 && !IsAMedic(playerid)) || (Calls[callid][Type] == 2 && !IsACop(playerid)) || (Calls[callid][Type] == 3 && !IsACop(playerid) && !IsATowman(playerid))) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot answer this call!");
		if(!IsPlayerConnected(Calls[callid][CallFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The caller has disconnected!");
			Calls[callid][CallFrom] = INVALID_PLAYER_ID;
			Calls[callid][BeingUsed] = 0;
			return 1;
		}
		for(new j; j < arrGroupData[PlayerInfo[playerid][pMember]][g_iJCount]; j++)
		{
			if(strcmp(arrGroupJurisdictions[PlayerInfo[playerid][pMember]][j][g_iAreaName], Calls[callid][Area], true) == 0 || strcmp(arrGroupJurisdictions[PlayerInfo[playerid][pMember]][j][g_iAreaName], Calls[callid][MainZone], true) == 0)
			{
				new Float: carPos[3], targetid = Calls[callid][CallFrom], targetslot = GetPlayerVehicle(Calls[callid][CallFrom], Calls[callid][CallVehicleId]);
				if(Calls[callid][CallVehicleId] != INVALID_VEHICLE_ID && Calls[callid][Type] == 4) {
					switch(PlayerVehicleInfo[targetid][targetslot][pvAlarm]) {
						case 1: {
							new zone[MAX_ZONE_NAME], mainzone[MAX_ZONE_NAME];
							Get3DZone(carPos[0], carPos[1], carPos[2], zone, sizeof(zone));
							Get2DMainZone(carPos[0], carPos[1], mainzone, sizeof(mainzone));
							format(string, sizeof(string), "This %s(%d) is located in %s(%s).", GetVehicleName(Calls[callid][CallVehicleId]), zone, mainzone);
							SendClientMessageEx(playerid, COLOR_YELLOW, string);
						}
						case 2: {
							if(PlayerVehicleInfo[targetid][targetslot][pvAlarmTriggered]) {
								
								if(PlayerVehicleInfo[targetid][targetslot][pvId] != INVALID_PLAYER_VEHICLE_ID)
								{
									GetVehiclePos(PlayerVehicleInfo[targetid][targetslot][pvId], carPos[0], carPos[1], carPos[2]);
									if(CheckPointCheck(playerid))
									{
										return SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
									}
									else
									{
										new zone[MAX_ZONE_NAME], mainzone[MAX_ZONE_NAME];
										Get3DZone(carPos[0], carPos[1], carPos[2], zone, sizeof(zone));
										Get2DMainZone(carPos[0], carPos[1], mainzone, sizeof(mainzone));
										format(string, sizeof(string), "This %s(%d) is located in %s(%s).", GetVehicleName(Calls[callid][CallVehicleId]), zone, mainzone);
										SendClientMessageEx(playerid, COLOR_YELLOW, string);
										
										SetPVarFloat(playerid, "CarLastX", carPos[0]);
										SetPVarFloat(playerid, "CarLastY", carPos[1]);
										SetPVarFloat(playerid, "CarLastZ", carPos[2]);
										SetPVarInt(playerid, "TrackVehicleBurglary", 120);
										SetPVarInt(playerid, "CallId", callid);
										SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
										SendClientMessageEx(playerid, COLOR_WHITE, "Hint: Make your way to the checkpoint to find the vehicle(Will only last 2 minutes)!");
									}
								}
								else if(PlayerVehicleInfo[targetid][targetslot][pvImpounded]) SendClientMessageEx(playerid, COLOR_WHITE, "You can not track an impounded vehicle.");
								else if(PlayerVehicleInfo[targetid][targetslot][pvDisabled] == 1) SendClientMessageEx(playerid, COLOR_WHITE, "You can not track a disabled vehicle.");
								else if(PlayerVehicleInfo[targetid][targetslot][pvSpawned] == 0) SendClientMessageEx(playerid, COLOR_WHITE, "You can not track a stored vehicle.");
								else SendClientMessageEx(playerid, COLOR_WHITE, "You can not track a non-existent vehicle.");
							}
						}
					}
				}
				//foreach(new i: Player)
				for(new i = 0; i < MAX_PLAYERS; ++i)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerInfo[i][pMember] == PlayerInfo[playerid][pMember] && PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iRadioAccess]) {
							format(string, sizeof(string), "%s has accepted %s's call from %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(Calls[callid][CallFrom]), Calls[callid][Area]);
							SendClientMessageEx(i, COLOR_DBLUE, string);
						}
						if(GetPVarInt(i, "BigEar") == 4 && GetPVarInt(i, "BigEarGroup") == PlayerInfo[playerid][pMember]) {
							format(string, sizeof(string), "(BE) %s has accepted %s's call from %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(Calls[callid][CallFrom]), Calls[callid][Area]);
							SendClientMessageEx(i, COLOR_DBLUE, string);
						}
					}	
				}
				AddCallToken(playerid);
				format(string, sizeof(string), "%s has accepted your call. You are now in a direct call with them. (/h to hang up)", GetPlayerNameEx(playerid));
				SendClientMessageEx(Calls[callid][CallFrom], COLOR_WHITE, string);
				format(string, sizeof(string), "You have accepted %s's call. You are now in a direct call with them. (/h to hang up)", GetPlayerNameEx(Calls[callid][CallFrom]));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				Mobile[playerid] = Calls[callid][CallFrom];
				SetPlayerAttachedObject(playerid, 8, 330, 6);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
				Mobile[Calls[callid][CallFrom]] = playerid;
				SetPlayerAttachedObject(Calls[callid][CallFrom], 8, 330, 6);
				SetPlayerSpecialAction(Calls[callid][CallFrom], SPECIAL_ACTION_USECELLPHONE);
				PlayerInfo[playerid][pCallsAccepted]++;
				
				
				Calls[callid][RespondingID] = playerid;
				Calls[callid][BeingUsed] = 0;
				Calls[callid][TimeToExpire] = 0;
				strmid(Calls[callid][Area], "None", 0, 4, 4);
				strmid(Calls[callid][MainZone], "None", 0, 4, 4);
				strmid(Calls[callid][Description], "None", 0, 4, 4);
				DeletePVar(Calls[callid][CallFrom], "Has911Call");
				return 1;
			}
		}
		return SendClientMessageEx(playerid, COLOR_GREY, "   This call is not within your jurisdiction!");
	}
	return 1;
}

CMD:ic(playerid, params[])
{
	return cmd_ignorecall(playerid, params);
}

CMD:ignorecall(playerid, params[])
{
	if(0 <= PlayerInfo[playerid][pMember] < MAX_GROUPS)
	{
		new string[128], callid;
		if(sscanf(params, "d", callid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ic [call #]");

		if(callid < 0 || callid > 999) return SendClientMessageEx(playerid, COLOR_GREY, "   Call number cannot be below 0 or above 999!");
		if(Calls[callid][BeingUsed] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "   There is no pending call with that number!");
		if(playerid == Calls[callid][CallFrom]) return SendClientMessageEx(playerid, COLOR_GREY, "   You can't drop your own call!");
		if((Calls[callid][Type] == 0 && !IsACop(playerid)) || (Calls[callid][Type] == 1 && !IsAMedic(playerid)) || (Calls[callid][Type] == 2 && !IsACop(playerid)) || (Calls[callid][Type] == 3 && !IsACop(playerid) && !IsATowman(playerid))) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot answer this call!");
		if(!IsPlayerConnected(Calls[callid][CallFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The caller has disconnected!");
			Calls[callid][CallFrom] = INVALID_PLAYER_ID;
			Calls[callid][BeingUsed] = 0;
			return 1;
		}
		for(new j; j < arrGroupData[PlayerInfo[playerid][pMember]][g_iJCount]; j++)
		{
			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pMember] == PlayerInfo[playerid][pMember] && PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iRadioAccess]) {
						format(string, sizeof(string), "%s has dropped %s's call.", GetPlayerNameEx(playerid), GetPlayerNameEx(Calls[callid][CallFrom]));
						SendClientMessageEx(i, COLOR_DBLUE, string);
					}
					if(GetPVarInt(i, "BigEar") == 4 && GetPVarInt(i, "BigEarGroup") == PlayerInfo[playerid][pMember]) {
						format(string, sizeof(string), "(BE) %s has dropped %s's call.", GetPlayerNameEx(playerid), GetPlayerNameEx(Calls[callid][CallFrom]));
						SendClientMessageEx(i, COLOR_DBLUE, string);
					}
				}	
			}
			DeletePVar(Calls[callid][CallFrom], "Has911Call");
			Calls[callid][CallFrom] = INVALID_PLAYER_ID;
			Calls[callid][BeingUsed] = 0;
			Calls[callid][TimeToExpire] = 0;
			strmid(Calls[callid][Area], "None", 0, 4, 4);
			strmid(Calls[callid][MainZone], "None", 0, 4, 4);
			strmid(Calls[callid][Description], "None", 0, 4, 4);
			return 1;
		}
		return SendClientMessageEx(playerid, COLOR_GREY, "   This call is not within your jurisdiction!");
	}
	return 1;
}

CMD:cancelcall(playerid, params[])
{
    for(new i = 0; i < MAX_CALLS; i++)
	{
	    if(Calls[i][CallFrom] == playerid)
	    {
	        Calls[i][CallFrom] = INVALID_PLAYER_ID;
			Calls[i][BeingUsed] = 0;
			Calls[i][TimeToExpire] = 0;
			strmid(Calls[i][Area], "None", 0, 4, 4);
			strmid(Calls[i][MainZone], "None", 0, 4, 4);
			strmid(Calls[i][Description], "None", 0, 4, 4);
			DeletePVar(playerid, "Has911Call");
			return SendClientMessageEx(playerid, COLOR_WHITE, "You have dropped your 911 call." );
		}
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have any pending 911 calls.");
	return 1;
}

CMD:clearallcalls(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1) {
        new string[128];
        ClearCalls();
        SendClientMessageEx(playerid,COLOR_GRAD1, "You have cleared all pending 911 calls.");
        format(string, sizeof(string), "AdmCmd: %s has cleared all pending 911 calls.", GetPlayerNameEx(playerid));
        ABroadCast(COLOR_LIGHTRED, string, 3);
    }
    else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    return 1;
}

CMD:goindoor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new string[48], doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /goindoor [doornumber]");

		if(doornum <= 0 || doornum >= MAX_DDOORS)
		{
			format(string, sizeof(string), "Door ID must be between 1 and %d.", MAX_DDOORS - 1);
			return SendClientMessageEx(playerid, COLOR_GREY, string);
		}

		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddInteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddInteriorA]);
		PlayerInfo[playerid][pInt] = DDoorsInfo[doornum][ddInteriorInt];
		PlayerInfo[playerid][pVW] = DDoorsInfo[doornum][ddInteriorVW];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddInteriorVW]);
		if(DDoorsInfo[doornum][ddCustomInterior]) Player_StreamPrep(playerid, DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ], FREEZE_TIME);
	}
	return 1;
}

CMD:gotodoor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new string[48], doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotodoor [doornumber]");

		if(doornum <= 0 || doornum >= MAX_DDOORS)
		{
			format(string, sizeof(string), "Door ID must be between 1 and %d.", MAX_DDOORS - 1);
			return SendClientMessageEx(playerid, COLOR_GREY, string);
		}

		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddExteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddExteriorA]);
		PlayerInfo[playerid][pInt] = DDoorsInfo[doornum][ddExteriorInt];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddExteriorVW]);
		PlayerInfo[playerid][pVW] = DDoorsInfo[doornum][ddExteriorVW];
		if(DDoorsInfo[doornum][ddCustomExterior]) Player_StreamPrep(playerid, DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ], FREEZE_TIME);
	}
	return 1;
}

CMD:goinhouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new string[48], housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /goinhouse [housenumber]");

		if(housenum <= 0 || housenum >= MAX_HOUSES)
		{
			format(string, sizeof(string), "House ID must be between 1 and %d.", MAX_HOUSES - 1);
			return SendClientMessageEx(playerid, COLOR_GREY, string);
		}

		SetPlayerInterior(playerid,HouseInfo[housenum][hIntIW]);
		SetPlayerPos(playerid, HouseInfo[housenum][hInteriorX], HouseInfo[housenum][hInteriorY], HouseInfo[housenum][hInteriorZ]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		PlayerInfo[playerid][pInt] = HouseInfo[housenum][hIntIW];
		PlayerInfo[playerid][pVW] = HouseInfo[housenum][hIntVW];
  		SetPlayerVirtualWorld(playerid,HouseInfo[housenum][hIntVW]);
		if(HouseInfo[housenum][hCustomInterior] == 1) Player_StreamPrep(playerid, HouseInfo[housenum][hInteriorX],HouseInfo[housenum][hInteriorY],HouseInfo[housenum][hInteriorZ], FREEZE_TIME);
	}
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new string[48], housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotohouse [housenumber]");

		if(housenum <= 0 || housenum >= MAX_HOUSES)
		{
			format(string, sizeof(string), "House ID must be between 1 and %d.", MAX_HOUSES - 1);
			return SendClientMessageEx(playerid, COLOR_GREY, string);
		}

		SetPlayerPos(playerid, HouseInfo[housenum][hExteriorX], HouseInfo[housenum][hExteriorY], HouseInfo[housenum][hExteriorZ]);
		PlayerInfo[playerid][pInt] = HouseInfo[housenum][hExtIW];
		SetPlayerInterior(playerid,HouseInfo[housenum][hExtIW]);
		PlayerInfo[playerid][pVW] = HouseInfo[housenum][hExtVW];
  		SetPlayerVirtualWorld(playerid,HouseInfo[housenum][hExtVW]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	return 1;
}

CMD:gotogate(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new string[48], gatenum;
		if(sscanf(params, "d", gatenum)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotogate [gatenumber]");

		if(gatenum <= 0 || gatenum >= MAX_GATES)
		{
			format(string, sizeof(string), "Gate ID must be between 1 and %d.", MAX_GATES - 1);
			return SendClientMessageEx(playerid, COLOR_GREY, string);
		}

		SetPlayerPos(playerid,GateInfo[gatenum][gPosX],GateInfo[gatenum][gPosY],GateInfo[gatenum][gPosZ] + 1);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		SetPlayerInterior(playerid, GateInfo[gatenum][gInt]);
		PlayerInfo[playerid][pInt] = GateInfo[gatenum][gInt];
		SetPlayerVirtualWorld(playerid,  GateInfo[gatenum][gVW]);
		PlayerInfo[playerid][pVW] =  GateInfo[gatenum][gVW];
	}
	return 1;
}

CMD:pedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pGangModerator] >= 2)
	{
		new string[128], hours;
		if(sscanf(params, "d", hours))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pedit [hours]");
			SendClientMessageEx(playerid, COLOR_GREY, "HINT: Stand close to a point to set the hours.");
			return 1;
		}

		for(new h = 0; h < sizeof(Points); h++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
			{
				if(hours < 1|| hours > 24)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You can not set the point time lower than 1 or higher than 24!");
				}
				else if(hours >= 1|| hours <= 24)
				{
					format(string, sizeof(string), "You have set this point's time to %d hours !", hours);
					Points[h][Vulnerable] = hours;
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					UpdatePoints();
				}
			}
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	return 1;
}

CMD:pointfix(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pGangModerator] >= 2)
	{
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
			{
				Points[h][TimeToClaim] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have fixed the point, players can now attempt to capture the point!");
				UpdatePoints();
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "Error: You need to stand close to the capture point to fix it.");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
	return 1;
}

CMD:dedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dedit [name] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack");
		return 1;
	}

	if(strcmp(choice,"pot",true) == 0)
	{
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(Points[h][Type] == 3)
			{
				Points[h][Stock] = amount;
				format(string, sizeof(string), " POT/OPIUM AVAILABLE: %d/1000.", Points[h][Stock]);
				UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
				SendClientMessageEx(playerid, COLOR_WHITE, " You have successfully changed the Drug House available pot!");
			}
		}
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(Points[h][Type] == 4)
			{
				Points[h][Stock] = amount;
				format(string, sizeof(string), " CRACK AVAILABLE: %d/500.", Points[h][Stock]);
				UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
				SendClientMessageEx(playerid, COLOR_WHITE, " You have successfully changed the Crack Lab available crack!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "	Not a valid name.");
		return 1;
	}
	return 1;
}

CMD:gstatus(playerid, params[])
{
	new gateid;
	if(sscanf(params, "i", gateid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gstatus [gateid]");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new string[128], timertxt, distancetxt;

		switch(GateInfo[gateid][gTimer])
		{
			case 1: timertxt = 1;
			case 2: timertxt = 3;
			case 3: timertxt = 5;
			case 4: timertxt = 10;
			default: timertxt = 0;
		}
		switch(GateInfo[gateid][gRenderHQ])
		{
			case 1: distancetxt = 100;
			case 2: distancetxt = 150;
			case 3: distancetxt = 200;
			default: distancetxt = 60;
		}

		format(string,sizeof(string),"|___________ Gate Status (ID: %d) ___________|", gateid);
		SendClientMessageEx(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "X: %f | Y: %f | Z: %f | RotX: %f | RotY: %f | RotZ: %f", GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ], GateInfo[gateid][gRotX], GateInfo[gateid][gRotY], GateInfo[gateid][gRotZ]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "XM: %f | YM: %f | ZM: %f | RotXM: %f | RotYM: %f | RotZM: %f", GateInfo[gateid][gPosXM], GateInfo[gateid][gPosYM], GateInfo[gateid][gPosZM], GateInfo[gateid][gRotXM], GateInfo[gateid][gRotYM], GateInfo[gateid][gRotZM]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Model: %d | HID: %d | VW: %d | Int: %d | Allegiance: %d | Group Type: %d | Group: %d | Family: %d", GateInfo[gateid][gModel], GateInfo[gateid][gHID], GateInfo[gateid][gVW], GateInfo[gateid][gInt], GateInfo[gateid][gAllegiance], GateInfo[gateid][gGroupType], GateInfo[gateid][gGroupID], GateInfo[gateid][gFamilyID]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Range: %.3f | Speed: %.3f | Timer: %d second(s) | Stream: %d | Automated: %d | Locked: %d | Pass: %s", GateInfo[gateid][gRange], GateInfo[gateid][gSpeed], timertxt, distancetxt, GateInfo[gateid][gAutomate], GateInfo[gateid][gLocked], GateInfo[gateid][gPass]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:ddstatus(playerid, params[])
{
	new doorid;
	if(sscanf(params, "i", doorid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ddstatus [doorid]");
		return 1;
	}
	if (PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new string[128];
		format(string,sizeof(string),"|___________ Door Status (ID: %d) ___________|", doorid);
		SendClientMessageEx(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "(Ext) X: %f | Y: %f | Z: %f | (Int) X: %f | Y: %f | Z: %f", DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Pickup ID: %d | Custom Int: %d | Custom Ext: %d | Exterior VW: %d | Exterior Int: %d | Interior VW: %d | Interior Int: %d", DDoorsInfo[doorid][ddPickupID], DDoorsInfo[doorid][ddCustomInterior], DDoorsInfo[doorid][ddCustomExterior], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], DDoorsInfo[doorid][ddInteriorVW], DDoorsInfo[doorid][ddInteriorInt]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Type: %d | Rank: %d | VIP: %d | Allegiance: %d | Group Type: %d | Family: %d | Faction: %d | Admin: %d | Wanted: %d", DDoorsInfo[doorid][ddType], DDoorsInfo[doorid][ddRank], DDoorsInfo[doorid][ddVIP], DDoorsInfo[doorid][ddAllegiance], DDoorsInfo[doorid][ddGroupType], DDoorsInfo[doorid][ddFamily], DDoorsInfo[doorid][ddFaction], DDoorsInfo[doorid][ddAdmin], DDoorsInfo[doorid][ddWanted]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Vehiclable: %d | Locked: %d | Password: %s", DDoorsInfo[doorid][ddVehicleAble], DDoorsInfo[doorid][ddLocked], DDoorsInfo[doorid][ddPass]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:ddnear(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing all dynamic doors within 30 meters of you...");
		for(new i, szMessage[128]; i < MAX_DDOORS; i++)
		{
			if(strcmp(DDoorsInfo[i][ddDescription], "None", true) != 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 30, DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]))
				{
					format(szMessage, sizeof(szMessage), "(Interior) DDoor ID %d | %f from you | Virtual World: %d | Interior: %d", i, GetPlayerDistanceFromPoint(playerid, DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]), DDoorsInfo[i][ddInteriorVW], DDoorsInfo[i][ddInteriorInt]);
					SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				}
				if(IsPlayerInRangeOfPoint(playerid, 30, DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]))
				{
					format(szMessage, sizeof(szMessage), "(Exterior) DDoor ID %d | %f from you | Virtual World: %d | Interior: %d", i, GetPlayerDistanceFromPoint(playerid, DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]), DDoorsInfo[i][ddExteriorVW], DDoorsInfo[i][ddExteriorInt]);
					SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				}
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:gnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing all gates within 30 meters of you...");
		for(new i, Float: fGatePos[3], szMessage[32]; i < MAX_GATES; i++)
		{
			GetDynamicObjectPos(GateInfo[i][gGATE], fGatePos[0], fGatePos[1], fGatePos[2]);
			if(IsPlayerInRangeOfPoint(playerid, 30, fGatePos[0], fGatePos[1], fGatePos[2]))
			{
				if(GateInfo[i][gModel] != 0)
				{
			    	format(szMessage, sizeof(szMessage), "Gate ID %d (VW: %d) | %f from you", i, GateInfo[i][gVW], GetPlayerDistanceFromPoint(playerid, fGatePos[0], fGatePos[1], fGatePos[2]));
			    	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				}
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:dmpnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing all map icons within 30 meters of you");
		new Float:X, Float:Y, Float:Z;
  		GetPlayerPos(playerid, X, Y, Z);
		for(new i=1;i<MAX_DMAPICONS;i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30, DMPInfo[i][dmpPosX], DMPInfo[i][dmpPosY], DMPInfo[i][dmpPosZ]))
			{
				if(DMPInfo[i][dmpMarkerType] != 0)
				{
				    new string[128];
			    	format(string, sizeof(string), "MapIcon ID %d | %f from you", i, GetDistance(DMPInfo[i][dmpPosX], DMPInfo[i][dmpPosY], DMPInfo[i][dmpPosZ], X, Y, Z));
			    	SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:gnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available gate...");
		for(new x;x<MAX_GATES;x++)
		{
		    if(GateInfo[x][gModel] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:dmpnext(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available map icon...");
		for(new x=1;x<MAX_DMAPICONS;x++)
		{
		    if(DMPInfo[x][dmpMarkerType] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:ddnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available dynamic door...");
		for(new x;x<MAX_DDOORS;x++)
		{
		    if(DDoorsInfo[x][ddExteriorX] == 0.0) // If the door is at blueberry!
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:hnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available house...");
		for(new x;x<MAX_HOUSES;x++)
		{
		    if(HouseInfo[x][hExteriorX] == 0.0) // If the house is at blueberry!
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:floorname(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new floor, tmp[24];
	if(sscanf(params, "is[24]", floor, tmp))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /floorname [floor] [name]");
		return 1;
	}
	new string[128];
	format(LAElevatorFloorData[0][floor-1],24, "%s", tmp);
	format(string, sizeof(string), "Renamed Floor %d to %s", floor, LAElevatorFloorData[0][floor-1]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	SaveElevatorStuff();

	new Float:z;
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		format(string, sizeof(string), "%s\nPress '~k~~GROUP_CONTROL_BWD~' to call", LAElevatorFloorData[0][i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

        DestroyDynamic3DTextLabel(Label_Floors[i]);
		Label_Floors[i]         = CreateDynamic3DTextLabel(string, COLOR_YELLOW, 1783.9799, -1300.7660, z, 10.5);
	}
	return 1;
}

CMD:floorpass(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new floor, tmp[24];
	if(sscanf(params, "is[24]", floor, tmp))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /floorpass [floor] [pass]");
		return 1;
	}
	new string[128];
	format(LAElevatorFloorData[1][floor-1],24, "%s", tmp);
	format(string, sizeof(string), "Floor %d pass set to %s", floor, LAElevatorFloorData[1][floor-1]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	SaveElevatorStuff();
	return 1;
}

CMD:floorpassr(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new floor;
	if(sscanf(params, "i", floor))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /floorpassr [floor]");
		return 1;
	}
	new string[128];
	floor = floor  - 1;
	format(LAElevatorFloorData[1][floor-1],24, "");
	format(string, sizeof(string), "Floor %d pass removed", floor);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	SaveElevatorStuff();

	new Float:z;
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		format(string, sizeof(string), "%s\nPress '~k~~GROUP_CONTROL_BWD~' to call", LAElevatorFloorData[0][i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

		DestroyDynamic3DTextLabel(Label_Floors[i]);
		Label_Floors[i]         = CreateDynamic3DTextLabel(string, COLOR_YELLOW, 1783.9799, -1300.7660, z, 10.5);
	}
	return 1;
}

CMD:floornamer(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new floor;
	if(sscanf(params, "i", floor))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /floornamer [floor]");
		return 1;
	}
	new string[128];
	format(LAElevatorFloorData[0][floor-1],24, "");
	format(string, sizeof(string), "Floor %d name removed", floor);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	SaveElevatorStuff();
	new Float:z;
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		format(string, sizeof(string), "%s\nPress '~k~~GROUP_CONTROL_BWD~' to call", LAElevatorFloorData[0][i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

		DestroyDynamic3DTextLabel(Label_Floors[i]);
		Label_Floors[i]         = CreateDynamic3DTextLabel(string, COLOR_YELLOW, 1783.9799, -1300.7660, z, 10.5);
	}
	return 1;
}

CMD:gedit(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new x_job[128], gateid, Float:ofloat, string[128];

		if(sscanf(params, "s[128]iF", x_job, gateid, ofloat))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gedit [name] [gateid] [value]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: HID, Model, VW, Int, Open, Closed, PosX(M), PosY(M), PosZ(M), RotX(M), RotZ(M), ToMe(M)");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Range, Speed, Allegiance, GroupType, GroupID, FamilyID, Stream, Timer, Auto");
			return 1;
		}

		if(strcmp(x_job, "hid", true) == 0)
		{
			new value = floatround(ofloat, floatround_round);
		    if(value > MAX_HOUSES) return SendClientMessageEx(playerid, COLOR_WHITE, "* Invalid House ID!");
		    GateInfo[gateid][gHID] = value;
		    format(string, sizeof(string), "HID %d assigned to Gate %d", GateInfo[gateid][gHID], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's House ID to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "model", true) == 0)
		{
		    new value = floatround(ofloat, floatround_round);

		    if(value == 0)
		    {
		        GateInfo[gateid][gPosX] = 0.0;
		        GateInfo[gateid][gPosY] = 0.0;
		        GateInfo[gateid][gPosZ] = 0.0;
		        GateInfo[gateid][gRotX] = 0.0;
		        GateInfo[gateid][gRotY] = 0.0;
				GateInfo[gateid][gRotZ] = 0.0;
				GateInfo[gateid][gPosXM] = 0.0;
				GateInfo[gateid][gPosYM] = 0.0;
				GateInfo[gateid][gPosZM] = 0.0;
				GateInfo[gateid][gRotXM] = 0.0;
				GateInfo[gateid][gRotYM] = 0.0;
				GateInfo[gateid][gRotZM] = 0.0;
				GateInfo[gateid][gVW] = 0;
				GateInfo[gateid][gInt] = 0;
				GateInfo[gateid][gAllegiance] = 0;
				GateInfo[gateid][gGroupType] = 0;
				GateInfo[gateid][gGroupID] = -1;
				GateInfo[gateid][gFamilyID] = -1;
			}

		    GateInfo[gateid][gModel] = value;
		    format(string, sizeof(string), "Model %d assigned to Gate %d", GateInfo[gateid][gModel], gateid);
		    if(IsValidDynamicObject(GateInfo[gateid][gGATE])) DestroyDynamicObject(GateInfo[gateid][gGATE]);
            CreateGate(gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's Model to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "vw", true) == 0)
		{
		    new value = floatround(ofloat, floatround_round);
		    GateInfo[gateid][gVW] = value;
		    format(string, sizeof(string), "Virtual World %d assigned to Gate %d", GateInfo[gateid][gVW], gateid);
		    if(IsValidDynamicObject(GateInfo[gateid][gGATE])) DestroyDynamicObject(GateInfo[gateid][gGATE]);
            CreateGate(gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's VW to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "int", true) == 0)
		{
		    new value = floatround(ofloat, floatround_round);
		    GateInfo[gateid][gInt] = value;
		    format(string, sizeof(string), "Interior %d assigned to Gate %d", GateInfo[gateid][gInt], gateid);
		    if(IsValidDynamicObject(GateInfo[gateid][gGATE])) DestroyDynamicObject(GateInfo[gateid][gGATE]);
			CreateGate(gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's InteriorID to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "open", true) == 0)
		{
			//foreach(new i:Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(GetPVarInt(i, "EditingGateID") == gateid && i != playerid)
					{
						format(string, sizeof(string), "ERROR: %s (ID: %d) is currently editing this gate.", GetPlayerNameEx(i), i);
						return SendClientMessageEx(playerid, COLOR_WHITE, string);
					}
				}	
			}
			SetPVarInt(playerid, "gEdit", 1);
			SetPVarInt(playerid, "EditingGateID", gateid);
			SetDynamicObjectPos(GateInfo[gateid][gGATE], GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ]);
			SetDynamicObjectRot(GateInfo[gateid][gGATE], GateInfo[gateid][gRotX], GateInfo[gateid][gRotY], GateInfo[gateid][gRotZ]);
			EditDynamicObject(playerid, GateInfo[gateid][gGATE]);
			format(string, sizeof(string), "You are now editing the open position of Gate %d.", gateid);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(playerid, 0xFFFFAAAA, "HINT: Hold {8000FF}~k~~PED_SPRINT~ {FFFFAA}to move your camera, press escape to cancel");
		}
		else if(strcmp(x_job, "closed", true) == 0)
		{
			//foreach(new i:Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(GetPVarInt(i, "EditingGateID") == gateid && i != playerid)
					{
						format(string, sizeof(string), "ERROR: %s (ID: %d) is currently editing this gate.", GetPlayerNameEx(i), i);
						return SendClientMessageEx(playerid, COLOR_WHITE, string);
					}
				}	
			}
			SetPVarInt(playerid, "gEdit", 2);
			SetPVarInt(playerid, "EditingGateID", gateid);
			EditDynamicObject(playerid, GateInfo[gateid][gGATE]);
			format(string, sizeof(string), "You are now editing the closed position of Gate %d.", gateid);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(playerid, 0xFFFFAAAA, "HINT: Hold {8000FF}~k~~PED_SPRINT~ {FFFFAA}to move your camera, press escape to cancel");
		}
		else if(strcmp(x_job, "range", true) == 0)
		{
		    GateInfo[gateid][gRange] = ofloat;
		    format(string, sizeof(string), "Range of %.3f assigned to Gate %d", GateInfo[gateid][gRange], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's Range to %.3f.", GetPlayerNameEx(playerid), gateid, ofloat);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "speed", true) == 0)
		{
		    GateInfo[gateid][gSpeed] = ofloat;
		    format(string, sizeof(string), "Speed of %.3f assigned to Gate %d", GateInfo[gateid][gSpeed], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's Speed to %.3f.", GetPlayerNameEx(playerid), gateid, ofloat);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "posx", true) == 0)
		{
		    GateInfo[gateid][gPosX] = ofloat;
		    format(string, sizeof(string), "PosX %f assigned to Gate %d", GateInfo[gateid][gPosX], gateid);
		    SetDynamicObjectPos(GateInfo[gateid][gGATE], GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "posy", true) == 0)
		{
		    GateInfo[gateid][gPosY] = ofloat;
		    format(string, sizeof(string), "PosY %f assigned to Gate %d", GateInfo[gateid][gPosY], gateid);
		    SetDynamicObjectPos(GateInfo[gateid][gGATE], GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "posz", true) == 0)
		{
			GateInfo[gateid][gPosZ] = ofloat;
		    format(string, sizeof(string), "PosZ %f assigned to Gate %d", GateInfo[gateid][gPosZ], gateid);
		    SetDynamicObjectPos(GateInfo[gateid][gGATE], GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "posxm", true) == 0)
		{
		    GateInfo[gateid][gPosXM] = ofloat;
		    format(string, sizeof(string), "PosXM %f assigned to Gate %d", GateInfo[gateid][gPosXM], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "posym", true) == 0)
		{
		    GateInfo[gateid][gPosYM] = ofloat;
		    format(string, sizeof(string), "PosYM %f assigned to Gate %d", GateInfo[gateid][gPosYM], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "poszm", true) == 0)
		{
		    GateInfo[gateid][gPosZM] = ofloat;
		    format(string, sizeof(string), "PosZM %f assigned to Gate %d", GateInfo[gateid][gPosZM], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "rotx", true) == 0)
		{
		    GateInfo[gateid][gRotX] = ofloat;
		    format(string, sizeof(string), "RotX %f assigned to Gate %d", GateInfo[gateid][gRotX], gateid);
		    SetDynamicObjectRot(GateInfo[gateid][gGATE], GateInfo[gateid][gRotX],GateInfo[gateid][gRotY],GateInfo[gateid][gRotZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "roty", true) == 0)
		{
		    GateInfo[gateid][gRotY] = ofloat;
		    format(string, sizeof(string), "RotY %f assigned to Gate %d", GateInfo[gateid][gRotY], gateid);
		    SetDynamicObjectRot(GateInfo[gateid][gGATE], GateInfo[gateid][gRotX],GateInfo[gateid][gRotY],GateInfo[gateid][gRotZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "rotz", true) == 0)
		{
			GateInfo[gateid][gRotZ] = ofloat;
		    format(string, sizeof(string), "RotZ %f assigned to Gate %d", GateInfo[gateid][gRotZ], gateid);
		    SetDynamicObjectRot(GateInfo[gateid][gGATE], GateInfo[gateid][gRotX],GateInfo[gateid][gRotY],GateInfo[gateid][gRotZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "rotxm", true) == 0)
		{
		    GateInfo[gateid][gRotXM] = ofloat;
		    format(string, sizeof(string), "RotXM %f assigned to Gate %d", GateInfo[gateid][gRotXM], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "rotym", true) == 0)
		{
		    GateInfo[gateid][gRotYM] = ofloat;
		    format(string, sizeof(string), "RotYM %f assigned to Gate %d", GateInfo[gateid][gRotYM], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "rotzm", true) == 0)
		{
		    GateInfo[gateid][gRotZM] = ofloat;
		    format(string, sizeof(string), "RotZM %f assigned to Gate %d", GateInfo[gateid][gRotZM], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
        else if(strcmp(x_job, "tome", true) == 0)
		{
		    GetPlayerPos(playerid,GateInfo[gateid][gPosX],GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ]);
		    GateInfo[gateid][gVW] = GetPlayerVirtualWorld(playerid);
		    GateInfo[gateid][gInt] = GetPlayerInterior(playerid);
			format(string, sizeof(string), "Gate %d Pos moved to %f %f %f, VW: %d INT: %d", gateid, GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ], GateInfo[gateid][gVW], GateInfo[gateid][gInt]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    if(GateInfo[gateid][gModel] == 0)
			{
			    GateInfo[gateid][gModel] = 18631;
			    GateInfo[gateid][gRange] = 10;
			    GateInfo[gateid][gSpeed] = 5.0;
			}
		    if(IsValidDynamicObject(GateInfo[gateid][gGATE])) DestroyDynamicObject(GateInfo[gateid][gGATE]);
			CreateGate(gateid);
			SaveGate(gateid);

			format(string, sizeof(string), "%s has edited GateID %d's Position.", GetPlayerNameEx(playerid), gateid);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "tomem", true) == 0)
		{
		    GetPlayerPos(playerid,GateInfo[gateid][gPosXM],GateInfo[gateid][gPosYM], GateInfo[gateid][gPosZM]);
			format(string, sizeof(string), "Gate %d PosM moved to %f %f %f", gateid, GateInfo[gateid][gPosXM], GateInfo[gateid][gPosYM], GateInfo[gateid][gPosZM]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
			SaveGate(gateid);

			format(string, sizeof(string), "%s has edited GateID %d's Moved Position.", GetPlayerNameEx(playerid), gateid);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "allegiance", true) == 0)
		{
		    new value = floatround(ofloat, floatround_round);
		    GateInfo[gateid][gAllegiance] = value;
		    format(string, sizeof(string), "Allegiance %d assigned to Gate %d", GateInfo[gateid][gAllegiance], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's Allegiance to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "grouptype", true) == 0)
		{
		    new value = floatround(ofloat, floatround_round);
		    GateInfo[gateid][gGroupType] = value;
		    format(string, sizeof(string), "Group Type %d assigned to Gate %d", GateInfo[gateid][gGroupType], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's Group Type to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "groupid", true) == 0)
		{
		    new value = floatround(ofloat, floatround_round);
		    GateInfo[gateid][gGroupID] = value;
		    format(string, sizeof(string), "Group ID %d assigned to Gate %d", GateInfo[gateid][gGroupID], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's Group ID to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "familyid", true) == 0)
		{
		    new value = floatround(ofloat, floatround_round);
		    GateInfo[gateid][gFamilyID] = value;
		    format(string, sizeof(string), "Family ID %d assigned to Gate %d", GateInfo[gateid][gFamilyID], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's Family ID to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "stream", true) == 0)
		{
		    new value = floatround(ofloat, floatround_round);
		    GateInfo[gateid][gRenderHQ] = value;
		    format(string, sizeof(string), "Stream distance %d assigned to Gate %d", GateInfo[gateid][gRenderHQ], gateid);
		    if(IsValidDynamicObject(GateInfo[gateid][gGATE])) DestroyDynamicObject(GateInfo[gateid][gGATE]);
            CreateGate(gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's stream distance to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "timer", true) == 0)
		{
			new value = floatround(ofloat, floatround_round);
		    GateInfo[gateid][gTimer] = value;
		    format(string, sizeof(string), "Timer %d assigned to Gate %d", GateInfo[gateid][gTimer], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's timer to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "auto", true) == 0)
		{
			new value = floatround(ofloat, floatround_round);
		    GateInfo[gateid][gAutomate] = value;
			if(GateInfo[gateid][gAutomate] == 1)
			{
				//foreach(new i: Player) 
				for(new i = 0; i < MAX_PLAYERS; ++i)
				{
					if(IsPlayerConnected(i))
					{	
						SetTimerEx("AutomaticGateTimer", 1000, false, "ii", i, gateid);
					}
				}
			}
		    format(string, sizeof(string), "Automation %d assigned to Gate %d", GateInfo[gateid][gAutomate], gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's automation to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:fedithq(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] > 3 || PlayerInfo[playerid][pGangModerator] >= 1)
	{
		new family, x_hq[64], string[128];
		if(sscanf(params, "is[64]", family, x_hq))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fedithq [family] [name]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Create, Delete, Editexterior, Editinterior, Custominterior");
			return 1;
		}

		if(family < 1 || family > MAX_FAMILY) {
			format(string,sizeof(string), "   FamilyNr can't be below 1 or above %i!", MAX_FAMILY);
			SendClientMessageEx(playerid, COLOR_GREY, string);
			return 1;
		}
		if(strcmp(x_hq,"create",true) == 0)
		{
	   		SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 1);
			SendClientMessageEx(playerid, COLOR_WHITE, "Please stand where you want the entrance to be at.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Once ready press the fire button.");
		}
		else if(strcmp(x_hq,"delete",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 4);
			format(string,128,"Are you sure you want to delete this HQ?");
			ShowPlayerDialog(playerid,HQDELETE,DIALOG_STYLE_MSGBOX,"Warning:",string,"Yes","No");
		}
		else if(strcmp(x_hq,"editexterior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 5);
			SendClientMessageEx(playerid, COLOR_WHITE, "Please stand where you want the entrance to be at.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Once ready press the fire button.");
		}
		else if(strcmp(x_hq,"editinterior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 6);
			SendClientMessageEx(playerid, COLOR_WHITE, "Please stand where you want the exit to be at.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Once ready press the fire button.");
		}
		else if(strcmp(x_hq,"custominterior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 3);
			format(string,128,"Is '%s' interior a custom mapped one?", FamilyInfo[family][FamilyName]);
			ShowPlayerDialog(playerid,HQCUSTOMINT,DIALOG_STYLE_MSGBOX,"Warning:",string,"Yes","No");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "	Not a valid HQ name.");
		}
		SaveFamily(family);
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:adjustdiv(playerid, params[])
{
    if(PlayerInfo[playerid][pFMember] >= 1)
	{
		if(PlayerInfo[playerid][pRank] >= 6)
		{
		    new iFamily, iDiv, divisionname[GROUP_MAX_DIV_LEN], szMessage[128];
		    if(sscanf(params, "is[16]", iDiv, divisionname))
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "Usage: /adjustdiv [division id] [division name]");
		        return 1;
		    }
		    if(0 <= iDiv <= 4)
			{
				new file[32], month, day, year;
				getdate(year,month,day);
			    iFamily = PlayerInfo[playerid][pFMember];
				format(FamilyDivisionInfo[iFamily][iDiv], 16, "%s", divisionname);
				SaveFamily(iFamily);
				format(szMessage, sizeof(szMessage), "* You have changed the name of division %d to %s.", iDiv, divisionname);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
				format(szMessage, sizeof(szMessage), "%s adjusted %s's division %d to %s", GetPlayerNameEx(playerid), FamilyInfo[iFamily][FamilyName], iDiv, divisionname);
				format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", iFamily, year, month, day);
				Log(file, szMessage);
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Invalid division ID!");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "You're not authorized to use this command!");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You're not in a family!");
	return 1;
}

CMD:fedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 3 || PlayerInfo[playerid][pGangModerator] >= 1)
	{
		new family, x_job[64], x_hq[64], ammount, string[128];
		if(sscanf(params, "is[64]s[64]", family, x_job, x_hq))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fedit [family] [name] [amount]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Tokens, Leader, MaxSkins, Skin1, Skin2, Skin3, Skin4, Skin5, Skin6, Skin7, Skin8");
			return 1;
		}
        ammount = strval(x_hq);
		if(family < 1 || family > MAX_FAMILY) {
			format(string,sizeof(string), "   FamilyNr can't be below 1 or above %i!", MAX_FAMILY);
		 	SendClientMessageEx(playerid, COLOR_GREY, string);
		  	return 1;
		  }
		if(strcmp(x_job,"tokens",true) == 0)
		{
			FamilyInfo[family][FamilyTurfTokens] = ammount * 12;
			format(string, sizeof(string), "You have changed '%s' tokens amount to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
		else if (strcmp(x_job,"leader",true) == 0)
		{
			if(strlen(x_hq) >= 20 )
			{
				SendClientMessageEx( playerid, COLOR_GRAD1, "That leader name is too long, please refrain from using more than 20 characters." );
				return 1;
			}
			strcpy(FamilyInfo[family][FamilyLeader], x_hq, MAX_PLAYER_NAME);
			format(string, sizeof(string), "You have changed '%s' leader name to %s.", FamilyInfo[family][FamilyName], x_hq);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
		else if(strcmp(x_job,"maxskins",true) == 0)
		{
			if(ammount > 8) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot set the maxskins more than 8.");
			if(ammount == 7)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
			}
			if(ammount == 6)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
			}
			if(ammount == 5)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
			}
			if(ammount == 4)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
			}
			if(ammount == 3)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
			}
			if(ammount == 2)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
				FamilyInfo[family][FamilySkins][2] = 0;
			}

			if(ammount == 1)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
				FamilyInfo[family][FamilySkins][2] = 0;
				FamilyInfo[family][FamilySkins][1] = 0;
			}

			FamilyInfo[family][FamilyMaxSkins] = ammount;
			format(string, sizeof(string), "You have changed '%s' max skins amount to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin1",true) == 0)
		{
			FamilyInfo[family][FamilySkins][0] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #1 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin2",true) == 0)
		{
			FamilyInfo[family][FamilySkins][1] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #2 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin3",true) == 0)
		{
			FamilyInfo[family][FamilySkins][2] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #3 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin4",true) == 0)
		{
			FamilyInfo[family][FamilySkins][3] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #4 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin5",true) == 0)
		{
			FamilyInfo[family][FamilySkins][4] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #5 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin6",true) == 0)
		{
			FamilyInfo[family][FamilySkins][5] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #6 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin7",true) == 0)
		{
			FamilyInfo[family][FamilySkins][6] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #7 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin8",true) == 0)
		{
			FamilyInfo[family][FamilySkins][7] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #8 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "	Not a valid name.");
			return 1;
		}
    	SaveFamily(family);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:ddname(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new
			szName[128],
			iDoorID;

		if(sscanf(params, "ds[128]", iDoorID, szName)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ddname [doorid] [name]");
		}
		else if(!(0 <= iDoorID <= MAX_DDOORS)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "Invalid door specified.");
		}
		else if(strfind(szName, "\r") != -1 || strfind(szName, "\n") != -1) {
			return SendClientMessageEx(playerid, COLOR_GREY, "Newline characters are forbidden.");
		}

		strcat((DDoorsInfo[iDoorID][ddDescription][0] = 0, DDoorsInfo[iDoorID][ddDescription]), szName, 128);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully changed the name of this door.");

		DestroyDynamicPickup(DDoorsInfo[iDoorID][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[iDoorID][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[iDoorID][ddTextID]);
		CreateDynamicDoor(iDoorID);
		SaveDynamicDoor(iDoorID);

		format(szName, sizeof(szName), "%s has edited door ID %d's name to %s.", GetPlayerNameEx(playerid), iDoorID, DDoorsInfo[iDoorID][ddDescription]);
		Log("logs/ddedit.log", szName);
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	return 1;
}

CMD:ddowner(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 2 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new playername[MAX_PLAYER_NAME], doorid, szName[128];
		if(sscanf(params, "ds[24]", doorid, playername)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ddowner [door] [player name]");

		if(DDoorsInfo[doorid][ddType] != 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "This door is not owned by a player!");

		new giveplayerid = ReturnUser(playername);
		if(IsPlayerConnected(giveplayerid))
		{
			strcat((DDoorsInfo[doorid][ddOwnerName][0] = 0, DDoorsInfo[doorid][ddOwnerName]), GetPlayerNameEx(giveplayerid), 24);
			DDoorsInfo[doorid][ddOwner] = GetPlayerSQLId(giveplayerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully changed the owner of this door.");

			DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
			if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
			CreateDynamicDoor(doorid);
			SaveDynamicDoor(doorid);
			
			format(szName, sizeof(szName), "%s has edited door ID %d's owner to %s (SQL ID: %d).", GetPlayerNameEx(playerid), doorid, GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid));
			Log("logs/ddedit.log", szName);
		}
		else
		{
			new query[128], tmpName[24];

			mysql_escape_string(playername, tmpName);
			format(query,sizeof(query), "SELECT `id`, `Username` FROM `accounts` WHERE `Username` = '%s'", tmpName);
			mysql_function_query(MainPipeline, query, true, "OnSetDDOwner", "ii", playerid, doorid);
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
	return 1;
}

CMD:ddpass(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pShopTech] < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");

	new string[128],
		doorid,
		doorpass[24];

	if(sscanf(params, "ds[24]", doorid, doorpass)) { SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ddPass [doorid] [pass]"); SendClientMessageEx(playerid, COLOR_WHITE, "To remove the password on the door set the password to 'none' "); return 1; }
	format(DDoorsInfo[doorid][ddPass], 24, "%s", doorpass);
	SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the password of that door.");
	SaveDynamicDoor(doorid);
	format(string, sizeof(string), "%s has edited DoorID %d's password to %s.", GetPlayerNameEx(playerid), doorid, doorpass);
	Log("logs/ddedit.log", string);
	return 1;
}

CMD:dmpedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], choice[32], mapiconid, amount;
	if(sscanf(params, "s[32]dD", choice, mapiconid, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dmpedit [name] [mapiconid] [(Optional)amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Position, Type, Color, Delete");
		return 1;
	}

	if(mapiconid < 1 || mapiconid >= MAX_DMAPICONS)
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "Invalid Map Icon ID!");
	}

	if(strcmp(choice, "position", true) == 0)
	{
		GetPlayerPos(playerid, DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ]);
		DMPInfo[mapiconid][dmpInt] = GetPlayerInterior(playerid);
		DMPInfo[mapiconid][dmpVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the position!");
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		SaveDynamicMapIcon(mapiconid);
		format(string, sizeof(string), "%s has edited MapIconID %d's Position.", GetPlayerNameEx(playerid), mapiconid);
		Log("logs/dmpedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "delete", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You have deleted the map icon!");
		DMPInfo[mapiconid][dmpPosX] = 0.0;
		DMPInfo[mapiconid][dmpPosY] = 0.0;
		DMPInfo[mapiconid][dmpPosZ] = 0.0;
		DMPInfo[mapiconid][dmpVW] = 0;
		DMPInfo[mapiconid][dmpInt] = 0;
		DMPInfo[mapiconid][dmpMarkerType] = 0;
		DMPInfo[mapiconid][dmpColor] = 0;
		SaveDynamicMapIcon(mapiconid);
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		format(string, sizeof(string), "%s has deleted MapIconID %d.", GetPlayerNameEx(playerid), mapiconid);
		Log("logs/dmpedit.log", string);
		return 1;

	}
	else if(strcmp(choice, "type", true) == 0)
	{
		DMPInfo[mapiconid][dmpMarkerType] = amount;
		format(string, sizeof(string), "You have set the marker type to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		format(string, sizeof(string), "%s has edited MapIconID %d's Marker Type to %d.", GetPlayerNameEx(playerid), mapiconid, amount);
		Log("logs/dmpedit.log", string);
	}
	else if(strcmp(choice, "color", true) == 0)
	{
		DMPInfo[mapiconid][dmpColor] = amount;
		format(string, sizeof(string), "You have set the color to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		format(string, sizeof(string), "%s has edited MapIconID %d's Color to %d.", GetPlayerNameEx(playerid), mapiconid, amount);
		Log("logs/dmpedit.log", string);
	}
	SaveDynamicMapIcon(mapiconid);
	return 1;
}

CMD:ddedit(playerid, params[])
{
 	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new string[128], choice[32], doorid, amount;
		if(sscanf(params, "s[32]dD", choice, doorid, amount))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ddedit [name] [doorid] [amount]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, CustomExterior, Type, Rank, VIP, Famed");
			SendClientMessageEx(playerid, COLOR_GREY, "Allegiance, GroupType, Family, Faction, Wanted, Admin, VehicleAble, Color, PickupModel, Delete");
			return 1;
		}

		if(doorid >= MAX_DDOORS)
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "Invalid Door ID!");
			return 1;
		}

		if(strcmp(choice, "interior", true) == 0)
		{
			GetPlayerPos(playerid, DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ]);
			GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddInteriorA]);
			DDoorsInfo[doorid][ddInteriorInt] = GetPlayerInterior(playerid);
			DDoorsInfo[doorid][ddInteriorVW] = GetPlayerVirtualWorld(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the interior!");
			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's Interior.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "custominterior", true) == 0)
		{
			if(DDoorsInfo[doorid][ddCustomInterior] == 0)
			{
				DDoorsInfo[doorid][ddCustomInterior] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "Door set to custom interior!");
			}
			else
			{
				DDoorsInfo[doorid][ddCustomInterior] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "Door set to normal (not custom) interior!");
			}
			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's CustomInterior.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "customexterior", true) == 0)
		{
			if(DDoorsInfo[doorid][ddCustomExterior] == 0)
			{
				DDoorsInfo[doorid][ddCustomExterior] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "Door set to custom exterior!");
			}
			else
			{
				DDoorsInfo[doorid][ddCustomExterior] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "Door set to normal (not custom) exterior!");
			}
			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's CustomExterior.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "exterior", true) == 0)
		{
			GetPlayerPos(playerid, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]);
			GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddExteriorA]);
			DDoorsInfo[doorid][ddExteriorVW] = GetPlayerVirtualWorld(playerid);
			DDoorsInfo[doorid][ddExteriorInt] = GetPlayerInterior(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the exterior!");
			DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
			if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
			CreateDynamicDoor(doorid);
			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's Exterior.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
		}
		else if(strcmp(choice, "type", true) == 0)
		{
			DDoorsInfo[doorid][ddType] = amount;

			format(string, sizeof(string), "You have changed the type to %d.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			switch(DDoorsInfo[doorid][ddType])
			{
				case 1:
				{
					if(DDoorsInfo[doorid][ddOwner] != -1 && strcmp(DDoorsInfo[doorid][ddOwnerName], "Nobody", false) != 0)
					{
						DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
						if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
						CreateDynamicDoor(doorid);
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "Use /ddowner to update the owner of this door.");
				}
				case 2:
				{
					if(DDoorsInfo[doorid][ddFaction] != INVALID_GROUP_ID)
					{
						DDoorsInfo[doorid][ddOwner] = -1;
						strcat((DDoorsInfo[doorid][ddOwnerName][0] = 0, DDoorsInfo[doorid][ddOwnerName]), arrGroupData[DDoorsInfo[doorid][ddFaction]][g_szGroupName], 42);
						DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
						if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
						CreateDynamicDoor(doorid);
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "Use /ddedit faction to update the owner of this door.");
				}
				case 3:
				{
					if(DDoorsInfo[doorid][ddFamily] != INVALID_GROUP_ID)
					{
						DDoorsInfo[doorid][ddOwner] = -1;
						strcat((DDoorsInfo[doorid][ddOwnerName][0] = 0, DDoorsInfo[doorid][ddOwnerName]), FamilyInfo[DDoorsInfo[doorid][ddFamily]][FamilyName], 42);
						DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
						if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
						CreateDynamicDoor(doorid);
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "Use /ddedit family to update the owner of this door.");
				}
				default:
				{
					strcat((DDoorsInfo[doorid][ddOwnerName][0] = 0, DDoorsInfo[doorid][ddOwnerName]), "Nobody", 42);
					DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
					if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
					CreateDynamicDoor(doorid);
				}
			}
			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's type.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "rank", true) == 0)
		{
			DDoorsInfo[doorid][ddRank] = amount;

			format(string, sizeof(string), "You have changed the rank to %d.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's rank.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "vip", true) == 0)
		{
			DDoorsInfo[doorid][ddVIP] = amount;

			format(string, sizeof(string), "You have changed the VIP Level to %d.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's VIP Level.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "famed", true) == 0)
		{
			DDoorsInfo[doorid][ddFamed] = amount;

			format(string, sizeof(string), "You have changed the Famed Level to %d.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's Famed Level.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "dpc", true) == 0)
		{
			if(DDoorsInfo[doorid][ddDPC] == 0)
			{
				DDoorsInfo[doorid][ddDPC] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "Door set to DPC!");
			}
			else
			{
				DDoorsInfo[doorid][ddDPC] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "Door set to normal (no longer DPC)!");
			}
			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has set DoorID %d's DPC value.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "allegiance", true) == 0)
		{
			DDoorsInfo[doorid][ddAllegiance] = amount;

			format(string, sizeof(string), "You have changed the Allegiance to %d.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's Allegiance to %d.", GetPlayerNameEx(playerid), doorid, amount);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "grouptype", true) == 0)
		{
			DDoorsInfo[doorid][ddGroupType] = amount;

			format(string, sizeof(string), "You have changed the Group Type to %d.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's Group Type to %d.", GetPlayerNameEx(playerid), doorid, amount);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "family", true) == 0)
		{
			DDoorsInfo[doorid][ddFamily] = amount+1;

			format(string, sizeof(string), "You have changed the Family to %d.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			if(DDoorsInfo[doorid][ddType] == 3)
			{
				strcat((DDoorsInfo[doorid][ddOwnerName][0] = 0, DDoorsInfo[doorid][ddOwnerName]), FamilyInfo[DDoorsInfo[doorid][ddFamily]][FamilyName], 42);
				DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
				if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
				CreateDynamicDoor(doorid);
			}
			else
			{
				format(string, sizeof(string), "Use '/ddedit type %d 3' to update the owner of this door.", doorid);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}

			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's Family.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "faction", true) == 0)
		{
			DDoorsInfo[doorid][ddFaction] = amount-1;

			format(string, sizeof(string), "You have changed the Faction to %d.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			if(DDoorsInfo[doorid][ddType] == 2)
			{
				strcat((DDoorsInfo[doorid][ddOwnerName][0] = 0, DDoorsInfo[doorid][ddOwnerName]), arrGroupData[DDoorsInfo[doorid][ddFaction]][g_szGroupName], 42);
				DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
				if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
				CreateDynamicDoor(doorid);
			}
			else
			{
				format(string, sizeof(string), "Use '/ddedit type %d 2' to update the owner of this door.", doorid);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}

			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's Faction.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "admin", true) == 0)
		{
			DDoorsInfo[doorid][ddAdmin] = amount;

			format(string, sizeof(string), "You have changed the Admin Level to %d.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's Admin Level.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "wanted", true) == 0)
		{
			DDoorsInfo[doorid][ddWanted] = amount;

			format(string, sizeof(string), "You have changed the Wanted to %d.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's Wanted.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "vehicleable", true) == 0)
		{
			DDoorsInfo[doorid][ddVehicleAble] = amount;

			format(string, sizeof(string), "You have changed the VehicleAble to %d.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's VehicleAble.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "color", true) == 0)
		{
			DDoorsInfo[doorid][ddColor] = amount;

			format(string, sizeof(string), "You have changed the Color to %d.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
			if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
			CreateDynamicDoor(doorid);

			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's Color.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "pickupmodel", true) == 0)
		{
			DDoorsInfo[doorid][ddPickupModel] = amount;

			format(string, sizeof(string), "You have changed the PickupModel to %d.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
			if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
			CreateDynamicDoor(doorid);

			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "%s has edited DoorID %d's PickupModel.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "delete", true) == 0)
		{
			if(strcmp(DDoorsInfo[doorid][ddDescription], "None", true) == 0) {
				format(string, sizeof(string), "DoorID %d does not exist.", doorid);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				return 1;
			}
			DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
			DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
			DDoorsInfo[doorid][ddDescription] = 0;
			DDoorsInfo[doorid][ddCustomInterior] = 0;
			DDoorsInfo[doorid][ddExteriorVW] = 0;
			DDoorsInfo[doorid][ddExteriorInt] = 0;
			DDoorsInfo[doorid][ddInteriorVW] = 0;
			DDoorsInfo[doorid][ddInteriorInt] = 0;
			DDoorsInfo[doorid][ddExteriorX] = 0;
			DDoorsInfo[doorid][ddExteriorY] = 0;
			DDoorsInfo[doorid][ddExteriorZ] = 0;
			DDoorsInfo[doorid][ddExteriorA] = 0;
			DDoorsInfo[doorid][ddInteriorX] = 0;
			DDoorsInfo[doorid][ddInteriorY] = 0;
			DDoorsInfo[doorid][ddInteriorZ] = 0;
			DDoorsInfo[doorid][ddInteriorA] = 0;
			DDoorsInfo[doorid][ddCustomExterior] = 0;
			DDoorsInfo[doorid][ddVIP] = 0;
			DDoorsInfo[doorid][ddDPC] = 0;
			DDoorsInfo[doorid][ddFamily] = 0;
			DDoorsInfo[doorid][ddFaction] = 0;
			DDoorsInfo[doorid][ddAdmin] = 0;
			DDoorsInfo[doorid][ddWanted] = 0;
			DDoorsInfo[doorid][ddVehicleAble] = 0;
			DDoorsInfo[doorid][ddColor] = 0;
			DDoorsInfo[doorid][ddPass] = 0;
			DDoorsInfo[doorid][ddLocked] = 0;
			SaveDynamicDoor(doorid);
			format(string, sizeof(string), "You have deleted DoorID %d.", doorid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has deleted DoorID %d.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	return 1;
}

CMD:hname(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], houseid, ownername[24];
	if(sscanf(params, "ds[24]", houseid, ownername)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hname [houseid] [name]");

	format(HouseInfo[houseid][hOwnerName], 24, "%s", ownername);
	format(string, sizeof(string), "You have set the house owner to %s", ownername);
	HouseInfo[houseid][hOwned] = 1;
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	ReloadHouseText(houseid);
	SaveHouse(houseid);

	format(string, sizeof(string), "%s has edited HouseID %d's Owner to %s.", GetPlayerNameEx(playerid), houseid, ownername);
	Log("logs/hedit.log", string);

	return 1;
}

CMD:hedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], choice[32], houseid, amount;
	if(sscanf(params, "s[32]dD", choice, houseid, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hedit [name] [houseid] [(Optional)amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, VW, CustomInterior, CustomExterior, Class (1-3), Level, Price, Delete");
		return 1;
	}

	if(strcmp(choice, "delete", true) == 0)
	{
		if(HouseInfo[houseid][hExteriorX] == 0.0) return SendClientMessageEx(playerid, COLOR_GRAD1, "This house does not exist!");
		
		DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
		if(IsValidDynamic3DTextLabel(HouseInfo[houseid][hTextID])) DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
		// Do not reset the SQL ID as the house still exists but is not owned by any player and it isn't spawned
		HouseInfo[houseid][hOwnerID] = -1;
		HouseInfo[houseid][hOwned] = 0;
		HouseInfo[houseid][hLevel] = 0;
		HouseInfo[houseid][hExteriorX] = 0.0;
		HouseInfo[houseid][hExteriorY] = 0.0;
		HouseInfo[houseid][hExteriorZ] = 0.0;
		HouseInfo[houseid][hExteriorR] = 0.0;
		HouseInfo[houseid][hInteriorX] = 0.0;
		HouseInfo[houseid][hInteriorY] = 0.0;
		HouseInfo[houseid][hInteriorZ] = 0.0;
		HouseInfo[houseid][hInteriorR] = 0.0;
		HouseInfo[houseid][hExtIW] = 0;
		HouseInfo[houseid][hExtVW] = 0;
		HouseInfo[houseid][hIntIW] = 0;
		HouseInfo[houseid][hIntVW] = 0;
		HouseInfo[houseid][hLock] = 0;
		HouseInfo[houseid][hRentable] = 0;
		HouseInfo[houseid][hRentFee] = 0;
		HouseInfo[houseid][hValue] = 0;
		HouseInfo[houseid][hSafeMoney] = 0;
		HouseInfo[houseid][hPot] = 0;
		HouseInfo[houseid][hCrack] = 0;
		HouseInfo[houseid][hMaterials] = 0;
		HouseInfo[houseid][hWeapons][0] = 0;
		HouseInfo[houseid][hWeapons][1] = 0;
		HouseInfo[houseid][hWeapons][2] = 0;
		HouseInfo[houseid][hWeapons][3] = 0;
		HouseInfo[houseid][hWeapons][4] = 0;
		HouseInfo[houseid][hGLUpgrade] = 0;
		HouseInfo[houseid][hCustomInterior] = 0;
		HouseInfo[houseid][hCustomExterior] = 0;
		HouseInfo[houseid][hExteriorA] = 0;
		HouseInfo[houseid][hInteriorA] = 0;
		HouseInfo[houseid][hMailX] = 0.0;
		HouseInfo[houseid][hMailY] = 0.0;
		HouseInfo[houseid][hMailZ] = 0.0;
		HouseInfo[houseid][hMailA] = 0.0;
		if(IsValidDynamic3DTextLabel(HouseInfo[houseid][hClosetTextID])) DestroyDynamic3DTextLabel(Text3D:HouseInfo[houseid][hClosetTextID]);
		HouseInfo[houseid][hClosetX] = 0.0;
		HouseInfo[houseid][hClosetY] = 0.0;
		HouseInfo[houseid][hClosetZ] = 0.0;
		SaveHouse(houseid);
		format(string, sizeof(string), "You have deleted house id %d.", houseid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has deleted house id %d", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return true;
	}
	else if(strcmp(choice, "interior", true) == 0)
	{
		new Float: Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		format(string, sizeof(string), "%s has edited HouseID %d's Interior. (Before:  %f, %f, %f | After: %f, %f, %f)", GetPlayerNameEx(playerid), houseid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ], Pos[0], Pos[1], Pos[2]);
		Log("logs/hedit.log", string);
		GetPlayerPos(playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hInteriorA]);
		HouseInfo[houseid][hIntIW] = GetPlayerInterior( playerid );
		HouseInfo[houseid][hIntVW] = houseid+6000;
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the interior!" );
		SaveHouse(houseid);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomInterior] == 0)
		{
			HouseInfo[houseid][hCustomInterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom interior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomInterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) interior!" );
		}
		SaveHouse(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomExterior] == 0)
		{
			HouseInfo[houseid][hCustomExterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom exterior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomExterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) exterior!" );
		}
		SaveHouse(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
	    new Float: Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		format(string, sizeof(string), "%s has edited HouseID %d's Exterior. (Before:  %f, %f, %f | After: %f, %f, %f)", GetPlayerNameEx(playerid), houseid,  HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], Pos[0], Pos[1], Pos[2]);
		Log("logs/hedit.log", string);
		GetPlayerPos(playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hExteriorA]);
		HouseInfo[houseid][hExtIW] = GetPlayerInterior(playerid);
		HouseInfo[houseid][hExtVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the exterior!" );
		SaveHouse(houseid);
		ReloadHousePickup(houseid);
	}
	else if(strcmp(choice, "VW", true) == 0)
	{
		HouseInfo[houseid][hIntVW] = amount;

		format(string, sizeof(string), "You have changed the home's interior VW to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveHouse(houseid);
		format(string, sizeof(string), "%s has edited House ID %d's interior VW to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "level", true) == 0)
	{
		HouseInfo[houseid][hLevel] = amount;
		format(string, sizeof(string), "You have set the house level to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		ReloadHouseText(houseid);
		format(string, sizeof(string), "%s has edited HouseID %d's Level to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/hedit.log", string);
	}
	else if(strcmp(choice, "price", true) == 0)
	{
		HouseInfo[houseid][hValue] = amount;
		format(string, sizeof(string), "You have set the houses price to $%d.", amount );
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		ReloadHouseText(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Price to $%d.", GetPlayerNameEx(playerid), amount);
		Log("logs/hedit.log", string);
	}
	else if(strcmp(choice, "class", true) == 0)
	{
		switch(amount)
		{
		case 1:
			{
				format(HouseInfo[houseid][hDescription], 128, "Low" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 1 (Low)" );
			}
		case 2:
			{
				format(HouseInfo[houseid][hDescription], 128, "Medium" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 2 (Medium)" );
			}
		case 3:
			{
				format(HouseInfo[houseid][hDescription], 128, "High" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 3 (High)" );
			}
		}
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This home is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}

		format(string, sizeof(string), "%s has edited HouseID %d's Class to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/hedit.log", string);
	}
	SaveHouse(houseid);
	return 1;
}

CMD:brenewal(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] >= 1)
	{
	    new
	        iType,
	        iOrderID,
	        iBusiness,
			szMessage[128],
			months;

		if(sscanf(params, "dddd", iBusiness, iType, months, iOrderID)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /brenewal [Business ID] [Type (1-3)] [Months] [OrderID]");
		}
		else if(!IsValidBusinessID(iBusiness)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "Invalid business ID");
		}
		else {
		    Businesses[iBusiness][bMonths] = 259200+gettime()+(2592000*months);
			format(szMessage, sizeof(szMessage), "You have renewed business %i for %i months.", iBusiness, months);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			format(szMessage, sizeof(szMessage), "[BUSINESS RENEWAL] %s has renewed BusinessID %i, Type %i, Months %i, OrderID %i", GetPlayerNameEx(playerid), iBusiness, iType, months, iOrderID);
			Log("logs/shoplog.log", szMessage);
			SaveBusiness(iBusiness);
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:shopbusiness(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], choice[32], businessid, amount, invoice[64];
	if(sscanf(params, "s[32]dDs[64]", choice, businessid, amount, invoice))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopbusiness [name] [business ID] [Amount] [invoice #]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, SupplyPoint, Price, Type, Inventory, InventoryCapacity, Delete");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: CustomInterior, CustomExterior, Months, VW, grade");
		return 1;
	}

	if (!IsValidBusinessID(businessid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid business ID entered.");
		return 1;
	}
    if(!strcmp(choice, "grade", true))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the grade on this business!");
		format(string, sizeof(string), "[SHOPBUSINESS] %s has changed BusinessID %d's Grade to %i", GetPlayerNameEx(playerid), businessid, amount);
		Businesses[businessid][bGrade] = amount;
		Log("logs/shoplog.log", string);
	}
    if(!strcmp(choice, "months", true))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the months left on this business!");
		format(string, sizeof(string), "[SHOPBUSINESS] %s has changed BusinessID %d's Months to %i", GetPlayerNameEx(playerid), businessid, amount);
		Businesses[businessid][bMonths] = (2592000*amount)+gettime()+259200;
		Log("logs/shoplog.log", string);
	}
	else if(!strcmp(choice, "vw", true))
	{
		Businesses[businessid][bVW] = amount;
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the VW!");
		format(string, sizeof(string), "[SHOPBUSINESS] %s has changed BusinessID %d's vw to %d", GetPlayerNameEx(playerid), businessid, amount);
		Log("logs/shoplog.log", string);
	}
	if(!strcmp(choice, "exterior", true))
	{
		GetPlayerPos(playerid, Businesses[businessid][bExtPos][0], Businesses[businessid][bExtPos][1], Businesses[businessid][bExtPos][2]);
		GetPlayerFacingAngle(playerid, Businesses[businessid][bExtPos][3]);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the exterior!");
		format(string, sizeof(string), "[SHOPBUSINESS] %s has changed BusinessID %d's Exterior to X:%f Y:%f Z:%f", GetPlayerNameEx(playerid), businessid, Businesses[businessid][bExtPos][0], Businesses[businessid][bExtPos][1],Businesses[businessid][bExtPos][2]);
		Log("logs/shoplog.log", string);
	}
	else if(!strcmp(choice, "interior", true))
	{
		GetPlayerPos(playerid, Businesses[businessid][bIntPos][0], Businesses[businessid][bIntPos][1], Businesses[businessid][bIntPos][2]);
		GetPlayerFacingAngle(playerid, Businesses[businessid][bIntPos][3]);
		Businesses[businessid][bInt] = GetPlayerInterior(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the interior!");
		format(string, sizeof(string), "[SHOPBUSINESS] %s has changed BusinessID %d's Interior to X:%f Y:%f Z:%f", GetPlayerNameEx(playerid), businessid, Businesses[businessid][bIntPos][0], Businesses[businessid][bIntPos][1],Businesses[businessid][bIntPos][2]);
		Log("logs/shoplog.log", string);
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(Businesses[businessid][bCustomInterior] == 0)
		{
			Businesses[businessid][bCustomInterior] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Business set to custom interior!");
		}
		else
		{
			Businesses[businessid][bCustomInterior] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Business set to normal (not custom) interior!");
		}
		format(string, sizeof(string), "[SHOPBUSINESS] %s has edited BusinessID %d's CustomInterior.", GetPlayerNameEx(playerid), businessid);
		Log("logs/shoplog.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(Businesses[businessid][bCustomExterior] == 0)
		{
			Businesses[businessid][bCustomExterior] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Business set to custom exterior!");
		}
		else
		{
			Businesses[businessid][bCustomExterior] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Business set to normal (not custom) exterior!");
		}
		format(string, sizeof(string), "[SHOPBUSINESS] %s has edited BusinessID %d's CustomExterior.", GetPlayerNameEx(playerid), businessid);
		Log("logs/shoplog.log", string);
		return 1;
	}
	else if(!strcmp(choice, "supplypoint", true))
	{
		if(Businesses[businessid][bOrderState] == 2)
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "You can't change the supply point when a delivery is on its way.");
		}
		GetPlayerPos(playerid, Businesses[businessid][bSupplyPos][0], Businesses[businessid][bSupplyPos][1], Businesses[businessid][bSupplyPos][2]);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have edited the supply point!");
		format(string, sizeof(string), "[SHOPBUSINESS] %s has changed BusinessID %d's Supply Point to X:%f Y:%f Z:%f", GetPlayerNameEx(playerid), businessid, Businesses[businessid][bSupplyPos][0], Businesses[businessid][bSupplyPos][1],Businesses[businessid][bSupplyPos][2]);
		Log("logs/shoplog.log", string);
	}

	else if(!strcmp(choice, "price", true))
	{
		Businesses[businessid][bValue] = amount;
		format(string, sizeof(string), "You have set the business price to $%d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "[SHOPBUSINESS] %s has changed BusinessID %d's Price to $%d.", GetPlayerNameEx(playerid), businessid, amount);
		Log("logs/shoplog.log", string);
	}

	else if(!strcmp(choice, "type", true))
	{
		if(Businesses[businessid][bOrderState] == 2)
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "You can't change the business type when a delivery is on its way.");
		}
		Businesses[businessid][bType] = amount;
		format(string, sizeof(string), "You have set the business type to %s.", GetBusinessTypeName(amount));
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "[SHOPBUSINESS] %s has changed BusinessID %d's Type to %s (%d).", GetPlayerNameEx(playerid), businessid, GetBusinessTypeName(amount), amount);
		Log("logs/shoplog.log", string);
	}

	else if(!strcmp(choice, "inventory", true))
	{
		Businesses[businessid][bInventory] = amount;
		format(string, sizeof(string), "You have set the business inventory to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "[SHOPBUSINESS] %s has changed BusinessID %d's Inventory to %d.", GetPlayerNameEx(playerid), businessid, amount);
		Log("logs/shoplog.log", string);
	}
	else if(!strcmp(choice, "InventoryCapacity", true))
	{
		Businesses[businessid][bInventoryCapacity] = amount;
		format(string, sizeof(string), "You have set the business inventory capacity to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "[SHOPBUSINESS] %s has changed BusinessID %d's Inventory Capacity to %d.", GetPlayerNameEx(playerid), businessid, amount);
		Log("logs/shoplog.log", string);
	}

	else if(!strcmp(choice, "delete", true))
	{
		Businesses[businessid][bExtPos][0] = 0;
		Businesses[businessid][bExtPos][1] = 0;
		Businesses[businessid][bExtPos][2] = 0;
		Businesses[businessid][bName][0] = 0;
		Businesses[businessid][bType] = 0;
		format(string, sizeof(string), "You have deleted the business.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "[SHOPBUSINESS] %s has deleted BusinessID %d.", GetPlayerNameEx(playerid), businessid);
		Log("logs/bedit.log", string);
		//TODO IMPROVE
		for (new i; i < MAX_BUSINESS_GAS_PUMPS; i++) {
			DestroyDynamicGasPump(businessid, i);
		}
		for (new i; i < MAX_BUSINESS_DEALERSHIP_VEHICLES; i++) {
			DestroyVehicle(Businesses[businessid][bVehID][i]);
		}
	}

	RefreshBusinessPickup(businessid);
	SaveBusiness(businessid);
	Streamer_UpdateEx(playerid, Businesses[businessid][bExtPos][0], Businesses[businessid][bExtPos][1], Businesses[businessid][bExtPos][2]);
	return 1;
}

CMD:shophouse(playerid, params[])
{
	//if(PlayerInfo[playerid][pShopTech] < 1)
	if(!IsPlayerAdmin(playerid) || PlayerInfo[playerid][pAdmin] != 99999)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], choice[32], houseid, amount, invoice[64];
	if(sscanf(params, "s[32]dDs[64]", choice, houseid, amount, invoice))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shophouse [name] [houseid] [amount] [invoice #]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, Class (1-3), Level, Price");
		return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos( playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ] );
		HouseInfo[houseid][hIntIW] = GetPlayerInterior( playerid );
		HouseInfo[houseid][hIntVW] = houseid+6000;
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the interior!" );
		SaveHouse(houseid);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomInterior] == 0)
		{
			HouseInfo[houseid][hCustomInterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom interior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomInterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) interior!" );
		}
		SaveHouse(houseid);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomExterior] == 0)
		{
			HouseInfo[houseid][hCustomExterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom exterior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomExterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) exterior!" );
		}
		SaveHouse(houseid);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos( playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ] );
		HouseInfo[houseid][hExtIW] = GetPlayerInterior(playerid);
		HouseInfo[houseid][hExtVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the exterior!" );
		SaveHouse(houseid);
		ReloadHousePickup(houseid);
	}
	else if(strcmp(choice, "level", true) == 0)
	{
		HouseInfo[houseid][hLevel] = amount;
		format(string, sizeof(string), "You have set the house level to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		ReloadHouseText(houseid);
	}
	else if(strcmp(choice, "price", true) == 0)
	{
		HouseInfo[houseid][hValue] = amount;
		format(string, sizeof(string), "You have set the houses price to $%d.", amount );
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		ReloadHouseText(houseid);
	}
	else if(strcmp(choice, "class", true) == 0)
	{
		switch(amount)
		{
		case 1:
			{
				format(HouseInfo[houseid][hDescription], 128, "Low" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 1 (Low)" );
			}
		case 2:
			{
				format(HouseInfo[houseid][hDescription], 128, "Medium" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 2 (Medium)" );
			}
		case 3:
			{
				format(HouseInfo[houseid][hDescription], 128, "High" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 3 (High)" );
			}
		}
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This home is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}
	}
	SaveHouse(houseid);
	format(string, sizeof(string), "[SHOPHOUSE] %s modified %s on house %d to %d - Invoice %s", GetPlayerNameEx(playerid), choice, houseid, amount, invoice);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:shopbusinessname(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], houseid, ownername, invoice[64];
	if(sscanf(params, "dus[64]", houseid, ownername, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopbusinessname [Business ID] [Player] [invoice]");

	if(!IsPlayerConnected(ownername)) {
    	return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}

	if(PlayerInfo[ownername][pBusiness] != INVALID_BUSINESS_ID) {
	    return SendClientMessageEx(playerid, COLOR_GREY, "That player already owns another business.");
	}

	Businesses[houseid][bOwner] = GetPlayerSQLId(ownername);
	strcpy(Businesses[houseid][bOwnerName], GetPlayerNameEx(ownername), MAX_PLAYER_NAME);
	PlayerInfo[ownername][pBusiness] = houseid;
	PlayerInfo[ownername][pBusinessRank] = 5;
	SaveBusiness(houseid);
	OnPlayerStatsUpdate(ownername);
	RefreshBusinessPickup(houseid);

	format(string, sizeof(string), "[SHOPBUSINESS] %s modified Owner on Business %d to %s - Invoice %s", GetPlayerNameEx(playerid), houseid, GetPlayerNameEx(ownername), invoice);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:shophousename(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], houseid, ownername[MAX_PLAYER_NAME], invoice[64];
	if(sscanf(params, "ds[24]s[64]", houseid, ownername, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shophousename [houseid] [name] [invoice]");
	format(HouseInfo[houseid][hOwnerName], sizeof(ownername), "%s", ownername);
	format(string, sizeof(string), "You have set the house owner to %s", ownername);
	HouseInfo[houseid][hOwned] = 1;
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
	HouseInfo[houseid][hPickupID] = CreateDynamicPickup(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], .worldid = HouseInfo[houseid][hExtVW], .interiorid = HouseInfo[houseid][hExtIW]);
	ReloadHouseText(houseid);

	SaveHouse(houseid);
	format(string, sizeof(string), "[SHOPHOUSE] %s modified Owner on house %d to %s - Invoice %s", GetPlayerNameEx(playerid), houseid, ownername, invoice);
	Log("logs/shoplog.log", string);
	return 1;
}

/*CMD:edit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Edit __________________|");
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /edit [name] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Level, Price");
		SendClientMessageEx(playerid, COLOR_WHITE, "|____________________________________________|");
		return 1;
	}

	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hExtIW] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExtVW])
		{
			format(string, sizeof(string), "House: %d", i);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			if(amount > 0)
			{
				if(strcmp(choice,"level",true) == 0)
				{
					HouseInfo[i][hLevel] = amount;
				}
				else if(strcmp(choice,"price",true) == 0)
				{
					HouseInfo[i][hValue] = amount;
				}
			}
			ReloadHouseText(i);
		}
	}
	return 1;
}*/

CMD:houseinvite(playerid, params[])
{
	if(Homes[playerid] > 0)
	{
		new giveplayerid, hstring[1024], title[64], zone[MAX_ZONE_NAME];
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /houseinvite [player]");
		if(gettime()-GetPVarInt(playerid, "LastHouseInvite") < 15) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only use /houseinvite once every 15 seconds, please wait!");
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			hInviteOfferTo[playerid] = giveplayerid;
			format(title, sizeof(title), "House Invite for %s", GetPlayerNameEx(giveplayerid));
			for(new i; i < MAX_HOUSES; i++)
			{
				if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID])
				{
					Get3DZone(HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ], zone, MAX_ZONE_NAME);
					format(hstring, sizeof(hstring), "%s\nHouse ID %d - Location: %s", hstring, i, zone);
				}
			}
			ShowPlayerDialog(playerid, DIALOG_HOUSEINVITE, DIALOG_STYLE_LIST, title, hstring, "Select", "Cancel");
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}

CMD:hinvite(playerid, params[]) {
	return cmd_houseinvite(playerid, params);
}

CMD:tledit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], choice[32], labelid, amount;
		if(sscanf(params, "s[32]dD", choice, labelid, amount))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /tledit [name] [labelid] [amount]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Position, Color, PickupModel, Delete");
			return 1;
		}

		if(labelid >= MAX_3DLABELS)
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "Invalid Text Label ID!");
			return 1;
		}

		if(strcmp(choice, "position", true) == 0)
		{
			GetPlayerPos(playerid, TxtLabels[labelid][tlPosX], TxtLabels[labelid][tlPosY], TxtLabels[labelid][tlPosZ]);
			TxtLabels[labelid][tlInt] = GetPlayerInterior(playerid);
			TxtLabels[labelid][tlVW] = GetPlayerVirtualWorld(playerid);
			format(string, sizeof(string), "You have changed the position on Text Label #%d.", labelid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			if(IsValidDynamicPickup(TxtLabels[labelid][tlPickupID])) DestroyDynamicPickup(TxtLabels[labelid][tlPickupID]);
			DestroyDynamic3DTextLabel(TxtLabels[labelid][tlTextID]);
			CreateTxtLabel(labelid);
			SaveTxtLabel(labelid);
			format(string, sizeof(string), "%s has edited Text Label ID %d's position.", GetPlayerNameEx(playerid), labelid);
			Log("logs/tledit.log", string);
			return 1;
		}
		else if(strcmp(choice, "color", true) == 0)
		{
			TxtLabels[labelid][tlColor] = amount;
			format(string, sizeof(string), "You have changed the color to %d on Text Label #%d.", amount, labelid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			if(IsValidDynamicPickup(TxtLabels[labelid][tlPickupID])) DestroyDynamicPickup(TxtLabels[labelid][tlPickupID]);
			DestroyDynamic3DTextLabel(TxtLabels[labelid][tlTextID]);
			CreateTxtLabel(labelid);
			SaveTxtLabel(labelid);
			format(string, sizeof(string), "%s has edited Text Label ID %d's color.", GetPlayerNameEx(playerid), labelid);
			Log("logs/tledit.log", string);
			return 1;
		}
		else if(strcmp(choice, "pickupmodel", true) == 0)
		{
			TxtLabels[labelid][tlPickupModel] = amount;
			format(string, sizeof(string), "You have changed the pickup model to %d on Text Label #%d.", amount, labelid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			if(IsValidDynamicPickup(TxtLabels[labelid][tlPickupID])) DestroyDynamicPickup(TxtLabels[labelid][tlPickupID]);
			DestroyDynamic3DTextLabel(TxtLabels[labelid][tlTextID]);
			CreateTxtLabel(labelid);
			SaveTxtLabel(labelid);
			format(string, sizeof(string), "%s has edited Text Label ID %d's PickupModel.", GetPlayerNameEx(playerid), labelid);
			Log("logs/tledit.log", string);
			return 1;
		}
		else if(strcmp(choice, "delete", true) == 0)
		{
			if(strcmp(TxtLabels[labelid][tlText], "None", true) == 0) {
				format(string, sizeof(string), "Text Label %d does not exist.", labelid);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				return 1;
			}
			DestroyDynamicPickup(TxtLabels[labelid][tlPickupID]);
			DestroyDynamic3DTextLabel(TxtLabels[labelid][tlTextID]);
			TxtLabels[labelid][tlText] = 0;
			TxtLabels[labelid][tlPosX] = 0.0;
			TxtLabels[labelid][tlPosY] = 0.0;
			TxtLabels[labelid][tlPosZ] = 0.0;
			TxtLabels[labelid][tlVW] = 0;
			TxtLabels[labelid][tlInt] = 0;
			TxtLabels[labelid][tlColor] = 0;
			TxtLabels[labelid][tlPickupModel] = 0;
			SaveTxtLabel(labelid);
			format(string, sizeof(string), "You have deleted Text Label #%d.", labelid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has deleted Text Label %d.", GetPlayerNameEx(playerid), labelid);
			Log("logs/tledit.log", string);
			return 1;
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	return 1;
}

CMD:tltext(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new szName[128], labelid;

		if(sscanf(params, "ds[128]", labelid, szName)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /tltext [labelid] [text]");
		}
		else if(!(0 <= labelid <= MAX_3DLABELS)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "Invalid door specified.");
		}
		else if(strfind(szName, "\r") != -1 || strfind(szName, "\n") != -1) {
			return SendClientMessageEx(playerid, COLOR_GREY, "Newline characters are forbidden.");
		}

		strcat((TxtLabels[labelid][tlText][0] = 0, TxtLabels[labelid][tlText]), szName, 128);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully changed the text on this text label.");

		DestroyDynamicPickup(TxtLabels[labelid][tlPickupID]);
		if(IsValidDynamic3DTextLabel(TxtLabels[labelid][tlTextID])) DestroyDynamic3DTextLabel(TxtLabels[labelid][tlTextID]);
		CreateTxtLabel(labelid);
		SaveTxtLabel(labelid);

		format(szName, sizeof(szName), "%s has edited Text Label ID %d's text to %s.", GetPlayerNameEx(playerid), labelid, TxtLabels[labelid][tlText]);
		Log("logs/tledit.log", szName);
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	return 1;
}

CMD:tlstatus(playerid, params[])
{
	new labelid;
	if(sscanf(params, "i", labelid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /tlstatus [labelid]");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128];
		format(string,sizeof(string),"|___________ Text Label Status (ID: %d) ___________|", labelid);
		SendClientMessageEx(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "[Position] X: %f | Y: %f | Z: %f | VW: %d | Int: %d", TxtLabels[labelid][tlPosX], TxtLabels[labelid][tlPosY], TxtLabels[labelid][tlPosZ], TxtLabels[labelid][tlVW], TxtLabels[labelid][tlInt]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Text: %s | Color: %d | Pickup Model: %d", TxtLabels[labelid][tlText], TxtLabels[labelid][tlColor], TxtLabels[labelid][tlPickupModel]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:tlnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available text label...");
		for(new x = 0;x<MAX_3DLABELS;x++)
		{
			if(strcmp(TxtLabels[x][tlText], "None", true) == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	return 1;
}

CMD:gotolabel(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new labelnum;
		if(sscanf(params, "d", labelnum)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotolabel [labelnumber]");

		SetPlayerPos(playerid,TxtLabels[labelnum][tlPosX],TxtLabels[labelnum][tlPosY],TxtLabels[labelnum][tlPosZ]);
		SetPlayerInterior(playerid,TxtLabels[labelnum][tlInt]);
		PlayerInfo[playerid][pInt] = TxtLabels[labelnum][tlInt];
		SetPlayerVirtualWorld(playerid, TxtLabels[labelnum][tlVW]);
		PlayerInfo[playerid][pVW] = TxtLabels[labelnum][tlVW];
	}
	return 1;
}

CMD:goldgiftbox(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1338) switch(iRewardBox) {
	    case 0: {

	        new
				Float: fPos[3],
				szMessage[64];

			GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
			iRewardObj = CreateDynamicObject(19055, fPos[0], fPos[1], fPos[2], 0.0, 0.0, 0.0, .streamdistance = 100.0);
			tRewardText = CreateDynamic3DTextLabel("Gold Reward Gift Box\n{FFFFFF}/getrewardgift{F3FF02} to claim your gift!", COLOR_YELLOW, fPos[0], fPos[1], fPos[2], 10.0, .testlos = 1, .streamdistance = 50.0);
			iRewardBox = true;

			format(szMessage, sizeof szMessage, "AdmCmd: %s has placed the reward gift box.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, szMessage, 2);
			Misc_Save();
		}
	    default: {
	        new
	            szMessage[64];

	        iRewardBox = false;
	        DestroyDynamic3DTextLabel(tRewardText);
			DestroyDynamicObject(iRewardObj);

			format(szMessage, sizeof szMessage, "AdmCmd: %s has removed the reward gift box.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, szMessage, 2);
			Misc_Save();
	    }
	}
	return 1;
}

CMD:rewardplay(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1338) switch(iRewardPlay) {
		case 0: {

			new
				szMessage[64];

			iRewardPlay = true;

			format(szMessage, sizeof szMessage, "AdmCmd: %s has enabled Reward Play.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, szMessage, 2);
			Misc_Save();
		}
		default: {

			new
				szMessage[64];

			format(szMessage, sizeof szMessage, "AdmCmd: %s has disabled Reward Play.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, szMessage, 2);

			iRewardPlay = false;
			Misc_Save();
		}
	}
	return 1;
}

CMD:getrewardgift(playerid, params[]) {
	if(iRewardBox) {
		if(IsPlayerInRangeOfDynamicObject(playerid, iRewardObj, 5.0)) {
			if(PlayerInfo[playerid][pGoldBoxTokens] >= 1) {

				--PlayerInfo[playerid][pGoldBoxTokens];

				new
					szMessage[128];

				switch(random(10)) {
					case 0..6: switch(random(7)) { // 70%
						case 0:
						{
							GivePlayerCash(playerid, 500000);
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won $500,000!");
							format(szMessage, sizeof(szMessage), "* %s was just gifted $500,000, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						case 1:
						{
							PlayerInfo[playerid][pMats] += 20000;
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won 20,000 materials!");
							format(szMessage, sizeof(szMessage), "* %s was just gifted 20,000 materials, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						case 2:
						{
							PlayerInfo[playerid][pExp] += 10;
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won 10 respect points!");
							format(szMessage, sizeof(szMessage), "* %s was just gifted 10 respect points, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						case 3:
						{
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won one free car!");
							SendClientMessageEx(playerid, COLOR_CYAN, " 1 Car Voucher has been added to your account.");
							SendClientMessageEx(playerid, COLOR_GRAD2, " Note you may access your voucher(s) with /myvouchers");
							PlayerInfo[playerid][pVehVoucher]++;

							format(szMessage, sizeof(szMessage), "AdmCmd: %s was just gifted by the system and he won one free car", GetPlayerNameEx(playerid));
							Log("logs/gifts.log", szMessage);
							format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s was just gifted by the system and he won one free car.", GetPlayerNameEx(playerid));
							ABroadCast(COLOR_YELLOW, szMessage, 4);
							format(szMessage, sizeof(szMessage), "* %s was just gifted one free car, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						case 4:
						{
							PlayerInfo[playerid][pSVIPVoucher]++;
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won one month of Silver VIP!");
							SendClientMessageEx(playerid, COLOR_CYAN, " 1 Silver VIP Voucher has been added to your account.");
							SendClientMessageEx(playerid, COLOR_GRAD2, " Note you may access your voucher(s) with /myvouchers");
							format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s has won one month of Silver VIP.", GetPlayerNameEx(playerid));
							ABroadCast(COLOR_YELLOW, szMessage, 2);
							format(szMessage, sizeof(szMessage), "* %s was just gifted one month of Silver VIP, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						case 5:
						{
							PlayerInfo[playerid][pTokens] += 50;
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won 50 VIP tokens!");
							format(szMessage, sizeof(szMessage), "* %s was just gifted 50 VIP tokens, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						default:
						{
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won a Free Laser Pointer!");
							format(szMessage, sizeof(szMessage), "* %s was just gifted a Free Laser Pointer, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							new icount = GetPlayerToySlots(playerid);
							for(new v = 0; v < icount; v++)
							{
								if(PlayerToyInfo[playerid][v][ptModelID] == 0)
								{
									PlayerToyInfo[playerid][v][ptModelID] = 18643;
									PlayerToyInfo[playerid][v][ptBone] = 6;
									PlayerToyInfo[playerid][v][ptPosX] = 0.0;
									PlayerToyInfo[playerid][v][ptPosY] = 0.0;
									PlayerToyInfo[playerid][v][ptPosZ] = 0.0;
									PlayerToyInfo[playerid][v][ptRotX] = 0.0;
									PlayerToyInfo[playerid][v][ptRotY] = 0.0;
									PlayerToyInfo[playerid][v][ptRotZ] = 0.0;
									PlayerToyInfo[playerid][v][ptScaleX] = 1.0;
									PlayerToyInfo[playerid][v][ptScaleY] = 1.0;
									PlayerToyInfo[playerid][v][ptScaleZ] = 1.0;
									PlayerToyInfo[playerid][v][ptTradable] = 1;
									
									g_mysql_NewToy(playerid, v);
									return 1;
								}
							}
							
							for(new i = 0; i < MAX_PLAYERTOYS; i++)
							{
								if(PlayerToyInfo[playerid][i][ptModelID] == 0)
								{
									PlayerToyInfo[playerid][i][ptModelID] = 18643;
									PlayerToyInfo[playerid][i][ptBone] = 6;
									PlayerToyInfo[playerid][i][ptPosX] = 0.0;
									PlayerToyInfo[playerid][i][ptPosY] = 0.0;
									PlayerToyInfo[playerid][i][ptPosZ] = 0.0;
									PlayerToyInfo[playerid][i][ptRotX] = 0.0;
									PlayerToyInfo[playerid][i][ptRotY] = 0.0;
									PlayerToyInfo[playerid][i][ptRotZ] = 0.0;
									PlayerToyInfo[playerid][i][ptScaleX] = 1.0;
									PlayerToyInfo[playerid][i][ptScaleY] = 1.0;
									PlayerToyInfo[playerid][i][ptScaleZ] = 1.0;
									PlayerToyInfo[playerid][i][ptTradable] = 1;
									PlayerToyInfo[playerid][i][ptSpecial] = 1;
									
									SendClientMessageEx(playerid, COLOR_GRAD1, "Due to you not having any available slots, we've temporarily gave you an additional slot to use/sell/trade your laser.");
									SendClientMessageEx(playerid, COLOR_RED, "Note: Please take note that after selling the laser, the temporarily additional toy slot will be removed.");
									break;
								}	
							}
						}
					}
					case 7, 8: switch(random(3)) {// 20%
						case 0:
						{

							format(szMessage, sizeof(szMessage), "AdmCmd: %s was just gifted by the system and he won a free house", GetPlayerNameEx(playerid));
							Log("logs/gifts.log", szMessage);
							format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s was just gifted by the system and he won a free house.", GetPlayerNameEx(playerid));
							ABroadCast(COLOR_YELLOW, szMessage, 2);
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won a free house!");
							SendClientMessageEx(playerid, COLOR_GRAD2, " Note: This rare reward may take up to 48 hours to be rewarded.");
							AddFlag(playerid, INVALID_PLAYER_ID, "Free House (Gift)");
							format(szMessage, sizeof(szMessage), "* %s was just gifted a free house, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						case 1:
						{
							PlayerInfo[playerid][pTokens] += 150;
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won 150 VIP tokens!");
							format(szMessage, sizeof(szMessage), "* %s was just gifted 150 VIP tokens, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						default:
						{

							format(szMessage, sizeof(szMessage), "AdmCmd: %s was just gifted by the system and he won a set of neons", GetPlayerNameEx(playerid));
							Log("logs/gifts.log", szMessage);
							format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s was just gifted by the system and he won a free set of neons.", GetPlayerNameEx(playerid));
							ABroadCast(COLOR_YELLOW, szMessage, 2);
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won a free set of neons!");
							SendClientMessageEx(playerid, COLOR_GRAD2, " Note: This rare reward may take up to 48 hours to be rewarded.");
							AddFlag(playerid, INVALID_PLAYER_ID, "Free set of neons (Gift)");
							format(szMessage, sizeof(szMessage), "* %s was just gifted a free set of neons, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}

					}
					default:
					{ // 10%
						new gift = Random(1, 6);
						if(gift >= 1 && gift <= 3)
						{
							if(RimMod > 0) // Rim Kit
							{
								PlayerInfo[playerid][pRimMod]++;
								RimMod--;
								g_mysql_SaveMOTD();

								format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s was just gifted by the system and he won a rim modification kit. (%d left)", GetPlayerNameEx(playerid), RimMod);

								Log("logs/gifts.log", szMessage);
								format(szMessage, sizeof(szMessage), "* %s was just gifted a rim modification kit, enjoy! Only %d kits left.", GetPlayerNameEx(playerid), RimMod);
								ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							}
							else
							{
								gift = 5;
							}
						}
						else if(gift == 4) //
						{
							if(CarVoucher > 0)
							{
								PlayerInfo[playerid][pCarVoucher]++;
								CarVoucher--;
								g_mysql_SaveMOTD();

								format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s was just gifted by the system and he won a restricted car voucher. (%d left)", GetPlayerNameEx(playerid), CarVoucher);

								Log("logs/gifts.log", szMessage);
								format(szMessage, sizeof(szMessage), "* %s was just gifted a restricted car voucher, enjoy! Only %d car vouchers left.", GetPlayerNameEx(playerid), CarVoucher);
								ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
								SendClientMessageEx(playerid, COLOR_CYAN, " 1 Restricted Car Voucher has been added to your account.");
								SendClientMessageEx(playerid, COLOR_GRAD2, " Note you may access your voucher(s) with /myvouchers");
							}
							else gift = 5;
						}
						if(gift == 5)
						{
							PlayerInfo[playerid][pGVIPVoucher]++;
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won one month of Gold VIP!");
							SendClientMessageEx(playerid, COLOR_CYAN, " 1 Gold VIP Voucher has been added to your account.");
							SendClientMessageEx(playerid, COLOR_GRAD2, " Note you may access your voucher(s) with /myvouchers");
							format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s has won one month of Gold VIP.", GetPlayerNameEx(playerid));
							ABroadCast(COLOR_YELLOW, szMessage, 2);
							format(szMessage, sizeof(szMessage), "* %s was just gifted one month of Gold VIP, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
					}
				}
			}
			else SendClientMessage(playerid, COLOR_GREY, "You have no Gold Box Gift tokens.");
		}
		else SendClientMessage(playerid, COLOR_GREY, "You're not near the Gold Box.");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Reward Playing is currently not in effect.");
	return 1;
}

CMD:heal(playerid, params[])
{
	new giveplayerid, price;
	if(sscanf(params, "ud", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /heal [player] [price]");

	if(!(200 <= price <= 1000))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Healing price can't below $200 or above $1,000.");
		return 1;
	}
	if (giveplayerid == playerid)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can't heal yourself.");
		return 1;
	}
	if (IsPlayerConnected(giveplayerid))
	{
		new iVehicle = GetPlayerVehicleID(playerid);
		if(IsAMedic(playerid))
		{
			if(GetPlayerVehicleID(giveplayerid) == iVehicle && (IsAnAmbulance(iVehicle)))
			{
			    new Float:X, Float:Y, Float:Z;
	   			GetPlayerPos(giveplayerid, X, Y, Z);

				if(!IsPlayerInRangeOfPoint(playerid, 10, X, Y, Z)) return SendClientMessageEx(playerid, TEAM_GREEN_COLOR,"You are not near them!");
				new Float:tempheal;
				GetPlayerHealth(giveplayerid,tempheal);
				if(tempheal >= 100.0)
				{
					SendClientMessageEx(playerid, TEAM_GREEN_COLOR,"That person is fully healed.");
					return 1;
				}
				new string[64];
				format(string, sizeof(string), "You healed %s for $%d.", GetPlayerNameEx(giveplayerid),price);
				SendClientMessageEx(playerid, COLOR_PINK, string);
				GivePlayerCash(playerid, price / 2);
				Tax += price / 2;
				GivePlayerCash(giveplayerid, -price);
				SetPlayerHealth(giveplayerid, 100);
				PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
				PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "You have been healed to 100 health for $%d by %s.",price, GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, TEAM_GREEN_COLOR,string);
				if(GetPVarType(giveplayerid, "STD"))
				{
					DeletePVar(giveplayerid, "STD");
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "* You are no longer infected with a STD because of the medic's help.");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "Both you and the patient must be in an ambulance.");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	return 1;
}

CMD:mole(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], log[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /mole [mole text]");

		format(string, sizeof(string), "SMS: %s, Sender: MOLE (555)", params);
		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				SendClientMessageEx(i, COLOR_YELLOW, string);
				//SendAudioToPlayer(i, 47, 100);
			}	
		}
		format(log, sizeof(log), "[MOLE] %s sent: %s", GetPlayerNameEx(playerid), params);
		Log("logs/admin.log", log);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	return 1;
}

CMD:togspec(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 99999)
	{
	    if(GetPVarType(playerid, "EASpecable"))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "You can not be spectated anymore");
	        DeletePVar(playerid, "EASpecable");
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "You can now be spectated again");
	        SetPVarInt(playerid, "EASpecable", 1);
	    }
	}
	return 1;
}

CMD:togtp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 99999)
	{
	    if(GetPVarType(playerid, "EATeleportable"))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "You can not be teleported to anymore");
	        DeletePVar(playerid, "EATeleportable");
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "You can now be teleported to again");
	        SetPVarInt(playerid, "EATeleportable", 1);
	    }
	}
	return 1;
}

CMD:spec(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
		return 1;
	}

	if(strcmp(params, "off", true) == 0)
	{
		if(Spectating[playerid] > 0 && PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 3 && Spectating[playerid] > 0)
		{
			GettingSpectated[Spectate[playerid]] = INVALID_PLAYER_ID;
			Spectating[playerid] = 0;
			Spectate[playerid] = INVALID_PLAYER_ID;
			SpecTime[playerid] = 0;
			SetPVarInt(playerid, "SpecOff", 1 );
			TogglePlayerSpectating(playerid, false);
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You're not spectating anyone.");
			return 1;
		}
	}

	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /spec (playerid/off)");
	if(IsPlayerConnected(giveplayerid))
	{
	    if((PlayerInfo[playerid][pHelper] >= 3 && !(2 <= PlayerInfo[giveplayerid][pHelper] <= 4)) && !GetPVarType(playerid, "pWatchdogWatching"))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "You can only spectate other advisors");
			return 1;
		}
		if(PlayerInfo[giveplayerid][pAdmin] == 99999 && !GetPVarType(giveplayerid, "EASpecable")) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot spectate this person.");
		if(PlayerInfo[playerid][pAdmin] >= 4 && Spectate[giveplayerid] != INVALID_PLAYER_ID && Spectating[giveplayerid] == 1)
		{
			new string[128];
			format(string, sizeof(string), "Admin %s is speccing %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(Spectate[giveplayerid]));
			if(PlayerInfo[playerid][pAdmin] >= 1338 && SpecTime[giveplayerid]) 
			{
				new seconds = gettime()-SpecTime[giveplayerid];
				new minutes = seconds/60;
				format(string, sizeof(string), "%s (%d min %d sec)", string, minutes, seconds-60*minutes);
			}
			SendClientMessageEx(playerid, COLOR_GREEN, string);
			return 1;
		}
		SpectatePlayer(playerid, giveplayerid);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Target is not available.");
	}
	return 1;
}

CMD:pr(playerid, params[])
{
	if(PlayerInfo[playerid][pRadio] == 1)
	{
		if(isnull(params))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pr [chat]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: Type /setfreq to set the frequency of your portable radio.");
			return 1;
		}
		if(PlayerInfo[playerid][pRadioFreq] >= 1 || PlayerInfo[playerid][pRadioFreq] <= -1)
		{
			if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||PlayerInfo[playerid][pHospital]!=0 || PlayerInfo[playerid][pJailTime] > 0)
			{
				SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
				return 1;
			}
			RadioBroadCast(playerid, params);
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "The frequency of your radio is set to 0, you can not broadcast over that frequency.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have a portable radio!");
	}
	return 1;
}

CMD:setfreq(playerid, params[])
{
	new string[128], frequency;
	if(sscanf(params, "d", frequency))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setfreq [frequency]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: Set the frequency of your radio to 0 if you don't want to hear anything.");
		return 1;
	}

	if(frequency > 9999999 || frequency < -9999999) { SendClientMessageEx(playerid, COLOR_GREY, "Frequency can not be lower than -9999999 or higher than 9999999!"); return 1; }
	if (PlayerInfo[playerid][pRadio] == 1)
	{
		PlayerInfo[playerid][pRadioFreq] = frequency;
		format(string, sizeof(string), "You have set the frequency of your portable radio to %d khz.",frequency);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have a portable radio!");
	}
	return 1;
}

CMD:rcreset(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1337) {

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rcreset [player]");
		}
		else if(!IsPlayerConnected(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
		else {

			new
				i = 0,
				szMessage[96];

			format(szMessage, sizeof szMessage, "AdmCmd: %s has reset %s's restricted vehicle warnings.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
			ABroadCast(COLOR_LIGHTRED, szMessage, 2);

			format(szMessage, sizeof szMessage, "%s has reset your restricted vehicle warnings.", GetPlayerNameEx(playerid));
			SendClientMessageEx(iTargetID, COLOR_WHITE, szMessage);

			PlayerInfo[iTargetID][pRVehWarns] = 0;
			PlayerInfo[iTargetID][pLastRVehWarn] = 0;
			PlayerInfo[iTargetID][pRVehRestricted] = 0;

			while(i != MAX_PLAYERVEHICLES) {
				if(PlayerVehicleInfo[iTargetID][i][pvRestricted] != 0) {
					PlayerVehicleInfo[iTargetID][i][pvRestricted] = 0;
				}
				++i;
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:rcabuse(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rcabuse [player]");
		}
		else if(!IsPlayerConnected(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
		else if(GetPlayerState(iTargetID) == PLAYER_STATE_DRIVER && IsRestrictedVehicle(GetVehicleModel(GetPlayerVehicleID(iTargetID)))) {

			new
				iVehicleID = GetPlayerVehicleID(iTargetID),
				iVehModel = GetVehicleModel(iVehicleID),
				iVehIndex = GetPlayerVehicle(iTargetID, iVehicleID),
				Float: fPlayerPos[3],
				szMessage[256]; // Dialog string - don't kill me!!!!!1

			if(iVehIndex != -1) { // Owned by player
				switch(++PlayerInfo[iTargetID][pRVehWarns]) {
					case 1: {

						PlayerVehicleInfo[iTargetID][iVehIndex][pvRestricted] = gettime() + 28800;

						--PlayerCars;
						VehicleSpawned[iTargetID]--;

						PlayerVehicleInfo[iTargetID][iVehIndex][pvSpawned] = 0;
						PlayerVehicleInfo[iTargetID][iVehIndex][pvFuel] = VehicleFuel[iVehicleID];

						DestroyVehicle(iVehicleID);
						PlayerVehicleInfo[iTargetID][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
						g_mysql_SaveVehicle(iTargetID, iVehIndex);
						CheckPlayerVehiclesForDesync(iTargetID);

						GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);

						format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing your %s.\n\nAs this is your first warning, it will be restricted from use for 8 hours.", GetPlayerNameEx(playerid), GetVehicleName(iVehModel));
						ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
						SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this person for abusing their restricted vehicle.");

					}
					case 2: {

						PlayerInfo[iTargetID][pRVehRestricted] = gettime() + 172800;

						--PlayerCars;
						VehicleSpawned[iTargetID]--;

						PlayerVehicleInfo[iTargetID][iVehIndex][pvSpawned] = 0;
						PlayerVehicleInfo[iTargetID][iVehIndex][pvFuel] = VehicleFuel[iVehicleID];

						DestroyVehicle(iVehicleID);
						PlayerVehicleInfo[iTargetID][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
						g_mysql_SaveVehicle(iTargetID, iVehIndex);
						CheckPlayerVehiclesForDesync(iTargetID);

						GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);

						format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing your %s.\n\nAs this is your second warning, you will be unable to use restricted vehicles for two days.", GetPlayerNameEx(playerid), GetVehicleName(iVehModel));
						ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
						SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this person for abusing their restricted vehicle.");
					}
					case 3: {

						PlayerInfo[iTargetID][pRVehRestricted] = gettime() + 604800;
						PlayerInfo[iTargetID][pRVehWarns] = 0;
						DestroyPlayerVehicle(iTargetID, iVehIndex);

						GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);

						format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing your %s.\n\nAs this is your third warning, you will be unable to use restricted vehicles for a week, and the vehicle in question has been removed.", GetPlayerNameEx(playerid), GetVehicleName(iVehModel));
						ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
						SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this person for abusing their restricted vehicle.");
					}
				}
			}
			//else foreach(new i: Player)
			else for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if((iVehIndex = GetPlayerVehicle(i, iVehicleID)) != -1) { // Owned by another player
						switch(++PlayerInfo[iTargetID][pRVehWarns]) {
							case 1: {

								SetVehicleToRespawn(iVehicleID);
								CheckPlayerVehiclesForDesync(i);

								GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
								SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);

								format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing %s's %s.\n\nAs this is your first warning, one of your restricted vehicles (if any) will not be able to be used for two days.", GetPlayerNameEx(playerid), GetPlayerNameEx(i), GetVehicleName(iVehModel));
								ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
								SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this person for abusing their restricted vehicle.");

								for(new x = 0; x != MAX_PLAYERVEHICLES; ++x) if(IsRestrictedVehicle(PlayerVehicleInfo[iTargetID][iVehIndex][pvModelId])) {
									PlayerVehicleInfo[iTargetID][iVehIndex][pvRestricted] = gettime() + 28800;
									break;
								}
							}
							case 2: {

								PlayerInfo[iTargetID][pRVehRestricted] = gettime() + 172800;

								SetVehicleToRespawn(iVehicleID);
								CheckPlayerVehiclesForDesync(i);

								GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
								SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);

								format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing %s's %s.\n\nAs this is your second warning, you will be unable to use restricted vehicles for two days.", GetPlayerNameEx(playerid), GetPlayerNameEx(i), GetVehicleName(iVehModel));
								ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
								SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this person for abusing their restricted vehicle.");
							}
							case 3: {

								PlayerInfo[iTargetID][pRVehRestricted] = gettime() + 604800;
								PlayerInfo[iTargetID][pRVehWarns] = 0;

								GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
								SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);

								format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing %s's %s.\n\nAs this is your third warning, you will be unable to use restricted vehicles for a week.", GetPlayerNameEx(playerid), GetPlayerNameEx(i), GetVehicleName(iVehModel));
								ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
								SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this person for abusing their restricted vehicle.");
							}
						}
						format(szMessage, sizeof szMessage, "%s has issued %s a warning for abusing your %s.\n\nThe vehicle in question has been respawned. Please be mindful of your restricted vehicles.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), GetVehicleName(iVehModel));
						ShowPlayerDialog(i, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
						SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this person for abusing their restricted vehicle.");
						break;
					}
				}	
			}
			if(iVehIndex == -1 && IsACop(iTargetID)) { // Not person owned
				SetVehicleToRespawn(iVehicleID);
				switch(++PlayerInfo[iTargetID][pRVehWarns]) {
					case 1: {
						GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing your faction's %s.\n\nAs this is your first warning, you will face no punishment.", GetPlayerNameEx(playerid), GetVehicleName(iVehModel));
						ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
						SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this person for abusing their restricted vehicle.");
					}
					case 2: {

						PlayerInfo[iTargetID][pRVehRestricted] = gettime() + 1209600;

						GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing your faction's %s.\n\nAs this is your second warning, you will be unable to use restricted vehicles for two weeks and prisoned for two hours.", GetPlayerNameEx(playerid), GetVehicleName(iVehModel));
						ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
						SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this person for abusing their restricted vehicle.");

						GameTextForPlayer(iTargetID, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
						ResetPlayerWeaponsEx(iTargetID);
						format(szMessage, sizeof(szMessage), "AdmCmd: %s(%d) has been prisoned by %s, reason: Abuse of faction vehicles.", GetPlayerNameEx(iTargetID), GetPlayerSQLId(iTargetID), GetPlayerNameEx(playerid));
						Log("logs/admin.log", szMessage);
						format(szMessage, sizeof(szMessage), "AdmCmd: %s has been prisoned by %s, reason: Abuse of faction vehicles.", GetPlayerNameEx(iTargetID), GetPlayerNameEx(playerid));
						SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);
						PlayerInfo[iTargetID][pJailTime] = 120 * 60;
						strcpy(PlayerInfo[iTargetID][pPrisonReason], "[OOC][PRISON] Abuse of faction vehicles", 128);
						strcpy(PlayerInfo[iTargetID][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
						PhoneOnline[iTargetID] = 1;
						SetPlayerInterior(iTargetID, 1);
						PlayerInfo[iTargetID][pInt] = 1;
						new rand = random(sizeof(OOCPrisonSpawns));
						Streamer_UpdateEx(iTargetID, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
						SetPlayerPos(iTargetID, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
						SetPlayerSkin(iTargetID, 50);
						SetPlayerColor(iTargetID, TEAM_APRISON_COLOR);
						Player_StreamPrep(iTargetID, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
					}
					case 3: {

						PlayerInfo[iTargetID][pRVehRestricted] = gettime() + 1814400;
						PlayerInfo[iTargetID][pRVehWarns] = 0;

						GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing your faction's %s.\n\nAs this is your third warning, you will be unable to use restricted vehicles for three weeks, kicked from your faction and banned for two days.", GetPlayerNameEx(playerid), GetVehicleName(iVehModel));
						ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
						SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this person for abusing their restricted vehicle.");

						new playerip[32];
						GetPlayerIp(iTargetID, playerip, sizeof(playerip));
						format(szMessage, sizeof(szMessage), "AdmCmd: %s(IP:%s) was banned by %s, reason: Abuse of faction vehicles", GetPlayerNameEx(iTargetID), playerip, GetPlayerNameEx(playerid));
						Log("logs/ban.log", szMessage);
						format(szMessage, sizeof(szMessage), "AdmCmd: %s was banned by %s, reason: Abuse of faction vehicles", GetPlayerNameEx(iTargetID), GetPlayerNameEx(playerid));
						SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);
						PlayerInfo[iTargetID][pBanned] = 1;
						AddBan(playerid, iTargetID, "Abuse of faction vehicles.");
						SetTimerEx("KickEx", 1000, 0, "i", iTargetID);
					}
				}
			}
			PlayerInfo[iTargetID][pLastRVehWarn] = gettime();
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "That person is not using a restricted vehicle.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:prison(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pWatchdog] >= 2)
	{
		new string[128], giveplayerid, minutes, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, minutes, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /prison [player] [minutes] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin]) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
			SetPlayerArmedWeapon(giveplayerid, 0);
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}
			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been prisoned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;
			SetPVarInt(giveplayerid, "_rAppeal", gettime()+60);			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "[OOC][PRISON] %s", reason);
			format(PlayerInfo[giveplayerid][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
			
			if(PlayerInfo[giveplayerid][pAccountRestricted] == 1)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s (Punished while restricted), reason: %s", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid), reason);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (Punished while restricted), reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Punished while account restricted");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, reason, 1, GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return true;
			}
			
			if(giveplayerid == GetPVarInt(playerid, "PendingAction2"))
			{
				if(AlertTime[GetPVarInt(playerid, "PendingAction3")] != INVALID_PLAYER_ID)
				{
					if(GetPVarInt(playerid, "PendingAction") == 1) // DM
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Deathmatching Alert, we've automatically issued 5 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 5, gettime()+2592000, "Deathmatching", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 5;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 5 Non RP Points for Deathmatching.");
						
						format(string, sizeof(string), "%s has been issued 5 Non RP Points for Deathmatching.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 2) // RK
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Revenge Killing Alert, we've automatically issued 3 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 3, gettime()+2592000, "Revenge Killing", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 3;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 3 Non RP Points for Revenge Killing.");
						
						format(string, sizeof(string), "%s has been issued 3 Non RP Points for Revenge Killing.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 3) // KoS
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Killing on Sight Alert, we've automatically issued 3 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 3, gettime()+2592000, "Killing on Sight", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 3;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 3 Non RP Points for Killing on Sight.");
						
						format(string, sizeof(string), "%s has been issued 3 Non RP Points for Revenge Killing.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 4) // Car Ramming
					{
						print("5");
						format(string, sizeof(string), "You have taken action on %s after processing a Car Ramming Alert, we've automatically issued 2 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 2, gettime()+2592000, "Car Ramming", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 2;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 2 Non RP Points for Car Ramming.");
						
						format(string, sizeof(string), "%s has been issued 2 Non RP Points for Car Ramming.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 5) // OOC Hit
					{
						format(string, sizeof(string), "You have taken action on %s after processing a OOC Contract Alert, we've automatically issued 1 point to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 1, gettime()+2592000, "OOC Contract", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 1;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 1 Non RP Point for OOC Contract.");
						
						format(string, sizeof(string), "%s has been issued 1 Non RP Point for OOC Contract.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 6) // Spamming
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Spamming Alert, we've automatically issued 2 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 2, gettime()+2592000, "Spamming", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 2;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 2 Non RP Points for Spamming.");
						
						format(string, sizeof(string), "%s has been issued 2 Non RP Points for Spamming.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 7) // Gun Discharge Exploit
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Gun Discharge Exploit Alert, we've automatically issued 1 point to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 1, gettime()+2592000, "Gun Discharge Exploit", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 1;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 1 Non RP Point for Gun Discharge Exploit.");
						
						format(string, sizeof(string), "%s has been issued 1 Non RP Point for Gun Discharge Exploit.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 8) // Non-RP Name
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Non-RP Name Alert, we've automatically issued 2 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 2, gettime()+2592000, "Non-RP Name", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 2;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 2 Non RP Points for Non-RP Name.");
						
						format(string, sizeof(string), "%s has been issued 2 Non RP Points for Non-RP Name.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 9) // Logging to avoid
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Logging to avoid Alert, we've automatically issued 2 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 2, gettime()+2592000, "Logging to avoid", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 2;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 2 Non RP Points for Logging to avoid.");
						
						format(string, sizeof(string), "%s has been issued 2 Non RP Points for Logging to avoid.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 10) // Car Surfing
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Car Surfing Alert, we've automatically issued 1 point to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 1, gettime()+2592000, "Car Surfing", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 1;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 1 Non RP Point for Car Surfing.");
						
						format(string, sizeof(string), "%s has been issued 1 Non RP Point for Car Surfing.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 11) // Non RP Behavior
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Non RP Behavior Alert, we've automatically issued 2 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 2, gettime()+2592000, "Non RP Behavior", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 1;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 2 Non RP Points for Non RP Behavior.");
						
						format(string, sizeof(string), "%s has been issued 2 Non RP Points for Non RP Behavior.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					
					if(PlayerInfo[giveplayerid][pNonRPMeter] >= 15)
					{
						format(string, sizeof(string), "%s(%i) Account Restriction", GetPlayerNameEx(giveplayerid), giveplayerid);
						SendReportToQue(playerid, string, 4, GetPlayerPriority(playerid));
						SetPVarInt(playerid, "AccountRestrictionReport", 1);
						SetPVarInt(playerid, "AccountRestID", giveplayerid);
					}
				}
			}
			
			DeletePVar(playerid, "PendingAction");
			DeletePVar(playerid, "PendingAction2");
			if(AlertTime[GetPVarInt(playerid, "PendingAction3")] != 0) AlertTime[GetPVarInt(playerid, "PendingAction3")] = 0;
			DeletePVar(playerid, "PendingAction3");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:calc(playerid, params[]) {
	return cmd_calculate(playerid, params);
}

CMD:calculate(playerid, params[])
{
	new string[128], method[20], value1, value2;
	if(sscanf(params, "ds[20]d", value1, method, value2))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /calculate [value] [operation] [value].");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Operations: Add, Subtract, Multiply, Divide.");
		return 1;
	}

	if(strcmp(method,"multiply",true) == 0 || strcmp(method,"*",true) == 0)
	{
		new sum = value1*value2;
		format(string,sizeof(string),"%s * %s = %s.", number_format(value1), number_format(value2), number_format(sum));
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"divide",true) == 0 || strcmp(method,"/",true) == 0)
	{
		if(value2 == 0)
		{
			SendClientMessageEx(playerid,COLOR_WHITE,"The world will implode in 10 seconds - you divided by zero, idiot!");
			return 1;
		}
		new sum = value1/value2;
		format(string,sizeof(string),"%s / %s = %s.", number_format(value1), number_format(value2), number_format(sum));
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"add",true) == 0 || strcmp(method,"+",true) == 0)
	{
		new sum = value1+value2;
		format(string,sizeof(string),"%s + %s = %s.", number_format(value1), number_format(value2), number_format(sum));
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"subtract",true) == 0 || strcmp(method,"-",true) == 0)
	{
		new sum = value1-value2;
		format(string,sizeof(string),"%s - %s = %s.", number_format(value1), number_format(value2), number_format(sum));
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	return 1;
}

CMD:suspend(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pAP] >= 2 || PlayerInfo[playerid][pHR] >= 3 || PlayerInfo[playerid][pSecurity] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /suspend [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			format(string, sizeof(string), "AdmCmd: %s(%d) has been suspended by %s.", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been suspended by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, string, 2);
			PlayerInfo[giveplayerid][pAdmin] = 0;
			PlayerInfo[giveplayerid][pHR] = 0;
			PlayerInfo[giveplayerid][pAP] = 0;
			PlayerInfo[giveplayerid][pPR] = 0;
			PlayerInfo[giveplayerid][pSecurity] = 0;
			PlayerInfo[giveplayerid][pShopTech] = 0;
			PlayerInfo[giveplayerid][pFactionModerator] = 0;
			PlayerInfo[giveplayerid][pGangModerator] = 0;
			PlayerInfo[giveplayerid][pUndercover] = 0;
			PlayerInfo[giveplayerid][pBanAppealer] = 0;
			PlayerInfo[giveplayerid][pLeader] = 0;
			PlayerInfo[giveplayerid][pMember] = 0;
			PlayerInfo[giveplayerid][pSecureIP][0] = 0;
			PlayerInfo[giveplayerid][pSMod] = 0;
			PlayerInfo[giveplayerid][pDonateRank] = 0;
			PlayerInfo[giveplayerid][pBanAppealer] = 0;
			PlayerInfo[giveplayerid][pShopTech] = 0;
			PlayerInfo[giveplayerid][pDisabled] = 1;
			Kick(giveplayerid);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:osuspend(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pAP] >= 2 || PlayerInfo[playerid][pHR] >= 3 || PlayerInfo[playerid][pSecurity] >= 2)
	{
		new string[128], query[512], tmpName[MAX_PLAYER_NAME];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /osuspend [player name]");

		mysql_escape_string(params, tmpName);
		SetPVarString(playerid, "OnSetSuspended", tmpName);

		format(query,sizeof(query),"UPDATE `accounts` SET `Disabled` = 1, `AdminLevel` = 0, `HR` = 0, `AP` = 0, `Security` = 0, `ShopTech` = 0, `FactionModerator` = 0, `GangModerator` = 0, \
		`Undercover` = 0, `BanAppealer` = 0, `Leader` = 0, `Member` = 0, `SecureIP` = '0.0.0.0', `SeniorModerator` = 0, `BanAppealer` = 0, `ShopTech` = 0 WHERE `Username`= '%s' AND `AdminLevel` < 1338 AND `AdminLevel` > 1", tmpName);
		mysql_function_query(MainPipeline, query, false, "OnSetSuspended", "ii", playerid, true);

		format(string, sizeof(string), "Attempting to suspend %s's account.", tmpName);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:vsuspend(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vsuspend [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			format(string, sizeof(string), "AdmCmd: %s(%d) has been VIP suspended by %s.", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been VIP suspended by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, string, 2);
			if(PlayerInfo[playerid][pAdmin] == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
			}
			PlayerInfo[giveplayerid][pDonateRank] = 0;
			format(string, sizeof(string), "Your VIP has been suspended by %s. You may appeal this on the forums (admin complaint).", GetPlayerNameEx(playerid));
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:prisonaccount(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], name[MAX_PLAYER_NAME], minutes, reason[64];
		if(sscanf(params, "s[24]ds[64]", name, minutes, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /prisonaccount [player name] [time (minutes)] [reason]");

        new giveplayerid = ReturnUser(name);
        if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}
			SetPlayerArmedWeapon(giveplayerid, 0);

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			}

			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been prisoned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			SendClientMessageEx(playerid, COLOR_WHITE, "The person is online and has been prisoned!");
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;
			SetPVarInt(giveplayerid, "_rAppeal", gettime()+60);			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "[OOC][PRISON] %s", reason);
			format(PlayerInfo[giveplayerid][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
		}
		else
		{
			new tmpName[24], tmpPrisonedBy[24], tmpPrisonReason[64], query[512];
			format(tmpPrisonReason, 64, "[OOC][PRISONACC] %s", reason);
			format(tmpPrisonedBy, 24, "%s", GetPlayerNameEx(playerid));
			mysql_escape_string(name, tmpName);
			mysql_escape_string(tmpPrisonReason, tmpPrisonReason);

			SetPVarString(playerid, "OnPrisonAccount", tmpName);
			SetPVarString(playerid, "OnPrisonAccountReason", tmpPrisonReason);

			format(string, sizeof(string), "Attempting to prison %s's account for %d minutes...", tmpName, minutes);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);

			format(query,sizeof(query),"UPDATE `accounts` SET `PrisonReason` = '%s', `PrisonedBy` = '%s', `JailTime` = %d WHERE `PermBand` < 3 AND `Band` < 1 AND `AdminLevel` < %d AND `Username` = '%s'", tmpPrisonReason, tmpPrisonedBy, minutes*60, PlayerInfo[playerid][pAdmin], tmpName);
			mysql_function_query(MainPipeline, query, false, "OnPrisonAccount", "i", playerid);
		}
	}
	return 1;
}

CMD:jailaccount(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], name[MAX_PLAYER_NAME], minutes, reason[64];
		if(sscanf(params, "s[24]ds[64]", name, minutes, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /jailaccount [player name] [time (minutes)] [reason]");

		new tmpName[24], tmpPrisonedBy[24], tmpPrisonReason[64], query[512];
		format(tmpPrisonReason, 64, "[OOC][JAILACC] %s", reason);
		format(tmpPrisonedBy, 24, "%s", GetPlayerNameEx(playerid));
		mysql_escape_string(name, tmpName);
		mysql_escape_string(tmpPrisonReason, tmpPrisonReason);

		SetPVarString(playerid, "OnJailAccount", tmpName);
		SetPVarString(playerid, "OnJailAccountReason", tmpPrisonReason);

		format(string, sizeof(string), "Attempting to jail %s's account for %d minutes...", tmpName, minutes);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);

		format(query,sizeof(query),"UPDATE `accounts` SET `PrisonReason` = '%s', `PrisonedBy` = '%s', `JailTime` = %d WHERE `PermBand` < 3 AND `Band` < 1 AND `AdminLevel` < %d AND `Username` = '%s'", tmpPrisonReason, tmpPrisonedBy, minutes*60, PlayerInfo[playerid][pAdmin], tmpName);
		mysql_function_query(MainPipeline, query, false, "OnJailAccount", "i", playerid);
	}
	return 1;
}

CMD:release(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /release [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pJailTime] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "This player is not currently in prison!");
			}
			else
			{
				format(string, sizeof(string), "AdmCmd: %s(%d) has been released from prison by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/admin.log", string);
				format(string, sizeof(string), "AdmCmd: %s has been released from prison by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pWantedLevel] = 0;
				PlayerInfo[giveplayerid][pBeingSentenced] = 0;
				SetPlayerToTeamColor(giveplayerid);
				SetPlayerHealth(giveplayerid, 100);
				SetPlayerWantedLevel(giveplayerid, 0);
				PlayerInfo[giveplayerid][pJailTime] = 0;
				SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
				SetPlayerInterior(giveplayerid,0);
				PlayerInfo[giveplayerid][pInt] = 0;
				SetPlayerVirtualWorld(giveplayerid, 0);
				PlayerInfo[giveplayerid][pVW] = 0;
				strcpy(PlayerInfo[giveplayerid][pPrisonReason], "None", 128);
				SetPlayerToTeamColor(giveplayerid);
			}
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:sprison(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pUndercover] >= 1)
	{
		new string[128], giveplayerid, minutes, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, minutes, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sprison [player] [minutes] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin]) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
			if(strlen(reason) >= 25) return SendClientMessageEx(playerid, COLOR_WHITE, "Please provide a shorter reason. The maximum length for a prison reason is 25.");

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}	
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been silent prisoned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by an Admin, reason: %s", GetPlayerNameEx(giveplayerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			SetPlayerToTeamColor(giveplayerid);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			PhoneOnline[giveplayerid] = 1;
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;
			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "[OOC][SPRISON] %s", reason);
			format(PlayerInfo[giveplayerid][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
			SetPlayerInterior(giveplayerid, 1);
			PlayerInfo[playerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
			
			if(PlayerInfo[giveplayerid][pAccountRestricted] == 1)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s (Punished while restricted), reason: %s", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid), reason);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (Punished while restricted), reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Punished while account restricted");
				MySQLBan(GetPlayerSQLId(giveplayerid), ip, reason, 1, GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return true;
			}
			
			if(giveplayerid == GetPVarInt(playerid, "PendingAction2"))
			{
				if(AlertTime[GetPVarInt(playerid, "PendingAction3")] != 0)
				{
					if(GetPVarInt(playerid, "PendingAction") == 1) // DM
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Deathmatching Alert, we've automatically issued 5 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 5, gettime()+2592000, "Deathmatching", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 5;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 5 Non RP Points for Deathmatching.");
						
						format(string, sizeof(string), "%s has been issued 5 Non RP Points for Deathmatching.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 2) // RK
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Revenge Killing Alert, we've automatically issued 3 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 3, gettime()+2592000, "Revenge Killing", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 3;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 3 Non RP Points for Revenge Killing.");
						
						format(string, sizeof(string), "%s has been issued 3 Non RP Points for Revenge Killing.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 3) // KoS
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Killing on Sight Alert, we've automatically issued 3 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 3, gettime()+2592000, "Killing on Sight", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 3;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 3 Non RP Points for Killing on Sight.");
						
						format(string, sizeof(string), "%s has been issued 3 Non RP Points for Revenge Killing.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 4) // Car Ramming
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Car Ramming Alert, we've automatically issued 2 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 2, gettime()+2592000, "Car Ramming", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 2;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 2 Non RP Points for Car Ramming.");
						
						format(string, sizeof(string), "%s has been issued 2 Non RP Points for Car Ramming.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 5) // OOC Hit
					{
						format(string, sizeof(string), "You have taken action on %s after processing a OOC Contract Alert, we've automatically issued 1 point to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 1, gettime()+2592000, "OOC Contract", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 1;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 1 Non RP Point for OOC Contract.");
						
						format(string, sizeof(string), "%s has been issued 1 Non RP Point for OOC Contract.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 6) // Spamming
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Spamming Alert, we've automatically issued 2 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 2, gettime()+2592000, "Spamming", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 2;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 2 Non RP Points for Spamming.");
						
						format(string, sizeof(string), "%s has been issued 2 Non RP Points for Spamming.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 7) // Gun Discharge Exploit
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Gun Discharge Exploit Alert, we've automatically issued 1 point to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 1, gettime()+2592000, "Gun Discharge Exploit", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 1;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 1 Non RP Point for Gun Discharge Exploit.");
						
						format(string, sizeof(string), "%s has been issued 1 Non RP Point for Gun Discharge Exploit.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 8) // Non-RP Name
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Non-RP Name Alert, we've automatically issued 2 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 2, gettime()+2592000, "Non-RP Name", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 2;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 2 Non RP Points for Non-RP Name.");
						
						format(string, sizeof(string), "%s has been issued 2 Non RP Points for Non-RP Name.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 9) // Logging to avoid
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Logging to avoid Alert, we've automatically issued 2 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 2, gettime()+2592000, "Logging to avoid", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 2;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 2 Non RP Points for Logging to avoid.");
						
						format(string, sizeof(string), "%s has been issued 2 Non RP Points for Logging to avoid.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 10) // Car Surfing
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Car Surfing Alert, we've automatically issued 1 point to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 1, gettime()+2592000, "Car Surfing", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 1;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 1 Non RP Point for Car Surfing.");
						
						format(string, sizeof(string), "%s has been issued 1 Non RP Point for Car Surfing.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					else if(GetPVarInt(playerid, "PendingAction") == 11) // Non RP Behavior
					{
						format(string, sizeof(string), "You have taken action on %s after processing a Non RP Behavior Alert, we've automatically issued 2 points to the player.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_CYAN, string);
						
						AddNonRPPoint(giveplayerid, 2, gettime()+2592000, "Non RP Behavior", playerid, 0);
						PlayerInfo[giveplayerid][pNonRPMeter] += 1;

						SendClientMessageEx(giveplayerid, COLOR_CYAN, "The server has automatically issued you 2 Non RP Points for Non RP Behavior.");
						
						format(string, sizeof(string), "%s has been issued 2 Non RP Points for Non RP Behavior.", GetPlayerNameEx(giveplayerid));
						Log("logs/nonrppoints.log", string);
					}
					
					if(PlayerInfo[giveplayerid][pNonRPMeter] >= 15)
					{
						format(string, sizeof(string), "%s(%i) Account Restriction", GetPlayerNameEx(giveplayerid), giveplayerid);
						SendReportToQue(playerid, string, 4, GetPlayerPriority(playerid));
						SetPVarInt(playerid, "AccountRestrictionReport", 1);
						SetPVarInt(playerid, "AccountRestID", giveplayerid);
					}
				}
			}
			
			DeletePVar(playerid, "PendingAction");
			DeletePVar(playerid, "PendingAction2");
			if(AlertTime[GetPVarInt(playerid, "PendingAction3")] != 0) AlertTime[GetPVarInt(playerid, "PendingAction3")] = 0;
			DeletePVar(playerid, "PendingAction3");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:sjail(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pUndercover] >= 1)
	{
		new string[128], giveplayerid, minutes, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, minutes, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sjail [player] [minutes] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin]) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
			if(strlen(reason) >= 25) return SendClientMessageEx(playerid, COLOR_WHITE, "Please provide a shorter reason. The maximum length for a prison reason is 25.");

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}	
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s(%d) has been silent jailed by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been jailed by an Admin, reason: %s", GetPlayerNameEx(giveplayerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PhoneOnline[giveplayerid] = 1;
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			SetPlayerFacingAngle(giveplayerid, 0);
			new rand = random(sizeof(OOCPrisonSpawns));
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			PlayerInfo[giveplayerid][pVW] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			format(string, sizeof(string), "You are jailed for %d minutes.   Bail: Unable", minutes);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			format(PlayerInfo[giveplayerid][pPrisonedBy], 24, "%s", GetPlayerNameEx(playerid));
			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "[OOC][SJAIL] %s", reason);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:jail(playerid, params[])
{
	new string[128], giveplayerid, minutes, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, minutes, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /jail [player] [minutes] [reason]");

	if(minutes < 15 || minutes > 45) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't jail for less than 15 minutes or more than 45 minutes.");
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(PlayerInfo[playerid][pSMod] < 1 && PlayerInfo[playerid][pAdmin] == 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		if(IsPlayerConnected(giveplayerid))
		{
			if((PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin]) || (PlayerInfo[playerid][pAdmin] == 1 && PlayerInfo[giveplayerid][pHelper] >= 2)) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
			
			if(GetPVarInt(giveplayerid, "IsInArena") >= 0) LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			ResetPlayerWeaponsEx(giveplayerid);
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
			}	
			format(string, sizeof(string), "AdmCmd: %s has been jailed by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			if(PlayerInfo[playerid][pSMod] > 0 && PlayerInfo[playerid][pAdmin] == 1)
			{
				format(string, sizeof(string), "AdmCmd: %s(%d) jailed by Senior Moderator %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/moderator.log", string);
				format(string, sizeof(string), "You have been jailed by Senior Moderator %s for %d minutes for violation of server rules.", GetPlayerNameEx(playerid), minutes);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			}
			else
			{
				format(string, sizeof(string), "AdmCmd: %s(%d) jailed by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/admin.log", string);
				format(string, sizeof(string), "You have been jailed by Admin %s for %d minutes for violation of server rules.", GetPlayerNameEx(playerid), minutes);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			}
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			format(string, sizeof(string), "Reason: %s", reason);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			ResetPlayerWeaponsEx(giveplayerid);
			PhoneOnline[giveplayerid] = 1;
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;
			SetPVarInt(giveplayerid, "_rAppeal", gettime()+60);
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerFacingAngle(giveplayerid, 0);
			TogglePlayerControllable(giveplayerid, 1);
			SetPlayerHealth(giveplayerid, 0x7FB00000);
			new rand = random(sizeof(OOCPrisonSpawns));
			SetPlayerPos(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			PlayerInfo[giveplayerid][pVW] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			format(PlayerInfo[giveplayerid][pPrisonedBy], 24, "%s", GetPlayerNameEx(playerid));
			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "[OOC][JAIL] %s", reason);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:setstat(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{

		new string[128], giveplayerid, statcode, amount;
		if(sscanf(params, "udd", giveplayerid, statcode, amount))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setstat [player] [statcode] [amount]");
			SendClientMessageEx(playerid, COLOR_GRAD4, "|1 Level |2 ArmorUpgrade |3 UpgradePoints |4 Model |5 BankAccount |6 PhoneNumber |7 RespectPoints |8 House1 |9 House2 |10 House3");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|11 FMember |12 Det |13 Lawyer |14 Fixer |17 Drug |18 Sex |19 Box |20 Arms |21 Materials |22 Pot |23 Crack");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|24 Fishing |25 Job |26 Rank |27 Packages |28 Crates |29 Smuggler |30 Insurance |31 Warnings |32 Screwdriver");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|33 Age |34 Gender |35 NMute |36 AdMute |37 Faction |38 Restricted Weapon Time |39 Gang Warns |40 RMute |41 Reward Hours");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|42 Playing Hours |43 Gold Box Tokens |44 Computer Drawings |45 Papers |46 Business |47 BusinessRank | 48 Spraycan");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|49 Heroin |50 RawOpium |51 Syringes |52 Hunger |53 Fitness |54 Event Tokens |55 Modkit");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|56 Car Jack Skill |57 Lock Pick Vehicle Count |58 Lock Pick Vehicle Time |59 Tool Box |60 Crowbar");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			switch (statcode)
			{
			case 1:
				{
					PlayerInfo[giveplayerid][pLevel] = amount;
					format(string, sizeof(string), "   %s's Level has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
					SetPlayerScore(giveplayerid, PlayerInfo[giveplayerid][pLevel]);
				}
			case 2:
				{
					PlayerInfo[giveplayerid][pSHealth] = amount;
					format(string, sizeof(string), "   %s's ArmorUpgrade has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 3:
				{
					PlayerInfo[giveplayerid][gPupgrade] = amount;
					format(string, sizeof(string), "   %s's Upgrade Points has been set %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 4:
				{
					PlayerInfo[giveplayerid][pModel] = amount;
					format(string, sizeof(string), "   %s's Model has been set %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 5:
				{
					PlayerInfo[giveplayerid][pAccount] = amount;
					format(string, sizeof(string), "   %s's Bank Account has been set to $%d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 6:
				{
					if(amount == 0)
					{
						PlayerInfo[giveplayerid][pPnumber] = amount;
						format(string, sizeof(string), "   %s had their phone removed", GetPlayerNameEx(giveplayerid));
					}
					else
					{
						new query[128];
						SetPVarInt(giveplayerid, "WantedPh", amount);
						SetPVarInt(giveplayerid, "CurrentPh", PlayerInfo[giveplayerid][pPnumber]);
						SetPVarInt(giveplayerid, "PhChangeCost", 50000);
						SetPVarInt(giveplayerid, "PhChangerId", playerid);
						format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `PhoneNr` = '%d'",amount);
						mysql_function_query(MainPipeline, query, true, "OnPhoneNumberCheck", "ii", giveplayerid, 4);
						return 1;
					}
				}
			case 7:
				{
					PlayerInfo[giveplayerid][pExp] = amount;
					format(string, sizeof(string), "   %s's Respect Points have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 8:
				{
					PlayerInfo[giveplayerid][pPhousekey] = amount;
					format(string, sizeof(string), "   %s's House 1 has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 9:
				{
					PlayerInfo[giveplayerid][pPhousekey2] = amount;
					format(string, sizeof(string), "   %s's House 2 has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 10:
				{
					PlayerInfo[giveplayerid][pPhousekey3] = amount;
					format(string, sizeof(string), "   %s's House 3 has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 11:
				{
					PlayerInfo[giveplayerid][pFMember] = amount;
					format(string, sizeof(string), "   %s's Family Membership has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 12:
				{
					PlayerInfo[giveplayerid][pDetSkill] = amount;
					format(string, sizeof(string), "   %s's Detective Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 13:
				{
					PlayerInfo[giveplayerid][pLawSkill] = amount;
					format(string, sizeof(string), "   %s's Lawyer Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 14:
				{
					PlayerInfo[giveplayerid][pMechSkill] = amount;
					format(string, sizeof(string), "   %s's Car Mechanic Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 17:
				{
					PlayerInfo[giveplayerid][pDrugsSkill] = amount;
					format(string, sizeof(string), "   %s's Drug Dealer Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 18:
				{
					PlayerInfo[giveplayerid][pSexSkill] = amount;
					format(string, sizeof(string), "   %s's Sex Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 19:
				{
					PlayerInfo[giveplayerid][pBoxSkill] = amount;
					format(string, sizeof(string), "   %s's Box Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 20:
				{
					PlayerInfo[giveplayerid][pArmsSkill] = amount;
					format(string, sizeof(string), "   %s's Arms Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 21:
				{
					PlayerInfo[giveplayerid][pMats] = amount;
					format(string, sizeof(string), "   %s's Materials have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 22:
				{
					PlayerInfo[giveplayerid][pPot] = amount;
					format(string, sizeof(string), "   %s's Pot has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 23:
				{
					PlayerInfo[giveplayerid][pCrack] = amount;
					format(string, sizeof(string), "   %s's Crack has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 24:
				{
					PlayerInfo[giveplayerid][pFishSkill] = amount;
					format(string, sizeof(string), "   %s's Fishing Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 25:
				{
					PlayerInfo[giveplayerid][pJob] = amount;
					format(string, sizeof(string), "   %s's Job has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 26:
				{
					PlayerInfo[giveplayerid][pRank] = amount;
					format(string, sizeof(string), "   %s's Rank has been to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 27:
				{
					SetPVarInt(giveplayerid, "Packages", amount);
					format(string, sizeof(string), "   %s's Materials Packages have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 28:
				{
					PlayerInfo[giveplayerid][pCrates] = amount;
					format(string, sizeof(string), "   %s's Drug Crates have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 29:
				{
					PlayerInfo[giveplayerid][pSmugSkill] = amount;
					format(string, sizeof(string), "   %s's Smuggler Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 30:
				{
					PlayerInfo[giveplayerid][pInsurance] = amount;
					format(string, sizeof(string), "   %s's Insurance has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 31:
				{
					PlayerInfo[giveplayerid][pWarns] = amount;
					format(string, sizeof(string), "   %s's Warnings have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 32:
				{
					PlayerInfo[giveplayerid][pScrewdriver] = amount;
					format(string, sizeof(string), "   %s's Screwdrivers have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			/*case 33:
				{
					PlayerInfo[giveplayerid][pBirthDate] = amount;
					format(string, sizeof(string), "   %s's Age has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}*/
			case 34:
				{
					PlayerInfo[giveplayerid][pSex] = amount;
					format(string, sizeof(string), "   %s's Gender has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 35:
				{
					PlayerInfo[giveplayerid][pNMuteTotal] = amount;
					format(string, sizeof(string), "   %s's Total Newbie Mutes has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 36:
				{
					PlayerInfo[giveplayerid][pADMuteTotal] = amount;
					format(string, sizeof(string), "   %s's Total Ad Mutes has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 37:
				{
					PlayerInfo[giveplayerid][pMember] = amount;
					format(string, sizeof(string), "   %s's Faction has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 38:
				{
					if(PlayerInfo[giveplayerid][pConnectHours] >= 2) {
						PlayerInfo[giveplayerid][pWRestricted] = amount;
						format(string, sizeof(string), "   %s's Weapon Restricted Time has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
					}
					else {
						return SendClientMessageEx(playerid, COLOR_GREY, "You cannot set this on a person who has under 2 playing hours.");
					}
				}
			case 39:
				{
					PlayerInfo[giveplayerid][pGangWarn] = amount;
					format(string, sizeof(string), "   %s's Gang Warns have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 40:
				{
					PlayerInfo[giveplayerid][pRMutedTotal] = amount;
					format(string, sizeof(string), "   %s's Report Mutes have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 41:
				{
					PlayerInfo[giveplayerid][pRewardHours] = amount;
					format(string, sizeof(string), "   %s's Reward Playing Hours have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 42:
				{
					PlayerInfo[giveplayerid][pConnectHours] = amount;
					format(string, sizeof(string), "   %s's Playing Hours have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
            case 43:
				{
					PlayerInfo[giveplayerid][pGoldBoxTokens] = amount;
					format(string, sizeof(string), "   %s's Box Tokens have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 44:
				{
					PlayerInfo[giveplayerid][pRewardDrawChance] = amount;
					format(string, sizeof(string), "   %s's Computer Drawings have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 45:
				{
					PlayerInfo[giveplayerid][pPaper] = amount;
					format(string, sizeof(string), "   %s's Papers have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 46:
				{
				    if (amount < 0 || amount >= MAX_BUSINESSES) return 1;
					PlayerInfo[giveplayerid][pBusiness] = amount;
					format(string, sizeof(string), "   %s's Business have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 47:
				{
				    if (amount < 0 || amount > 5) return 1;
					PlayerInfo[giveplayerid][pBusinessRank] = amount;
					format(string, sizeof(string), "   %s's Business Rank have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 48:
				{
                	PlayerInfo[giveplayerid][pSpraycan] = amount;
					format(string, sizeof(string), "   %s's Spraycans have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 49:
			    {
			        PlayerInfo[giveplayerid][pHeroin] = amount;
			        format(string, sizeof(string), "   %s's Heroin have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
			    }
			case 50:
				{
                	PlayerInfo[giveplayerid][pRawOpium] = amount;
					format(string, sizeof(string), "   %s's raw opium have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
            case 51:
				{
                	PlayerInfo[giveplayerid][pSyringes] = amount;
					format(string, sizeof(string), "   %s's Syringes have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}

			case 52:
				{
					if (amount <= 0)
					{
						amount = 1;
						PlayerInfo[giveplayerid][pHungerTimer] = 1799;
					} else if (amount > 100)
					{
						amount = 100;
					}

					PlayerInfo[giveplayerid][pHungerDeathTimer] = 0;

					PlayerInfo[giveplayerid][pHunger] = amount;
					format(string, sizeof(string), "   %s's Hunger has been set to %i.", GetPlayerNameEx(giveplayerid), amount);
				}

			case 53:
				{
					PlayerInfo[giveplayerid][pFitness] = amount;
					format(string, sizeof(string), "   %s's Fitness has been set to %i.", GetPlayerNameEx(giveplayerid), amount);
				}

			case 54:
				{
					PlayerInfo[giveplayerid][pTrickortreat] = amount;
					format(string, sizeof(string), "   %s's Event Tokens have been set to %i.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 55:
				{
					PlayerInfo[giveplayerid][pRimMod] = amount;
					format(string, sizeof(string), "   %s's Rim Kits have been set to %i.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 56:
				{
					PlayerInfo[giveplayerid][pCarLockPickSkill] = amount;
					format(string, sizeof(string), "   %s's Car Lock Pick Skill have been set to %i.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 57:
				{
					PlayerInfo[giveplayerid][pLockPickVehCount] = amount;
					format(string, sizeof(string), "   %s's Lock Pick Vehicle Count have been set to %i.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 58:
				{
					PlayerInfo[giveplayerid][pLockPickTime] = amount;
					format(string, sizeof(string), "   %s's Lock Pick Vehicle Time have been set to %i.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 59:
				{
					PlayerInfo[giveplayerid][pToolBox] = amount;
					format(string, sizeof(string), "   %s's Tool Box usages have been set to %i.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 60:
				{
					PlayerInfo[giveplayerid][pCrowBar] = amount;
					format(string, sizeof(string), "   %s's Crowbar usages have been set to %i.", GetPlayerNameEx(giveplayerid), amount);
				}

			default:
				{
					format(string, sizeof(string), "   Invalid stat code.", amount);
				}
			}


			format(string, sizeof(string), "%s by %s", string, GetPlayerNameEx(playerid));
			Log("logs/stats.log", string);
			SendClientMessageEx(playerid, COLOR_GRAD1, string);

		}
	}
	return 1;
}

CMD:setmystat(playerid, params[])
{
	if(PlayerInfo[playerid][pUndercover] >= 1 || PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], statcode, amount;
		if(sscanf(params, "dd", statcode, amount))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setmystat [statcode] [amount]");
			SendClientMessageEx(playerid, COLOR_GRAD4, "|1 Level |2 ArmorUpgrade |3 UpgradePoints |4 Model |5 BankAccount |6 PhoneNumber |7 RespectPoints |8 House1 |9 House2 |10 House3");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|11 FMember |12 Det |13 Lawyer |14 Fixer |17 Drug |18 Sex |19 Box |20 Arms |21 Materials |22 Pot |23 Crack");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|24 Fishing |25 Job |26 Rank |27 Packages |28 Crates |29 Smuggler |30 Insurance |31 Warnings |32 Screwdriver");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|33 Age |34 Gender |35 NMute |36 AdMute |37 Faction |38 Restricted Weapon Time |39 Gang Warns |40 RMute |41 Reward Hours");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|42 Playing Hours |43 Gold Box Tokens |44 Computer Drawings |45 Papers |46 Business |47 BusinessRank | 48 Spraycan");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|49 Heroin |50 RawOpium |51 Syringes |52 Hunger |53 Fitness |54 Event Tokens |55 Modkit");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|56 Car Lock Pick Skill |57 Lock Pick Vehicle Count |58 Lock Pick Vehicle Time");
			return 1;
		}
		
		switch (statcode)
		{
		case 1:
			{
				PlayerInfo[playerid][pLevel] = amount;
				format(string, sizeof(string), "   %s's Level has been set to %d.", GetPlayerNameEx(playerid), amount);
				SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
			}
		case 2:
			{
				PlayerInfo[playerid][pSHealth] = amount;
				format(string, sizeof(string), "   %s's ArmorUpgrade has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 3:
			{
				PlayerInfo[playerid][gPupgrade] = amount;
				format(string, sizeof(string), "   %s's Upgrade Points has been set %d.", GetPlayerNameEx(playerid), amount);
			}
		case 4:
			{
				PlayerInfo[playerid][pModel] = amount;
				format(string, sizeof(string), "   %s's Model has been set %d.", GetPlayerNameEx(playerid), amount);
			}
		case 5:
			{
				PlayerInfo[playerid][pAccount] = amount;
				format(string, sizeof(string), "   %s's Bank Account has been set to $%d.", GetPlayerNameEx(playerid), amount);
			}
		case 6:
			{
				if(amount == 0)
				{
					PlayerInfo[playerid][pPnumber] = amount;
					format(string, sizeof(string), "   %s had their phone removed", GetPlayerNameEx(playerid));
				}
				else
				{
					new query[128];
					SetPVarInt(playerid, "WantedPh", amount);
					SetPVarInt(playerid, "CurrentPh", PlayerInfo[playerid][pPnumber]);
					SetPVarInt(playerid, "PhChangeCost", 50000);
					SetPVarInt(playerid, "PhChangerId", playerid);
					format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `PhoneNr` = '%d'",amount);
					mysql_function_query(MainPipeline, query, true, "OnPhoneNumberCheck", "ii", playerid, 4);
					return 1;
				}
			}
		case 7:
			{
				PlayerInfo[playerid][pExp] = amount;
				format(string, sizeof(string), "   %s's Respect Points have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 8:
			{
				PlayerInfo[playerid][pPhousekey] = amount;
				format(string, sizeof(string), "   %s's House 1 has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 9:
			{
				PlayerInfo[playerid][pPhousekey2] = amount;
				format(string, sizeof(string), "   %s's House 2 has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 10:
			{
				PlayerInfo[playerid][pPhousekey3] = amount;
				format(string, sizeof(string), "   %s's House 3 has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 11:
			{
				PlayerInfo[playerid][pFMember] = amount;
				format(string, sizeof(string), "   %s's Family Membership has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 12:
			{
				PlayerInfo[playerid][pDetSkill] = amount;
				format(string, sizeof(string), "   %s's Detective Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 13:
			{
				PlayerInfo[playerid][pLawSkill] = amount;
				format(string, sizeof(string), "   %s's Lawyer Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 14:
			{
				PlayerInfo[playerid][pMechSkill] = amount;
				format(string, sizeof(string), "   %s's Car Mechanic Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 17:
			{
				PlayerInfo[playerid][pDrugsSkill] = amount;
				format(string, sizeof(string), "   %s's Drug Dealer Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 18:
			{
				PlayerInfo[playerid][pSexSkill] = amount;
				format(string, sizeof(string), "   %s's Sex Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 19:
			{
				PlayerInfo[playerid][pBoxSkill] = amount;
				format(string, sizeof(string), "   %s's Box Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 20:
			{
				PlayerInfo[playerid][pArmsSkill] = amount;
				format(string, sizeof(string), "   %s's Arms Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 21:
			{
				PlayerInfo[playerid][pMats] = amount;
				format(string, sizeof(string), "   %s's Materials have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 22:
			{
				PlayerInfo[playerid][pPot] = amount;
				format(string, sizeof(string), "   %s's Pot has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 23:
			{
				PlayerInfo[playerid][pCrack] = amount;
				format(string, sizeof(string), "   %s's Crack has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 24:
			{
				PlayerInfo[playerid][pFishSkill] = amount;
				format(string, sizeof(string), "   %s's Fishing Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 25:
			{
				PlayerInfo[playerid][pJob] = amount;
				format(string, sizeof(string), "   %s's Job has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 26:
			{
				PlayerInfo[playerid][pRank] = amount;
				format(string, sizeof(string), "   %s's Rank has been to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 27:
			{
				SetPVarInt(playerid, "Packages", amount);
				format(string, sizeof(string), "   %s's Materials Packages have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 28:
			{
				PlayerInfo[playerid][pCrates] = amount;
				format(string, sizeof(string), "   %s's Drug Crates have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 29:
			{
				PlayerInfo[playerid][pSmugSkill] = amount;
				format(string, sizeof(string), "   %s's Smuggler Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 30:
			{
				PlayerInfo[playerid][pInsurance] = amount;
				format(string, sizeof(string), "   %s's Insurance has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 31:
			{
				PlayerInfo[playerid][pWarns] = amount;
				format(string, sizeof(string), "   %s's Warnings have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 32:
			{
				PlayerInfo[playerid][pScrewdriver] = amount;
				format(string, sizeof(string), "   %s's Screwdrivers have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		/*case 33:
			{
				PlayerInfo[playerid][pBirthDate] = amount;
				format(string, sizeof(string), "   %s's Age has been set to %d.", GetPlayerNameEx(playerid), amount);
			}*/
		case 34:
			{
				PlayerInfo[playerid][pSex] = amount;
				format(string, sizeof(string), "   %s's Gender has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 35:
			{
				PlayerInfo[playerid][pNMuteTotal] = amount;
				format(string, sizeof(string), "   %s's Total Newbie Mutes has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 36:
			{
				PlayerInfo[playerid][pADMuteTotal] = amount;
				format(string, sizeof(string), "   %s's Total Ad Mutes has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 37:
			{
				PlayerInfo[playerid][pMember] = amount;
				format(string, sizeof(string), "   %s's Faction has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 38:
			{
				if(PlayerInfo[playerid][pConnectHours] >= 2) {
					PlayerInfo[playerid][pWRestricted] = amount;
					format(string, sizeof(string), "   %s's Weapon Restricted Time has been set to %d.", GetPlayerNameEx(playerid), amount);
				}
				else {
					return SendClientMessageEx(playerid, COLOR_GREY, "You cannot set this on a person who has under 2 playing hours.");
				}
			}
		case 39:
			{
				PlayerInfo[playerid][pGangWarn] = amount;
				format(string, sizeof(string), "   %s's Gang Warns have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 40:
			{
				PlayerInfo[playerid][pRMutedTotal] = amount;
				format(string, sizeof(string), "   %s's Report Mutes have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 41:
			{
				PlayerInfo[playerid][pRewardHours] = amount;
				format(string, sizeof(string), "   %s's Reward Playing Hours have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 42:
			{
				PlayerInfo[playerid][pConnectHours] = amount;
				format(string, sizeof(string), "   %s's Playing Hours have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 43:
			{
				PlayerInfo[playerid][pGoldBoxTokens] = amount;
				format(string, sizeof(string), "   %s's Box Tokens have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 44:
			{
				PlayerInfo[playerid][pRewardDrawChance] = amount;
				format(string, sizeof(string), "   %s's Computer Drawings have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 45:
			{
				PlayerInfo[playerid][pPaper] = amount;
				format(string, sizeof(string), "   %s's Papers have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 46:
			{
				if (amount < 0 || amount >= MAX_BUSINESSES) return 1;
				PlayerInfo[playerid][pBusiness] = amount;
				format(string, sizeof(string), "   %s's Business have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 47:
			{
				if (amount < 0 || amount > 5) return 1;
				PlayerInfo[playerid][pBusinessRank] = amount;
				format(string, sizeof(string), "   %s's Business Rank have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 48:
			{
				PlayerInfo[playerid][pSpraycan] = amount;
				format(string, sizeof(string), "   %s's Spraycans have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 49:
			{
				PlayerInfo[playerid][pHeroin] = amount;
				format(string, sizeof(string), "   %s's Heroin have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 50:
			{
				PlayerInfo[playerid][pRawOpium] = amount;
				format(string, sizeof(string), "   %s's raw opium have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 51:
			{
				PlayerInfo[playerid][pSyringes] = amount;
				format(string, sizeof(string), "   %s's Syringes have been set to %d.", GetPlayerNameEx(playerid), amount);
			}

		case 52:
			{
				if (amount <= 0)
				{
					amount = 1;
					PlayerInfo[playerid][pHungerTimer] = 1799;
				} else if (amount > 100)
				{
					amount = 100;
				}

				PlayerInfo[playerid][pHungerDeathTimer] = 0;

				PlayerInfo[playerid][pHunger] = amount;
				format(string, sizeof(string), "   %s's Hunger has been set to %i.", GetPlayerNameEx(playerid), amount);
			}

		case 53:
			{
				PlayerInfo[playerid][pFitness] = amount;
				format(string, sizeof(string), "   %s's Fitness has been set to %i.", GetPlayerNameEx(playerid), amount);
			}

		case 54:
			{
				PlayerInfo[playerid][pTrickortreat] = amount;
				format(string, sizeof(string), "   %s's Event Tokens have been set to %i.", GetPlayerNameEx(playerid), amount);
			}
		case 55:
			{
				PlayerInfo[playerid][pRimMod] = amount;
				format(string, sizeof(string), "   %s's Rim Kits have been set to %i.", GetPlayerNameEx(playerid), amount);
			}
		case 56:
			{
				PlayerInfo[playerid][pCarLockPickSkill] = amount;
				format(string, sizeof(string), "   %s's Car Lock Pick Skill have been set to %i.", GetPlayerNameEx(playerid), amount);
			}
		case 57:
			{
				PlayerInfo[playerid][pLockPickVehCount] = amount;
				format(string, sizeof(string), "   %s's Lock Pick Vehicle Count have been set to %i.", GetPlayerNameEx(playerid), amount);
			}
		case 58:
			{
				PlayerInfo[playerid][pLockPickTime] = amount;
				format(string, sizeof(string), "   %s's Lock Pick Vehicle Time have been set to %i.", GetPlayerNameEx(playerid), amount);
			}
		case 59:
			{
				PlayerInfo[playerid][pToolBox] = amount;
				format(string, sizeof(string), "   %s's Tool Box usages have been set to %i.", GetPlayerNameEx(playerid), amount);
			}
		case 60:
			{
				PlayerInfo[playerid][pCrowBar] = amount;
				format(string, sizeof(string), "   %s's Crowbar usages have been set to %i.", GetPlayerNameEx(playerid), amount);
			}

		default:
			{
				format(string, sizeof(string), "   Invalid stat code.", amount);
			}
		}

		format(string, sizeof(string), "%s by %s", string, GetPlayerNameEx(playerid));
		Log("logs/undercover.log", string);
		SendClientMessageEx(playerid, COLOR_GRAD1, string);
	}
	return 1;
}

CMD:setvw(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	new giveplayerid, vw;
	if(sscanf(params, "ud", giveplayerid, vw)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setvw [player] [virtual world]");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	new string[128];
	if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
	{
		SetPVarInt(playerid, "tempPBP", giveplayerid);
		format(string, sizeof(string), "%s (ID: %d) is currently in an active Paintball game.\n\nDo you want to force this player out?", GetPlayerNameEx(giveplayerid), giveplayerid);
		ShowPlayerDialog(playerid, PBFORCE, DIALOG_STYLE_MSGBOX, "Paintball", string, "Yes", "No");
		return 1;
	}
	PlayerInfo[giveplayerid][pVW] =  vw;
	SetPlayerVirtualWorld(giveplayerid,  vw);
	format(string, sizeof(string), "You have set %s's virtual world to %d.", GetPlayerNameEx(giveplayerid),  vw);
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	return 1;
}

CMD:setint(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	new giveplayerid, int;
	if(sscanf(params, "ud", giveplayerid, int)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setint [player] [interiorid]");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	new string[128];
	PlayerInfo[giveplayerid][pInt] = int;
	SetPlayerInterior(giveplayerid, int);
	format(string, sizeof(string), "You have set %s's interior to %d.", GetPlayerNameEx(giveplayerid), int);
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	return 1;
}

CMD:setskin(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], giveplayerid, skinid;
		if(sscanf(params, "ud", giveplayerid, skinid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setskin [player] [skinid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(!IsInvalidSkin(skinid))
			{
				if(GetPlayerSkin(giveplayerid) == skinid)
				{
					SendClientMessageEx( playerid, COLOR_WHITE, "The person you're trying to change skins of already is using the skin you're trying to set." );
				}
				else
				{
					PlayerInfo[giveplayerid][pModel] = skinid;
					format(string, sizeof(string), "Your skin has been changed to ID %d by Administrator %s.", skinid, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
					format(string, sizeof(string), "You have given %s skin ID %d.", GetPlayerNameEx(giveplayerid), skinid);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SetPlayerSkin(giveplayerid, PlayerInfo[giveplayerid][pModel]);
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid skin ID!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:makeleader(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pFactionModerator] >= 2)
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /makeleader [player]");
		}
		else {
			if(IsPlayerConnected(giveplayerid))	{
   				SetPVarInt(playerid, "MakingLeader", giveplayerid);
   				SetPVarInt(playerid, "MakingLeaderSQL", GetPlayerSQLId(giveplayerid));
				Group_ListGroups(playerid, DIALOG_MAKELEADER);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");

	return 1;
}

CMD:entercar(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new carid, seatid;
		if(sscanf(params, "ii", carid, seatid))	return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /entercar [carid] [seatid]");

		new
			iVehID = strval(params);

		if(!(1 <= iVehID <= MAX_VEHICLES)) return SendClientMessageEx(playerid, COLOR_GREY, "Valid vehicle IDs run from 1 to 2000.");
		if(seatid < 0 || seatid > 3) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid Seat ID!");
		else if(IsSeatAvailable(iVehID, seatid)) IsPlayerEntering{playerid} = true, PutPlayerInVehicle(playerid, iVehID, seatid), SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
		else SendClientMessageEx(playerid, COLOR_GREY, "That seat is occupied.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:gotocar(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new carid;
		if(sscanf(params, "d", carid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotocar [carid]");

		new Float:cwx2,Float:cwy2,Float:cwz2;
		GetVehiclePos(carid, cwx2, cwy2, cwz2);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, cwx2, cwy2, cwz2);
		}
		SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:seteventpos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4)
	{
		if(EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 4)
		{
			new string[128];

			GetPlayerPos(playerid, EventKernel[EventPositionX], EventKernel[EventPositionY], EventKernel[EventPositionZ]);
			EventKernel[EventInterior] = GetPlayerInterior(playerid);
			EventKernel[EventWorld] = GetPlayerVirtualWorld(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event position, type /seteventinfo to change the event properties.");
			EventKernel[EventJoinStaff] = 1;
			format(string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s has started an event, type /eventstaff if you want to be in the event staff.", GetPlayerNameEx(playerid) );
			ABroadCast(COLOR_YELLOW, string, 1);
			CBroadCast(COLOR_YELLOW, string, 2);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You are not making an event, or you're not the correct admin level.");
		}
	}
	return 1;
}

CMD:seteventtype(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4)
	{
		if(EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 4)
		{
			if(isnull(params))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /seteventtype [type]");
				SendClientMessageEx(playerid, COLOR_GREY, "Available names: DM, TDM, Infection");
				return 1;
			}

			if(strcmp(params,"dm",true) == 0)
			{
				EventKernel[ EventType ] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to DM.");
			}
			else if(strcmp(params,"tdm",true) == 0)
			{
				EventKernel[ EventType ] = 2;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to TDM.");
			}
			else if(strcmp(params,"race",true) == 0)
			{
				EventKernel[ EventType ] = 3;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to Race.");
			}
			else if(strcmp(params,"infection",true) == 0)
			{
				EventKernel[ EventType ] = 4;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to infection.");
			}
			else if(strcmp(params,"none",true) == 0)
			{
				EventKernel[ EventType ] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to None.");
			}
		}
	}
	return 1;
}

CMD:editevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4)
	{
		if(EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 4)
		{
			new choice[32], opstring[64];
			if(EventKernel[EventType] == 1)
			{
			    if(sscanf(params, "s[32]S[64]", choice, opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent [name]");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: Jointext, Limit, Health, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					return 1;
				}
			}
			else if(EventKernel[EventType] == 2)
			{
			    if(sscanf(params, "s[32]S[64]", choice, opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent [name]");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: Jointext, Limit, CustomInterior, Team1Skin, Team2Skin, Team1Color, Team2Color");
					SendClientMessageEx(playerid, COLOR_GREY, "Team1Spawn, Team2Spawn, Health, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					return 1;
				}
			}
			else if(EventKernel[EventType] == 3)
			{
			    if(sscanf(params, "s[32]S("")[64]", choice, opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent [name]");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: Jointext, Limit, Health, Hours, CheckPoints, RaceType(Future Development), OnFoot(0/1)");
					SendClientMessageEx(playerid, COLOR_GREY, "Relay For Life Note: Set hours to something between 1-5 and don't touch the limit!");
					SendClientMessageEx(playerid, COLOR_GREY, "Relay For Life Note: Enable OnFoot!");
					return 1;
				}
			}
			else if(EventKernel[EventType] == 4)
			{
			    if(sscanf(params, "s[32]S[64]", choice, opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent [name]");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: Jointext, Limit, Health, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You need to set the event type first!");
				return 1;
			}

			if(strcmp(choice, "jointext",true) == 0)
			{
				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent jointext [text]");
					return 1;
				}
				strmid(EventKernel[EventInfo], opstring, 0, strlen(opstring), 64);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event join text.");
			}
			else if(strcmp(choice, "health", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 3 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent health [health]");
					return 1;
				}
				new Float: health;
				health = floatstr(opstring);
				EventKernel[EventHealth] = health;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event health.");
			}
			else if(strcmp(choice, "armor", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent armor [armor]");
					return 1;
				}
				new Float: armor;
				armor = floatstr(opstring);
				if(armor == 100) armor = 99;
				EventKernel[EventArmor] = armor;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event armor.");
			}
			else if(strcmp(choice, "team1skin", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent team1skin [skinid]");
					return 1;
				}

				new skin;
				skin = strval(opstring);
				EventKernel[EventTeamSkin][0] = skin;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 1 skin.");
			}
			else if(strcmp(choice, "team2skin", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent team2skin [skinid]");
					return 1;
				}

				new skin;
				skin = strval(opstring);
				EventKernel[EventTeamSkin][1] = skin;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 2 skin.");
			}
			else if(strcmp(choice, "team1color", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!strlen(opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent team1color [color]");
					SendClientMessageEx(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessageEx(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				EventKernel[EventTeamColor][0] = GetColorCode(opstring);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 1 color.");
			}
			else if(strcmp(choice, "team2color", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!strlen(opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent team2color [color]");
					SendClientMessageEx(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessageEx(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				EventKernel[EventTeamColor][1] = GetColorCode(opstring);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 2 color.");
			}
			else if(strcmp(choice, "team1spawn", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}
				GetPlayerPos(playerid, EventKernel[ EventTeamPosX1 ], EventKernel[ EventTeamPosY1 ], EventKernel[ EventTeamPosZ1 ] );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted team 1's spawn position.");
			}
			else if(strcmp(choice, "team2spawn", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This feature is not available for this event type.");
					return 1;
				}
				GetPlayerPos(playerid, EventKernel[ EventTeamPosX2 ], EventKernel[ EventTeamPosY2 ], EventKernel[ EventTeamPosZ2 ]);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted team 2's spawn position.");
			}
			else if(strcmp(choice, "limit", true) == 0)
			{
			    if(EventKernel[EventTime] != 0)
			        return SendClientMessageEx(playerid, COLOR_GRAD2, "This feature is not available for this event, everyone is free to join. If you want to enable this please set the hours to 0.");
				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent limit [limit 0-60]");
					return 1;
				}

				new limit;
				limit = strval(opstring);
				if(limit < 0 || limit > 120) return SendClientMessageEx(playerid, COLOR_RED, "You cannot adjust the event limit higher than 120 or below 0");
				EventKernel[EventLimit] = limit;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the players in event limit.");
			}
			else if(strcmp(choice, "hours", true) == 0)
			{
			    if(EventKernel[EventType] != 3)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This feature is not available for this event type.");
					return 1;
				}
				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent hours [hours 0-5]");
					return 1;
				}

				new hours, seconds;
				hours = strval(opstring);
				if(hours < 0 || hours > 5) return SendClientMessageEx(playerid, COLOR_RED, "You cannot adjust the event hours higher than 5 or below 0");
				seconds = hours*3600;
				EventKernel[EventTime] = seconds;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event hours that the event will be active for, timer will start once you fully start the event.");
                SendClientMessageEx(playerid, COLOR_GREY, "NOTE: If you set the event hours to 0 the event will finish once the last racer goes into the last checkpoint.");
				if(hours != 0)
					SendClientMessageEx(playerid, COLOR_YELLOW, "The feature players in event limit(/editevent limit) is now disabled since you changed the hours more than 0.");
			}
   			else if(strcmp(choice, "checkpoints", true) == 0)
			{
				if(EventKernel[EventType] != 3)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This feature is not available for this event type.");
					return 1;
				}
				ConfigEventCPs[playerid][0] = 1;
				ConfigEventCPs[playerid][1] = 0;
				ConfigEventCPs[playerid][2] = 0;
				ConfigEventCPId[playerid] = 0;
				new string[279];
				format(string,sizeof(string),"Welcome to the race checkpoint configuration system!\nThis is a quick guide on the steps you need to follow to successfully get the race checkpoints done.\nFirst and most important you need to remember to make the checkpoints in order, from the start line to the end line.");
				ShowPlayerDialog(playerid,RCPINTRO,DIALOG_STYLE_MSGBOX,"Race Checkpoints Introduction",string,"Next","Skip");
			}
			else if(strcmp(choice, "onfoot", true) == 0)
			{
				if(EventKernel[EventFootRace])
				{
				    EventKernel[EventFootRace] = 0;
					SendClientMessageEx(playerid, COLOR_GRAD2, "You have toggled off the onfoot feature, people can use vehicles(Future development, please don't use not working proprely)");
				}
				else {
				    EventKernel[EventFootRace] = 1;
					SendClientMessageEx(playerid, COLOR_GRAD2, "You have toggled on the onfoot feature, people cannot use vehicles.");
				}
			}
			else if(strcmp(choice, "gun1", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][0] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 1.");
			}
			else if(strcmp(choice, "gun2", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][1] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 2.");
			}
			else if(strcmp(choice, "gun3", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][2] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 3.");
			}
			else if(strcmp(choice, "gun4", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][3] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 4.");
			}
			else if(strcmp(choice, "gun5", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][4] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 5.");
			}
			else if(strcmp(choice, "custominterior", true) == 0)
			{
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent custominterior [0/1]");
				
				EventKernel[EventCustomInterior] = strval(opstring);
				
				new szstring[128];
				format(szstring, sizeof(szstring), "You have set the Custom Interior Value to %d.", strval(opstring));
				SendClientMessageEx(playerid, COLOR_WHITE, szstring);
			}
		}
	}
	return 1;
}

CMD:seteventviponly(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4)
	{
		if(EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 4)
		{
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /seteventviponly [0/1]");

			if(PlayerInfo[playerid][pDonateRank] == 5 && PlayerInfo[playerid][pAdmin] == 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Error: You're not allowed to change this value!");
				return 1;
			}

			if(strcmp(params,"0",true) == 0)
			{
				EventKernel[ VipOnly ] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to not VIP Only.");
			}
			else if(strcmp(params,"1",true) == 0)
			{
				EventKernel[ VipOnly ] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to VIP Only.");
			}

		}
	}
	return 1;
}

CMD:seteventinfo(playerid, params[])
{
	if( PlayerInfo[ playerid ][ pAdmin ] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4)
	{
		if( EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 4 )
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /seteventtype /editevent /seteventviponly (once ready, type /startevent)");
			return 1;
		}
	}
	return 1;
}

CMD:endevent(playerid, params[])
{
	new Float: health, Float:armor;
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventKernel[EventCreator] == playerid)
	{
		if(EventKernel[EventStatus] != 0)
		{
			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if( GetPVarInt( i, "eventStaff" ) == 1)
					{
						ResetPlayerWeapons( i );
						DeletePVar(i, "EventToken");
						SetPlayerWeapons(i);
						SetPlayerToTeamColor(i);
						SetPlayerSkin(i, PlayerInfo[i][pModel]);
						SetPlayerPos(i,EventFloats[i][1],EventFloats[i][2],EventFloats[i][3]);
						SetPlayerVirtualWorld(i, EventLastVW[i]);
						SetPlayerFacingAngle(i, EventFloats[i][0]);
						SetPlayerInterior(i,EventLastInt[i]);
						Player_StreamPrep(i, EventFloats[i][1],EventFloats[i][2],EventFloats[i][3], FREEZE_TIME);
						if(EventKernel[EventType] == 4)
						{
							if(GetPVarType(i, "pEventZombie")) DeletePVar(i, "pEventZombie");
							SetPlayerToTeamColor(i);
						}
						for(new d = 0; d < 6; d++)
						{
							EventFloats[i][d] = 0.0;
						}
						EventLastVW[i] = 0;
						EventLastInt[i] = 0;
						RemovePlayerWeapon(i, 38);
						health = GetPVarFloat(i, "pPreGodHealth");
						SetPlayerHealth(i,health);
						armor = GetPVarFloat(i, "pPreGodArmor");
						SetPlayerArmor(i, armor);
						DeletePVar(i, "pPreGodHealth");
						DeletePVar(i, "pPreGodArmor");
						SetPVarInt(i, "eventStaff", 0);
						SendClientMessageEx( i, COLOR_YELLOW, "You have been removed from the event as it has been terminated by an administrator." );
					}	
					else if( GetPVarInt( i, "EventToken" ) == 1 )
					{
						if(EventKernel[EventType] == 3)  {
							if(IsValidDynamic3DTextLabel(RFLTeamN3D[playerid])) {
								DestroyDynamic3DTextLabel(RFLTeamN3D[playerid]);
							}
							DisablePlayerCheckpoint(i);
						} 
						else if(EventKernel[EventType] == 4) {
							if(GetPVarType(i, "pEventZombie")) DeletePVar(i, "pEventZombie");
						}
						ResetPlayerWeapons( i );
						SetPlayerWeapons(i);
						SetPlayerToTeamColor(i);
						SetPlayerSkin(i, PlayerInfo[i][pModel]);
						SetPlayerPos(i,EventFloats[i][1],EventFloats[i][2],EventFloats[i][3]);
						Player_StreamPrep(i, EventFloats[i][1],EventFloats[i][2],EventFloats[i][3], FREEZE_TIME);
						SetPlayerVirtualWorld(i, EventLastVW[i]);
						SetPlayerFacingAngle(i, EventFloats[i][0]);
						SetPlayerInterior(i,EventLastInt[i]);
						SetPlayerHealth(i, EventFloats[i][4]);
						if(EventFloats[i][5] > 0) {
							SetPlayerArmor(i, EventFloats[i][5]);
						}
						for(new d = 0; d < 6; d++)
						{
							EventFloats[i][d] = 0.0;
						}
						EventLastVW[i] = 0;
						EventLastInt[i] = 0;
						DeletePVar(i, "EventToken");
						SendClientMessageEx( i, COLOR_YELLOW, "You have been removed from the event as it has been terminated by an administrator." );
					}
				}	
			}
			EventKernel[ EventPositionX ] = 0;
			EventKernel[ EventPositionY ] = 0;
			EventKernel[ EventPositionZ ] = 0;
			EventKernel[ EventTeamPosX1 ] = 0;
			EventKernel[ EventTeamPosY1 ] = 0;
			EventKernel[ EventTeamPosZ1 ] = 0;
			EventKernel[ EventTeamPosX2 ] = 0;
			EventKernel[ EventTeamPosY2 ] = 0;
			EventKernel[ EventTeamPosZ2 ] = 0;
			EventKernel[ EventStatus ] = 0;
			EventKernel[ EventType ] = 0;
			EventKernel[ EventHealth ] = 0;
			EventKernel[ EventLimit ] = 0;
			EventKernel[ EventPlayers ] = 0;
			EventKernel[ EventTime ] = 0;
			EventKernel[ EventWeapons ][0] = 0;
			EventKernel[ EventWeapons ][1] = 0;
			EventKernel[ EventWeapons ][2] = 0;
			EventKernel[ EventWeapons ][3] = 0;
			EventKernel[ EventWeapons ][4] = 0;
			for(new i = 0; i < 20; i++)
			{
				EventRCPU[i] = 0;
				EventRCPX[i] = 0.0;
				EventRCPY[i] = 0.0;
				EventRCPZ[i] = 0.0;
				EventRCPS[i] = 0.0;
				EventRCPT[i] = 0;
			}
			EventKernel[EventCreator] = INVALID_PLAYER_ID;
			EventKernel[VipOnly] = 0;
			EventKernel[EventJoinStaff] = 0;
			for(new i; i < sizeof(EventKernel[EventStaff]); i++) {
				EventKernel[EventStaff][i] = INVALID_PLAYER_ID;
			}	
			EventKernel[EventCustomInterior] = 0;
			SendClientMessageToAllEx( COLOR_LIGHTBLUE, "* The event has been finished by an Administrator." );
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There isn't an active event at the moment." );
		}
	}
	return 1;
}
 
CMD:startevent(playerid, params[])
{
	if( PlayerInfo[ playerid ][ pAdmin ] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4)
	{
		new string[128];

		if( EventKernel[ EventStatus ] == 0)
		{
			if(PlayerInfo[playerid][pAdmin] >= 4)
			{
				if(EventKernel[ EventHealth ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set the event health!" );
					return 1;
				}
				if((EventKernel[ EventPositionX ] == 0 || EventKernel[ EventPositionY ] == 0 || EventKernel[ EventPositionZ ] == 0) && EventKernel[EventType] != 3)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set the event position!" );
					return 1;
				}
				if( (EventKernel[ EventTeamPosX1 ] == 0 || EventKernel[ EventTeamPosY1 ] == 0 || EventKernel[ EventTeamPosZ1 ] == 0) && EventKernel[ EventType ] == 2)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set team 1's spawn position!" );
					return 1;
				}
				if( (EventKernel[ EventTeamPosX2 ] == 0 || EventKernel[ EventTeamPosY2 ] == 0 || EventKernel[ EventTeamPosZ2 ] == 0) && EventKernel[ EventType ] == 2)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set team 2's spawn position!" );
					return 1;
				}
				if(EventKernel[ EventLimit ] == 0)
				{
					EventKernel[ EventLimit ] = 60;
				}
				EventKernel[ EventStatus ] = 1;
				SendClientMessageEx( playerid, COLOR_GRAD2, "You have started an event, use /announceevent to announce the event to the whole server." );
				//foreach(new i: Player)
				for(new i = 0; i < MAX_PLAYERS; ++i)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerInfo[i][pDonateRank] >= 3)
						{
							SendClientMessageEx(i, COLOR_YELLOW, "* Gold+ VIP feature: An event has been started! /joinevent to join early");
						}
					}	
				}

				return 1;
			}
			else if( EventKernel[EventCreator] == playerid)
			{
				if(EventKernel[ EventHealth ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set the event health!" );
					return 1;
				}
				if((EventKernel[ EventPositionX ] == 0 || EventKernel[ EventPositionY ] == 0 || EventKernel[ EventPositionZ ] == 0) && EventKernel[EventType] != 3)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set the event position!" );
					return 1;
				}
				if(EventKernel[ EventLimit ] == 0)
				{
					EventKernel[ EventLimit ] = 60;
				}
				EventKernel[ EventStartRequest ] = 1;
				SendClientMessageEx( playerid, COLOR_GRAD2, "You have requested the event to start, please wait until a Senior Admin approves it." );
				if(EventKernel[EventType] != 3)
				{
					format( string, sizeof( string ), "Event Position: x:%f y:%f z:%f.", EventKernel[EventPositionX], EventKernel[EventPositionY], EventKernel[EventPositionZ] );
					ABroadCast( COLOR_GRAD2, string, 4 );
					format( string, sizeof( string ), "Event Jointext: %s EventLimit: %d.", EventKernel[EventInfo], EventKernel[EventLimit] );
					ABroadCast( COLOR_GRAD2, string, 4 );
					format( string, sizeof( string ), "Event Health: %f Event Armor: %f.", EventKernel[EventHealth], EventKernel[EventArmor] );
					ABroadCast( COLOR_GRAD2, string, 4 );
					if(EventKernel[EventWeapons][0] != 0)
					{
						format( string, sizeof( string ), "Event Gun1: %d.", EventKernel[EventWeapons][0] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					if(EventKernel[EventWeapons][1] != 0)
					{
						format( string, sizeof( string ), "Event Gun2: %d.", EventKernel[EventWeapons][1] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					if(EventKernel[EventWeapons][2] != 0)
					{
						format( string, sizeof( string ), "Event Gun3: %d.", EventKernel[EventWeapons][2] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					if(EventKernel[EventWeapons][3] != 0)
					{
						format( string, sizeof( string ), "Event Gun4: %d.", EventKernel[EventWeapons][3] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					if(EventKernel[EventWeapons][4] != 0)
					{
      					format( string, sizeof( string ), "Event Gun5: %d.", EventKernel[EventWeapons][4] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					if(EventKernel[EventType] == 2)
					{
						format( string, sizeof( string ), "Event Team 1 Color: %d Event Team 1 Skin: %d.", EventKernel[EventTeamColor][0], EventKernel[EventTeamSkin][0] );
						ABroadCast( COLOR_GRAD2, string, 4 );
						format( string, sizeof( string ), "Event Team 2 Color: %d Event Team 2 Skin: %d.", EventKernel[EventTeamColor][1], EventKernel[EventTeamSkin][1] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
				}
				else {
				    if(EventKernel[EventTime] != 0) {
				    	format( string, sizeof( string ), "Event Jointext: %s EventTimeLimit: %d.", EventKernel[EventInfo], EventKernel[EventTime] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					else {
						format( string, sizeof( string ), "Event Jointext: %s EventLimit: %d.", EventKernel[EventInfo], EventKernel[EventLimit] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					ABroadCast( COLOR_GRAD2, "This is a race type event, to view the race checkpoints use /edit checkpoints", 4 );
				}
				format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s would like to start the event, do you approve? /approveevent or /denyevent.", GetPlayerNameEx(playerid) );
				ABroadCast( COLOR_YELLOW, string, 4 );
			}
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
		}
	}

	return 1;
}

CMD:beginevent(playerid, params[])
{
	if( PlayerInfo[ playerid ][ pAdmin ] >= 4 || EventKernel[EventCreator] == playerid)
	{
		if( EventKernel[ EventStatus ] == 3 )
		{
		    if(EventKernel[EventType] == 3 && EventKernel[EventTime] != 0) return SendClientMessageEx(playerid, COLOR_RED, "ERROR: This feature is not available with the configuration setup for this event.");
			EventKernel[ EventStatus ] = 4;
   			new zombiemade;
			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if( GetPVarType( i, "EventToken" ) == 1 )
					{
						if( EventKernel[ EventType ] == 1 )
						{
							//GivePlayerEventWeapons( i );
							SendClientMessageEx( i, COLOR_LIGHTBLUE, "GO! The Event has started." );
							if(GetPVarInt(i, "eventStaff") < 1) {
								SetPlayerHealth( i, EventKernel[ EventHealth ] );
							}	
							if(EventKernel[EventArmor] > 0 && GetPVarInt(i, "eventStaff") < 1) {
								SetPlayerArmor( i, EventKernel[ EventArmor ]);
							}
							GivePlayerEventWeapons( i );
						}
						else if( EventKernel[ EventType ] == 2 )
						{
							//GivePlayerEventWeapons( i );
							SendClientMessageEx( i, COLOR_LIGHTBLUE, "GO! The Event has started." );
							if(GetPVarInt(i, "eventStaff") < 1) {
								SetPlayerHealth( i, EventKernel[ EventHealth ] );
							}
							if(EventKernel[EventArmor] > 0 && GetPVarInt(i, "eventStaff") < 1) {
								SetPlayerArmor( i, EventKernel[ EventArmor ]);
							}	
							GivePlayerEventWeapons( i );
						}
						else if( EventKernel[ EventType ] == 4 )
						{
							if(zombiemade == 0)
							{
								SendClientMessageEx(playerid, COLOR_WHITE, "You are a zombie! Use /bite to infect others");
								SetPlayerHealth(playerid, 30);
								RemoveArmor(playerid);
								SetPlayerSkin(playerid, 134);
								SetPlayerColor(playerid, 0x0BC43600);
								SetPVarInt(playerid, "pEventZombie", 1);
								zombiemade=1;
								continue;
							}
							else
							{
								//GivePlayerEventWeapons( i );
								SendClientMessageEx( i, COLOR_LIGHTBLUE, "The Event has started, kill the zombies (green names!)" );
								if(GetPVarInt(i, "eventStaff") < 1) {
									SetPlayerHealth( i, EventKernel[ EventHealth ] );
								}	
								if(EventKernel[EventArmor] > 0 && GetPVarInt(i, "eventStaff") < 1) {
									SetPlayerArmor( i, EventKernel[ EventArmor ]);
								}
								GivePlayerEventWeapons( i );
							}
						}
					}
					else
					{
						SendClientMessageEx( i, COLOR_WHITE, "The event has now started. If you wish to join next time, please use /joinevent." );
					}
				}	
			}
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
		}
	}
	return 1;
}

CMD:announceevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventKernel[EventCreator] == playerid)
	{
		if( EventKernel[ EventStatus ] == 1)
		{
			EventKernel[ EventStatus ] = 2;
			SendClientMessageEx(playerid, COLOR_GRAD2, "To lock the event use /lockevent");
			if(EventKernel[VipOnly] == 1) SendClientMessageToAllEx( COLOR_LIGHTBLUE, "* A VIP only event has been started by an Administrator, VIP's type /joinevent to participate." );
			else SendClientMessageToAllEx( COLOR_LIGHTBLUE, "* An event has been started by an Administrator, type /joinevent to participate." );
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
		}
	}
	return 1;
}

CMD:lockevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventKernel[EventCreator] == playerid)
	{
		if( EventKernel[ EventStatus ] == 2 )
		{
		    if(EventKernel[EventType] == 3 && EventKernel[EventTime] != 0) return SendClientMessageEx(playerid, COLOR_RED, "ERROR: This feature is not available with the configuration setup for this event.");
			EventKernel[ EventStatus ] = 3;
			SendClientMessageEx( playerid, COLOR_GRAD2, "You have locked an event, use /beginevent to officially start the event." );
			SendClientMessageToAllEx( COLOR_LIGHTBLUE, "* The event has been locked by an Administrator." );
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
		}
	}
	return 1;
}

CMD:gotoid(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotoid [player]");

	new Float:plocx,Float:plocy,Float:plocz;
	if (IsPlayerConnected(giveplayerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That person is spectating someone.");
				return 1;
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can not do this while spectating.");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pAdmin] == 99999 && !GetPVarType(giveplayerid, "EATeleportable")) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot teleport to them");
			GetPlayerPos(giveplayerid, plocx, plocy, plocz);
			SetPlayerVirtualWorld(playerid, PlayerInfo[giveplayerid][pVW]);
			Streamer_UpdateEx(playerid, plocx, plocy, plocz);

			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid,plocx,plocy+2, plocz);
				SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			}

			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		}

	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:sendtoid(playerid, params[])
{
	new string[128];
	new giveplayerid;
	new targetplayerid;
	if(sscanf(params, "uu", giveplayerid, targetplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sendtoid [player] [target player]");

	new Float:plocx,Float:plocy,Float:plocz;
	if (IsPlayerConnected(giveplayerid) && IsPlayerConnected(targetplayerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 3)
		{
			if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING || GetPlayerState(targetplayerid) == PLAYER_STATE_SPECTATING)
			{
				return SendClientMessageEx(playerid, COLOR_GRAD2, "That person is spectating someone.");
			}
			if(giveplayerid == playerid)
			{
				return SendClientMessageEx(playerid, COLOR_GRAD2, "Use /gotoid to teleport instead!");
			}
			if(targetplayerid == playerid)
			{
				return SendClientMessageEx(playerid, COLOR_GRAD2, "Use /gethere to teleport instead!");
			}
			if(PlayerInfo[targetplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin])
			{
				return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this command on a Admin with the same/greater Administrative Level than you.");
			}
			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
			    SetPVarInt(playerid, "tempPBP", giveplayerid);
			    format(string, sizeof(string), "%s (ID: %d) is currently in an active Paintball game.\n\nDo you want to force this player out?", GetPlayerNameEx(giveplayerid), giveplayerid);
			    return ShowPlayerDialog(playerid, PBFORCE, DIALOG_STYLE_MSGBOX, "Paintball", string, "Yes", "No");
			}
			if(PlayerInfo[giveplayerid][pAdmin] == 99999 && !GetPVarType(giveplayerid, "EATeleportable")) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot teleport them");
			if(PlayerInfo[targetplayerid][pAdmin] == 99999 && !GetPVarType(targetplayerid, "EATeleportable")) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot teleport to them");
			GetPlayerPos(targetplayerid, plocx, plocy, plocz);
			SetPlayerVirtualWorld(giveplayerid, PlayerInfo[targetplayerid][pVW]);
			Streamer_UpdateEx(giveplayerid, plocx, plocy, plocz);
			DeletePVar(giveplayerid, "BusinessesID");
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid,plocx,plocy+2, plocz);
				SetPlayerInterior(giveplayerid, GetPlayerInterior(targetplayerid));
				SetPlayerVirtualWorld(giveplayerid, GetPlayerVirtualWorld(targetplayerid));
			}

			format(string, sizeof(string), "You have been teleported to %s", GetPlayerNameEx(targetplayerid));
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, string);
			format(string, sizeof(string), "You have teleported %s to %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(targetplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD1, string);
		}
		else
		{
			return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		}

	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:gethere(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gethere [player]");

	new Float:plocx,Float:plocy,Float:plocz;
	if (IsPlayerConnected(giveplayerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}
			if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That person is spectating someone.");
				return 1;
			}
			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
			    new string[128];
			    SetPVarInt(playerid, "tempPBP", giveplayerid);
			    format(string, sizeof(string), "%s (ID: %d) is currently in an active Paintball game.\n\nDo you want to force this player out?", GetPlayerNameEx(giveplayerid), giveplayerid);
			    ShowPlayerDialog(playerid, PBFORCE, DIALOG_STYLE_MSGBOX, "Paintball", string, "Yes", "No");
			    return 1;
			}
			GetPlayerPos(playerid, plocx, plocy, plocz);
			SetPlayerVirtualWorld(giveplayerid, PlayerInfo[playerid][pVW]);
			Streamer_UpdateEx(giveplayerid, plocx, plocy, plocz);
			DeletePVar(giveplayerid, "BusinessesID");
			if (GetPlayerState(giveplayerid) == 2)
			{
				fVehSpeed[giveplayerid] = 0.0;
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
				LinkVehicleToInterior(GetPlayerVehicleID(giveplayerid), GetPlayerInterior(playerid));
				SetPlayerInterior(giveplayerid, GetPlayerInterior(playerid));
				SetVehicleVirtualWorld(GetPlayerVehicleID(giveplayerid), GetPlayerVirtualWorld(playerid));
				SetPlayerVirtualWorld(giveplayerid, GetPlayerVirtualWorld(playerid));
			}
			else
			{
				SetPlayerPos(giveplayerid,plocx,plocy+2, plocz);
				SetPlayerInterior(giveplayerid, GetPlayerInterior(playerid));
				SetPlayerVirtualWorld(giveplayerid, GetPlayerVirtualWorld(playerid));
			}

			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		}

	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:getcar(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new carid;
		if(sscanf(params, "d", carid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /getcar [carid]");
		new Float:plocx,Float:plocy,Float:plocz;

		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetVehiclePos(carid,plocx,plocy+4, plocz);
		SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:lastcar(playerid, params[]) return cmd_oldcar(playerid, params);

CMD:oldcar(playerid, params[])
{
	new string[128];
	if(!gLastCar[playerid]) return SendClientMessageEx(playerid, COLOR_GREY, "You have not driven a vehicle yet.");
	format(string, sizeof(string), "Your last driven vehicle was a %s (Model: %d -- ID: %d)", GetVehicleName(gLastCar[playerid]), GetVehicleModel(gLastCar[playerid]), gLastCar[playerid]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:respawnvipcars(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		for(new i = 0; i < sizeof(VIPVehicles); i++)
		{
			if(!IsVehicleOccupied(VIPVehicles[i]))
			{
				SetVehicleVirtualWorld(VIPVehicles[i], 0);
				LinkVehicleToInterior(VIPVehicles[i], 0);
				SetVehicleToRespawn(VIPVehicles[i]);
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You have respawned all unoccupied VIP Vehicles.");
	}
	return 1;
}

CMD:respawncars(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], radius;
		if(sscanf(params, "d", radius)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /respawncars [radius]");

		if(radius < 1 || radius > 40)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Radius must be higher than 0 and lower than 41!");
			return 1;
		}
		RespawnNearbyVehicles(playerid, radius);
		format(string, sizeof(string), "You have respawned all vehicles within a radius of %d.", radius);
		SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:respawncar(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], carid;
		if(sscanf(params, "d", carid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /respawncar [carid]");

		SetVehicleToRespawn(carid);
		format(string, sizeof(string), "You have respawned vehicle ID %d.", carid);
		SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:takeadminweapons(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /takeadminweapons [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			for(new s = 0; s < 12; s++)
			{
				if(PlayerInfo[giveplayerid][pAGuns][s] != 0)
				{
					RemovePlayerWeapon(giveplayerid, PlayerInfo[giveplayerid][pAGuns][s]);
				}
			}
			format(string,sizeof(string),"You have removed %s's admin spawned weapons.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:gotoco(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new Float: pos[3], int;
		if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotoco [x coordinate] [y coordinate] [z coordinate] [interior]");

		SendClientMessageEx(playerid, COLOR_GRAD2, "You have been teleported to the coordinates specified.");
		SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		SetPlayerInterior(playerid, int);
	}
	return 1;
}

CMD:setweather(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}

	new weather;
	if(sscanf(params, "d", weather)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setweather [weatherid]");

	if(weather < 0||weather > 45) { SendClientMessageEx(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45!"); return 1; }
	SetWeather(weather);
	gWeather = weather;
	SendClientMessageEx(playerid, COLOR_GREY, "Weather set to everyone!");
	return 1;
}

CMD:setmoney(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setmoney [player] [money]");
		if(IsPlayerConnected(giveplayerid))
		{
			ResetPlayerCash(giveplayerid);
			GivePlayerCash(giveplayerid, money);
			format(string, sizeof(string), "You have set %s's money to $%d !",GetPlayerNameEx(giveplayerid),money);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has set %s's to $%d (/setmoney)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid),money);
			Log("logs/stats.log", string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:givetokens(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] > 0)
	{
		new string[128], giveplayerid, amount;
		if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givetokens [player] [amount]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pDonateRank] > 0)
			{
				if(PlayerInfo[playerid][pTokens] >= amount)
				{
					if(amount < 1)
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give that amount!");
						return 1;
					}
					if(giveplayerid == playerid)
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give tokens to yourself!");
						return 1;
					}
					if (!ProxDetectorS(5.0, playerid, giveplayerid))
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
						return 1;
					}
					PlayerInfo[playerid][pTokens] -= amount;
					PlayerInfo[giveplayerid][pTokens] += amount;

					format(string, sizeof(string), "You have received %d Tokens from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have given %s %d Tokens.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s has given %s some Tokens.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "You do not have that many tokens!");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "That person is not a VIP!");
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not a VIP!");
	}
	return 1;
}

CMD:settoken(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid, amount;
		if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /settoken [player] [amount]");

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pTokens] = amount;
			format(string, sizeof(string), "You have set %s's tokens to %d !",GetPlayerNameEx(giveplayerid),amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "VIP: Admin %s has set your tokens to %d.",GetPlayerNameEx(playerid),amount);
			SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);

			format(string, sizeof(string), "%s has set %s's tokens to %d.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),amount);
			Log("logs/stats.log", string);

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:givetoken(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid, amount;
		if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givetoken [player] [amount]");

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pTokens] += amount;
			format(string, sizeof(string), "You have given %s %d tokens !",GetPlayerNameEx(giveplayerid),amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "VIP: Admin %s has given you %d tokens.",GetPlayerNameEx(playerid),amount);
			SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);

			format(string, sizeof(string), "%s has given %s %d tokens.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),amount);
			Log("logs/stats.log", string);

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:givemoney(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givemoney [player] [money]");

		if(money < 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot give less than $1!");
		if(IsPlayerConnected(giveplayerid))
		{
			GivePlayerCash(giveplayerid, money);
			format(string, sizeof(string), "You have given %s $%s !",GetPlayerNameEx(giveplayerid), number_format(money));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has given %s $%s (/givemoney)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), number_format(money));
			Log("logs/stats.log", string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:getpt(playerid, params[])
{
	if(IsAMedic(playerid))
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /getpt(patient) [player]");

		if(IsPlayerConnected(giveplayerid))
		{
		    if (giveplayerid == playerid)
		    {
		        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You cannot accept your own Emergency Dispatch call!");
				return 1;
		    }
			if(GetPVarInt(giveplayerid,"MedicCall") == 1)
			{
				if(PlayerInfo[giveplayerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command on jailed players.");
				format(string, sizeof(string), "EMS Driver %s has accepted the Emergency Dispatch call for (%d) %s.",GetPlayerNameEx(playerid),giveplayerid,GetPlayerNameEx(giveplayerid));
				SendGroupMessage(3, TEAM_MED_COLOR, string);
				format(string, sizeof(string), "* You have accepted EMS Call from %s, you will see the marker until you have reached it.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* EMS Driver %s has accepted your EMS Call; please wait at your current position.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				GameTextForPlayer(playerid, "~w~EMS Caller~n~~r~Go to the red marker.", 5000, 1);
				EMSCallTime[playerid] = 1;
				EMSAccepted[playerid] = giveplayerid;
				SetPVarInt(giveplayerid, "EMSAttempt", 1);
				PlayerInfo[playerid][pCallsAccepted]++;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "The person has not requested any EMS attention!");
			}
		}
	}
	return 1;
}

CMD:movept(playerid, params[])
{
	if(IsAMedic(playerid))
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /movepatient [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid,"Injured") == 1)
			{
				if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command while in a vehicle.");
				if(PlayerInfo[giveplayerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command on jailed players.");
				if(GetPVarInt(giveplayerid, "OnStretcher") == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "The person is already on a stretcher, you can't do this right now!");
					return 1;
				}

				new Float:mX, Float:mY, Float:mZ;
				GetPlayerPos(giveplayerid, mX, mY, mZ);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, mX, mY, mZ))
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "You have to be close to the patient to be able to move them!");
					return 1;
				}
				SendClientMessageEx(playerid, COLOR_GRAD2, "You have 30 seconds to move to another location or you can either press the '{AA3333}FIRE{BFC0C2}' button.");
				format(string, sizeof(string), "* You have been put on a stretcher by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* You have put %s on a stretcher, you may move them now.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s puts %s on a stretcher, tightening the belts securely.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				SetPVarInt(giveplayerid, "OnStretcher", 1);
				SetPVarInt(playerid, "TickEMSMove", SetTimerEx("MoveEMS", 30000, false, "d", playerid));
				SetPVarInt(playerid, "MovingStretcher", giveplayerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "The person has to be injured in-order to move them!");
			}
		}
	}
	return 1;
}

CMD:lockarena(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		return 1;
	}

	new string[128], arenaid;
	if(sscanf(params, "d", arenaid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /lockarena [arenaid]");

	arenaid--;

	if(arenaid < 0 || arenaid > MAX_ARENAS-1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have entered a invalid arenaid.");
		return 1;
	}
	//foreach(new p: Player)
	for(new p = 0; p < MAX_PLAYERS; ++p)
	{
		if(IsPlayerConnected(p))
		{
			new cid = GetPVarInt(p, "IsInArena");
			if(cid == arenaid)
			{
				if(PaintBallArena[cid][pbBidMoney] > 0)
				{
					GivePlayerCash(p,PaintBallArena[cid][pbBidMoney]);
					format(string,sizeof(string),"You have been refunded a total of $%d because of premature closure.",PaintBallArena[cid][pbBidMoney]);
					SendClientMessageEx(p, COLOR_WHITE, string);
				}
				if(arenaid == GetPVarInt(p, "ArenaNumber"))
				{
					switch(PaintBallArena[arenaid][pbGameType])
					{
					case 1:
						{
							if(PlayerInfo[p][pDonateRank] < 3)
							{
								PlayerInfo[p][pPaintTokens] += 3;
								format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",3);
								SendClientMessageEx(p, COLOR_WHITE, string);
							}
						}
					case 2:
						{
							if(PlayerInfo[p][pDonateRank] < 3)
							{
								PlayerInfo[p][pPaintTokens] += 4;
								format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",4);
								SendClientMessageEx(p, COLOR_WHITE, string);
							}
						}
					case 3:
						{
							if(PlayerInfo[p][pDonateRank] < 3)
							{
								PlayerInfo[p][pPaintTokens] += 5;
								format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",5);
								SendClientMessageEx(p, COLOR_WHITE, string);
							}
						}
					case 4:
						{
							if(PlayerInfo[p][pDonateRank] < 3)
							{
								PlayerInfo[p][pPaintTokens] += 5;
								format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",5);
								SendClientMessageEx(p, COLOR_WHITE, string);
							}
						}
					case 5:
						{
							if(PlayerInfo[p][pDonateRank] < 3)
							{
								PlayerInfo[p][pPaintTokens] += 6;
								format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",6);
								SendClientMessageEx(p, COLOR_WHITE, string);
							}
						}
					}
				}
				LeavePaintballArena(p, cid);
			}
		}	
	}
	ResetPaintballArena(arenaid);
	PaintBallArena[arenaid][pbLocked] = 2;
	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has locked %s.", GetPlayerNameEx(playerid),PaintBallArena[arenaid][pbArenaName]);
	ABroadCast(COLOR_YELLOW, string, 2);
	format(string, sizeof(string), "* Admin %s has locked %s (ArenaID: %d) for some short maintenance.", GetPlayerNameEx(playerid),PaintBallArena[arenaid][pbArenaName],arenaid+1);
	SendClientMessageToAllEx(COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:unlockarena(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		return 1;
	}

	new string[128], arenaid;
	if(sscanf(params, "d", arenaid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /unlockarena [arenaid]");

	arenaid--;

	if(arenaid < 0 || arenaid > MAX_ARENAS-1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have entered a invalid arenaid.");
		return 1;
	}
	if(PaintBallArena[arenaid][pbLocked] == 2)
	{
		ResetPaintballArena(arenaid);
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has unlocked %s.", GetPlayerNameEx(playerid),PaintBallArena[arenaid][pbArenaName]);
		ABroadCast(COLOR_YELLOW, string, 2);
		format(string, sizeof(string), "* Admin %s has unlocked %s (ArenaID: %d), you may join/create it now.", GetPlayerNameEx(playerid),PaintBallArena[arenaid][pbArenaName],arenaid+1);
		SendClientMessageToAllEx(COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:givepainttokens(playerid, params[])
{
	new string[128], giveplayerid, amount;
	if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givepainttokens [player] [amount]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] < 4)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
			return 1;
		}
		PlayerInfo[giveplayerid][pPaintTokens] += amount;

		format(string, sizeof(string), "You have received %d Paintball Tokens from Admin %s.", amount, GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have given %s %d Paintbll Tokens.", GetPlayerNameEx(giveplayerid), amount);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has given %s, %d Paintball Tokens.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),amount);
		ABroadCast(COLOR_YELLOW, string, 2);

	}
	return 1;
}

CMD:useexp(playerid, params[])
{
	new string[128];
    if (PlayerInfo[playerid][pEXPToken] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You do not have any Double EXP tokens!");
		return 1;
	}
    PlayerInfo[playerid][pDoubleEXP] += 8;
    PlayerInfo[playerid][pEXPToken]--;
    format(string, sizeof(string), "You have used a Double EXP Token! You now have a total of %d of Double EXP hours!", PlayerInfo[playerid][pDoubleEXP]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
    return 1;
}

CMD:shopexp(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, amount, invoice[32];
	if(sscanf(params, "uds[32]", giveplayerid, amount, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopexp [player] [tokens] [invoice #]");

	PlayerInfo[giveplayerid][pEXPToken] += amount;

	format(string, sizeof(string), "You have received %d Double EXP Token(s) from Shop Tech %s.", amount, GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "[SHOPEXP] %s given %s, %d Double EXP Token(s) - Invoice %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount, invoice);
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:shoptokens(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, amount, invoice[32];
	if(sscanf(params, "uds[32]", giveplayerid, amount, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shoptokens [player] [amount] [invoice #]");

	PlayerInfo[giveplayerid][pPaintTokens] += amount;

	format(string, sizeof(string), "You have received %d Paintball Tokens from Shop Tech %s.", amount, GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "[SHOPTOKENS] %s given %s, %d Paintball Tokens - Invoice %s for %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount, invoice, GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:shopviptokens(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, amount, invoice[32];
	if(sscanf(params, "uds[32]", giveplayerid, amount, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopviptokens [player] [amount] [invoice #]");

	PlayerInfo[giveplayerid][pTokens] += amount;

	format(string, sizeof(string), "You have received %d VIP Tokens from Shop Tech %s.", amount, GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "[SHOPTOKENS] %s given %s, %d VIP Tokens - Invoice %s for %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount, invoice, GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:shopboombox(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new giveplayerid, invoice;
	if(sscanf(params, "ui", giveplayerid, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopboombox [player] [invoice #]");
	new string[128];

	if(PlayerInfo[giveplayerid][pBoombox] == 1)
	{
	    PlayerInfo[giveplayerid][pBoombox] = 0;
    	format(string, sizeof(string), "Your boombox has been taken by Shop Tech %s. ", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "[SHOPBOOMBOX] %s has taken %s boombox - Invoice %d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
		SendClientMessageEx(playerid, COLOR_GRAD1, string);
		Log("logs/shoplog.log", string);
	}
	else
	{
		PlayerInfo[giveplayerid][pBoombox] = 1;
    	format(string, sizeof(string), "You have been given a boombox from Shop Tech %s. ", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "[SHOPBOOMBOX] %s has given %s a boombox - Invoice %d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
		SendClientMessageEx(playerid, COLOR_GRAD1, string);
		Log("logs/shoplog.log", string);
	}
	return 1;
}

CMD:shoptable(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new giveplayerid, invoice;
	if(sscanf(params, "ui", giveplayerid, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shoptable [player] [invoice #]");
	new string[128];

	if(PlayerInfo[giveplayerid][pTable] == 1)
	{
	    PlayerInfo[giveplayerid][pTable] = 0;
    	format(string, sizeof(string), "Your poker table has been taken by Shop Tech %s. ", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "[SHOPPOKERTABLE] %s has taken %s poker table - Invoice %d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
		SendClientMessageEx(playerid, COLOR_GRAD1, string);
		Log("logs/shoplog.log", string);
	}
	else
	{
		PlayerInfo[giveplayerid][pTable] = 1;
    	format(string, sizeof(string), "You have been given a poker table from Shop Tech %s. ", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "[SHOPPOKERTABLE] %s has given %s a poker table - Invoice %d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
		SendClientMessageEx(playerid, COLOR_GRAD1, string);
		Log("logs/shoplog.log", string);
	}
	return 1;
}

CMD:shopfirework(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, amount, invoice[32];
	if(sscanf(params, "uds[32]", giveplayerid, amount, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopfirework [player] [amount] [invoice #]");

	PlayerInfo[giveplayerid][pFirework] += amount;

	format(string, sizeof(string), "You have received %d Fireworks from Shop Tech %s. ", amount, GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "[SHOPFIREWORK] %s given %s %d Firework(s) - Invoice %s for %s. ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount, invoice, GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:placeboombox(playerid, params[])
{
	if(PlayerInfo[playerid][pBoombox] == 1 || PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in an arena!");
		if(WatchingTV[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can not do this while watching TV!");
		if(GetPVarInt(playerid, "Injured") == 1 || PlayerInfo[playerid][pHospital] > 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
		if(PlayerInfo[playerid][pVW] == 0 || PlayerInfo[playerid][pInt] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can only place boomboxes inside interiors.");
		if(GetPVarType(playerid, "pBoomBox")) return SendClientMessageEx(playerid, COLOR_WHITE, "You already have a boombox out, use /destroyboombox.");

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(GetPVarType(i, "pBoomBox"))
				{
					if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPVarFloat(i, "pBoomBoxX"), GetPVarFloat(i, "pBoomBoxY"), GetPVarFloat(i, "pBoomBoxZ")))
					{
						SendClientMessage(playerid, COLOR_WHITE, "You are in range of another boombox, you can't place one here!");
						return 1;
					}
				}
			}	
		}

		new string[128];
		format(string, sizeof(string), "%s has placed a boombox!", GetPlayerNameEx(playerid));
	    ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);

	    new Float:x, Float:y, Float:z, Float:a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
	    x += (2 * floatsin(-a, degrees));
    	y += (2 * floatcos(-a, degrees));
    	z -= 1.0;

	    SetPVarInt(playerid, "pBoomBox", CreateDynamicObject(2103, x, y, z, 0.0, 0.0, 0.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
	    SetPVarFloat(playerid, "pBoomBoxX", x); SetPVarFloat(playerid, "pBoomBoxY", y); SetPVarFloat(playerid, "pBoomBoxZ", z);
		format(string, sizeof(string), "%s's boombox\n{FF0000}/setboombox {FFFF00}or\n{FF0000}/destroyboombox", GetPlayerNameEx(playerid));
	    SetPVarInt(playerid, "pBoomBoxLabel", _:CreateDynamic3DTextLabel(string, COLOR_YELLOW, x, y, z+0.6, 5.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
		SetPVarInt(playerid, "pBoomBoxArea", CreateDynamicSphere(x, y, z, 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
		SetPVarInt(playerid, "pBoomBoxInt", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "pBoomBoxVW", GetPlayerVirtualWorld(playerid));
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a boom box! Buy from one shop.ng-gaming.net");
	}
	return 1;
}

CMD:destroyboombox(playerid, params[])
{
	if(GetPVarType(playerid, "pBoomBox"))
	{
	    DestroyDynamicObject(GetPVarInt(playerid, "pBoomBox"));
	    DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "pBoomBoxLabel"));
	    DeletePVar(playerid, "pBoomBox"); DeletePVar(playerid, "pBoomBoxStation"); DeletePVar(playerid, "pBoomBoxLabel");
	    DeletePVar(playerid, "pBoomBoxX"); DeletePVar(playerid, "pBoomBoxY"); DeletePVar(playerid, "pBoomBoxZ");
	    if(GetPVarType(playerid, "pBoomBoxArea"))
	    {
	        new string[128];
			format(string, sizeof(string), "* %s has destroyed the boombox.", GetPlayerNameEx(playerid));
	        //foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "pBoomBoxArea")))
					{
						StopAudioStreamForPlayerEx(i);
						SendClientMessage(i, COLOR_PURPLE, string);
					}
				}	
			}
	        DeletePVar(playerid, "pBoomBoxArea");
		}
		SendClientMessage(playerid, COLOR_WHITE, "You've destroyed your boombox!");
	}
	else
	{
	    //foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(GetPVarType(i, "pBoomBox"))
				{
					if(GetPVarInt(i, "pBoomBoxVW") == GetPlayerVirtualWorld(playerid) && GetPVarInt(i, "pBoomBoxInt") == GetPlayerInterior(playerid) && IsPlayerInRangeOfPoint(playerid, 5.0, GetPVarFloat(i, "pBoomBoxX"), GetPVarFloat(i, "pBoomBoxY"), GetPVarFloat(i, "pBoomBoxZ")))
					{
						DestroyDynamicObject(GetPVarInt(i, "pBoomBox"));
						DestroyDynamic3DTextLabel(Text3D:GetPVarInt(i, "pBoomBoxLabel"));

						DeletePVar(i, "pBoomBox");
						DeletePVar(i, "pBoomBoxStation");
						DeletePVar(i, "pBoomBoxLabel");
						DeletePVar(i, "pBoomBoxX");
						DeletePVar(i, "pBoomBoxY");
						DeletePVar(i, "pBoomBoxZ");
						DeletePVar(i, "pBoomBoxInt");
						DeletePVar(i, "pBoomBoxVW");

						new string[128];
						if(GetPVarType(i, "pBoomBoxArea"))
						{
							format(string, sizeof(string), "* %s has destroyed the boombox.", GetPlayerNameEx(playerid));
							//foreach(new pi:Player)
							for(new pi = 0; pi < MAX_PLAYERS; ++pi)
							{
								if(IsPlayerConnected(pi))
								{
									if(IsPlayerInDynamicArea(pi, GetPVarInt(i, "pBoomBoxArea")))
									{
										StopAudioStreamForPlayerEx(pi);
										SendClientMessage(pi, COLOR_PURPLE, string);
									}
								}	
							}
							DeletePVar(i, "pBoomBoxArea");
						}
						format(string, sizeof(string), "%s has destroyed your boombox!", GetPlayerNameEx(playerid));
						SendClientMessage(i, COLOR_WHITE, string);
						return 1;
					}
				}
			}	
	    }
	    SendClientMessage(playerid, COLOR_WHITE, "You don't have a boombox or you are not near one to destroy.");
	}
	return 1;
}

CMD:placefirework(playerid, params[])
{
	if(fireworktog == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot currently launch fireworks.");
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessageEx(playerid, COLOR_GREY, "You must be Level 3+ to place a firework!");
	if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in an arena!");
	if(WatchingTV[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this while watching TV!");
	if(GetPVarInt(playerid, "Injured") == 1 || PlayerInfo[playerid][pHospital] > 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
	if(RocketExplosions[playerid] != -1) return SendClientMessageEx(playerid, COLOR_WHITE, "You are already using another firework!");
	if (PlayerInfo[playerid][pVW] != 0 || PlayerInfo[playerid][pInt] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't launch fireworks indoors!");
	if(PlayerInfo[playerid][pFirework] > 0 || PlayerInfo[playerid][pAdmin] >= 4)
	{
		new Float:x, Float:y, Float:z, Float:a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
		
		if(dynamicgift != 0) // Currently a dynamic gift is placed down
		{
			new Float: Pos[3];
			GetDynamicObjectPos(dynamicgift, Pos[0], Pos[1], Pos[2]);
			
			if(IsPlayerInRangeOfPoint(playerid, 50.0, Pos[0], Pos[1], Pos[2]))
				return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot place a firework down near the giftbox.");
		}		
	    if (PlayerInfo[playerid][pAdmin] < 4)
	    {
	    	PlayerInfo[playerid][pFirework]--;
	    }
		new string[128];
		format(string, sizeof(string), "%s has placed a firework which will go off in 30 seconds!", GetPlayerNameEx(playerid));
	    ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	    ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
	    x += (2 * floatsin(-a, degrees));
    	y += (2 * floatcos(-a, degrees));
	    Rocket[playerid] = CreateDynamicObject(3786, x, y, z, 0, 90, 0);
	    RocketLight[playerid] = CreateDynamicObject(354, x, y, z + 1, 0, 0, 0);
		RocketSmoke[playerid] = CreateDynamicObject(18716, x, y, z - 4, 0, 0, 0);
	    SetPVarFloat(playerid,"fxpos",x);
  		SetPVarFloat(playerid,"fypos",y);
  		SetPVarFloat(playerid,"fzpos",z);
  		RocketExplosions[playerid] = 0;
  		SetTimerEx("Firework", 25000, 0, "ii", playerid, TYPE_COUNTDOWN);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have any fireworks!");
	}
	return 1;
}

CMD:oflag(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], query[256], name[MAX_PLAYER_NAME], reason[64], month, day, year;
		if(sscanf(params, "s[24]s[64]", name, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /oflag [player name] [reason]");
		getdate(year,month,day);

    	new giveplayerid = ReturnUser(name);
        if(IsPlayerConnected(giveplayerid))
		{
			AddFlag(giveplayerid, playerid, reason);
			SendClientMessage(playerid, COLOR_WHITE, "The person is online and has been flagged!");
			format(string, sizeof(string), "AdmCmd: %s was flagged by %s, reason: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 2);

			format(string, sizeof(string), "%s was flagged by %s (%s).", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/flags.log", string);
		}
		else
		{
			new tmpReason[64], tmpName[24];
			mysql_escape_string(reason, tmpReason, MainPipeline);
			mysql_escape_string(name, tmpName, MainPipeline);
			SetPVarString(playerid, "OnAddFlag", tmpName);
			SetPVarString(playerid, "OnAddFlagReason", tmpReason);

			format(query, sizeof(query), "SELECT id FROM `accounts` WHERE `Username`='%s'", tmpName);
			mysql_function_query(MainPipeline, query, true, "FlagQueryFinish", "iii", playerid, INVALID_PLAYER_ID, Flag_Query_Offline);

			format(string, sizeof(string), "Attempting to append %s's flag...", tmpName);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
		}
		return 1;
	}
	return 1;
}



CMD:flag(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /flag [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			AddFlag(giveplayerid, playerid, reason);
			format(string, sizeof(string), "AdmCmd: %s was flagged by %s, reason: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 2);

			format(string, sizeof(string), "%s was flagged by %s (%s).", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/flags.log", string);
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:togchatbox(playerid, params[])
{
	switch(ActiveChatbox[playerid])
	{
		case 1:
		{
			ClearChatbox(playerid);
			ActiveChatbox[playerid] = 0;
		}
		case 0:
		{
			ActiveChatbox[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have turned the chatbox back on!");
		}
	}
	return 1;
}

CMD:next(playerid, params[])
{
	TutorialStep(playerid);
	return 1;
}

CMD:slap(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
	    new szString[128], giveplayerid, Float:posx, Float:posy, Float:posz, Float:shealth;
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /slap [player]");
	    if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	    if((PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin]) && giveplayerid != playerid) {
			format(szString, sizeof(szString), "AdmCmd: %s has tried to slap you!", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_YELLOW, szString);
			SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on a the same/greater level admin than you!");
			PlayerPlaySound(giveplayerid, 1130, posx, posy, posz);
			return 1;
		}
		else {
		    GetPlayerHealth(giveplayerid, shealth);
			SetPlayerHealth(giveplayerid, shealth-5);
			GetPlayerPos(giveplayerid, posx, posy, posz);
			SetPlayerPos(giveplayerid, posx, posy, posz+5);
			PlayerPlaySound(giveplayerid, 1130, posx, posy, posz+5);
			if(giveplayerid != playerid) {
				format(szString, sizeof(szString), "AdmCmd: %s was slapped by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED, szString, 2);
			}	
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return 1;
}

CMD:kills(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pWatchdog] >= 2)
	{
		new string[256], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /kills [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
			format(string, sizeof(string), "<< Last 10 Kills/Deaths of %s >>", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
			GetLatestKills(playerid, giveplayerid);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:okills(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /okills [name]");

		new query[256], giveplayerid;
		giveplayerid = ReturnUser(params);
		if(giveplayerid != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "That person is online, use /kills for online players.");

		new tmpName[24];
		mysql_escape_string(params, tmpName, MainPipeline);

		format(query, sizeof(query), "SELECT `id` FROM `accounts` WHERE `Username` = '%s'", tmpName);
		mysql_function_query(MainPipeline, query, true, "OnGetOKills", "is", playerid, tmpName);
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
	return 1;
}

CMD:mute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /mute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can not use this command on yourself!");
				return 1;
			}

			if(PlayerInfo[giveplayerid][pMuted] == 0)
			{
				if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin])
				{
					format(string, sizeof(string), "%s just tried to /mute you.",GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
					return 1;
				}
				PlayerInfo[giveplayerid][pMuted] = 1;
				format(string, sizeof(string), "AdmCmd: %s was silenced by %s.",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
			}
			else
			{
				PlayerInfo[giveplayerid][pMuted] = 0;
				format(string, sizeof(string), "AdmCmd: %s was unsilenced by %s.",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:hlban(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new string[128], giveplayerid;
			if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hlban [player]");

			if(IsPlayerConnected(giveplayerid))
			{
				if(PlayerInfo[giveplayerid][pHelper] >= 1 || PlayerInfo[giveplayerid][pAdmin] >= 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You can not ban admins/advisors/helpers from the helper channel!");
					return 1;
				}
				if(PlayerInfo[giveplayerid][pHelpMute] == 0)
				{
					PlayerInfo[giveplayerid][pHelpMute] = 1;

					//foreach(new n: Player)
					for(new n = 0; n < MAX_PLAYERS; ++n)
					{
						if(IsPlayerConnected(n))
						{
							if(gHelp[n]== 0)
							{
								format(string, sizeof(string), "* %s has been banned from the helper channel by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
								SendClientMessageEx(n, COLOR_JOINHELPERCHAT, string);
							}
						}	
					}
					if(gHelp[playerid] != 0)
					{
						format(string, sizeof(string), "* %s has been banned from the helper channel by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
						SendClientMessageEx(playerid, COLOR_JOINHELPERCHAT, string);
					}
                    gHelp[giveplayerid] = 1;

					format(string, sizeof(string), "You have been banned from helper channel by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "AdmCmd: %s was banned from /hl by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					Log("logs/mute.log", string);
				}
				else
				{
					PlayerInfo[giveplayerid][pHelpMute] = 0;

					//foreach(new n: Player)
					for(new n = 0; n < MAX_PLAYERS; ++n)
					{
						if(IsPlayerConnected(n))
						{
							if (gHelp[n]==0)
							{
								format(string, sizeof(string), "* %s has been unbanned from the helper channel by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
								SendClientMessageEx(n, COLOR_JOINHELPERCHAT, string);
							}
						}	
					}
					if(gHelp[playerid] != 0)
					{
						format(string, sizeof(string), "* %s has been unbanned from the helper channel by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
						SendClientMessageEx(playerid, COLOR_JOINHELPERCHAT, string);
					}

					format(string, sizeof(string), "You have been unbanned from helper channel by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "AdmCmd: %s was unbanned from /hl by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					Log("logs/mute.log", string);
				}

			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		}
	}
	return 1;
}

CMD:vmute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pDonateRank] == 5)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vmute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot mute admins from VIP Chat!");
			if(PlayerInfo[giveplayerid][pVMuted] == 0)
			{
				PlayerInfo[giveplayerid][pVMuted] = 1;
				format(string, sizeof(string), "AdmCmd: %s has indefinitely blocked %s from using VIP Chat.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				if(PlayerInfo[playerid][pAdmin] < 2)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
				}
				ABroadCast(COLOR_LIGHTRED,string,2);
				format(string, sizeof(string), "You have been indefinitely muted from VIP Chat for abuse by %s. You may appeal this on the forums (admin complaint)", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "AdmCmd: %s was blocked from /v by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
			else
			{
				PlayerInfo[giveplayerid][pVMuted] = 0;
				format(string, sizeof(string), "AdmCmd: %s has been re-allowed to use VIP Chat by %s.",GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				if(PlayerInfo[playerid][pAdmin] < 2)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
				}
				ABroadCast(COLOR_LIGHTRED,string,2);
				format(string, sizeof(string), "You have been re-allowed to use VIP Chat by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "AdmCmd: %s was unblocked from /v by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:nextwatch(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "Please use /spec to avoid issues.");
	if(PlayerInfo[playerid][pWatchdog] >= 1)
	{
		if(GetPVarInt(playerid, "StartedWatching") == 0) return cmd_startwatch(playerid, params);
		
		if(gettime() >= GetPVarInt(playerid, "NextWatch")) return mysql_function_query(MainPipeline, "SELECT * FROM `nonrppoints` WHERE `active` = '1' ORDER BY `point` DESC", true, "WatchWatchlist", "i", playerid);
		else if(PlayerInfo[playerid][pWatchdog] >= 2) return mysql_function_query(MainPipeline, "SELECT * FROM `nonrppoints` WHERE `active` = '1' ORDER BY `point` DESC", true, "WatchWatchlist", "i", playerid);
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "WATCHDOG: You cannot skip a player yet, it hasn't been 3 minutes.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	}
	return true;
}

CMD:watchspec(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "Please use /spec to avoid issues.");
	if(PlayerInfo[playerid][pWatchdog] >= 2)
	{
		new giveplayerid;
		if(GetPVarInt(playerid, "StartedWatching") == 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "WATCHDOG: You already started watching.");
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "USAGE: /watchspec [player]");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot spectate yourself!");
		if(PlayerInfo[giveplayerid][pWatchlist] == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "This player is not on the watchlist!");
		
		SpectatePlayer(playerid, giveplayerid);
		SendClientMessageEx(playerid, -1, "WATCHDOG: You have started watching.");
		SetPVarInt(playerid, "SpectatingWatch", giveplayerid);
		SetPVarInt(playerid, "StartedWatching", 1);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	}
	return true;
}		

CMD:startwatch(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "Please use /spec to avoid issues.");
	if(PlayerInfo[playerid][pWatchdog] >= 1)
	{
		if(GetPVarInt(playerid, "StartedWatching") == 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "WATCHDOG: You already started watching.");
		if(gettime() >= GetPVarInt(playerid, "NextWatch")) return mysql_function_query(MainPipeline, "SELECT * FROM `nonrppoints` WHERE `active` = '1' ORDER BY `point` DESC", true, "WatchWatchlist", "i", playerid);
		else if(PlayerInfo[playerid][pWatchdog] >= 2) return mysql_function_query(MainPipeline, "SELECT * FROM `nonrppoints` WHERE `active` = '1' ORDER BY `point` DESC", true, "WatchWatchlist", "i", playerid);
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "WATCHDOG: You cannot skip a player yet, it hasn't been 3 minutes.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	}
	return true;
}

CMD:stopwatch(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "Please use /spec to avoid issues.");
	if(PlayerInfo[playerid][pWatchdog] >= 1)
	{
		if(GetPVarInt(playerid, "StartedWatching") == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "WATCHDOG: You aren't spectating anybody.");
		
		SetPVarInt(playerid, "StartedWatching", 0);
		if(Spectating[playerid] > 0)
		{
			SetPVarInt(GetPVarInt(playerid, "SpectatingWatch"), "BeingSpectated", 0);
			GettingSpectated[Spectate[playerid]] = INVALID_PLAYER_ID;
			Spectating[playerid] = 0;
			SpecTime[playerid] = 0;
			Spectate[playerid] = INVALID_PLAYER_ID;
			SetPVarInt(playerid, "SpecOff", 1 );
			TogglePlayerSpectating(playerid, false);
			SetCameraBehindPlayer(playerid);
			SetPVarInt(playerid, "SpectatingWatch", INVALID_PLAYER_ID);
			SendClientMessageEx(playerid, -1, "WATCHDOG: You have stopped watching.");
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "WATCHDOG: You're not watching anybody.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	}
	return true;
}

CMD:dmrmute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dmrmute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pDMRMuted] == 0)
			{
			    PlayerInfo[giveplayerid][pDMRMuted] = 1;
				format(string, sizeof(string), "AdmCmd: %s has indefinitely blocked %s from submitting DM reports.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				format(string, sizeof(string), "You have been blocked from submitting /dmreports by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "AdmCmd: %s was blocked from /dmreport by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
			else
			{
			    if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You must be a senior admin to unmute others from submitting DM reports");
				PlayerInfo[giveplayerid][pDMRMuted] = 0;
				format(string, sizeof(string), "AdmCmd: %s has been re-allowed to submit DM reports by %s",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				format(string, sizeof(string), "You have been re-allowed to submitting /dmreports again by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "AdmCmd: %s was unblocked from /dmreport by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
  }
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:rmute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pAP] >= 2 || PlayerInfo[playerid][pHR] >= 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rmute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRMuted] == 0)
			{
				PlayerInfo[giveplayerid][pRMuted] = 1;
				format(string, sizeof(string), "AdmCmd: %s has indefinitely blocked %s from submitting reports.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				format(string, sizeof(string), "You have been blocked from submitting /reports by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "You will not be able to submit reports until you are unblocked. To appeal this action contact devin@ng-gaming.net.");
				format(string, sizeof(string), "AdmCmd: %s was blocked from /report by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
			else
			{
				PlayerInfo[giveplayerid][pRMuted] = 0;
				format(string, sizeof(string), "AdmCmd: %s has been re-allowed to submit reports by %s",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				format(string, sizeof(string), "You have been re-allowed to submitting /reports again by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "AdmCmd: %s was unblocked from /report by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:rto(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[512], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rto [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRMuted] == 0)
			{
			    if(PlayerInfo[giveplayerid][pRMutedTotal] == 0)
			    {
  					PlayerInfo[giveplayerid][pRMutedTotal] = 1;
					format(string, sizeof(string), "AdmCmd: %s has given %s their first warning about report abuse, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "An admin warns you not to abuse /report.\n\nNote that future abuse of /report could result in a mute from /report or loss of that privilege altogether.");
					ShowPlayerDialog(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Report abuse warning", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s has given %s their first warning about report abuse, reason: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					Log("logs/mute.log", string);

			    }
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 1)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 2;
					PlayerInfo[giveplayerid][pRMutedTime] = 15*60;
					format(string, sizeof(string), "AdmCmd: %s has temporarily blocked %s from submitting reports, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s, reason: %s.\n\nAs this is the second time you have been blocked from reporting, you will not be able to use /report for 15 minutes.\n\nNote that future abuse of /report could result in a longer mute from /report or loss of that privilege altogether.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialog(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
			    }
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 2)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 3;
					PlayerInfo[giveplayerid][pRMutedTime] = 30*60;
					format(string, sizeof(string), "AdmCmd: %s has temporarily blocked %s from submitting reports, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s, reason: %s.\n\nAs this is the third time you have been blocked from reporting, you will not be able to use /report for 30 minutes.\n\nNote that future abuse of /report could result in a longer mute from /report or loss of that privilege altogether.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialog(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
			    }
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 3)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 4;
					PlayerInfo[giveplayerid][pRMutedTime] = 45*60;
					format(string, sizeof(string), "AdmCmd: %s has temporarily blocked %s from submitting reports, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s, reason: %s.\n\nAs this is the fourth time you have been blocked from reporting, you will not be able to use /report for 45 minutes.\n\nNote that future abuse of /report could result in a longer mute from /report or loss of that privilege altogether.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialog(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
				}
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 4)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 5;
					PlayerInfo[giveplayerid][pRMutedTime] = 60*60;
					format(string, sizeof(string), "AdmCmd: %s has temporarily blocked %s from submitting reports, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s, reason: %s.\n\nAs this is the fifth time you have been blocked from reporting, you will not be able to use /report for 60 minutes.\n\nNote that future abuse of /report could result in a loss of that privilege altogether.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialog(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
				}
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] >= 5)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 6;
					PlayerInfo[giveplayerid][pRMutedTime] = 300*60;
					format(string, sizeof(string), "AdmCmd: %s has temporarily blocked %s from submitting reports, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s, reason: %s.\n\nAs this is the sixth time you have been blocked from reporting, you will not be able to use /report for 5 hours.\n\nNote that future abuse of /report could result in a loss of that privilege altogether.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialog(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
				}

				for(new i = 0; i < MAX_REPORTS; i++)
				{
					if(Reports[i][ReportFrom] == giveplayerid)
					{
						Reports[i][BeingUsed] = 0;
					}
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That person is already disabled from /reports.");
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:rtoreset(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rtoreset [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRMuted] == 2)
			{
				PlayerInfo[giveplayerid][pRMuted] = 0;
				PlayerInfo[giveplayerid][pRMutedTotal]--;
				PlayerInfo[giveplayerid][pRMutedTime] = 0;
				format(string, sizeof(string), "AdmCmd: %s has unblocked %s from reporting, reason: %s",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,2);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "You have been unblocked from submitting reports. You may now use the reporting system again.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Please accept our apologies for any error and inconvenience this may have caused.");
				format(string, sizeof(string), "AdmCmd: %s was unblocked from /report by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/mute.log", string);
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GRAD1, "That person is not blocked from reporting!");
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:vto(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pDonateRank] == 5)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vto [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pVMuted] == 0)
			{
				PlayerInfo[giveplayerid][pVMuted] = 2;
				PlayerInfo[giveplayerid][pVMutedTime] = 15*60;
				format(string, sizeof(string), "AdmCmd: %s has temporarily blocked %s from using VIP Chat, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,2);
				if(PlayerInfo[playerid][pAdmin] < 2)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
				}
				format(string, sizeof(string), "You have been temporarily blocked from using VIP Chat by %s, reason: %s.", GetPlayerNameEx(playerid), reason);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "You will not be able to use VIP Chat for 15 minutes.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Note the future abuse of VIP Chat could result in loss of that privilege altogether or being banned from the server.");
				format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from VIP Chat by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid),reason);
				Log("logs/mute.log", string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That person is already disabled from VIP Chat.");
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:vtoreset(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pDonateRank] == 5)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vtoreset [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pVMuted] == 2)
			{
				PlayerInfo[giveplayerid][pVMuted] = 0;
				PlayerInfo[giveplayerid][pVMutedTime] = 0;
				format(string, sizeof(string), "AdmCmd: %s has unblocked %s from using VIP Chat, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
				if(PlayerInfo[playerid][pAdmin] < 2)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
				}
				ABroadCast(COLOR_LIGHTRED,string,2);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "You have been unblocked from using VIP Chat. You may now use the VIP Chat system again.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Please accept our apologies for any error and inconvenience this may have caused.");
				format(string, sizeof(string), "AdmCmd: %s was unblocked from VIP Chat by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid),reason);
				Log("logs/mute.log", string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That person is not temporarily disabled from VIP Chat.");
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:kick(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2 || PlayerInfo[playerid][pWatchdog] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /kick [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] == 1 && PlayerInfo[giveplayerid][pHelper] >= 2) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && (PlayerInfo[giveplayerid][pHelper] >= 2 || PlayerInfo[giveplayerid][pAdmin] > 0) && playerid != giveplayerid) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
			else
			{
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s (IP:%s) was kicked by %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
				Log("logs/kick.log", string);
				if(PlayerInfo[playerid][pAdmin] == 1) Log("logs/moderator.log", string);
				format(string, sizeof(string), "AdmCmd: %s was kicked by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
			}
			return 1;
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:sban(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sban [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				format(string, sizeof(string), "AdmCmd: %s has been auto-banned, reason: Trying to /sban a higher admin.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string,2);
				PlayerInfo[playerid][pBanned] = 1;
				SystemBan(playerid, "[System] (Trying to ban a higher admin)");
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return 1;
			}
			new playerip[32];
			GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
			format(string, sizeof(string), "AdmCmd: %s (IP:%s) was silent banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
			Log("logs/ban.log", string);
			format(string, sizeof(string), "AdmCmd: %s was silent banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED,string,2);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			PlayerInfo[giveplayerid][pBanned] = 1;
            new ip[32];
			GetPlayerIp(giveplayerid,ip,sizeof(ip));
			AddBan(playerid, giveplayerid, reason);
			MySQLBan(GetPlayerSQLId(giveplayerid),ip,reason,1,GetPlayerNameEx(playerid));
			SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
			return 1;

		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:kickres(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 99999)
	{
		return 1;
	}

	new level, amount;
	if(sscanf(params, "dd", level, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /kickres [level] [amount]");

	if(level < 0 || level > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   Can only Reserved Slots Kick from level 0 to 5!"); return 1; }
	if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "   Can only Reserved Slots Kick of a maximum of 10 players!"); return 1; }
	//foreach(new i: Player)
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pLevel] == level && PlayerInfo[i][pAdmin] < 1 && PlayerInfo[i][pDonateRank] < 1 && amount > 0)
			{
				amount -= 1;
				Kick(i);
			}
		}	
	}
	return 1;
}

CMD:warn(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pWatchdog] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /warn [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Admins cannot be warned!");
			PlayerInfo[giveplayerid][pWarns] += 1;
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s (had 3 Warnings), reason: %s", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid), reason);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Player received 3 warnings");
				MySQLBan(GetPlayerSQLId(giveplayerid),ip,reason,1,GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s was warned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 2);
			format(string, sizeof(string), "AdmCmd: %s(%d) was warned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			format(string, sizeof(string), "You were warned by %s, reason: %s", GetPlayerNameEx(playerid), reason);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
			return 1;

		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:swarn(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pUndercover] >= 1)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /swarn [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Admins cannot be warned!");
			PlayerInfo[giveplayerid][pWarns] += 1;
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
			    new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s (had 3 Warnings), reason: %s", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid),reason);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				ABroadCast(COLOR_LIGHTRED, string, 2);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(playerid, giveplayerid, "Player received 3 warnings");
				MySQLBan(GetPlayerSQLId(giveplayerid),ip,reason,1,GetPlayerNameEx(playerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s was silent warned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 2);
			format(string, sizeof(string), "AdmCmd: %s(%d) was silent warned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
			format(string, sizeof(string), "You were warned by an Admin, reason: %s", reason);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
			return 1;

		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:owarn(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
		return 1;
	}

	new string[128], query[512], name[MAX_PLAYER_NAME], reason[64];
	if(sscanf(params, "s[24]s[64]", name, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /owarn [name] [reason]");

	new giveplayerid = ReturnUser(name);
	if(giveplayerid != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "That person is online, use /warn for online players.");
		return 1;
	}

	new tmpName[24];
	mysql_escape_string(name,tmpName);
	SetPVarString(playerid, "OnWarnPlayer", tmpName);
	SetPVarString(playerid, "OnWarnPlayerReason", reason);

	format(query, sizeof(query), "UPDATE `accounts` SET `Warnings`=`Warnings`+1 WHERE `Username`='%s' AND `PermBand` < 3 AND `Band` < 1 AND `AdminLevel` < 2",tmpName);
	mysql_function_query(MainPipeline, query, false, "OnWarnPlayer", "i", playerid);

	format(string,sizeof(string),"Attempting to warn %s...", tmpName);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);

	return 1;
}

CMD:skick(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pWatchdog] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /skick [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				format(string, sizeof(string), "AdmCmd: %s has been auto-kicked, reason: Trying to /skick a higher admin.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string,2);
				SetTimerEx("KickEx", 1000, 0, "i", playerid);
				return 1;
			}
			else
			{
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s (IP:%s) was silent kicked by %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
				Log("logs/kick.log", string);
				format(string, sizeof(string), "AdmCmd: %s was silent kicked by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,2);
				StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
			}
			return 1;

		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:ban(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pWatchdog] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ban [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				format(string, sizeof(string), "AdmCmd: %s has been auto-banned, reason: Trying to /ban a higher admin.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string,2);
				PlayerInfo[playerid][pBanned] = 1;
				SystemBan(playerid, "[System] (Attempting to ban a higher admin.)");
				Kick(playerid);
				return 1;
			}
			else
			{
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				StaffAccountCheck(giveplayerid, GetPlayerIpEx(giveplayerid));
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
    			AddBan(playerid, giveplayerid, reason);
				MySQLBan(GetPlayerSQLId(giveplayerid),ip,reason,1,GetPlayerNameEx(playerid));
				SystemBan(giveplayerid, GetPlayerNameEx(giveplayerid));
				SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				return 1;
			}

		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:freeze(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /freeze [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't freeze a higher admin.");
				return 1;
			}

			TogglePlayerControllable(giveplayerid, 0);
			SetPVarInt(giveplayerid, "IsFrozen", 1);
			format(string, sizeof(string), "AdmCmd: %s was frozen by %s",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string,2);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /unfreeze [player]");


		if(IsPlayerConnected(giveplayerid))
		{
			DeletePVar(giveplayerid, "IsFrozen");
			DeletePVar(giveplayerid, "PlayerCuffed");
			PlayerCuffed[giveplayerid] = 0;
			PlayerTied[giveplayerid] = 0;
			TogglePlayerControllable(giveplayerid, 1);
			format(string, sizeof(string), "AdmCmd: %s was unfrozen by %s.",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string,2);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Invalid player specified.");
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:leaders(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3 || PlayerInfo[playerid][pFactionModerator] >= 1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "Group leaders online:");

		new	string[128], sz_FacInfo[3][64];

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pLeader] >= 0) {
					GetPlayerGroupInfo(i, sz_FacInfo[0], sz_FacInfo[1], sz_FacInfo[2]);
					format(string, sizeof(string), "(%s) %s %s", sz_FacInfo[2], sz_FacInfo[0], GetPlayerNameEx(i));
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
			}	
		}
	} else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:newb(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
	if(PlayerInfo[playerid][pTut] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't do that at this time.");
	if((nonewbie) && PlayerInfo[playerid][pAdmin] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "The newbie chat channel has been disabled by an administrator!");
	if(PlayerInfo[playerid][pNMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You are muted from the newbie chat channel.");
	if(PlayerInfo[playerid][pNewbieTogged] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You have the channel toggled, /tognewbie to re-enable!");

	new string[128];
	if(gettime() < NewbieTimer[playerid])
	{
		format(string, sizeof(string), "You must wait %d seconds before speaking again in this channel.", NewbieTimer[playerid]-gettime());
		SendClientMessageEx(playerid, COLOR_GREY, string);
		return 1;
	}

	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/newb)ie [text]");

	if(PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pAdmin] < 1)
	{
		NewbieTimer[playerid] = gettime()+60;
		format(string, sizeof(string), "** Newbie %s: %s", GetPlayerNameEx(playerid), params);
	}
	if(PlayerInfo[playerid][pHelper] == 1 && PlayerInfo[playerid][pAdmin] < 2)
	{
		NewbieTimer[playerid] = gettime()+30;
		format(string, sizeof(string), "** Helper %s: %s", GetPlayerNameEx(playerid), params);
		ReportCount[playerid]++;
		ReportHourCount[playerid]++;
		AddCAReportToken(playerid); // Advisor Tokens
	}
	if(PlayerInfo[playerid][pWatchdog] >= 1)
	{
		NewbieTimer[playerid] = gettime()+30;
		format(string, sizeof(string), "** Watchdog %s: %s", GetPlayerNameEx(playerid), params);
	}
	if(PlayerInfo[playerid][pAdmin] == 1)
	{
		NewbieTimer[playerid] = gettime()+30;
		if(PlayerInfo[playerid][pSMod] == 1) format(string, sizeof(string), "** Senior Moderator %s: %s", GetPlayerNameEx(playerid), params);
		else format(string, sizeof(string), "** Moderator %s: %s", GetPlayerNameEx(playerid), params);
	}
	if(PlayerInfo[playerid][pHelper] == 2 && PlayerInfo[playerid][pAdmin] < 2)
	{
		NewbieTimer[playerid] = gettime()+10;
		format(string, sizeof(string), "** Community Advisor %s: %s", GetPlayerNameEx(playerid), params);
	}
	if(PlayerInfo[playerid][pHelper] == 3 && PlayerInfo[playerid][pAdmin] < 2)
	{
		NewbieTimer[playerid] = gettime()+10;
		format(string, sizeof(string), "** Senior Advisor %s: %s", GetPlayerNameEx(playerid), params);
	}
	if(PlayerInfo[playerid][pHelper] >= 4 && PlayerInfo[playerid][pAdmin] < 2)
	{
		NewbieTimer[playerid] = gettime()+10;
		format(string, sizeof(string), "** Chief Advisor %s: %s", GetPlayerNameEx(playerid), params);
	}
	if(PlayerInfo[playerid][pAdmin] >= 2) format(string, sizeof(string), "** %s %s: %s", GetAdminRankName(PlayerInfo[playerid][pAdmin]), GetPlayerNameEx(playerid), params);
	//foreach(new n: Player)
	for(new n = 0; n < MAX_PLAYERS; ++n)
	{
		if(IsPlayerConnected(n))
		{
			if (PlayerInfo[n][pNewbieTogged] == 0)
			{
				SendClientMessageEx(n, COLOR_NEWBIE, string);
			}
		}	
	}
	return 1;
}

CMD:hl(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(PlayerInfo[playerid][pTut] == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't do that at this time.");
		return 1;
	}

	if(PlayerInfo[playerid][pHelpMute] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are banned from the helper channel.");
		return 1;
	}

	new string[128];
	if(gettime() < HelperTimer[playerid])
	{
		format(string, sizeof(string), "You must wait %d seconds before speaking again in this channel.", HelperTimer[playerid]-gettime());
		SendClientMessageEx(playerid, COLOR_GREY, string);
		return 1;
	}
	if(gHelp[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are not in the helper channel, type /joinhelp.");
		return 1;
	}

	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/hl) [text]");

	if(PlayerInfo[playerid][pHelper]<1&&PlayerInfo[playerid][pAdmin] < 2)
	{
		HelperTimer[playerid] = gettime()+10;
	}
	else if(PlayerInfo[playerid][pHelper]==1&&PlayerInfo[playerid][pAdmin] < 2)
	{
		HelperTimer[playerid] = gettime()+5;
	}
	else if(PlayerInfo[playerid][pAdmin] == 1)
	{
		HelperTimer[playerid] = gettime()+5;
	}
	else if(PlayerInfo[playerid][pHelper]>=2&&PlayerInfo[playerid][pAdmin] < 2)
	{
		HelperTimer[playerid] = gettime()+5;
	}
	if(PlayerInfo[playerid][pHelper]<1&&PlayerInfo[playerid][pAdmin]<1)
	{
		format(string, sizeof(string), "** Question by %s: %s", GetPlayerNameEx(playerid), params);
	}
	if(PlayerInfo[playerid][pHelper] == 1&& PlayerInfo[playerid][pAdmin]<2)
	{
		format(string, sizeof(string), "** Helper %s: %s", GetPlayerNameEx(playerid), params);
	}
	if(PlayerInfo[playerid][pAdmin] == 1)
	{
		if(PlayerInfo[playerid][pSMod] == 1) format(string, sizeof(string), "** Senior Moderator %s: %s", GetPlayerNameEx(playerid), params);
		else format(string, sizeof(string), "** Moderator %s: %s", GetPlayerNameEx(playerid), params);
	}
	if(PlayerInfo[playerid][pHelper] == 2&&PlayerInfo[playerid][pAdmin]<2)
	{
		format(string, sizeof(string), "** Community Advisor %s: %s", GetPlayerNameEx(playerid), params);
	}
	if(PlayerInfo[playerid][pHelper] == 3&&PlayerInfo[playerid][pAdmin]<2)
	{
		format(string, sizeof(string), "** Senior Advisor %s: %s", GetPlayerNameEx(playerid), params);
	}
	if(PlayerInfo[playerid][pHelper] >= 4&&PlayerInfo[playerid][pAdmin]<2)
	{
		format(string, sizeof(string), "** Chief Advisor %s: %s", GetPlayerNameEx(playerid), params);
	}
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		format(string, sizeof(string), "** Admin %s: %s", GetPlayerNameEx(playerid), params);
	}
	//foreach(new n: Player)
	for(new n = 0; n < MAX_PLAYERS; ++n)
	{
		if(IsPlayerConnected(n))
		{
			if (gHelp[n]==0)
			{
				SendClientMessageEx(n, COLOR_HELPERCHAT, string);
			}
		}	
	}
	return 1;
}

CMD:joinhelp(playerid, params[])
{
	if(gHelp[playerid] == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are already in the helper channel!");
		return 1;
	}
	if(gettime() < HlKickTimer[playerid])
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You have just been kicked, you can not rejoin yet!");
		return 1;
	}
	if(PlayerInfo[playerid][pHelpMute] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are banned from the helper channel.");
		return 1;
	}
	SendClientMessageEx(playerid, COLOR_YELLOW, "You have joined the helper chat, type /hl to ask your question or /leavehelp to leave!");

	new string[128];
	//foreach(new n: Player)
	for(new n = 0; n < MAX_PLAYERS; ++n)
	{
		if(IsPlayerConnected(n))
		{
			if (gHelp[n]==0)
			{
				format(string, sizeof(string), "* %s has joined the helper channel.", GetPlayerNameEx(playerid));
				SendClientMessageEx(n, COLOR_JOINHELPERCHAT, string);
			}
		}	
	}
	gHelp[playerid] = 0;
	return 1;
}

CMD:leavehelp(playerid, params[])
{
	if(gHelp[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are not in the helper channel!");
		return 1;
	}

	new string[128];
	//foreach(new n: Player)
	for(new n = 0; n < MAX_PLAYERS; ++n)
	{
		if(IsPlayerConnected(n))
		{
			if (gHelp[n]==0)
			{
				format(string, sizeof(string), "* %s has left the helper channel.", GetPlayerNameEx(playerid));
				SendClientMessageEx(n, COLOR_JOINHELPERCHAT, string);
			}
		}	
	}
	gHelp[playerid] = 1;
	return 1;
}

CMD:hlkick(playerid, params[])
{
	if (PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin] >= 1){
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hlkick [player]");
		if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		if(gHelp[giveplayerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "That person is not in the helper channel!");
		if(PlayerInfo[giveplayerid][pHelper] >= 1 || PlayerInfo[giveplayerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GREY, "You can not kick admins/advisors from the helper channel!");
		new string[128];
		HlKickTimer[giveplayerid] = gettime()+120;
		format(string, sizeof(string), "* %s has been kicked from the helper channel by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
		//foreach(new n: Player) {
		for(new n = 0; n < MAX_PLAYERS; ++n)
		{
			if(IsPlayerConnected(n))
			{
				if (gHelp[n]==0) {
					SendClientMessageEx(n, COLOR_JOINHELPERCHAT, string);
				}
			}	
		}
		gHelp[giveplayerid] = 1;
	}
	else {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:nunmute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pWatchdog] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /nunmute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pNMute] == 1)
			{
				format(string, sizeof(string), "AdmCmd: %s(%d) was unmuted from speaking in /newb by %s.", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/admin.log", string);
				format(string, sizeof(string), "AdmCmd: %s was unmuted from speaking in /newb by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				PlayerInfo[giveplayerid][pNMute] = 0;
				PlayerInfo[giveplayerid][pNMuteTotal]--;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_LIGHTRED,"That person is not muted from /newb!");
			}

		}
	}
	return 1;
}

CMD:nmute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 2 || PlayerInfo[playerid][pSMod] == 1 || PlayerInfo[playerid][pWatchdog] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /nmute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 1)
			{
				return SendClientMessageEx(playerid, COLOR_LIGHTRED, "You can't /nmute admins");
			}
			if(PlayerInfo[giveplayerid][pNMute] == 0)
			{
			    SetPVarInt(giveplayerid, "UnmuteTime", gettime());
				PlayerInfo[giveplayerid][pNMute] = 1;
				PlayerInfo[giveplayerid][pNMuteTotal] += 1;
				format(string, sizeof(string), "AdmCmd: %s(%d) was muted from speaking in /newb by %s(%d).", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), GetPlayerSQLId(playerid));
				Log("logs/admin.log", string);
				format(string, sizeof(string), "AdmCmd: %s was muted from speaking in /newb by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				if(PlayerInfo[giveplayerid][pNMuteTotal] > 6)
				{
					new playerip[32];
					GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
					format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by %s, reason: Excessive newbie chat mutes", GetPlayerNameEx(giveplayerid),playerip,GetPlayerNameEx(playerid));
					Log("logs/ban.log", string);
					format(string, sizeof(string), "AdmCmd: %s was banned, reason: Excessive newbie chat mutes.", GetPlayerNameEx(giveplayerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
					PlayerInfo[giveplayerid][pBanned] = 1;
					AddBan(playerid, giveplayerid, "Excessive newbie chat mutes");
					MySQLBan(GetPlayerSQLId(giveplayerid),GetPlayerIpEx(giveplayerid),"Excessive newbie chat mutes", 1,GetPlayerNameEx(playerid));
					SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
				}

				if(PlayerInfo[playerid][pAdmin] == 1)
				{
					format(string, sizeof(string), "AdmCmd: %s was muted from speaking in /newb by an Admin.", GetPlayerNameEx(giveplayerid));
					SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "You were just muted from Newbie Chat [/newb] by an Admin.");
				}
				else
				{
					format(string, sizeof(string), "AdmCmd: %s was muted from speaking in /newb by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
					format(string, sizeof(string), "You were just muted from the newbie chat channel (/newb) by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
				}

				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Remember, the newbie chat channel is only for script/server related questions and may not be used for any other purpose, unless stated otherwise by an admin.");
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "If you wish to be unmuted, you will be fined or jailed. Future abuse could result in increased punishment. If you feel this was in error, contact a senior administrator.");

				format(string, sizeof(string), "AdmCmd: %s was just muted from using Newbie Chat [/newb] due to misuse.", GetPlayerNameEx(giveplayerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			}
			else
			{
				if(PlayerInfo[playerid][pAdmin] >= 2)
				{
					ShowNMuteFine(giveplayerid);
					format(string, sizeof(string), "You offered %s an unmute from /newb.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "That person is currently muted. You are unable to unmute players from the newbie chat as a Community Advisor.");
				}
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:adunmute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pWatchdog] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adunmute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pADMute] == 1)
			{
				if(PlayerInfo[giveplayerid][pJailTime] != 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "You cannot offer someone in jail/prison an unmute!");
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Sorry, you cannot be unmuted from /ad while you are in jail/prison.");
					return 1;
				}
				format(string, sizeof(string), "AdmCmd: %s(%d) was unmuted from /ad by %s.", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/admin.log", string);
				format(string, sizeof(string), "AdmCmd: %s was unmuted from /ad by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				PlayerInfo[giveplayerid][pADMute] = 0;
				PlayerInfo[giveplayerid][pADMuteTotal]--;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_LIGHTRED,"That person is not muted from /newb!");
			}

		}
	}
	return 1;
}

CMD:admute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 2 || PlayerInfo[playerid][pSMod] == 1 || PlayerInfo[playerid][pWatchdog] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /admute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
				if(PlayerInfo[giveplayerid][pAdmin] >= 1)
				{
					return SendClientMessageEx(playerid, COLOR_LIGHTRED, "You can't /admute admins");
				}
				if(PlayerInfo[giveplayerid][pADMute] == 0)
				{
				    SetPVarInt(giveplayerid, "UnmuteTime", gettime());
					PlayerInfo[giveplayerid][pADMute] = 1;
					PlayerInfo[giveplayerid][pADMuteTotal] += 1;
					format(string, sizeof(string), "AdmCmd: %s(%d) was muted from placing /ad's by %s(%d).", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), GetPlayerSQLId(playerid));
					Log("logs/admin.log", string);
					format(string, sizeof(string), "AdmCmd: %s was muted from placing /ad's by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					ABroadCast(COLOR_LIGHTRED,string,2);

					if(PlayerInfo[giveplayerid][pADMuteTotal] > 6)
					{
						new playerip[32];
						GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
						format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by %s, reason: Excessive advertisement mutes", GetPlayerNameEx(giveplayerid),playerip,GetPlayerNameEx(playerid));
						Log("logs/ban.log", string);
						format(string, sizeof(string), "AdmCmd: %s was banned, reason: Excessive advertisement mutes.", GetPlayerNameEx(giveplayerid));
						SendClientMessageToAllEx(COLOR_LIGHTRED, string);
						PlayerInfo[giveplayerid][pBanned] = 1;
						new ip[32];
						GetPlayerIp(giveplayerid,ip,sizeof(ip));
						AddBan(playerid, giveplayerid, "Excessive advertisement mutes");
						MySQLBan(GetPlayerSQLId(giveplayerid),ip,"Excessive advertisement mutes", 1,GetPlayerNameEx(playerid));
						SetTimerEx("KickEx", 1000, 0, "i", giveplayerid);
					}

					if(PlayerInfo[playerid][pAdmin] == 1)
					{
						format(string, sizeof(string), "AdmCmd: %s was muted from placing /ad's by Admin.", GetPlayerNameEx(giveplayerid));
						SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
						SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "You were just muted from Advertisements [/ads] by an Admin.");
					}
					else
					{
						format(string, sizeof(string), "AdmCmd: %s was muted from placing /ad's by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
						SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
						format(string, sizeof(string), "You were just muted from the Advertisements (/ads) by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
					}

					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Remember, advertisements may only be used for IC purposes and may not be used for any other purpose, unless stated otherwise by an admin.");
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "If you wish to be unmuted, you will be fined or jailed. Future abuse could result in increased punishment. If you feel this was in error, contact a senior administrator.");

					format(string, sizeof(string), "AdmCmd: %s was just muted from using Advertisements [/ads] due to misuse.", GetPlayerNameEx(giveplayerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				}
				else
				{
					if(PlayerInfo[playerid][pAdmin] >= 2)
					{
						ShowAdMuteFine(giveplayerid);
						format(string, sizeof(string), "You offered %s an unmute from /ads.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "That person is currently muted. You are unable to unmute players from advertisements as a Community Advisor.");
					}
				}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:makeadvisor(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pPR] > 0)
	{
		new string[128], giveplayerid, level;
		if(sscanf(params, "ud", giveplayerid, level)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /makeadvisor [player] [level(1-4)]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot make admins community advisors!");
				return 1;
			}
			PlayerInfo[giveplayerid][pHelper] = level;
			switch(level)
			{
				case 1:
				{
					format(string, sizeof(string), "You have been made a Helper by %s", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have given Helper to %s", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s(%d) has been made a Helper by %s(%d)", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), GetPlayerSQLId(playerid));
					Log("logs/admin.log", string);
				}
				case 2:
				{
					format(string, sizeof(string), "You have been made a Community Advisor by %s", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have given Community Advisor to %s", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s(%d) has been made a Community Advisor by %s(%d)", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), GetPlayerSQLId(playerid));
					Log("logs/admin.log", string);
				}
				case 3:
				{
					format(string, sizeof(string), "You have been promoted to Senior Advisor by %s", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have promoted %s to Senior Advisor", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s(%d) has been made a Senior Advisor by %s(%d)", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), GetPlayerSQLId(playerid));
					Log("logs/admin.log", string);
				}
				case 4:
				{
					format(string, sizeof(string), "You have been promoted to Chief Advisor by %s", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have promoted %s to Chief Advisor", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s(%d) has been made a Chief Advisor by %s(%d)", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), GetPlayerSQLId(playerid));
					Log("logs/admin.log", string);
				}
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:makemoderator(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pAP] >= 2 || PlayerInfo[playerid][pHR] >= 3)
	{
		new string[128], giveplayerid, level;
		if(sscanf(params, "ui", giveplayerid, level)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /makemoderator [player] [level 1-2]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 2)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot do this to current admins!");
				return 1;
			}
			PlayerInfo[giveplayerid][pAdmin] = 1;
			if(level == 1) {
				PlayerInfo[giveplayerid][pSMod] = 0;
				format(string, sizeof(string), "You have been made a moderator by %s", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You have made %s a moderator.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s has been made a moderator by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/moderator.log", string);
			}
			else if(level == 2) {
				PlayerInfo[giveplayerid][pSMod] = 1;
				format(string, sizeof(string), "You have been made a senior moderator by %s", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You have made %s a senior moderator.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s has been made a senior moderator by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/moderator.log", string);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:removewatchdog(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	new pl;
	if(sscanf(params, "u", pl)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /removewatchdog [playerid]");
	if(!IsPlayerConnected(pl)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	if(PlayerInfo[pl][pWatchdog] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "This player is not a watchdog.");
	new string[128];
	PlayerInfo[pl][pWatchdog] = 0;
	format(string, sizeof(string), "You took %s's watchdog.", GetPlayerNameEx(pl));
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has kicked you out from the watchdog team.", GetPlayerNameEx(playerid));
	SendClientMessageEx(pl, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:removemoderator(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /removemoderator [player]");

		if(IsPlayerConnected(giveplayerid))
		{

			if(PlayerInfo[giveplayerid][pAdmin] == 1)
			{
				if(GetPVarInt(playerid, "AdvisorDuty") == 1)
				{
					DeletePVar(playerid, "AdvisorDuty");
					Advisors -= 1;
				}
				PlayerInfo[giveplayerid][pAdmin] = 0;
				PlayerInfo[giveplayerid][pSMod] = 0;
				format(string, sizeof(string), "%s has kicked you out from the moderator team.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You took %s's moderator.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s moderator has been removed by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/moderator.log", string);
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:makehelper(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pPR] > 0)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /makehelper [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot make admins community advisors!");
				return 1;
			}
			PlayerInfo[giveplayerid][pHelper] = 1;
			format(string, sizeof(string), "You have been made a helper by %s", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You have made %s a helper.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:takeadvisor(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pPR] > 0)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /takeadvisor [player]");

		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[playerid][pHelper] == 3 && PlayerInfo[giveplayerid][pHelper] != 1) {
		        SendClientMessageEx(playerid, COLOR_GREY, "You can only remove helpers.");
		        return 1;
		    }
			if(PlayerInfo[giveplayerid][pHelper] != 0)
			{
				if(GetPVarType(playerid, "AdvisorDuty"))
				{
					DeletePVar(playerid, "AdvisorDuty");
					Advisors -= 1;
				}
				PlayerInfo[giveplayerid][pHelper] = 0;
				format(string, sizeof(string), "%s has kicked you out from the Community Advisor team.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You took %s's Community Advisor rank.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:ahelp(playerid, params[]) {
	return cmd_ah(playerid, params);
}

CMD:ah(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
		if(PlayerInfo[playerid][pSMod] > 0) SendClientMessageEx(playerid, COLOR_GRAD1, "*** {FFFF00}SENIOR SERVER MODERATOR{B4B5B7} *** /jail /kick /staff /togstaff /changename /dmwatch /dmalert");
		else SendClientMessageEx(playerid, COLOR_GRAD1, "*** {FFFF00}SERVER MODERATOR{B4B5B7} *** /mjail /kick /staff /togstaff /dmwatch /dmalert");
	}
	if (PlayerInfo[playerid][pWatchdog] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2,"*** WATCH DOG *** /startwatch /nextwatch /stopwatch /dmalert /wd /watchlist /refer");
	}
	if (PlayerInfo[playerid][pWatchdog] >= 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2,"*** SENIOR WATCH DOG *** /watchspec /kick /ban /prison /n(un)mute /ad(un)mute /warn /kills");
	}
	if (PlayerInfo[playerid][pWatchdog] >= 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2,"*** RP SPECIALIST *** /watchdogs /restrictaccount /unrestrictaccount /togwd");
	}
	if (PlayerInfo[playerid][pWatchdog] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2,"*** Director of RP Improvement *** /makewatchdog /watchlistadd /watchlistremove /wdwhitelist");
	}
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2,"*** REPORTS *** /reports /ar /tr /sta /nao /st /post /dmr *** MOVEMENT *** /up /dn /fd /bk /lt /rt /fly");
		SendClientMessageEx(playerid, COLOR_GRAD2,"*** {00FF00}JUNIOR ADMIN{BFC0C2} *** /kick /ban /prison /freeze /unfreeze /slap /warn /admins /spec /levelones");
		SendClientMessageEx(playerid, COLOR_GRAD2,"*** {00FF00}JUNIOR ADMIN{BFC0C2} *** /sendto /gotopveh /gotocar /jetpack /god /check /anetstats /ipcheck /ip /nrn /listguns");
		SendClientMessageEx(playerid, COLOR_GRAD2,"*** {00FF00}JUNIOR ADMIN{BFC0C2} *** /setvw /setint /vehname /gethere /gotoid /hospital /goto /revive /bigears /skick /damagecheck");
		SendClientMessageEx(playerid, COLOR_GRAD2,"*** {00FF00}JUNIOR ADMIN{BFC0C2} *** /requestevent /watch /dmwatchlist /mark(2) /n(un)mute /ad(un)mute /checkinv /lastshot");
		SendClientMessageEx(playerid, COLOR_GRAD2,"*** {00FF00}JUNIOR ADMIN{BFC0C2} *** /wd /watchlist /watchdogs");
	}
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD3,"*** {00FF00}GENERAL ADMIN{CBCCCE} *** /noooc /nonewbie /fine /pfine /takeadminweapons /prisonaccount /entercar /getcar");
		SendClientMessageEx(playerid, COLOR_GRAD3,"*** {00FF00}GENERAL ADMIN{CBCCCE} *** /mole /setskin /countdown /release /forcedeath /rto(reset) /hhc /sgcheck /pg /mg /kos /nonrp");
		SendClientMessageEx(playerid, COLOR_GRAD3,"*** {00FF00}GENERAL ADMIN{CBCCCE} *** /gotoco /leaders /wepreset /owarn /ofine /okills /respawncar(s)");
		SendClientMessageEx(playerid, COLOR_GRAD3,"*** {00FF00}GENERAL ADMIN{CBCCCE} *** /reloadpvehicles /apark /aimpound /dmrmute /dmrlookup /dmtokens /sendtoid /dm");
	}
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD4,"*** {EE9A4D}SENIOR ADMIN{D8D8D8} *** /asellbiz /fixvehall /givenos /blowup /setname /savechars /dmstrikereset /cnn /respawnvipcars");
		SendClientMessageEx(playerid, COLOR_GRAD4,"*** {EE9A4D}SENIOR ADMIN{D8D8D8} *** /veh /fixveh /sethp /setarmor /givegun /givemoney /setmoney /setstat /setfightstyle /switchgroup /switchfam");
		SendClientMessageEx(playerid, COLOR_GRAD4,"*** {EE9A4D}SENIOR ADMIN{D8D8D8} *** /fcreate /fdelete /adivorce /destroycar /destroycars /eventhelp /contracts /sprison /banip /unbanip");
		SendClientMessageEx(playerid, COLOR_GRAD4,"*** {EE9A4D}SENIOR ADMIN{D8D8D8} *** /groupban /deletehit /setinsurance /cmotd /givelicense /adestroyplant /tl(edit/text/status/next)");
		SendClientMessageEx(playerid, COLOR_GRAD4,"*** {EE9A4D}SENIOR ADMIN{D8D8D8} *** /gotolabel /createpvehicle /destroypvehicle /vto /vtoreset /admingatepw /gotogate /dedit /fedit");
		SendClientMessageEx(playerid, COLOR_GRAD4,"*** {EE9A4D}SENIOR ADMIN{D8D8D8} *** /hnext /dmpnext /g(status/near/next/edit) /(goto/goin)door /(goto/goin)house /(create/delete/goto)point");
		SendClientMessageEx(playerid, COLOR_GRAD4,"*** {EE9A4D}SENIOR ADMIN{D8D8D8} *** /hedit /dd(edit/next/name/pass) /dmpedit /dmpnear /gotomapicon /gangwarn /gangunban /setcapping /banaccount");
		SendClientMessageEx(playerid, COLOR_GRAD4,"*** {EE9A4D}SENIOR ADMIN{D8D8D8} *** /removepvehicle /rcabuse /createmailbox /adestroymailbox /b(edit/next/name) /adestroycrate /gotocrate /srelease");
		SendClientMessageEx(playerid, COLOR_GRAD4,"*** {EE9A4D}SENIOR ADMIN{D8D8D8} *** /(create/edit/delete)gaspump /(goto/goin)biz /dvcreate /dvstatus /dvrespawn /dvedit /dveditslot /dvplate /checkvouchers");
		SendClientMessageEx(playerid, COLOR_GRAD4,"*** {EE9A4D}SENIOR ADMIN{D8D8D8} *** /checkvouchers /srelease /relog /ovmute /restrictaccount /unrestrictaccount /wdwhitelist");
	}
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		SendClientMessageEx(playerid, COLOR_GRAD5,"*** {FF0000}HEAD ADMIN{E3E3E3} *** /ha /setweather /makeleader /pedit /groupunban /groupcsfunban /giftall /removemoderator /makewatchdog");
		SendClientMessageEx(playerid, COLOR_GRAD5,"*** {FF0000}HEAD ADMIN{E3E3E3} *** /permaban /setcolor /payday /clearallreports /eventreset /amotd /motd /vipmotd /givetoken /giftgvip");
		SendClientMessageEx(playerid, COLOR_GRAD5,"*** {FF0000}HEAD ADMIN{E3E3E3} *** /vmute /vsuspend /gifts /rcreset /dvrespawnall /setarmorall /removewatchdog /dynamicgift /asellhouse");
		SendClientMessageEx(playerid, COLOR_GRAD5,"*** {FF0000}HEAD ADMIN{E3E3E3} *** /togfireworks /togshopnotices /spg /snonrp /smg /skos /undercover /makewatchdog /watchlistadd");
	}
	if (PlayerInfo[playerid][pAdmin] >= 1338)
	{
		SendClientMessageEx(playerid, COLOR_GRAD5,"*** {298EFF}LEAD HEAD ADMIN{E3E3E3} *** /setsec /suspend /osuspend /ounsuspend /osetrmutes /rmute /clearall /specreset /pausespec /random /vrandom");
		SendClientMessageEx(playerid, COLOR_GRAD5,"*** {298EFF}LEAD HEAD ADMIN{E3E3E3} *** /giftreset /searchvipm /vipgifts /buddyinvite /rewardplay");
	}
	if (PlayerInfo[playerid][pAdmin] >= 99999)
	{
		SendClientMessageEx(playerid, COLOR_GRAD6,"*** {298EFF}EXECUTIVE ADMIN{F0F0F0} *** /togspec /togtp /kickres /givecredits /setcredits /settotalcredits /setstpay /resetstpay /pmotd");
		SendClientMessageEx(playerid, COLOR_GRAD6,"*** {298EFF}EXECUTIVE ADMIN{F0F0F0} *** /setcode /togdynamicgift /dgedit /viewgiftbox");
	}
	if (PlayerInfo[playerid][pHR] >= 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Human Resources *** /givesprize /setsec");
	}
	if (PlayerInfo[playerid][pHR] >= 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Human Resources *** /makemoderator /makeadmin /rmute /suspend /osuspend /ounsuspend /osetrmutes");
	}
	if(PlayerInfo[playerid][pAP] >= 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Admin Personnel *** /makemoderator /makeadmin /rmute /suspend /osuspend /ounsuspend /osetrmutes");
	}
	if (PlayerInfo[playerid][pBanAppealer] >= 1) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Ban Appealer *** /unbanip /unban");
	if (PlayerInfo[playerid][pUndercover] >= 1) 
	{
		SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Spec Ops *** /setmystat /setmyname /setmyhp /setmyarmour /sprison /sdm /swarn");
		SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Spec Ops *** /spg /snonrp /smg /skos");
	}
	if (PlayerInfo[playerid][pGangModerator] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Gang Mod *** /switchfam /fedit /gangwarn /gangban /gangunban /fcreate /fdelete /twmenu /dvrespawn");
		SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Gang Mod *** /gtedit /gtstatus /gtnear /tagperm /tagedit");
	}
	if (PlayerInfo[playerid][pShopTech] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Shop Tech *** /orders /adjustoid /shop(car(del)/house/tokens/exp/plate/laser/vest/firework/viptokens/boombox/object) /gedit /gnear");
		SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Shop Tech *** /g(status/next) /hnext /goto(gate/door) /goinhouse /setvip /searchvipm /newgvip /renewgvip" );
		SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Shop Tech *** /shopbusiness /shopbusinessname /brenewal");
	}
	if (PlayerInfo[playerid][pShopTech] >= 3) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - DoCR *** /pmotd /ovmute /vipm");
	if (PlayerInfo[playerid][pFactionModerator] >= 1) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Faction Mod *** /switchgroup /groupcsfban /groupban /groupkick /leaders /dvrespawn");
	if (PlayerInfo[playerid][pPR] >= 1) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Public Relations *** /catokens /cmotd /makeadvisor /makehelper /takeadvisor");
	if (PlayerInfo[playerid][pAdmin] >= 1) SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	return 1;
}

CMD:chelp(playerid, params[]) {
	return cmd_ch(playerid, params);
}

CMD:ch(playerid, params[])
{
	if (PlayerInfo[playerid][pHelper] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessageEx(playerid, COLOR_GRAD1, "*1* HELPER *** (/newb)ie /hlkick /hlban");
	}
	if (PlayerInfo[playerid][pHelper] >= 2) SendClientMessageEx(playerid, COLOR_GRAD1, "*2* COMMUNITY ADVISOR *** (/c)advisor /nmute /admute /cduty /accepthelp /rhmute(reset) /advisors /dmwatch /dmalert /findnewb /showrequests");
	if (PlayerInfo[playerid][pHelper] >= 3) SendClientMessageEx(playerid, COLOR_GRAD1, "*3* SENIOR ADVISOR *** /requestevent /spec /makehelper /takeadvisor");
	if (PlayerInfo[playerid][pHelper] >= 4) SendClientMessageEx(playerid, COLOR_GRAD1, "*4* CHIEF ADVISOR *** /nonewbie /cmotd");
	if (PlayerInfo[playerid][pHelper] >= 1) SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	return 1;
}

CMD:getlicense(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid,2.0,366.54, 159.09, 1008.38)) { return 1; }
	if (PlayerInfo[playerid][pWantedLevel] > 0) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "You have an outstanding arrest warrant - acquisition of a license is prohibited.");
	ShowPlayerDialog(playerid, DIALOG_LICENSE_BUY, DIALOG_STYLE_LIST, "Select the type of license you wish to acquire.", "Driver's License ($5,000)\r\nBoating License ($5,000)\r\nPilot License ($25,000)\r\nTaxi License ($35,000)", "Purchase", "Cancel");
	return 1;
}

CMD:revokelicense(playerid, params[])
{
	if(IsACop(playerid) || (IsAMedic(playerid) && arrGroupData[PlayerInfo[playerid][pMember]][g_iAllegiance] == 2))
	{
		new string[128], giveplayerid, type, reason[64], sz_FacInfo[3][64];
		if(sscanf(params, "uds[64]", giveplayerid, type, reason))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /revokelicense [player] [type] [reason]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying");
			return 1;
		}

		if (playerid == giveplayerid) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't revoke your own licenses!");

		if((IsPlayerConnected(giveplayerid)) && giveplayerid != INVALID_PLAYER_ID)
		{
			if(GetPVarInt(playerid, "Injured") != 0) return SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
			if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessageEx (playerid, COLOR_GRAD2, "You aren't near that person!");
			switch(type)
			{
				case 1:
				{
					if(PlayerInfo[giveplayerid][pCarLic] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "This person has no driver's license to revoke.");

					GetPlayerGroupInfo(playerid, sz_FacInfo[0], sz_FacInfo[1], sz_FacInfo[2]);
					format(string,sizeof(string),"The %s has revoked your driver's license, reason: %s.", sz_FacInfo[2], reason);
					SendClientMessageEx(giveplayerid,COLOR_LIGHTBLUE,string);
					format(string,sizeof(string),"HQ: %s %s %s has revoked %s' driver's license, reason: %s.", sz_FacInfo[2], sz_FacInfo[0], GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					SendGroupMessage(1,TEAM_BLUE_COLOR,string);
					format(string,sizeof(string),"You have revoked %s' driver's license.",GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid,COLOR_WHITE,string);
					format(string, sizeof(string), "%s has taken %s' driver's license. reason: %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					Log("logs/licenses.log", string);
					PlayerInfo[giveplayerid][pCarLic] = 0;
					return 1;
				}
				case 2:
				{
					if(PlayerInfo[giveplayerid][pBoatLic] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "This person has no boating license to revoke.");

					GetPlayerGroupInfo(playerid, sz_FacInfo[0], sz_FacInfo[1], sz_FacInfo[2]);
					format(string,sizeof(string),"The %s has revoked your boater's license, reason: %s.", sz_FacInfo[2], reason);
					SendClientMessageEx(giveplayerid,COLOR_LIGHTBLUE,string);
					format(string,sizeof(string),"HQ: %s %s %s has revoked %s' boater's license, reason: %s.", sz_FacInfo[2], sz_FacInfo[0], GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					SendGroupMessage(1,TEAM_BLUE_COLOR,string);
					format(string,sizeof(string),"You have revoked %s' boater's license.",GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid,COLOR_WHITE,string);
					format(string, sizeof(string), "%s has taken %s' boater's license. reason: %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					Log("logs/licenses.log", string);
					PlayerInfo[giveplayerid][pBoatLic] = 0;
					return 1;
				}
				case 3:
				{
					if(PlayerInfo[giveplayerid][pFlyLic] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "This person has no pilot license to revoke.");

					GetPlayerGroupInfo(playerid, sz_FacInfo[0], sz_FacInfo[1], sz_FacInfo[2]);
					format(string,sizeof(string),"The %s has revoked your pilot's license, reason: %s.", sz_FacInfo[2], reason);
					SendClientMessageEx(giveplayerid,COLOR_LIGHTBLUE,string);
					format(string,sizeof(string),"HQ: %s %s %s has revoked %s' pilot's license, reason: %s.", sz_FacInfo[2], sz_FacInfo[0], GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					SendGroupMessage(1,TEAM_BLUE_COLOR,string);
					format(string,sizeof(string),"You have revoked %s' pilot's license.",GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid,COLOR_WHITE,string);
					format(string, sizeof(string), "%s has taken %s' pilot's license. reason: %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					Log("logs/licenses.log", string);
					PlayerInfo[giveplayerid][pFlyLic] = 0;
					return 1;
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
		return 1;
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorised to do this.");
	return 1;
}

CMD:givelicense(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid, type;
		if(sscanf(params, "ud", giveplayerid, type))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givelicense [player] [type]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying, 4 = Taxi.");
			return 1;
		}

		if(!IsPlayerConnected(giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
			return 1;
		}

		switch(type)
		{
		case 1:
			{
				if(PlayerInfo[giveplayerid][pCarLic] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This person already has a driver's license.");
					return 1;
				}
				format(string, sizeof(string), "You have given a driver's license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given you a driver's license.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given a driver's license to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pCarLic] = 1;
				return 1;
			}
		case 2:
			{
				if(PlayerInfo[giveplayerid][pBoatLic] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This person already has a boating license.");
					return 1;
				}
				format(string, sizeof(string), "You have given a boating license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given you a boating license.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given a boating license to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pBoatLic] = 1;
				return 1;
			}
		case 3:
			{
				if(PlayerInfo[giveplayerid][pFlyLic] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This person already has a pilot license.");
					return 1;
				}
				format(string, sizeof(string), "You have given a pilot license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given you a pilot license.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given a pilot license to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pFlyLic] = 1;
				return 1;
			}
		case 4:
			{
				if(PlayerInfo[giveplayerid][pTaxiLicense] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This person already has a taxi license.");
					return 1;
				}
				format(string, sizeof(string), "You have given a taxi license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given you a taxi license.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given a taxi license to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pTaxiLicense] = 1;
				return 1;
			}
		default:
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Invalid license type! /givelicense [player] [type]");
				SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying, 4 = Taxi.");
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You're not authorised to use this command.");
	return 1;
}

CMD:droplicense(playerid, params[])
{
	new string[128], type;
	if(sscanf(params, "d", type))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /droplicense [type]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying, 4 = Taxi.");
		return 1;
	}

	switch(type)
	{
		case 1:
		{
			if(PlayerInfo[playerid][pCarLic] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a driver's license to drop.");
				return 1;
			}
			format(string, sizeof(string), "You have dropped your driver's license.");
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pCarLic] = 0;
			return 1;
		}
		case 2:
		{
			if(PlayerInfo[playerid][pBoatLic] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a boating license to drop.");
				return 1;
			}
			format(string, sizeof(string), "You have dropped your boating license.");
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pBoatLic] = 0;
			return 1;
		}
		case 3:
		{
			if(PlayerInfo[playerid][pFlyLic] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a pilot license to drop.");
				return 1;
			}
			format(string, sizeof(string), "You have dropped your pilot license.");
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pFlyLic] = 0;
			return 1;
		}
		case 4:
		{
			if(PlayerInfo[playerid][pTaxiLicense] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a taxi license to drop.");
				return 1;
			}
			format(string, sizeof(string), "You have dropped your taxi license.");
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pTaxiLicense] = 0;
			return 1;
		}
		default:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Invalid license type! /droplicense [type]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying, 4 = Taxi.");
		}
	}
	return 1;
}

CMD:families(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pFMember] != INVALID_FAMILY_ID)
	{

		new
			string[128],
			familyid;

		if(sscanf(params, "d", familyid))
		{
			new number = 1;
			for(new i = 1; i < sizeof(FamilyInfo); i++)
			{
 	  			if(FamilyInfo[i][FamilyTurfTokens] < 12)
				{
					format(string, sizeof(string), "%s (%d) | Leader: %s | Members: %d | Claim Tokens: 0", FamilyInfo[i][FamilyName], number, FamilyInfo[i][FamilyLeader], FamilyInfo[i][FamilyMembers]);
				}
				else
				{
					format(string, sizeof(string), "%s (%d) | Leader: %s | Members: %d | Claim Tokens: %d", FamilyInfo[i][FamilyName], number, FamilyInfo[i][FamilyLeader], FamilyInfo[i][FamilyMembers], FamilyInfo[i][FamilyTurfTokens]/12);
				}
				number++;
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			return 1;
		}

		if(familyid < 1 || familyid > MAX_FAMILY)
		{
			format(string, sizeof(string), "Family slot must be between 1 and %i.", MAX_FAMILY);
			SendClientMessageEx(playerid, COLOR_GREY, string);
		 	return 1;
 	 	}
		if(FamilyInfo[familyid][FamilyTaken] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That family slot is empty.");
			return 1;
		}

		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				new division[GROUP_MAX_DIV_LEN];
				if(PlayerInfo[i][pFMember] == familyid && (PlayerInfo[i][pTogReports] == 1 || PlayerInfo[i][pAdmin] < 2))
				{
					if(0 <= PlayerInfo[i][pDivision] < 5)
					{
						format(division, sizeof(division), "%s", FamilyDivisionInfo[PlayerInfo[i][pFMember]][PlayerInfo[i][pDivision]]);
					} else {
						division = "None";
					}
					if(PlayerInfo[i][pRank] == 0)
					{
						format(string, sizeof(string), "* %s: %s | Rank: %s (0) | Division: %s.",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyRankInfo[familyid][0], division);
					}
					else if(PlayerInfo[i][pRank] == 1)
					{
						format(string, sizeof(string), "* %s: %s | Rank: %s (1) | Division: %s.",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyRankInfo[familyid][1], division);
					}
					else if(PlayerInfo[i][pRank] == 2)
					{
						format(string, sizeof(string), "* %s: %s | Rank: %s (2) | Division: %s.",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyRankInfo[familyid][2], division);
					}
					else if(PlayerInfo[i][pRank] == 3)
					{
						format(string, sizeof(string), "* %s: %s | Rank: %s (3) | Division: %s.",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyRankInfo[familyid][3], division);
					}
					else if(PlayerInfo[i][pRank] == 4)
					{
						format(string, sizeof(string), "* %s: %s | Rank: %s (4) | Division: %s.",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyRankInfo[familyid][4], division);
					}
					else if(PlayerInfo[i][pRank] == 5)
					{
						format(string, sizeof(string), "* %s: %s | Rank: %s (5) | Division: %s.",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyRankInfo[familyid][5], division);
					}
					else if(PlayerInfo[i][pRank] == 6)
					{
						format(string, sizeof(string), "* %s: %s | Rank: %s (6) | Division: %s.",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyRankInfo[familyid][6], division);
					}
					else
					{
						format(string, sizeof(string), "* %s: %s | Rank: %s | Division: %s.",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyRankInfo[familyid][0], division);
					}
					if(PlayerInfo[playerid][pFMember] == familyid && PlayerInfo[playerid][pRank] >= 5 && playerAFK[i] != 0 && playerAFK[i] > 60)
					{
						format(string, sizeof(string), "%s (AFK: %d minutes)", string, playerAFK[i] / 60);
					}
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
			}	
		}
	}
	else
	{
	    new string[128];
    	format(string, sizeof(string), "This command has been restricted to family members and administrators.");
    	SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	return 1;
}

CMD:fbalance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}

	new family, string[128];
	if(PlayerInfo[playerid][pFMember] < INVALID_FAMILY_ID)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}

	format(string, sizeof(string), "Your family has $%d in their account.", FamilyInfo[family][FamilyBank]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:fdeposit(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pFMember] < INVALID_FAMILY_ID)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}

	new string[128], file[32], month, day, year, amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fdeposit [amount]");
		format(string, sizeof(string), "Your family has $%s in their account.", number_format(FamilyInfo[family][FamilyBank]));
		SendClientMessageEx(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if (amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have that much.");
		return 1;
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = FamilyInfo[family][FamilyBank];
	FamilyInfo[family][FamilyBank] = amount + FamilyInfo[family][FamilyBank];
	SendClientMessageEx(playerid, COLOR_WHITE, "|___ FAMILY BANK STATEMENT ___|");
	format(string, sizeof(string), "  Old Balance: $%s", number_format(curfunds));
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Deposit: $%s", number_format(amount));
	SendClientMessageEx(playerid, COLOR_GRAD4, string);
	SendClientMessageEx(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), "  New Balance: $%s", number_format(FamilyInfo[family][FamilyBank]));
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	format(string,sizeof(string),"%s has deposited $%s into %s's bank account.", GetPlayerNameEx(playerid), number_format(amount), FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyName]);
	getdate(year, month, day);
	format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
	Log(file, string);
	return 1;
}

CMD:fwithdraw(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
	new family;
	if(PlayerInfo[playerid][pFMember] < INVALID_FAMILY_ID)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Only ranks five and six may use the family bank.");
		return 1;
	}

	new string[128], file[32], month, day, year, amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fwithdraw [amount]");
		format(string, sizeof(string), "Your family has $%s in their account.", number_format(FamilyInfo[family][FamilyBank]));
		SendClientMessageEx(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if (amount > FamilyInfo[family][FamilyBank] || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Your family doesn't have that much.");
		return 1;
	}

	GivePlayerCash(playerid, amount);
	FamilyInfo[family][FamilyBank] = FamilyInfo[family][FamilyBank] - amount;
	format(string, sizeof(string), "  You have withdrawn $%s from your family account. Total: $%s", number_format(amount), number_format(FamilyInfo[family][FamilyBank]));
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	format(string,sizeof(string),"%s has withdrawn $%s from %s's bank account.", GetPlayerNameEx(playerid), number_format(amount), FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyName]);
	getdate(year, month, day);
	format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
	Log(file, string);
	return 1;
}

CMD:fstoregun(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
	if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
	if(PlayerInfo[playerid][pDonateRank] > 2 || PlayerInfo[playerid][pFamed] > 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give away weapons if you're Gold+ VIP/Famed+!");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx (playerid, COLOR_GRAD2, "You can not store weapons from a vehicle!");
	new Float:health;
	GetPlayerHealth(playerid, health);
	if (health < 80) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can not store weapons if your health is below 80!");
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid] != 0 || PlayerInfo[playerid][pHospital] != 0 || GetPlayerState(playerid) == 7) 
		return SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
	if(PlayerInfo[playerid][pMember] != INVALID_GROUP_ID) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can not store weapons in a family safe when in a faction!");

	new family;
	if(PlayerInfo[playerid][pFMember] < INVALID_FAMILY_ID) family = PlayerInfo[playerid][pFMember];
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");

	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fstoregun [weapon] [slot]");
	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "You must wait %d seconds before depositing another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		return SendClientMessageEx(playerid,COLOR_GREY,string);
	}
	if(slot < 1 || slot > 10) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
	if( FamilyInfo[family][FamilyGuns][slot-1] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "Your family has a weapon stored in that slot already.");
	if(IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]) && GetPlayerVirtualWorld(playerid) == FamilyInfo[family][FamilySafeVW] && GetPlayerInterior(playerid) == FamilyInfo[family][FamilySafeInt])
	{
		new weapon;
		if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
		{
			if( PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0 )
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a silenced pistol into your gun locker.");
				weapon = PlayerInfo[playerid][pGuns][2];
				format(string,sizeof(string), "* %s deposited their silenced pistol in a safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
		}
		else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
		{
			if( PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0 )
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a Desert Eagle in your gun locker.");
				weapon = PlayerInfo[playerid][pGuns][2];
				format(string,sizeof(string), "* %s deposited their Desert Eagle in a safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
		}
		else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
		{
			if( PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0 )
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a shotgun in your gun locker.");
				weapon = PlayerInfo[playerid][pGuns][3];
				format(string,sizeof(string), "* %s deposited their Shotgun in a safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
		}
		else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
		{
			if( PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0 )
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a combat shotgun in your gun locker.");
				weapon = PlayerInfo[playerid][pGuns][3];
				format(string,sizeof(string), "* %s deposited their Combat Shotgun in a safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
		}
		else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
		{
			if( PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0 )
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an MP5 in your gun locker.");
				weapon = PlayerInfo[playerid][pGuns][4];
				format(string,sizeof(string), "* %s deposited their MP5 in a safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
		}
		else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
		{
			if( PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0 )
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an AK-47 in your gun locker.");
				weapon = PlayerInfo[playerid][pGuns][5];
				format(string,sizeof(string), "* %s deposited their AK-47 in a safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
		}
		else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
		{
			if( PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0 )
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an M4 in your gun locker.");
				weapon = PlayerInfo[playerid][pGuns][5];
				format(string,sizeof(string), "* %s deposited their M4 in a safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
		}
		else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
		{
			if( PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0 )
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a rifle in your gun locker.");
				weapon = PlayerInfo[playerid][pGuns][6];
				format(string,sizeof(string), "* %s deposited their rifle in a safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
		}
		else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
		{
			if( PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0 )
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a sniper rifle in your gun locker.");
				weapon = PlayerInfo[playerid][pGuns][6];
				format(string,sizeof(string), "* %s deposited their sniper rifle in a safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
		}
		else return SendClientMessageEx(playerid,COLOR_GREY,"   Invalid weapon name!"); 
		if(weapon == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that weapon.");
		if(FamilyInfo[family][FamilyGuns][slot-1] == 0)
		{
			FamilyInfo[family][FamilyGuns][slot-1] = weapon;
			RemovePlayerWeapon(playerid, weapon);
			SaveFamily(family);
			return 1;
		}
	}
	else
	{
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not at your family safe.");
	}
	return 1;
}

CMD:fgetgun(playerid, params[])
{
	new string[128], slot;
	if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");

	new family;
	if(PlayerInfo[playerid][pFMember] < INVALID_FAMILY_ID) family = PlayerInfo[playerid][pFMember];
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can not get weapons from a vehicle!");

	if(sscanf(params, "d", slot))
	{
		new weaponname[50];
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		format(string, sizeof(string), "*** %s Safe ***", FamilyInfo[family][FamilyName]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		for(new s = 0; s < 10; s++)
		{
			if( FamilyInfo[family][FamilyGuns][s] != 0 )
			{
				GetWeaponName(FamilyInfo[family][FamilyGuns][s], weaponname, sizeof(weaponname));
				format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fgetgun [slot]");
		return 1;
	}

	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before getting another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		return SendClientMessageEx(playerid,COLOR_GREY,string);
	}

	if(slot < 1 || slot > 10) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
	if(PlayerInfo[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "Only rank 4+ can withdraw guns from the family safe.");
	if(IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]) && GetPlayerVirtualWorld(playerid) == FamilyInfo[family][FamilySafeVW] && GetPlayerInterior(playerid) == FamilyInfo[family][FamilySafeInt])
	{
		if(FamilyInfo[family][FamilyGuns][slot-1] != 0)
		{
			new weaponname[50];
			GetWeaponName(FamilyInfo[family][FamilyGuns][slot-1], weaponname, sizeof(weaponname));
			GivePlayerValidWeapon(playerid, FamilyInfo[family][FamilyGuns][slot-1], 60000);
			FamilyInfo[family][FamilyGuns][slot-1] = 0;
			if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a silenced pistol from your family's gun locker.");
				format(string,sizeof(string), "* %s has withdrawn a silenced pistol from a family safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a Desert Eagle from your family's gun locker.");
				format(string,sizeof(string), "* %s has withdrawn a Desert Eagle from a family safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a shotgun from your family's gun locker.");
				format(string,sizeof(string), "* %s has withdrawn a shotgun from a family safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a combat shotgun from your family's gun locker.");
				format(string,sizeof(string), "* %s has withdrawn a combat shotgun from a family safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an MP5 from your family's gun locker.");
				format(string,sizeof(string), "* %s has withdrawn an MP5 from a family safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an AK-47 from your family's gun locker.");
				format(string,sizeof(string), "* %s has withdrawn an AK-47 from a family safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an M4 from your family's gun locker.");
				format(string,sizeof(string), "* %s has withdrawn an M4 from a family safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a rifle from your family's gun locker.");
				format(string,sizeof(string), "* %s has withdrawn a rifle from a family safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a sniper rifle from your family's gun locker.");
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				format(string,sizeof(string), "* %s has withdrawn a sniper rifle from a safe.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			SaveFamily(family);
			return 1;
		}
		else
		{
			return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
		}
	}
	else
	{
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not at your family safe.");
	}
}

CMD:safedeposit(playerid, params[]) // TransferStorage(playerid, storageid, fromplayerid, fromstorageid, itemid, amount, price, special)
{
	new family;

	if(PlayerInfo[playerid][pFMember] < INVALID_FAMILY_ID) family = PlayerInfo[playerid][pFMember];
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");

	if(FamilyInfo[family][FamilyUSafe] < 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "Your family has not upgraded their safe.");

	new string[128], itemid, storageid, amount;

	if(sscanf(params, "dd", itemid, amount) || itemid < 1 || itemid > 5)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /safedeposit [itemid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials - (5) Heroin");
		return 1;
	}
	if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't deposit less than 1.");
	if(IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]) && GetPlayerVirtualWorld(playerid) == FamilyInfo[family][FamilySafeVW] && GetPlayerInterior(playerid) == FamilyInfo[family][FamilySafeInt])
	{
		new file[32], month, day, year;
		getdate(year,month,day);
		switch(itemid)
		{
			case 1: // Cash
			{
				if(storageid == 0) {
					if(PlayerInfo[playerid][pCash] >= amount) PlayerInfo[playerid][pCash] -= amount;
					else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
				}
				else {
					if(StorageInfo[playerid][storageid-1][sCash] >= amount) StorageInfo[playerid][storageid-1][sCash] -= amount;
					else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
				}

				FamilyInfo[family][FamilyCash] += amount;
				format(string, sizeof(string), "You have deposited $%s to your family's safe.", number_format(amount));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				OnPlayerStatsUpdate(playerid);
				format(string, sizeof(string), "%s has deposited $%s into %s's safe", GetPlayerNameEx(playerid), number_format(amount), FamilyInfo[family][FamilyName]);
				format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
				Log(file, string);
			}
			case 2: // Pot
			{
				if(storageid == 0) {
					if(PlayerInfo[playerid][pPot] >= amount) PlayerInfo[playerid][pPot] -= amount;
					else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
				}
				else {
					if(StorageInfo[playerid][storageid-1][sPot] >= amount) StorageInfo[playerid][storageid-1][sPot] -= amount;
					else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
				}

				FamilyInfo[family][FamilyPot] += amount;
				format(string, sizeof(string), "You have deposited %s grams of pot to your family's safe.", number_format(amount));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				OnPlayerStatsUpdate(playerid);
				format(string, sizeof(string), "%s has deposited %s pot into %s's safe", GetPlayerNameEx(playerid), number_format(amount), FamilyInfo[family][FamilyName]);
				format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
				Log(file, string);
			}
			case 3: // Crack
			{
				if(storageid == 0) {
					if(PlayerInfo[playerid][pCrack] >= amount) PlayerInfo[playerid][pCrack] -= amount;
					else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
				}
				else {
					if(StorageInfo[playerid][storageid-1][sCrack] >= amount) StorageInfo[playerid][storageid-1][sCrack] -= amount;
					else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
				}

				FamilyInfo[family][FamilyCrack] += amount;
				format(string, sizeof(string), "You have deposited %s grams of crack to your family's safe.", number_format(amount));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				OnPlayerStatsUpdate(playerid);
				format(string, sizeof(string), "%s has deposited %s crack into %s's safe", GetPlayerNameEx(playerid), number_format(amount), FamilyInfo[family][FamilyName]);
				format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
				Log(file, string);
			}
			case 4: // Materials
			{
				if(storageid == 0) {
					if(PlayerInfo[playerid][pMats] >= amount) PlayerInfo[playerid][pMats] -= amount;
					else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
				}
				else {
					if(StorageInfo[playerid][storageid-1][sMats] >= amount) StorageInfo[playerid][storageid-1][sMats] -= amount;
					else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
				}

				FamilyInfo[family][FamilyMats] += amount;
				format(string, sizeof(string), "You have deposited %s materials to your family's safe.", number_format(amount));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				OnPlayerStatsUpdate(playerid);
				format(string, sizeof(string), "%s has deposited %s materials into %s's safe", GetPlayerNameEx(playerid), number_format(amount), FamilyInfo[family][FamilyName]);
				format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
				Log(file, string);
			}
			case 5: // Heroin
			{
				if(PlayerInfo[playerid][pHeroin] >= amount) PlayerInfo[playerid][pHeroin] -= amount;
				else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");

				FamilyInfo[family][FamilyHeroin] += amount;
				format(string, sizeof(string), "You have deposited %s heroin to your family's safe.", number_format(amount));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				OnPlayerStatsUpdate(playerid);
				format(string, sizeof(string), "%s has deposited %s heroin into %s's safe", GetPlayerNameEx(playerid), number_format(amount), FamilyInfo[family][FamilyName]);
				format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
				Log(file, string);
			}
		}
	}
	else
	{
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not at your family safe.");
	}
	return 1;
}

CMD:safewithdraw(playerid, params[]) // TransferStorage(playerid, storageid, fromplayerid, fromstorageid, itemid, amount, price, special)
{
	new family;

	if(PlayerInfo[playerid][pFMember] < INVALID_FAMILY_ID) family = PlayerInfo[playerid][pFMember];
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");

	if(FamilyInfo[family][FamilyUSafe] < 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "Your family has not upgraded their safe.");
	if(PlayerInfo[playerid][pRank] < 5) return SendClientMessageEx(playerid, COLOR_GRAD1, "Only ranks 5 and 6 can withdraw items from the family safe.");

	new itemid, amount, string[128];
	if(sscanf(params, "dd", itemid, amount) || (itemid < 1 || itemid > 5))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /safewithdraw [itemid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials - (5) Heroin");
		return 1;
	}

	if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't withdraw less than 1.");
	if(IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]) && GetPlayerVirtualWorld(playerid) == FamilyInfo[family][FamilySafeVW] && GetPlayerInterior(playerid) == FamilyInfo[family][FamilySafeInt])
	{
		switch(itemid)
		{
			case 1: // Cash
			{
				if(FamilyInfo[family][FamilyCash] >= amount)
				{
					SetPVarInt(playerid, "Special_FamilyID", family);
					TransferStorage(playerid, -1, -1, -1, itemid, amount, -1, 5);
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "Your family safe does not have enough for you to withdraw!");
			}
			case 2: // Pot
			{
				if(FamilyInfo[family][FamilyPot] >= amount)
				{
					SetPVarInt(playerid, "Special_FamilyID", family);
					TransferStorage(playerid, -1, -1, -1, itemid, amount, -1, 5);
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "Your family safe does not have enough for you to withdraw!");
			}
			case 3: // Crack
			{
				if(FamilyInfo[family][FamilyCrack] >= amount)
				{
					SetPVarInt(playerid, "Special_FamilyID", family);
					TransferStorage(playerid, -1, -1, -1, itemid, amount, -1, 5);
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "Your family safe does not have enough for you to withdraw!");
			}
			case 4: // Materials
			{
				if(FamilyInfo[family][FamilyMats] >= amount)
				{
					SetPVarInt(playerid, "Special_FamilyID", family);
					TransferStorage(playerid, -1, -1, -1, itemid, amount, -1, 5);
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "Your family safe does not have enough for you to withdraw!");
			}
			case 5: // Heroin
			{
				if(FamilyInfo[family][FamilyHeroin] >= amount)
				{
					new file[32], month, day, year;
					getdate(year,month,day);
					FamilyInfo[family][FamilyHeroin] -= amount;
					PlayerInfo[playerid][pHeroin] += amount;
					OnPlayerStatsUpdate(playerid);
					format(string, sizeof(string), "You have withdrawn %s heroin from your family safe.", number_format(amount));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "%s has withdrawn %s heroin from %s's safe", GetPlayerNameEx(playerid), number_format(amount), FamilyInfo[family][FamilyName]);
					format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
					Log(file, string);
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "Your family safe does not have enough for you to withdraw!");
			}
		}
	}
	else
	{
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not at your family safe.");
	}
	return 1;
}

CMD:adjust(playerid, params[])
{
	if(PlayerInfo[playerid][pFMember] == INVALID_FAMILY_ID)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't in a family.");
		return 1;
	}
	new family = PlayerInfo[playerid][pFMember];
	new string[128], file[32], month, day, year;
	getdate(year,month,day);
	if(PlayerInfo[playerid][pRank] >= 5)
	{
		new choice[32], opstring[100];
		if(sscanf(params, "s[32]S[100]", choice, opstring))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjust [name]");
			SendClientMessageEx(playerid, COLOR_WHITE, "Available Names: Name, Safe");
			return 1;
		}

		if(strcmp(choice,"name",true) == 0)
		{
			if(PlayerInfo[playerid][pRank] == 6)
			{
				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjust name [family name]");
					return 1;
				}
				if(strfind(opstring, "|", true) != -1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2,  "You can't use '|' in a family name.");
					return 1;
				}
				if(strlen(opstring) >= 40 )
				{
					SendClientMessageEx( playerid, COLOR_GRAD1, "That family name is too long, please refrain from using more than 40 characters." );
					return 1;
				}
				strmid(FamilyInfo[family][FamilyName], opstring, 0, strlen(opstring), 100);
				SaveFamilies();
				SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted your family's name.");
				format(string, sizeof(string), "%s adjusted %s's name to %s", GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName], opstring);
				format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
				Log(file, string);
			}
		}
		else if(strcmp(choice,"safe",true) == 0)
		{
			if(PlayerInfo[playerid][pRank] == 6)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "Adjusting your Family Safe will reset all your safe stats.");
				SendClientMessageEx(playerid, COLOR_GRAD1, "If you want to adjust your safe, type /adjust confirm.");
				SendClientMessageEx(playerid, COLOR_GRAD1, "Upgrading your family safe will cost $50,000.");
				return 1;
			}
		}
		else if(strcmp(choice,"confirm",true) == 0)
		{
			if(PlayerInfo[playerid][pRank] == 6)
			{
				if(GetPlayerCash(playerid) < 50000)
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have $50,000 to upgrade your family safe.");
					return 1;
				}
				GivePlayerCash(playerid, -50000);
				GetPlayerPos(playerid, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]);
				FamilyInfo[family][FamilySafeVW] = GetPlayerVirtualWorld(playerid);
				FamilyInfo[family][FamilySafeInt] = GetPlayerInterior(playerid);
				FamilyInfo[family][FamilyCash] = 0;
				FamilyInfo[family][FamilyMats] = 0;
				FamilyInfo[family][FamilyPot] = 0;
				FamilyInfo[family][FamilyCrack] = 0;
				if(FamilyInfo[family][FamilyUSafe]) DestroyDynamicPickup(FamilyInfo[family][FamilyPickup]);
				FamilyInfo[family][FamilyUSafe] = 1;
				FamilyInfo[family][FamilyPickup] = CreateDynamicPickup(1239, 23, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2], .worldid = FamilyInfo[family][FamilySafeVW], .interiorid = FamilyInfo[family][FamilySafeInt]);
				SaveFamilies();
				SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted your family's Safe.");
				format(string, sizeof(string), "%s adjusted %s's safe", GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName]);
				format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
				Log(file, string);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You do not have a high enough rank to use this command!");
		return 1;
	}
	return 1;
}

CMD:fmotd(playerid, params[])
{
	if(PlayerInfo[playerid][pFMember] == INVALID_FAMILY_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You aren't in a family.");
	if(PlayerInfo[playerid][pRank] < 5) return SendClientMessageEx(playerid, COLOR_GREY, "   You do not have a high enough rank to use this command!");
	new string[128], slot, family = PlayerInfo[playerid][pFMember];
	if(sscanf(params, "ds[128]", slot, string)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fmotd [slot] [family MOTD text]");
	if(strlen(string) > 128) return SendClientMessageEx( playerid, COLOR_GRAD1, "That MOTD is too long, please refrain from using more than 128 characters." );
	if(1 <= slot <= 3)
	{
		new file[32], month, day, year ;
		getdate(year,month,day);
		strmid(FamilyMOTD[family][slot-1], string, 0, strlen(string), 128);
		SaveFamilies();
		format(string, sizeof(string), "%s adjusted %s's MOTD (slot %d) to %s", GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName], slot, string);
		format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
		Log(file, string);
		format(string, sizeof(string),"You've adjusted your family's MOTD in slot %d.", slot);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "Slot ID Must be between 1 and 3!");
	return 1;
}

CMD:viewmotd(playerid, params[])
{
	new string[128], option[16];
	if(sscanf(params, "s[16]", option)) 
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /viewmotd [option]");
		strcat(string, "Available Options: global");
		if(PlayerInfo[playerid][pDonateRank] >= 1) strcat(string, ", vip");
		if(PlayerInfo[playerid][pFMember] != INVALID_FAMILY_ID) strcat(string, ", family");
		if(PlayerInfo[playerid][pMember] != INVALID_GROUP_ID) strcat(string, ", group");
		if(PlayerInfo[playerid][pHelper] >= 1) strcat(string, ", advisor");
		if(PlayerInfo[playerid][pAdmin] > 1) strcat(string, ", admin");
		return SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	if(strcmp(option, "global", true) == 0) return SendClientMessageEx(playerid, COLOR_YELLOW, GlobalMOTD);
	if(strcmp(option, "vip", true) == 0 && PlayerInfo[playerid][pDonateRank] >= 1) return SendClientMessageEx(playerid, COLOR_VIP, VIPMOTD);
	if(strcmp(option, "family", true) == 0 && PlayerInfo[playerid][pFMember] != INVALID_FAMILY_ID)
	{
		new fam = PlayerInfo[playerid][pFMember];
		SendClientMessageEx(playerid, COLOR_WHITE, "Family MOTD's:");
		for(new i = 1; i <= 3; i++)
		{
			format(string, sizeof(string), "%d: %s", i, FamilyMOTD[fam][i-1]);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
		}
	}
	if(strcmp(option, "group", true) == 0 && PlayerInfo[playerid][pMember] != INVALID_GROUP_ID)
		return SendClientMessageEx(playerid, arrGroupData[PlayerInfo[playerid][pMember]][g_hDutyColour] * 256 + 255, arrGroupData[PlayerInfo[playerid][pMember]][g_szGroupMOTD]);
	if(strcmp(option, "advisor", true) == 0 && PlayerInfo[playerid][pHelper] >= 1) return SendClientMessageEx(playerid, TEAM_AZTECAS_COLOR, CAMOTD);
	if(strcmp(option, "admin", true) == 0 && PlayerInfo[playerid][pAdmin] > 1) return SendClientMessageEx(playerid, COLOR_YELLOW, AdminMOTD);
	return 1;
}

CMD:adjustrankname(playerid, params[])
{
	if(PlayerInfo[playerid][pFMember] == INVALID_FAMILY_ID)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't in a family.");
		return 1;
	}
	new family = PlayerInfo[playerid][pFMember];
	new string[128], rank, rankname[30];
	if(sscanf(params, "ds[30]", rank, rankname)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjustrankname [rank number 0-6] [rank name]");

	if(PlayerInfo[playerid][pRank] == 6)
	{
		if(rank < 0 || rank > 6)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Rank number must be from 0 to 6.");
			return 1;
		}
		if(strfind(rankname, "|", true) != -1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2,  "You can't use '|' in a rank name.");
			return 1;
		}
		if(strlen(rankname) >= 19 )
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "That rank name is too long, please refrain from using more than 19 characters.");
			return 1;
		}

		new file[32], month, day, year ;
		getdate(year,month,day);
		format(FamilyRankInfo[family][rank], 30, "%s", rankname);
		SaveFamily(family);
		format(string, sizeof(string), "* You have changed rank %d to %s.", rank, rankname);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s adjusted %s's rank %d to %s", GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName], rank, rankname);
		format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
		Log(file, string);
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "   You are not high rank enough to use this command!");
	return 1;
}

CMD:fcreate(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 3 || PlayerInfo[playerid][pGangModerator] >= 1)
	{
		new string[128], family, giveplayerid;
		if(sscanf(params, "du", family, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fcreate [FamilyNr] [player]");
		if(family < 1 || family > MAX_FAMILY-1) {
			format(string, sizeof(string), "   FamilyNr can't be below 1 or above %i!", MAX_FAMILY-1);
		 	SendClientMessageEx(playerid, COLOR_GREY, string);
	 	    return 1;
	   }

		if(IsPlayerConnected(giveplayerid))
		{
			if(FamilyInfo[family][FamilyTaken] == 1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That Family Slot is already taken!" );
				return 1;
			}

			format(string, sizeof(string), "* You've made %s the Leader of Family Slot %d.",GetPlayerNameEx(giveplayerid),family);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Admin %s has made you a Family Leader.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);

			new sendername[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s",sendername);
			strmid(FamilyInfo[family][FamilyLeader], string, 0, strlen(string), 24);
			FamilyInfo[family][FamilyMembers] ++;
			FamilyInfo[family][FamilyTaken] = 1;
			PlayerInfo[giveplayerid][pFMember] = family;
			PlayerInfo[giveplayerid][pRank] = 6;
			PlayerInfo[giveplayerid][pDivision] = 0;
			SaveFamily(family);

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	return 1;
}

CMD:fdelete(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 3 || PlayerInfo[playerid][pGangModerator] >= 1)
	{
		new family, string[128];
		if(sscanf(params, "d", family)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fdelete [familyid]");

		if(family < 1 || family > MAX_FAMILY-1) {
	 		format(string,sizeof(string), "   Family Slot can't be below 1 or above %i!", MAX_FAMILY-1);
			SendClientMessageEx(playerid, COLOR_GREY, string);
		 	return 1;
	 	}
		if(FamilyInfo[family][FamilyTaken] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That Family Slot isn't taken!");
			return 1;
		}
		ClearFamily(family);
		SaveFamily(family);
	}
	return 1;
}

CMD:ram(playerid, params[])
{
	if(IsACop(playerid) || IsAMedic(playerid))
	{
		if(GetPVarInt(playerid, "IsInArena") >= 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
			return 1;
		}
		if( PlayerCuffed[playerid] >= 1 )
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
			return 1;
		}

		new string[128];
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
			{
				format(string, sizeof(string), "* %s breaches the door, and enters.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPlayerInterior(playerid,HouseInfo[i][hIntIW]);
				SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
				GameTextForPlayer(playerid, "~r~Breached the door", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[i][hIntIW];
				PlayerInfo[playerid][pVW] = HouseInfo[i][hIntVW];
				SetPlayerVirtualWorld(playerid,HouseInfo[i][hIntVW]);
				if(HouseInfo[i][hCustomInterior] == 1) Player_StreamPrep(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ], FREEZE_TIME);
				return 1;
			}
		}
		if(PlayerInfo[playerid][pRank] > 3)
		{
			for(new i = 0; i < sizeof(DDoorsInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW] && DDoorsInfo[i][ddVIP] > 0)
				{
					SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
					PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
					PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
					SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
					SetPlayerColor(playerid, COLOR_RED);
					if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
						SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
						SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
						SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
						LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
					}
					else {
						SetPlayerPos(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
						SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
						SetCameraBehindPlayer(playerid);
					}
					if(DDoorsInfo[i][ddCustomInterior]) Player_StreamPrep(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ], FREEZE_TIME);
					return 1;
				}
			}
		}
	    for(new i = 0; i < sizeof(Businesses); i++) {
	        if (IsPlayerInRangeOfPoint(playerid,3,Businesses[i][bExtPos][0], Businesses[i][bExtPos][1], Businesses[i][bExtPos][2])) {
		        if (Businesses[i][bExtPos][1] == 0.0) return 1;
				format(string, sizeof(string), "* %s breaches the door, and enters.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPlayerInterior(playerid,Businesses[i][bInt]);
		        if(Businesses[i][bVW] == 0) SetPlayerVirtualWorld(playerid, BUSINESS_BASE_VW + i), PlayerInfo[playerid][pVW] = BUSINESS_BASE_VW + i;
		        else SetPlayerVirtualWorld(playerid, Businesses[i][bVW]), PlayerInfo[playerid][pVW] = Businesses[i][bVW];
		        SetPlayerPos(playerid,Businesses[i][bIntPos][0],Businesses[i][bIntPos][1],Businesses[i][bIntPos][2]);
			    SetPlayerFacingAngle(playerid, Businesses[i][bIntPos][3]);
		        SetCameraBehindPlayer(playerid);
				GameTextForPlayer(playerid, "~r~Breached the door", 5000, 1);
				return 1;
	        }
	    }
		if (IsPlayerInRangeOfPoint(playerid,4.0,648.7888,-1360.7708,13.5875))
		{
			format(string, sizeof(string), "* %s breaches the door, and enters.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerInterior(playerid,1);
			PlayerInfo[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 4225);
			PlayerInfo[playerid][pVW] = 4225;
			SetPlayerPos(playerid,626.4980,21.4223,1107.9686);
			SetPlayerFacingAngle(playerid, 178.6711);
			Player_StreamPrep(playerid, 626.4980,21.4223,1107.9686, FREEZE_TIME);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:divorce(playerid, params[])
{
	if(PlayerInfo[playerid][pMarriedID] == -1) return SendClientMessageEx(playerid, COLOR_GREY, "You're not married!");

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /divorce [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			new dstring[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			new giveplayer[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "%s", giveplayer);
			strmid(wstring, string, 0, strlen(string), 24);
			format(string, sizeof(string), "%s", PlayerInfo[playerid][pMarriedName]);
			strmid(dstring, string, 0, strlen(string), 24);
			if(strcmp(dstring ,wstring, true ) == 0 )
			{
				format(string, sizeof(string), "* You've sent Divorce Papers to %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s just sent you their Divorce Papers (type /accept divorce) to accept.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				DivorceOffer[giveplayerid] = playerid;
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That person is not Married to you!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
}

CMD:adivorce(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adivorce [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			ClearMarriage(giveplayerid);
			format(string, sizeof(string), "* You've admin divorced %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* You have been admin divorced by an admin.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			DivorceOffer[giveplayerid] = playerid;
			return 1;

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}
}

CMD:propose(playerid, params[])
{
	if(GetPlayerCash(playerid) < 100000) return SendClientMessageEx(playerid, COLOR_GREY, "   The marriage and reception costs $100,000!");
	if(PlayerInfo[playerid][pMarriedID] != -1) return SendClientMessageEx(playerid, COLOR_GREY, "   You're already married!");

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /propose [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[giveplayerid][pMarriedID] != -1) return SendClientMessageEx(playerid, COLOR_GREY, "   That person is already married!");
		else if(MarryWitness[playerid] == giveplayerid || MarryWitnessOffer[giveplayerid] == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "   You can't marry the witness!");

		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Propose to yourself!"); return 1; }
			format(string, sizeof(string), "* You proposed to %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s just proposed to you (type /accept marriage) to accept.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			ProposeOffer[giveplayerid] = playerid;
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");

	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	return 1;
}

CMD:witness(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /witness [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Propose to yourself!"); return 1; }
			if(ProposeOffer[giveplayerid] == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "Your spouse can't be the marriage witness!"); return 1; }
			format(string, sizeof(string), "* You requested %s to be your Marriage Witness.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s just requested you to be their Marriage Witness (type /accept witness) to accept.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			MarryWitnessOffer[giveplayerid] = playerid;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:settax(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] != INVALID_GROUP_ID && arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] != 5) {
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a Government Leader.");
		return 1;
	}

	new string[128], tax;
	if(sscanf(params, "d", tax)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /settax [percentage]");

	if (tax < 1 || tax > 29)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Percentage must be greater than 0 and below 30.");
		return 1;
	}
	if(arrGroupData[PlayerInfo[playerid][pLeader]][g_iAllegiance] == 1)
	{
		TaxValue = tax;
		Misc_Save();
		format(string, sizeof(string), "The SA income tax has been set to %d percent (of each paycheck).", TaxValue);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	}
	if(arrGroupData[PlayerInfo[playerid][pLeader]][g_iAllegiance] == 2)
	{
		TRTaxValue = tax;
		Misc_Save();
		format(string, sizeof(string), "The TR income tax has been set to %d percent (of each paycheck).", TRTaxValue);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:taxwithdraw(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] != INVALID_GROUP_ID && arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] != 5)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a Government Leader.");
		return 1;
	}

	new string[128], amount, reason[64];
	if(arrGroupData[PlayerInfo[playerid][pLeader]][g_iAllegiance] == 1)
	{
		if(sscanf(params, "ds[64]", amount, reason))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /taxwithdraw [amount] [reason]");
			format(string, sizeof(string), "* VAULT BALANCE: $%s.", number_format(Tax));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}

		if(amount < 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Invalid amount specified.");
			return 1;
		}
		if( Tax > amount )
		{
			Tax -= amount;
			Misc_Save();
			GivePlayerCash( playerid, amount );
			format( string, sizeof( string ), "You have withdrawn $%s from the vault.", number_format(amount) );
			SendClientMessageEx( playerid, COLOR_WHITE, string );
			format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has withdrawn $%s of the SA tax money from the vault, reason: %s.",GetPlayerNameEx(playerid),number_format(amount),reason);
			ABroadCast( COLOR_YELLOW, string, 2);
			Log("logs/rpspecial.log", string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Insufficient funds are available.");
		}
	}
	if(arrGroupData[PlayerInfo[playerid][pLeader]][g_iAllegiance] == 2)
	{
		if(sscanf(params, "ds[64]", amount, reason))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /taxwithdraw [amount] [reason]");
			format(string, sizeof(string), "* VAULT BALANCE: $%s.", number_format(TRTax));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}

		if(amount < 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Invalid amount specified.");
			return 1;
		}
		if( TRTax > amount )
		{
			TRTax -= amount;
			Misc_Save();
			GivePlayerCash( playerid, amount );
			format( string, sizeof( string ), "You have withdrawn $%s from the vault.", number_format(amount) );
			SendClientMessageEx( playerid, COLOR_WHITE, string );
			format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has withdrawn $%s of the TR tax money from the vault, reason: %s.",GetPlayerNameEx(playerid),number_format(amount),reason);
			ABroadCast( COLOR_YELLOW, string, 2);
			Log("logs/rpspecial.log", string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Insufficient funds are available.");
		}
	}

	return 1;
}

CMD:taxdeposit(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] != INVALID_GROUP_ID && arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] != 5)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a Government Leader.");
		return 1;
	}

	new string[128], amount;
	if(arrGroupData[PlayerInfo[playerid][pLeader]][g_iAllegiance] == 1)
	{
		if(sscanf(params, "d", amount))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /taxdeposit [amount]");
			format(string, sizeof(string), "* VAULT BALANCE: $%s.", number_format(Tax));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}

		if(amount < 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Invalid amount specified.");
			return 1;
		}

		if (GetPlayerCash(playerid) < amount)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that much cash on you.");
			return 1;
		}
		Tax += amount;
		Misc_Save();
		GivePlayerCash(playerid, -amount);
		format( string, sizeof( string ), "You have deposited $%s into the vault.", number_format(amount) );
		SendClientMessageEx( playerid, COLOR_WHITE, string );
	}
	if(arrGroupData[PlayerInfo[playerid][pLeader]][g_iAllegiance] == 2)
	{
		if(sscanf(params, "d", amount))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /taxdeposit [amount]");
			format(string, sizeof(string), "* VAULT BALANCE: $%s.", number_format(TRTax));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}

		if(amount < 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Invalid amount specified.");
			return 1;
		}

		if (GetPlayerCash(playerid) < amount)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that much cash on you.");
			return 1;
		}
		TRTax += amount;
		Misc_Save();
		GivePlayerCash(playerid, -amount);
		format( string, sizeof( string ), "You have deposited $%s into the TR vault.", number_format(amount) );
		SendClientMessageEx( playerid, COLOR_WHITE, string );
	}
	return 1;
}

CMD:settaxmoney(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not authorised to use this command.");
		return 1;
	}

	new string[128], country, amount;
	if(sscanf(params, "dd", country, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /settaxmoney [SA(1)/TR(2)] [amount]");
		format(string, sizeof(string), "* CURRENT SA VAULT BALANCE: $%s.", number_format(Tax));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* CURRENT TR VAULT BALANCE: $%s.", number_format(TRTax));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		return 1;
	}
	switch(country)
	{
	    case 1:
	    {
			Tax = amount;
			format( string, sizeof( string ), "You have set the tax money amount to $%s.", number_format(amount));
			SendClientMessageEx( playerid, COLOR_WHITE, string );
	    }
	    case 2:
	    {
			TRTax = amount;
			format( string, sizeof( string ), "You have set the tax money amount to $%s.", number_format(amount));
			SendClientMessageEx( playerid, COLOR_WHITE, string );
	    }
	}
	return 1;
}

CMD:checktax(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pLeader] != INVALID_GROUP_ID && arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] != 5)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a government official.");
		return 1;
	}
	if(arrGroupData[PlayerInfo[playerid][pLeader]][g_iAllegiance] == 1)
	{
		format(string, sizeof(string), "* CURRENT SA VAULT BALANCE: $%s.", number_format(Tax));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(arrGroupData[PlayerInfo[playerid][pLeader]][g_iAllegiance] == 2)
	{
		format(string, sizeof(string), "* CURRENT TR VAULT BALANCE: $%s.", number_format(TRTax));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:apply(playerid, params[])
{
	new choice[3];
	if(sscanf(params, "s[3]", choice))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /apply [SA|TR]");
		return 1;
	}

	if(strcmp(choice, "sa", true) == 0)
	{
		if(PlayerInfo[playerid][pNation] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You're currently part of San Andreas.");
		CheckNationQueue(playerid, 0);
	}
	else if(strcmp(choice, "tr", true) == 0)
	{
		if(PlayerInfo[playerid][pNation] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You're currently part of Tierra Robada.");
		CheckNationQueue(playerid, 1);
	}
	return 1;
}

CMD:checkapps(playerid, params[])
{
	if((0 <= PlayerInfo[playerid][pLeader] < MAX_GROUPS) && arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] == 5)
	{
		switch(arrGroupData[PlayerInfo[playerid][pMember]][g_iAllegiance])
		{
			case 1: mysql_function_query(MainPipeline, "SELECT `playerid`, `name`, `date` FROM `nation_queue` WHERE `nation` = 0 AND `status` = 1 ORDER BY `id` ASC", true, "NationQueueQueryFinish", "iii", playerid, 0, AppQueue);
			case 2: mysql_function_query(MainPipeline, "SELECT `playerid`, `name`, `date` FROM `nation_queue` WHERE `nation` = 1 AND `status` = 1 ORDER BY `id` ASC", true, "NationQueueQueryFinish", "iii", playerid, 1, AppQueue);
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, "You are not the leader of a Government agency.");
	return 1;
}

CMD:dmreport(playerid, params[])
{
	if(PlayerInfo[playerid][pDMRMuted] != 0) return SendClientMessage(playerid, COLOR_GRAD2, "You are blocked from submitting DM reports.");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /dmreport [playerid]");
	if(IsPlayerConnected(giveplayerid))
	{
		if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command on yourself!");
		if(PlayerInfo[giveplayerid][pAdmin] >= 2 && PlayerInfo[giveplayerid][pTogReports] != 1) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command on admins!");
		if(gettime() - ShotPlayer[giveplayerid][playerid] < 300)
	    {
			SetPVarInt(playerid, "pDMReport", giveplayerid);
			ShowPlayerDialog(playerid, DMRCONFIRM, DIALOG_STYLE_MSGBOX, "DM Report", "You personally witnessed the reported player death matching within the last 60 seconds. Abuse of this command could result in a temporary ban.", "Confirm", "Cancel");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "You have not been shot by that person or have already reported them in the last 5 minutes.");
			SendClientMessage(playerid, COLOR_WHITE, "As a reminder, abuse of this system could lead to punishment up to a temporary ban.");
		}
	}
	return 1;
}


CMD:dmalert(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdmin] < 1338) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't submit reports as an administrator.");
	if(PlayerInfo[playerid][pWatchdog] < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized to use this command!");
	if(GetPVarInt(playerid, "SpectatingWatch") == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only use this command when you are spectating someone!");
	if(PlayerInfo[playerid][pRMuted] != 0) return ShowPlayerDialog(playerid,7955,DIALOG_STYLE_MSGBOX,"Report blocked","You are blocked from submitting any reports!\n\nTips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.\n- For shop orders use the /shoporder command","Close", "");
	if(GetPVarType(playerid, "HasReport")) return SendClientMessageEx(playerid, COLOR_GREY, "You can only have 1 active report at a time.");
	JustReported[playerid]=25;
	new giveplayerid = GetPVarInt(playerid, "SpectatingWatch");
	new string[128];
	format(string, sizeof(string), "{FF0000}(DM Alert) %s (ID %d) is deathmatching.{FFFF91}", GetPlayerNameEx(giveplayerid), giveplayerid);
	SendReportToQue(playerid, string, 2, 1);
	SetPVarInt(playerid, "AlertedThisPlayer", giveplayerid);
	SetPVarInt(playerid, "AlertType", 1);
	AlertTime[playerid] = 300;
	for(new i; i < MAX_PLAYERS; i++) if(PlayerInfo[i][pWatchdog] >= 1) SendClientMessageEx(i, COLOR_LIGHTBLUE, string);
	SendClientMessageEx(playerid, COLOR_YELLOW, "Your DM report message was sent to the Admins & Watchdogs.");
	SetPVarInt(playerid, "WDReport", 1);
	format(string, sizeof(string), "Please write a brief report on what you watched %s do.\n * 30 characters min", GetPlayerNameEx(giveplayerid));
	return ShowPlayerDialog(playerid, DIALOG_WDREPORT, DIALOG_STYLE_INPUT, "Incident Report - DM Alert", string, "Submit", "");
}

CMD:report(playerid, params[])
{
    if(GetPVarType(playerid, "HasReport")) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can only have 1 active report at a time. (/cancelreport)");
	}
 	else if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdmin] < 1338) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't submit reports as an administrator.");
	}
	else if(PlayerInfo[playerid][pRMuted] != 0) {
	    ShowPlayerDialog(playerid, 7955, DIALOG_STYLE_MSGBOX,"Report blocked","You are blocked from submitting any reports!\n\nTips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.\n- For shop orders use the /shoporder command","Close", "");
	}
	else {
	    ShowPlayerDialog(playerid, DIALOG_REPORTMENU, DIALOG_STYLE_LIST, "Report Menu [1/2]", "Deathmatch\nFalling\nHacking\nChicken Running\nCar Ramming\nPower Gaming\nMeta Gaming\nGun Discharge Exploits (QS/CS)\nSpamming\nMoney Farming\nBan Evader\nGeneral Exploits\nReleasing Hitman Names\nRunning Man Exploiter\nCar Surfing\nNonRP Behavior\nNext Page","Select", "Exit");
	}
	return 1;
}

CMD:cancelreport(playerid, params[])
{
	for(new i = 0; i < MAX_REPORTS; i++)
	{
		if(Reports[i][ReportFrom] == playerid)
		{
			if(GetPVarInt(Reports[i][ReportFrom], "AlertedThisPlayer"))
			{
				DeletePVar(Reports[i][ReportFrom], "AlertedThisPlayer");
				DeletePVar(Reports[i][ReportFrom], "AlertType");
				if(AlertTime[Reports[i][ReportFrom]] != 0) AlertTime[Reports[i][ReportFrom]] = 0;
			}
			if(GetPVarInt(Reports[i][ReportFrom], "RequestingAdP") == 1)
			{
				DeletePVar(Reports[i][ReportFrom], "PriorityAdText");
				DeletePVar(Reports[i][ReportFrom], "RequestingAdP");
			}
			Reports[i][ReportFrom] = INVALID_PLAYER_ID;
			Reports[i][BeingUsed] = 0;
			Reports[i][TimeToExpire] = 0;
			Reports[i][ReportPriority] = 0;
			Reports[i][ReportLevel] = 0;
			strmid(Reports[i][Report], "None", 0, 4, 4);
			DeletePVar(playerid, "HasReport");
			DeletePVar(playerid, "_rAutoM");
			DeletePVar(playerid, "_rRepID");
			return SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully canceled your report." );
		}
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have any pending reports.");
	return 1;
}

CMD:reports(playerid, params[])
{
	return cmd_reportsold(playerid, params);
}

CMD:reportsold(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128];
		SendClientMessageEx(playerid, COLOR_GREEN, "____________________ REPORTS _____________________");
		for(new i = 999; i >= 0; i--)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][ReportPriority] == 5)
			{
			    if(Reports[i][ReportLevel] == 2 || PlayerInfo[playerid][pAdmin] >= 2)
			    {
					format(string, sizeof(string), "%s (ID: %i) | RID: %i | Report: %s | Pending: %d minutes | Priority: %i", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire], Reports[i][ReportPriority]);
					SendClientMessageEx(playerid, COLOR_REPORT, string);
				}
			}
		}
		for(new i = 999; i >= 0; i--)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][ReportPriority] == 4)
			{
			    if(Reports[i][ReportLevel] == 2 || PlayerInfo[playerid][pAdmin] >= 2)
			    {
					format(string, sizeof(string), "%s (ID: %i) | RID: %i | Report: %s | Pending: %d minutes | Priority: %i", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire], Reports[i][ReportPriority]);
					SendClientMessageEx(playerid, COLOR_REPORT, string);
				}
			}
		}
		for(new i = 999; i >= 0; i--)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][ReportPriority] == 3)
			{
			    if(Reports[i][ReportLevel] == 2 || PlayerInfo[playerid][pAdmin] >= 2)
			    {
					format(string, sizeof(string), "%s (ID: %i) | RID: %i | Report: %s | Pending: %d minutes | Priority: %i", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire], Reports[i][ReportPriority]);
					SendClientMessageEx(playerid, COLOR_REPORT, string);
				}
			}
		}
		for(new i = 999; i >= 0; i--)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][ReportPriority] == 2)
			{
			    if(Reports[i][ReportLevel] == 2 || PlayerInfo[playerid][pAdmin] >= 2)
			    {
					format(string, sizeof(string), "%s (ID: %i) | RID: %i | Report: %s | Pending: %d minutes | Priority: %i", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire], Reports[i][ReportPriority]);
					SendClientMessageEx(playerid, COLOR_REPORT, string);
				}
			}
		}
		for(new i = 999; i >= 0; i--)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][ReportPriority] == 1)
			{
			    if(Reports[i][ReportLevel] == 2 || PlayerInfo[playerid][pAdmin] >= 2)
			    {
					format(string, sizeof(string), "%s (ID: %i) | RID: %i | Report: %s | Pending: %d minutes | Priority: %i", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire], Reports[i][ReportPriority]);
					SendClientMessageEx(playerid, COLOR_REPORT, string);
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GREEN, "___________________________________________________");
	}
	return 1;
}

CMD:sta(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /sta [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "RequestingAdP") == 1)
		{
			return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot trash/post this advertisement, you must accept it with /ar.");
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "AlertedThisPlayer"))
		{
			DeletePVar(Reports[reportid][ReportFrom], "AlertedThisPlayer");
			DeletePVar(Reports[reportid][ReportFrom], "AlertType");
			if(AlertTime[Reports[reportid][ReportFrom]] != 0) AlertTime[Reports[reportid][ReportFrom]] = 0;
		}
		if(Advisors < 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "There are no Community Advisors On Duty at the moment, try again later!");
			return 1;
		}

		format(string, sizeof(string), "AdmCmd: %s has sent %s (ID: %i) report RID: %i) to the Community Advisors.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
		ABroadCast(COLOR_ORANGE, string, 2);
		if(PlayerInfo[playerid][pAdmin] == 1)
		{
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "An admin has reviewed your report and referred it to the Community Advisors.");
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "An Advisor should be with you shortly.");
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Newer players are encouraged to use /requesthelp for any questions you may have as opposed to using /report which is to report rule violations and get admin help.");
			SetPVarInt( Reports[reportid][ReportFrom], "COMMUNITY_ADVISOR_REQUEST", 1 );
			format(string, sizeof(string), "An Admin has referred a report over to you. person %s (ID: %d) stated: %s", GetPlayerNameEx(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], Reports[reportid][Report]);
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, "Please type /accepthelp to teleport to the player.");
		}
		else
		{
			format(string, sizeof(string), "%s has reviewed your report and referred it to the Community Advisors.", GetPlayerNameEx(playerid));
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "An Advisor should be with you shortly.");
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Newer players are encouraged to use /requesthelp for any questions you may have as opposed to using /report which is to report rule violations and get admin help.");
			SetPVarInt( Reports[reportid][ReportFrom], "COMMUNITY_ADVISOR_REQUEST", 1 );
			format(string, sizeof(string), "Admin %s has referred a report over to you. person %s (ID: %d) stated: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], Reports[reportid][Report]);
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, "Please type /accepthelp to teleport to the player.");
		}

		PlayerInfo[playerid][pAcceptReport]++;
		ReportCount[playerid]++;
		ReportHourCount[playerid]++;
		Reports[reportid][BeingUsed] = 0;
		DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		DeletePVar(Reports[reportid][ReportFrom], "_rAutoM");
		DeletePVar(Reports[reportid][ReportFrom], "_rRepID");		Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][CheckingReport] = INVALID_PLAYER_ID;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:ar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ar [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "AccountRestrictionReport") == 1)
		{
			if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot accept this report!");
			SetPVarInt(playerid, "PendingAction4", GetPVarInt(Reports[reportid][ReportFrom], "AccountRestID"));
			DeletePVar(Reports[reportid][ReportFrom], "AccountRestrictionReport");
			DeletePVar(Reports[reportid][ReportFrom], "AccountRestID");
			ShowPlayerDialog(playerid, DIALOG_NONRPACTION, DIALOG_STYLE_MSGBOX, "Account Restriction", "This player has 15+ Non RP Points, would you like to restrict his account?", "Yes", "No");
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "AlertedThisPlayer") != INVALID_PLAYER_ID)
		{
			if(AlertTime[Reports[reportid][ReportFrom]] != 0)
			{
				SetPVarInt(playerid, "PendingAction", GetPVarInt(Reports[reportid][ReportFrom], "AlertType"));
				SetPVarInt(playerid, "PendingAction2", GetPVarInt(Reports[reportid][ReportFrom], "AlertedThisPlayer"));
				SetPVarInt(playerid, "PendingAction3", Reports[reportid][ReportFrom]);
				SetPVarInt(Reports[reportid][ReportFrom], "AlertedThisPlayer", INVALID_PLAYER_ID);
			}
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "RequestingAdP") == 1)
		{
			new advert[128];
			GetPVarString(Reports[reportid][ReportFrom], "PriorityAdText", advert, 128);
			SetPVarInt(playerid, "ReporterID", Reports[reportid][ReportFrom]);
			ShowPlayerDialog(playerid, DIALOG_CONFIRMADP, DIALOG_STYLE_MSGBOX, "Advertisement Confirmation", advert, "Approve", "Deny");
			
			format(string, sizeof(string), "AdmCmd: %s has accepted the report from %s (ID: %i, RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
			ABroadCast(COLOR_ORANGE, string, 2);
			PlayerInfo[playerid][pAcceptReport]++;
			ReportCount[playerid]++;
			ReportHourCount[playerid]++;
			Reports[reportid][BeingUsed] = 0;
			Reports[reportid][TimeToExpire] = 0;
			strmid(Reports[reportid][Report], "None", 0, 4, 4);
			DeletePVar(Reports[reportid][ReportFrom], "HasReport");
			return true;
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "RequestingNameChange") == 1) {
		    new newname[MAX_PLAYER_NAME];
			GetPVarString(Reports[reportid][ReportFrom], "NewNameRequest", newname, MAX_PLAYER_NAME);

			format(string, sizeof(string), "{00BFFF}Old Name: {FFFFFF}%s\n\n{00BFFF}New Name: {FFFFFF}%s\n\n{00BFFF}Price: {FFFFFF}$%d", GetPlayerNameExt(Reports[reportid][ReportFrom]), newname, GetPVarInt(Reports[reportid][ReportFrom], "NameChangeCost"));
			ShowPlayerDialog(playerid, DIALOG_REPORTNAME,DIALOG_STYLE_MSGBOX,"{00BFFF}Name Change Request",string,"Approve","Deny");

			format(string, sizeof(string), "AdmCmd: %s has accepted the report from %s (ID: %i, RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
			ABroadCast(COLOR_ORANGE, string, 2);
			PlayerInfo[playerid][pAcceptReport]++;
			ReportCount[playerid]++;
			ReportHourCount[playerid]++;
			Reports[reportid][BeingUsed] = 0;
			Reports[reportid][TimeToExpire] = 0;
			strmid(Reports[reportid][Report], "None", 0, 4, 4);
			DeletePVar(Reports[reportid][ReportFrom], "HasReport");

			SetPVarInt(playerid, "NameChange",Reports[reportid][ReportFrom]);
		    return 1;
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "RFLNameRequest") == 1) {
		    new newname[MAX_PLAYER_NAME];
			new gid = Reports[reportid][ReportFrom];
			GetPVarString(Reports[reportid][ReportFrom], "NewRFLName", newname, MAX_PLAYER_NAME);

			format(string, sizeof(string), "{00BFFF}Old Team Name: {FFFFFF}%s\n\n{00BFFF}New Team Name: {FFFFFF}%s", RFLInfo[PlayerInfo[gid][pRFLTeam]][RFLname], newname);
			ShowPlayerDialog(playerid, DIALOG_REPORTTEAMNAME,DIALOG_STYLE_MSGBOX,"{00BFFF}Team Name Change Request",string,"Approve","Deny");

			format(string, sizeof(string), "AdmCmd: %s has accepted the report from %s (ID: %i, RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
			ABroadCast(COLOR_ORANGE, string, 2);
			PlayerInfo[playerid][pAcceptReport]++;
			ReportCount[playerid]++;
			ReportHourCount[playerid]++;
			Reports[reportid][BeingUsed] = 0;
			Reports[reportid][TimeToExpire] = 0;
			strmid(Reports[reportid][Report], "None", 0, 4, 4);
			DeletePVar(Reports[reportid][ReportFrom], "HasReport");

			SetPVarInt(playerid, "RFLNameChange",Reports[reportid][ReportFrom]);
		    return 1;
		}		
		format(string, sizeof(string), "AdmCmd: %s has accepted the report from %s (ID: %i, RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
		ABroadCast(COLOR_ORANGE, string, 2);
		AddReportToken(playerid); // Report Tokens
		format(string, sizeof(string), "%s has accepted your report and is reviewing it, you can /reply to send messages to the admin reviewing your report.", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		new giveplayerid;
		if(GetPVarType(Reports[reportid][ReportFrom], "_rAutoM")) {
			switch(GetPVarInt(Reports[reportid][ReportFrom], "_rAutoM")) {
				case 1: { // Ad Unmute
					ShowAdMuteFine(Reports[reportid][ReportFrom]);
					format(string, sizeof(string), "You offered %s an unmute from /ads.", GetPlayerNameEx(Reports[reportid][ReportFrom]));
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
				}
				case 2: { // NUnmute
					ShowNMuteFine(Reports[reportid][ReportFrom]);
					format(string, sizeof(string), "You offered %s an unmute from /newb.", GetPlayerNameEx(Reports[reportid][ReportFrom]));
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
				}
				case 3: { // NRN
					giveplayerid = GetPVarInt(Reports[reportid][ReportFrom], "_rRepID");
					if(IsPlayerConnected(giveplayerid)) {
						if (PlayerInfo[giveplayerid][pAdmin] < 2) {
							format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has offered %s a free name change because their name is non-RP.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							//foreach(new i: Player) {
							for(new i = 0; i < MAX_PLAYERS; ++i)
							{
								if(IsPlayerConnected(i))
								{	
									if(PlayerInfo[i][pSMod] == 1) {
										SendClientMessageEx(i, COLOR_YELLOW, string);
									}
								}	
							}
							ABroadCast( COLOR_YELLOW, string, 2);
							ShowPlayerDialog(giveplayerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel" );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_GREY, "You cannot offer admins an nrn.");
						}
					}
				}
				case 4: { // RK /kills
					giveplayerid = GetPVarInt(Reports[reportid][ReportFrom], "_rRepID");
					if(IsPlayerConnected(giveplayerid)) {
						SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
						format(string, sizeof(string), "<< Last 10 Kills/Deaths of %s >>", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_YELLOW, string);
						GetLatestKills(playerid, giveplayerid);
						SpectatePlayer(playerid, giveplayerid);
					}
				}
				case 5: { // Auto Spectate
					giveplayerid = GetPVarInt(Reports[reportid][ReportFrom], "_rRepID");
					if(IsPlayerConnected(giveplayerid)) {
						SpectatePlayer(playerid, giveplayerid);
					}
				}
				case 6: { // Bug Player
					giveplayerid = GetPVarInt(Reports[reportid][ReportFrom], "_rRepID");
					if(IsPlayerConnected(giveplayerid)) {
						SetPVarInt(playerid, "BigEar", 6);
						SetPVarInt(playerid, "BigEarPlayer", giveplayerid);
						rBigEarT[playerid] = 30;
						format(string, sizeof(string), "You will hear all messages from %s (ID: %d) for 30 seconds. Use /bigears if you want to disable it.", GetPlayerNameEx(giveplayerid), giveplayerid);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
					}	
				}
			}
		}		PlayerInfo[playerid][pAcceptReport]++;
		ReportCount[playerid]++;
		ReportHourCount[playerid]++;
		Reports[reportid][ReplyTimerr] = SetTimerEx("ReplyTimer", 30000, 0, "d", reportid);
		Reports[reportid][CheckingReport] = playerid;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
		DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		DeletePVar(Reports[reportid][ReportFrom], "_rAutoM");
		DeletePVar(Reports[reportid][ReportFrom], "_rRepID");	}
	return 1;
}

CMD:tr(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /tr [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "RequestingAdP") == 1)
		{
			return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot trash/post this advertisement, you must accept it with /ar.");
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "AlertedThisPlayer"))
		{
			DeletePVar(Reports[reportid][ReportFrom], "AlertedThisPlayer");
			DeletePVar(Reports[reportid][ReportFrom], "AlertType");
			if(AlertTime[Reports[reportid][ReportFrom]] != 0) AlertTime[Reports[reportid][ReportFrom]] = 0;
		}
		format(string, sizeof(string), "AdmCmd: %s has trashed the report from %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]));
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "%s has marked your report invalid. It will not be reviewed. Please check /reporttips", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		PlayerInfo[playerid][pTrashReport]++;
        DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		DeletePVar(Reports[reportid][ReportFrom], "_rAutoM");
		DeletePVar(Reports[reportid][ReportFrom], "_rRepID");		Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:dmr(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid, giveplayerid;
		if(sscanf(params, "du", reportid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /dmr [reportid] [DM'ers ID]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "RequestingAdP") == 1)
		{
			return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot trash/post this advertisement, you must accept it with /ar.");
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "AlertedThisPlayer"))
		{
			return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot forward a DM Alert to the Watch Dogs Team.");
		}
		format(string, sizeof(string), "AdmCmd: %s has forwarded the report from %s (RID: %d) to the DM Report system", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "%s has acknowledged your report about death matching.", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "In the future please use the /dmreport command for all reports regarding DM.");

		if(PlayerInfo[Reports[reportid][ReportFrom]][pAdmin] >= 2 || PlayerInfo[Reports[reportid][ReportFrom]][pSMod] == 1) format(string, sizeof(string), "INSERT INTO dm_watchdog (id,reporter,timestamp,superwatch) VALUES (%d,%d,%d,1)", GetPlayerSQLId(giveplayerid), GetPlayerSQLId(Reports[reportid][ReportFrom]), gettime());
		else format(string, sizeof(string), "INSERT INTO dm_watchdog (id,reporter,timestamp) VALUES (%d,%d,%d)", GetPlayerSQLId(giveplayerid), GetPlayerSQLId(Reports[reportid][ReportFrom]), gettime());
		mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, Reports[reportid][ReportFrom]);

        DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		DeletePVar(Reports[reportid][ReportFrom], "_rAutoM");
		DeletePVar(Reports[reportid][ReportFrom], "_rRepID");     	Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:nao(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /nao [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "RequestingAdP") == 1)
		{
			return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot trash/post this advertisement, you must accept it with /ar.");
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "AlertedThisPlayer"))
		{
			DeletePVar(Reports[reportid][ReportFrom], "AlertedThisPlayer");
			DeletePVar(Reports[reportid][ReportFrom], "AlertType");
			if(AlertTime[Reports[reportid][ReportFrom]] != 0) AlertTime[Reports[reportid][ReportFrom]] = 0;
		}
		format(string, sizeof(string), "AdmCmd: %s has cleared report from %s (RID: %d) due to not having admin of sufficient authority online.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "%s has reviewed your report, however there is not an Admin presently online with sufficient authority to handle your request.", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "You can post a request on the forums for additional assistance (www.ng-gaming.net/forums). Our apologies for the inconvenience. ");
        DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		DeletePVar(Reports[reportid][ReportFrom], "_rAutoM");
		DeletePVar(Reports[reportid][ReportFrom], "_rRepID");	
		Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:post(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /post [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "RequestingAdP") == 1)
		{
			return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot trash/post this advertisement, you must accept it with /ar.");
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "AlertedThisPlayer"))
		{
			DeletePVar(Reports[reportid][ReportFrom], "AlertedThisPlayer");
			DeletePVar(Reports[reportid][ReportFrom], "AlertType");
			if(AlertTime[Reports[reportid][ReportFrom]] != 0) AlertTime[Reports[reportid][ReportFrom]] = 0;
		}
		format(string, sizeof(string), "AdmCmd: %s has cleared report from %s (RID: %d) due to it needing to be handled on the forums", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "%s has reviewed your report and determined this report should be handled on the forums (i.e. complaint or request.)", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Please only report for items that are actively occuring in game. (www.ng-gaming.net/forums)");
        DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		DeletePVar(Reports[reportid][ReportFrom], "_rAutoM");
		DeletePVar(Reports[reportid][ReportFrom], "_rRepID");		Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:st(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /st [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "RequestingAdP") == 1)
		{
			return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot trash/post this advertisement, you must accept it with /ar.");
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "AlertedThisPlayer"))
		{
			DeletePVar(Reports[reportid][ReportFrom], "AlertedThisPlayer");
			DeletePVar(Reports[reportid][ReportFrom], "AlertType");
			if(AlertTime[Reports[reportid][ReportFrom]] != 0) AlertTime[Reports[reportid][ReportFrom]] = 0;
		}
		format(string, sizeof(string), "AdmCmd: %s has cleared report from %s (RID: %d) due to it needing to be handled via /shoporder", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "%s has reviewed your report and determined it needs to be handled by a Shop Tech.", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Please use /shoporder to get your order processed by a Shop Tech.");
        DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		DeletePVar(Reports[reportid][ReportFrom], "_rAutoM");
		DeletePVar(Reports[reportid][ReportFrom], "_rRepID");			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:clothes(playerid, params[])
{
	new biz = InBusiness(playerid);
	if(PlayerInfo[playerid][pFMember] == INVALID_FAMILY_ID) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a Family/Gang!");
	if (biz != INVALID_BUSINESS_ID && Businesses[biz][bType] == BUSINESS_TYPE_CLOTHING)
	{
		new fSkin[8];
		fSkin[0] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySkins][0];
		fSkin[1] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySkins][1];
		fSkin[2] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySkins][2];
		fSkin[3] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySkins][3];
		fSkin[4] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySkins][4];
		fSkin[5] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySkins][5];
		fSkin[6] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySkins][6];
		fSkin[7] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySkins][7];
		ShowModelSelectionMenuEx(playerid, fSkin, 8, "Change your family clothes.", DYNAMIC_FAMILY_CLOTHES, 0.0, 0.0, -55.0);
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a clothing shop.");
	return true;
}	

CMD:buyclothes(playerid, params[])
{
	new biz = InBusiness(playerid);

   	if (biz == INVALID_BUSINESS_ID || Businesses[biz][bType] != BUSINESS_TYPE_CLOTHING) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in a clothing shop!");
        return 1;
    }
	if (Businesses[biz][bInventory] < 1) {
	    SendClientMessageEx(playerid, COLOR_GRAD2, "Store does not have any clothes!");
	    return 1;
	}
	if (!Businesses[biz][bStatus]) {
	    SendClientMessageEx(playerid, COLOR_GRAD2, "This clothing store is closed!");
	    return 1;
	}
    #if defined zombiemode
	if(zombieevent == 1 && GetPVarType(playerid, "pIsZombie")) return SendClientMessageEx(playerid, COLOR_GREY, "Zombies can't use this.");
	#endif
    new string[64];
    format(string, sizeof(string), "Note: Clothes changes cost %s", number_format(Businesses[biz][bItemPrices][0]));
    SetPVarInt(playerid, "SkinChangeCost", Businesses[biz][bItemPrices][0]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	ShowModelSelectionMenu(playerid, SkinList, "Change your clothes.");
	return 1;
}

CMD:miscshop(playerid, params[])
{
    if(ShopClosed == 1)
	    return SendClientMessageEx(playerid, COLOR_GREY, "The shop is currently closed.");

	if (IsAt247(playerid) || IsPlayerInRangeOfPoint(playerid, 4.0, 2939.8442, -1411.2906, 11.0000))
	{
 		if(GetPVarInt(playerid, "PinConfirmed"))
   		{
			new szDialog[1024];
			format(szDialog, sizeof(szDialog), "Poker Table (Credits: {FFD700}%s{A9C4E4})\nBoombox (Credits: {FFD700}%s{A9C4E4})\n100 Paintball Tokens (Credits: {FFD700}%s{A9C4E4})\nEXP Token (Credits: {FFD700}%s{A9C4E4})\nFireworks x5 (Credits: {FFD700}%s{A9C4E4})\nCustom License Plate (Credits: {FFD700}%s{A9C4E4})",
			number_format(ShopItems[6][sItemPrice]), number_format(ShopItems[7][sItemPrice]), number_format(ShopItems[8][sItemPrice]), number_format(ShopItems[9][sItemPrice]), 
			number_format(ShopItems[10][sItemPrice]), number_format(ShopItems[22][sItemPrice]));
			format(szDialog, sizeof(szDialog), "%s\nRestricted Last Name (NEW) (Credits: {FFD700}%s{A9C4E4})\nRestricted Last Name (CHANGE) (Credits: {FFD700}%s{A9C4E4})\nCustom User Title (NEW) (Credits: {FFD700}%s{A9C4E4})\nCustom User Title (CHANGE) (Credits: {FFD700}%s{A9C4E4})\nTeamspeak User Channel (Credits: {FFD700}%s{A9C4E4})\nBackpacks\nDeluxe Car Alarm (Credits: {FFD700}%s{A9C4E4})", 
			szDialog, number_format(ShopItems[31][sItemPrice]), number_format(ShopItems[32][sItemPrice]), number_format(ShopItems[33][sItemPrice]), number_format(ShopItems[34][sItemPrice]), number_format(ShopItems[35][sItemPrice]), number_format(ShopItems[39][sItemPrice]));
			ShowPlayerDialog(playerid, DIALOG_MISCSHOP, DIALOG_STYLE_LIST, "Misc Shop", szDialog, "Select", "Cancel");
		}
		else
		{
		    SetPVarInt(playerid, "OpenShop", 1);
  			PinLogin(playerid);
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You aren't at a 24/7.");
	}
	return 1;
}

CMD:credits(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		new szString[128];
		format(szString, sizeof(szString), "Credits: {FFD700}%s", number_format(PlayerInfo[playerid][pCredits]));
		SendClientMessageEx(playerid, COLOR_CYAN, szString);
	}
	else
	{
	    new Player;
	    if(sscanf(params, "u", Player))
			return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /credits [Player]");


        new szString[128];
		format(szString, sizeof(szString), "%s - Credits: {FFD700}%s",GetPlayerNameEx(Player), number_format(PlayerInfo[Player][pCredits]));
		SendClientMessageEx(playerid, COLOR_CYAN, szString);
	}
	return 1;
}

CMD:shopstats(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1338 && PlayerInfo[playerid][pShopTech] != 3)
	    return 0;

	mysql_function_query(MainPipeline, "SELECT `id`, `Month` FROM `sales`", true, "CheckSales", "i", playerid);
	return 1;
}
 
CMD:shophelp(playerid, params[]) {
    return ShowPlayerDialog(playerid, DIALOG_SHOPHELPMENU, DIALOG_STYLE_LIST, "Which shop do you want to learn more about?","VIP Shop\nHouse Shop\nBusiness Shop\nToy Shop\nMiscellaneous Shop\nCar Shop\nPlane Shop\nBoat Shop", "Select", "Exit");
}

CMD:nggshop(playerid, params[]) {
	if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen") || PlayerInfo[playerid][pHospital] || PlayerInfo[playerid][pJailTime] > 0 || GetPVarInt(playerid, "EventToken") == 1 || GetPVarInt(playerid, "IsInArena") >= 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do this at this time!");
	if(PlayerInfo[playerid][pWantedLevel] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently wanted, you cannot use this commmand.");
	if(gettime() - LastShot[playerid] < 60) return SendClientMessageEx(playerid, COLOR_GRAD2, "You have been shot within the last 60 seconds, you cannot use this command.");
	if(IsPlayerInDynamicArea(playerid, NGGShop)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You are already at NGG's Shop");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot do this while being inside a vehicle.");
	if(GetPVarInt(playerid, "ShopTP") == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "You have already requested a Teleport to the NGG Shop.");
	
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have requested a Teleport to the NGG Shop, please wait 30 seconds..");
	SetTimerEx("TeleportToShop", 30000, false, "i", playerid);
	TogglePlayerControllable(playerid, 0);
	SetPVarInt(playerid, "ShopTP", 1);
	
	new Float:tmp[3];
	GetPlayerPos(playerid, tmp[0], tmp[1], tmp[2]);
	SetPVarFloat(playerid, "tmpX", tmp[0]);
	SetPVarFloat(playerid, "tmpY", tmp[1]);
	SetPVarFloat(playerid, "tmpZ", tmp[2]);
	SetPVarInt(playerid, "tmpInt", GetPlayerInterior(playerid));
	SetPVarInt(playerid, "tmpVW", GetPlayerVirtualWorld(playerid));
	return 1;
}

CMD:leaveshop(playerid, params[]) {
	if(GetPVarInt(playerid, "ShopTP") == 1)
	{
		if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen") || PlayerInfo[playerid][pHospital] || PlayerInfo[playerid][pJailTime] > 0)
			return SendClientMessage(playerid, COLOR_GRAD2, "You can't do this at this time!.");
		if(gettime() - LastShot[playerid] < 60) return SendClientMessageEx(playerid, COLOR_GRAD2, "You have been injured within the last 60 seconds, you will not be teleported to your previous location.");
		Player_StreamPrep(playerid, GetPVarFloat(playerid, "tmpX"), GetPVarFloat(playerid, "tmpY"), GetPVarFloat(playerid, "tmpZ"), 2500);
	}
	return 1;
}

CMD:togshopnotice(playerid, params[]) {
	if(PlayerInfo[playerid][pConnectHours] >= 50)
	{
		if(PlayerInfo[playerid][pShopNotice] == 0)
		{
			PlayerInfo[playerid][pShopNotice] = 24;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Shop Notifications have been disabled for 24 playing hours.");
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "If you would like to re-enable, simply type the command again.");
		}
		else
		{
			PlayerInfo[playerid][pShopNotice] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Shop Notifications has been re-enabled.");
		}
	}
	return 1;
}

CMD:buygiftreset(playerid, params[]) {
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 2937.2878, -1357.2294, 10.8503))
	{
		new string[128];
		format(string, sizeof(string),"Item: Reset Gift Timer\nYour Credits: %s\nCost: {FFD700}%s{A9C4E4}\nCredits Left: %s", number_format(PlayerInfo[playerid][pCredits]), number_format(ShopItems[17][sItemPrice]), number_format(PlayerInfo[playerid][pCredits]-ShopItems[17][sItemPrice]));
		return ShowPlayerDialog( playerid, DIALOG_SHOPGIFTRESET, DIALOG_STYLE_MSGBOX, "Reset Gift Timer", string, "Purchase", "Exit" );
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You aren't at the gift reset purchase location.");
}

CMD:buyhealthcare(playerid, params[]) {
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 2946.8672, -1484.9561, 11.0000))
	{
		return ShowPlayerDialog(playerid, DIALOG_HEALTHCARE, DIALOG_STYLE_LIST, "Health Care Purchase", "Advanced Health Care\nSuper Advanced Health Care", "Select", "Exit");
	}
	return 1;
}

CMD:togshopnotices(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		if(ShopReminder == 0)
		{
			ShopReminder = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled Shop Notifications.");
		}
		else
		{
			ShopReminder = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled Shop Notifications.");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized to use this command.");
	return 1;
}

CMD:stoprentacar(playerid, params[])
{
    if(GetPVarType(playerid, "RentedVehicle"))
	{
	    new string[128];
        SendClientMessageEx(playerid, COLOR_CYAN, "You have stopped renting your vehicle.");
		DestroyVehicle(GetPVarInt(playerid, "RentedVehicle"));

		format(string, sizeof(string), "DELETE FROM `rentedcars` WHERE `sqlid`= '%d'", GetPlayerSQLId(playerid));
		mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);

		DeletePVar(playerid, "RentedHours");
		DeletePVar(playerid, "RentedVehicle");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not currently renting a vehicle.");
	return 1;
}

CMD:rentacar(playerid, params[])
{
    if(ShopClosed == 1)
	    return SendClientMessageEx(playerid, COLOR_GREY, "The shop is currently closed.");

    if(IsPlayerInRangeOfPoint(playerid, 4, 1102.8999, -1440.1669, 15.7969) || IsPlayerInRangeOfPoint(playerid, 4, 1796.0620, -1588.5571, 13.4951))
	{
		if(GetPVarInt(playerid, "PinConfirmed"))
		{
		    if(!GetPVarType(playerid, "RentedVehicle"))
			{
		    	SetPVarInt(playerid, "RentaCar", 1);
				ShowModelSelectionMenu(playerid, CarList2, "Rent a Car!");
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "You already are renting a vehicle.");
		}
		else
		{
		    SetPVarInt(playerid, "OpenShop", 2);
  			PinLogin(playerid);
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You aren't at a rent a car location.");
	}
	return 1;
}

CMD:boatshop(playerid, params[])
{
    if(ShopClosed == 1)
	    return SendClientMessageEx(playerid, COLOR_GREY, "The shop is currently closed.");

	if(IsPlayerInRangeOfPoint(playerid, 4, -2214.1636, 2422.4763, 2.4961) || IsPlayerInRangeOfPoint(playerid, 4,-2975.8950, 505.1325, 2.4297) || IsPlayerInRangeOfPoint(playerid, 4, 723.1553, -1494.4547, 1.9343) || IsPlayerInRangeOfPoint(playerid, 4, 2974.7520, -1462.9265, 2.8184))
	{
		if(GetPVarInt(playerid, "PinConfirmed"))
		{
			ShowModelSelectionMenu(playerid, BoatList, "Boat Shop");
		}
		else
		{
		    SetPVarInt(playerid, "OpenShop", 8);
  			PinLogin(playerid);
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You aren't at the boat shop location.");
	}
	return 1;
}

CMD:planeshop(playerid, params[])
{
    if(ShopClosed == 1)
	    return SendClientMessageEx(playerid, COLOR_GREY, "The shop is currently closed.");

	if(IsPlayerInRangeOfPoint(playerid, 5, 1891.9105, -2279.6174, 13.5469) || IsPlayerInRangeOfPoint(playerid, 5, 1632.0836, 1551.7365, 10.8061) || IsPlayerInRangeOfPoint(playerid, 5, 2950.4014,-1283.0776,4.6875))
	{
		if(GetPVarInt(playerid, "PinConfirmed"))
		{
			ShowModelSelectionMenu(playerid, PlaneList, "Plane Shop");
		}
		else
		{
		    SetPVarInt(playerid, "OpenShop", 7);
  			PinLogin(playerid);
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You aren't at the plane shop location.");
	}
	return 1;
}

CMD:carshop(playerid, params[])
{
    if(ShopClosed == 1)
	    return SendClientMessageEx(playerid, COLOR_GREY, "The shop is currently closed.");

	if(IsPlayerInRangeOfPoint(playerid, 4, 2280.5720, -2325.2490, 13.5469) || IsPlayerInRangeOfPoint(playerid, 4,-1731.1923, 127.4794, 3.2976) || IsPlayerInRangeOfPoint(playerid, 4, 1663.9569, 1628.5106, 10.8203) ||
	IsPlayerInRangeOfPoint(playerid, 4, 2958.2200, -1339.2900, 5.2100))
	{
		if(GetPVarInt(playerid, "PinConfirmed"))
		{
			ShowModelSelectionMenu(playerid, CarList2, "Car Shop");
		}
		else
		{
		    SetPVarInt(playerid, "OpenShop", 3);
  			PinLogin(playerid);
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You aren't at the car shop location.");
	}
	return 1;
}

CMD:changepin(playerid, params[])
{
    if(GetPVarInt(playerid, "PinConfirmed"))
	{
	    SetPVarInt(playerid, "ChangePin", 1);
	    ShowPlayerDialog(playerid, DIALOG_CREATEPIN, DIALOG_STYLE_INPUT, "Change Pin Number", "Enter a new pin number to change your current one.", "Change", "Cancel");
	}
	else
	{
	    PinLogin(playerid);
	}
	return 1;
}

CMD:houseshop(playerid, params[])
{
	if(ShopClosed == 1) return SendClientMessageEx(playerid, COLOR_GREY, "The shop is currently closed.");
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 2938.2734, -1391.0596, 11.0000))
	{
		if(GetPVarInt(playerid, "PinConfirmed"))
		{
			ShowPlayerDialog( playerid, DIALOG_HOUSESHOP, DIALOG_STYLE_LIST, "House Shop", "Purchase House\nHouse Interior Change\nHouse Move\nGarage - Small\nGarage - Medium\nGarage - Large\nGarage - Extra Large","Select", "Exit" );
		}
		else
		{
			SetPVarInt(playerid, "OpenShop", 4);
			PinLogin(playerid);
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You aren't at the house shop location.");
	return 1;
}

CMD:userimkit(playerid, params[])
{
	if(PlayerInfo[playerid][pRimMod] == 0)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You don't have any rim modification kits.");

    if(!IsPlayerInAnyVehicle(playerid))
 		return SendClientMessageEx(playerid, COLOR_GREY, "You aren't in a vehicle.");


    if(InvalidModCheck(GetVehicleModel(GetPlayerVehicleID(playerid)), 1025))
	{
 		for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
			{
				ShowPlayerDialog(playerid, DIALOG_RIMMOD, DIALOG_STYLE_LIST, "Rim Modification Kit", "Offroad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAccess", "Select", "Exit");
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You need to be inside a vehicle that you own.");
		return 1;
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "This vehicle can't be modded.");
	}

	return 1;
}

CMD:sellcredits(playerid, params[])
{
	new
	    Player,
	    Credits,
	    Amount;

    if(SellClosed == 1)
	    return SendClientMessageEx(playerid, COLOR_GREY, "Selling of credits are currently disabled.");

	if(sscanf(params, "udd", Player, Credits, Amount))
	    return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellcredits [Player] [Credits] [Amount]");

	else if(!IsPlayerConnected(Player))
		return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");

	else if(Credits < 0 || Amount < 0)
	    return SendClientMessageEx(playerid, COLOR_GREY, "Amount/Price can't be below zero.");

	else if(Player == playerid)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can't sell credits to yourself.");

	else if(Credits > PlayerInfo[playerid][pCredits])
	    return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many credits.");

	else if(Credits < 51)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to trade at least 51 credits.");

	else if (!ProxDetectorS(10.0, playerid, Player))
		return SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");

	else if(GetPVarType(Player, "CreditsAmount"))
	    return SendClientMessageEx(playerid, COLOR_GREY, "That player already has been offered.");

	else if(!GetPVarInt(playerid, "PinConfirmed"))
		PinLogin(playerid);

	else
	{
	    new szMessage[200], CreditsTaxed;
		new year, month, day;
		new TransactionFee;
		
		getdate(year, month, day);
		SetPVarInt(Player, "CreditsFirstAmount", Credits);
		// FALL INTO FUN WEEK NO TAX
		if(!(year == 2013 && month == 10 && day >= 13 && day <= 19))
		{
			CreditsTaxed = 2*Credits/100;
			Credits = Credits-10; // .50 Flat Fee
			Credits = Credits-CreditsTaxed;
			TransactionFee = (10+CreditsTaxed);
		}
		else {
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "#FallIntoFun - No transaction fee until the 19th of October!");
		}
		
	    SetPVarInt(Player, "CreditsOffer", Amount);
	    SetPVarInt(Player, "CreditsAmount", Credits);
	    SetPVarInt(Player, "CreditsSeller", playerid);
	    SetPVarInt(playerid, "CreditsSeller", Player);

	    format(szMessage, 200, "You have offered %s {FFD700}%s{FFFFFF} credits for $%s. (Transaction Fee: %s)", GetPlayerNameEx(Player), number_format(Credits+TransactionFee), number_format(Amount), number_format(TransactionFee));
	    SendClientMessageEx(playerid, COLOR_WHITE, szMessage);

	    format(szMessage, 200, "Seller: %s(%d)\nPrice: $%s\nCredits: {FFD700}%s{A9C4E4}\nTransaction Fee: {FFD700}%s{A9C4E4}\nCredits you will recieve: {FFD700}%s{A9C4E4}", GetPlayerNameEx(playerid), playerid, number_format(Amount), number_format(Credits+TransactionFee), number_format(TransactionFee), number_format(Credits));
	    ShowPlayerDialog(Player, DIALOG_SELLCREDITS, DIALOG_STYLE_MSGBOX, "Purchase Credits", szMessage, "Purchase", "Decline");
	}
	return 1;
}

CMD:togglehealthcare(playerid, params[])
{
	if(PlayerInfo[playerid][pHealthCare] == 0)
	{
		ShowPlayerDialog(playerid, DIALOG_HEALTHCARE, DIALOG_STYLE_LIST, "Health Care", "Advanced Health Care\nSuper Advanced Health Care", "Select", "Exit");
	}
	else
	{
	    PlayerInfo[playerid][pHealthCare] = 0;
	    SendClientMessageEx(playerid, COLOR_CYAN, "You have disabled health care.");
	}
	return 1;
}

CMD:vipshop(playerid, params[])
{
	if(ShopClosed == 1)
	    return SendClientMessageEx(playerid, COLOR_GREY, "The shop is currently closed.");

	if(IsPlayerInRangeOfPoint(playerid, 4, -2443.6013, 499.7480, 30.0906) || IsPlayerInRangeOfPoint(playerid, 4, 1934.1083, 1364.5004, 9.2578) || IsPlayerInRangeOfPoint(playerid, 4, 1811.3344, -1569.4244, 13.4811)
		|| IsPlayerInRangeOfPoint(playerid, 4, 2939.0134, -1401.2946, 11.0000))
	{
 		if(GetPVarInt(playerid, "PinConfirmed"))
   		{
			ShowPlayerDialog( playerid, DIALOG_VIPSHOP, DIALOG_STYLE_LIST, "VIP Shop", "Purchase VIP\nRenew Gold VIP","Continue", "Exit" );
		}
		else
		{
		    SetPVarInt(playerid, "OpenShop", 5);
  			PinLogin(playerid);
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You aren't at the vip shop location.");
	}
	return 1;
}

CMD:reloadstats(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1338 && PlayerInfo[playerid][pShopTech] != 3)
	    return 0;

    mysql_function_query(MainPipeline, "SELECT * FROM `sales` WHERE `Month` > NOW() - INTERVAL 1 MONTH", true, "OnQueryFinish", "iii", LOADSALEDATA_THREAD, INVALID_PLAYER_ID, -1);
    SendClientMessageEx(playerid, COLOR_WHITE, "Reloading sale stats.");
	return 1;
}

CMD:closesellcredits(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1338 && PlayerInfo[playerid][pShopTech] != 3)
	    return 0;

	if(SellClosed == 0)
	{
	    SellClosed = 1;
	    SendClientMessageEx(playerid, COLOR_WHITE, "The shop is now closed.");
	}
	else
	{
	    SellClosed = 0;
	    SendClientMessageEx(playerid, COLOR_WHITE, "The shop is now opened.");
	}
	return 1;
}

CMD:closeshop(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1338 && PlayerInfo[playerid][pShopTech] != 3)
	    return 0;

	if(ShopClosed == 0)
	{
	    ShopClosed = 1;
	    SendClientMessageEx(playerid, COLOR_WHITE, "The shop is now closed.");
	}
	else
	{
	    ShopClosed = 0;
	    SendClientMessageEx(playerid, COLOR_WHITE, "The shop is now opened.");
	}
	g_mysql_SaveMOTD();
	return 1;
}

CMD:editshop(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1338 && PlayerInfo[playerid][pShopTech] != 3)
	    return 0;

    if (isnull(params)) {
		SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /editshop <code>");
		return 1;
	}

	if (strcmp(params, SecurityCode) == 0)
	{
	    ShowPlayerDialog(playerid, DIALOG_EDITSHOPMENU, DIALOG_STYLE_LIST, "Edit Shop", "Edit Shop Prices\nEdit Business Shop", "Select", "Exit");
	    if(GetPVarType(playerid, "CodeAttempts")) DeletePVar(playerid, "CodeAttempts");
	}
	else
	{
	    if(GetPVarInt(playerid, "CodeAttempts") != 3) {
	        SendClientMessageEx(playerid, COLOR_GREY, "Password entered is invalid.");
			SetPVarInt(playerid, "CodeAttempts", GetPVarInt(playerid, "CodeAttempts")+1);
	    }
	    else
	    {
	        new string[128];
	        format(string, sizeof(string), "AdmCmd: %s has been auto-banned, reason: To many failed attempts.", GetPlayerNameEx(playerid)), ABroadCast(COLOR_YELLOW,string,2);
			PlayerInfo[playerid][pBanned] = 1;
			SystemBan(playerid, "[System] (To many failed attempts)");
			Kick(playerid);
	    }
	}
	return 1;
}

CMD:businessshop(playerid, params[])
{
    if(ShopClosed == 1)
	    return SendClientMessageEx(playerid, COLOR_GREY, "The shop is currently closed.");

	if(GetPVarInt(playerid, "PinConfirmed"))
	{
		ShowPlayerDialog(playerid, DIALOG_SHOPBUSINESS, DIALOG_STYLE_LIST, "Businesses Shop", "Purchase Business\nRenew Business", "Select", "Exit");
	}
	else
	{
	    SetPVarInt(playerid, "OpenShop", 6);
		PinLogin(playerid);
	}
	return 1;
}

CMD:toyshop(playerid, params[])
{
    if(ShopClosed == 1)
	    return SendClientMessageEx(playerid, COLOR_GREY, "The shop is currently closed.");

	if (IsAtClothingStore(playerid) || IsPlayerInRangeOfPoint(playerid, 4.0, 2927.5244, -1549.1826, 11.0469))
	{
 		if(GetPVarInt(playerid, "PinConfirmed"))
   		{
   			ShowModelSelectionMenu(playerid, ToyList2, "Toy Shop");
		}
		else
		{
  			PinLogin(playerid);
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You aren't at a clothes shop.");
	}
	return 1;
}

CMD:halloweenshop(playerid, params[])
{
    if(HalloweenShop == 1)
	    return SendClientMessageEx(playerid, COLOR_GREY, "The shop is currently closed.");

	if (IsAtClothingStore(playerid))
	{
 		if(GetPVarInt(playerid, "PinConfirmed"))
   		{
			new string[128];
			format(string, sizeof(string), "Pumpkin Toy (Cost: 75 Credits | Stock: %d)\nSpiked Club Toy (Cost: 60 Credits)", PumpkinStock);
			ShowPlayerDialog(playerid, DIALOG_HALLOWEENSHOP, DIALOG_STYLE_LIST, "Halloween Shop", string, "Select", "Exit");
			return 1;
		}
		else
		{
  			PinLogin(playerid);
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You aren't at a clothes shop.");
	}
	return 1;
}

CMD:chargeplayer(playerid, params[])
{
	new string[128], giveplayerid, amount, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, amount, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /chargeplayer [player] [amount] [reason]");

	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pShopTech] == 2)
	{
		if(IsPlayerConnected(giveplayerid))
		{
			if (amount < 1)
				return SendClientMessageEx(playerid, COLOR_GREY, "Amount must be greater than 0");

			if(PlayerInfo[giveplayerid][pCredits] < amount)
			    return SendClientMessageEx(playerid, COLOR_GREY, "That player doesn't have that many credits.");

			format(string, sizeof(string), "You have offered %s a charge of %s credits for %s.",  GetPlayerNameEx(giveplayerid), number_format(amount), reason);
			SendClientMessageEx(playerid, COLOR_CYAN, string);

			SetPVarInt(giveplayerid, "FineAmount", amount), SetPVarInt(giveplayerid, "FineBy", playerid), SetPVarString(giveplayerid, "FineReason", reason);
			format(string, sizeof(string), "Admin: %s\nReason: %s\nCredits Available: %s\nFine Amount: %s", GetPlayerNameEx(playerid), reason, number_format(PlayerInfo[giveplayerid][pCredits]), number_format(amount));
			ShowPlayerDialog(giveplayerid, DIALOG_CHARGEPLAYER, DIALOG_STYLE_MSGBOX, "Credit Fine", string, "Accept", "Decline");
			return 1;
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not a level three admin.");
	}
	return 1;
}

CMD:givecredits(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 99999 && PlayerInfo[playerid][pShopTech] != 3)
	    return 0;

	new szMessage[128], Player, Amount;

	if(sscanf(params, "ud", Player, Amount))
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givecredits [Player] [Amount]");

	if(!IsPlayerConnected(Player))
	    return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");

	PlayerInfo[Player][pCredits] += Amount;

	format(szMessage, sizeof(szMessage), "UPDATE `accounts` SET `Credits`=%d WHERE `id` = %d", PlayerInfo[Player][pCredits], GetPlayerSQLId(Player));
	mysql_function_query(MainPipeline, szMessage, false, "OnQueryFinish", "ii", SENDDATA_THREAD, Player);
	print(szMessage);

	format(szMessage, sizeof(szMessage), "[SETCREDITS] [Amount: %d] [User: %s(%i)] [IP: %s] [Credits: %s] [Admin: %s] [IP: %s]",Amount,GetPlayerNameEx(Player), GetPlayerSQLId(Player), GetPlayerIpEx(Player), number_format(PlayerInfo[Player][pCredits]), GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
	Log("logs/credits.log", szMessage), print(szMessage);

	format(szMessage, sizeof(szMessage), "You have given %s %s credits.", GetPlayerNameEx(Player), number_format(Amount));
	SendClientMessageEx(playerid, COLOR_CYAN, szMessage);
	return 1;
}

CMD:setcredits(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 99999 && PlayerInfo[playerid][pShopTech] != 3)
	    return 0;

	new szMessage[128], Player, Amount;

	if(sscanf(params, "ud", Player, Amount))
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setcredits [Player] [Amount]");

	if(!IsPlayerConnected(Player))
	    return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");

	PlayerInfo[Player][pCredits] = Amount;

	format(szMessage, sizeof(szMessage), "UPDATE `accounts` SET `Credits`=%d WHERE `id` = %d", PlayerInfo[Player][pCredits], GetPlayerSQLId(Player));
	mysql_function_query(MainPipeline, szMessage, false, "OnQueryFinish", "ii", SENDDATA_THREAD, Player);
	print(szMessage);

	format(szMessage, sizeof(szMessage), "[SETCREDITS] [Amount: %d] [User: %s(%i)] [IP: %s] [Credits: %s] [Admin: %s] [IP: %s]",Amount,GetPlayerNameEx(Player), GetPlayerSQLId(Player), GetPlayerIpEx(Player), number_format(PlayerInfo[Player][pCredits]), GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
	Log("logs/credits.log", szMessage), print(szMessage);

	format(szMessage, sizeof(szMessage), "You have set %s's credits to %s.", GetPlayerNameEx(Player), number_format(PlayerInfo[Player][pCredits]));
	SendClientMessageEx(playerid, COLOR_CYAN, szMessage);
	return 1;
}

CMD:settotalcredits(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 99999 && PlayerInfo[playerid][pShopTech] != 3)
	    return 0;

	new szMessage[128], Player, Amount;

	if(sscanf(params, "ud", Player, Amount))
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /settotalcredits [Player] [Amount]");

	if(!IsPlayerConnected(Player))
	    return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");

	PlayerInfo[Player][pTotalCredits] = Amount;

    format(szMessage, sizeof(szMessage), "UPDATE `accounts` SET `TotalCredits`=%d WHERE `id` = %d", PlayerInfo[Player][pTotalCredits], GetPlayerSQLId(Player));
	mysql_function_query(MainPipeline, szMessage, false, "OnQueryFinish", "ii", SENDDATA_THREAD, Player);

	format(szMessage, sizeof(szMessage), "[SETTOTALCREDITS][Amount: %d] [User: %s(%i)] [IP: %s] [Admin: %s] [IP: %s]",Amount, GetPlayerNameEx(Player), GetPlayerSQLId(Player), GetPlayerIpEx(Player), GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
	Log("logs/credits.log", szMessage), print(szMessage);

	format(szMessage, sizeof(szMessage), "You have set %s's total credits to %s.", GetPlayerNameEx(Player), number_format(PlayerInfo[Player][pTotalCredits]));
	SendClientMessageEx(playerid, COLOR_CYAN, szMessage);
	return 1;
}

CMD:buytoys(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 4, 2787.095947, 2390.353027, 1240.531127) || IsPlayerInRangeOfPoint(playerid, 4, 1774.7533, 1422.6665, 2013.4979) || IsPlayerInRangeOfPoint(playerid, 4, 775.0900, 1742.4900, 1938.3800))
	{
		if(PlayerInfo[playerid][pDonateRank] < 3)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "* You are not a Gold or Platinum VIP!");
		}
		else
		{
			ShowPlayerDialog( playerid, BUYTOYSGOLD, DIALOG_STYLE_MSGBOX, "Toy Store", "Welcome to the VIP toy store! Here you can buy accessories to attach to your player.\n\nFirst, we will choose a slot to store the toy in.","Continue", "Cancel" );
		}
	}
	else
	{
		new biz = InBusiness(playerid);
	   	if (biz == INVALID_BUSINESS_ID || Businesses[biz][bType] != BUSINESS_TYPE_CLOTHING) {
	        SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in a clothing shop!");
	        return 1;
	    }
		if (Businesses[biz][bInventory] < 1) {
	    	SendClientMessageEx(playerid, COLOR_GRAD2, "   Store does not have any clothes!");
		    return 1;
		}
		if (!Businesses[biz][bStatus]) {
		    SendClientMessageEx(playerid, COLOR_GRAD2, "   This clothing store is closed!");
		    return 1;
		}
		ShowPlayerDialog( playerid, BUYTOYS, DIALOG_STYLE_MSGBOX, "Toy Store", "Welcome to the toy store! Here you can buy accessories to attach to your player.\n\nFirst, we will choose a slot to store the toy in.","Continue", "Cancel" );
	}
	return 1;
}

CMD:toyhelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** TOY HELP ***");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To buy a toy, go to any clothing store and type {AA3333}/buytoys");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To attach/dettach, edit, or delete a toy type {AA3333}/toys");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To quickly attach all your toys, type {AA3333}/wat");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To quickly detach all your toys, type {AA3333}/dat");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To quickly attach a specfic toy slot, type {AA3333}/wt [toyslot]");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To quickly detach a specfic toy slot, type {AA3333}/dt [toyslot]");
	return 1;
}

CMD:toys(playerid, params[])
{
	if(GetPVarInt(playerid, "EventToken" ) == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this command while in an event.");
	ShowPlayerDialog( playerid, TOYS, DIALOG_STYLE_LIST, "Toy Menu", "Attach/Dettach a Toy\nEdit a Toy\nDelete a Toy","Select", "Cancel" );
	return 1;
}

CMD:wt(playerid, params[])
{
	new toyslot;
	if(sscanf(params, "d", toyslot)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /wt [toyslot]");

	if(toyslot < 1 || toyslot > 11 + PlayerInfo[playerid][pToySlot]) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /wt [toyslot]");
	if(GetPVarInt(playerid, "EventToken" ) == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this command while in an event.");

	for(new i; i < 11; i++)
	{
		if(PlayerHoldingObject[playerid][i] == toyslot)
		{
			if(IsPlayerAttachedObjectSlotUsed(playerid, i-1))
			{
				return 1;
			}
		}
	}
	
	if(PlayerToyInfo[playerid][toyslot-1][ptScaleX] == 0) {
		PlayerToyInfo[playerid][toyslot-1][ptScaleX] = 1.0;
		PlayerToyInfo[playerid][toyslot-1][ptScaleY] = 1.0;
		PlayerToyInfo[playerid][toyslot-1][ptScaleZ] = 1.0;
	}

	if(PlayerToyInfo[playerid][toyslot-1][ptModelID] != 0)
	{
		new toycount = GetFreeToySlot(playerid);
		if(PlayerInfo[playerid][pBEquipped] && toycount == 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use attach this toy since you have your backpack equipped.");
		PlayerHoldingObject[playerid][toycount] = toyslot;
		SetPlayerAttachedObject(playerid, toycount-1,
			PlayerToyInfo[playerid][toyslot-1][ptModelID],
			PlayerToyInfo[playerid][toyslot-1][ptBone],
			PlayerToyInfo[playerid][toyslot-1][ptPosX],
			PlayerToyInfo[playerid][toyslot-1][ptPosY],
			PlayerToyInfo[playerid][toyslot-1][ptPosZ],
			PlayerToyInfo[playerid][toyslot-1][ptRotX],
			PlayerToyInfo[playerid][toyslot-1][ptRotY],
			PlayerToyInfo[playerid][toyslot-1][ptRotZ],
			PlayerToyInfo[playerid][toyslot-1][ptScaleX],
			PlayerToyInfo[playerid][toyslot-1][ptScaleY],
			PlayerToyInfo[playerid][toyslot-1][ptScaleZ]
		);
	}
	return 1;
}

CMD:dt(playerid, params[])
{
	new toyslot;
	if(sscanf(params, "d", toyslot)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dt [toyslot]");

	if(toyslot < 1 || toyslot > 11 + PlayerInfo[playerid][pToySlot]) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dt [toyslot]");


	for(new i; i < 11; i++)
	{
		if(PlayerHoldingObject[playerid][i] == toyslot)
		{
			if(IsPlayerAttachedObjectSlotUsed(playerid, i-1))
			{
				if(i == 10 && PlayerInfo[playerid][pBEquipped]) 
					break;
				RemovePlayerAttachedObject(playerid, i-1);
				PlayerHoldingObject[playerid][i] = 0;
				break;
			}
		}	
	}
	return 1;
}

CMD:wat(playerid, params[])
{
	if(GetPVarInt(playerid, "EventToken" ) == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this command while in an event.");
	new count = 0;
	SendClientMessageEx(playerid, COLOR_WHITE, "* Attached all toys below slot 10.");
	for(new x;x<MAX_PLAYERTOYS;x++)
	{
		count++;
		if(PlayerToyInfo[playerid][x][ptScaleX] == 0) {
			PlayerToyInfo[playerid][x][ptScaleX] = 1.0;
			PlayerToyInfo[playerid][x][ptScaleY] = 1.0;
			PlayerToyInfo[playerid][x][ptScaleZ] = 1.0;
		}
		if(PlayerToyInfo[playerid][x][ptModelID] != 0) 
		{
			if(x == 9 && PlayerInfo[playerid][pBEquipped]) 
				break;
			SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ], PlayerToyInfo[playerid][x][ptScaleX], PlayerToyInfo[playerid][x][ptScaleY], PlayerToyInfo[playerid][x][ptScaleZ]),
			PlayerHoldingObject[playerid][x+1] = x+1;
		}
		if(count == 10)
			break;
	}
	return 1;
}

CMD:dat(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "* Deattached all toys.");
	for(new x;x<MAX_PLAYERTOYS;x++) {
		if(IsPlayerAttachedObjectSlotUsed(playerid, x)) 
		{
			if(x == 9 && PlayerInfo[playerid][pBEquipped]) 
				break;
			RemovePlayerAttachedObject(playerid, x);
		}
	}
	for(new i; i < 11; i++)
	{
		PlayerHoldingObject[playerid][i] = 0;
	}
    return 1;
} 

CMD:nrn(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pSMod] == 1 || PlayerInfo[playerid][pWatchdog] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /nrn [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 2)return SendClientMessageEx(playerid, COLOR_GRAD2, "You can not use that command on admins!");
			// Can't believe this isn't fixed, happened to me like 2321231321 times - Akatony
			if((PlayerInfo[playerid][pSMod] == 1 || PlayerInfo[playerid][pWatchdog] >= 2) && (PlayerInfo[giveplayerid][pSMod] == 1 || PlayerInfo[giveplayerid][pWatchdog] == 2)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this command on this person!");
			
			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has offered %s a free name change because their name is non-RP.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pSMod] == 1)
					{
						SendClientMessageEx(i, COLOR_YELLOW, string);
					}
				}	
			}		
			ABroadCast( COLOR_YELLOW, string, 2);
			ShowPlayerDialog(giveplayerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel" );
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:take(playerid, params[])
{
	if(IsACop(playerid))
	{
		new string[128], choice[32], giveplayerid;
		if(sscanf(params, "s[32]u", choice, giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /take [name] [player]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Weapons, Pot, Crack, Materials, Radio, Heroin, Rawopium, Syringes, Potseeds, OpiumSeeds, DrugCrates.");
			return 1;
		}

		if (playerid == giveplayerid)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You cannot take things from yourself!");
			return 1;
		}
		else if(strcmp(choice,"opiumseeds",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's opiumseeds.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your opiumseeds.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's opiumseeds.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pOpiumSeeds] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"potseeds",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's potseeds.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your potseeds.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's potseeds.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pWSeeds] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"drugcrates",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's Drug Crates.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your Drug Crates.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's Drug Crates.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pCrates] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"Syringes",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's syringes.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your syringes.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's syringes.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pSyringes] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"Rawopium",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's raw opium.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your raw opium.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's raw opium.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pRawOpium] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"Heroin",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's Heroin.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your Heroin.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's Heroin.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pHeroin] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"radio",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's radio.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your radio.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's radio.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pRadio] = 0;
					PlayerInfo[giveplayerid][pRadioFreq] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"weapons",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's weapons.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your weapons.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's weapons.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ResetPlayerWeaponsEx(giveplayerid);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"pot",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's pot.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your pot.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's pot.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pPot] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"crack",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's crack.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pCrack] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"materials",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's materials.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s as taken away your materials.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's materials.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pMats] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   Invalid item specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a law enforcement officer.");
		return 1;
	}
	return 1;
}

CMD:selldrink(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 19 || PlayerInfo[playerid][pJob2] == 19 || PlayerInfo[playerid][pJob3] == 19)
	{
		if(IsAtBar(playerid))
		{
			new string[128], giveplayerid;
			if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /selldrink [player]");

			if(IsPlayerConnected(giveplayerid))
			{
				if(playerid == giveplayerid)
				{
					return SendClientMessageEx(playerid, COLOR_GREY, " You can't sell drinks to yourself.");
				}
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					DrinkOffer[giveplayerid] = playerid;
					format(string, sizeof(string), "* Bartender %s has offered has offered to pour you a drink. /accept drink to select a drink.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You have offered %s a drink.",GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				}
				else
				{
					return SendClientMessageEx(playerid, COLOR_GREY, " That person is not near you!");
				}
			}
			else
			{
				return SendClientMessageEx(playerid, COLOR_GREY, " That person is not connected!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You are not at a Bar!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not a bartender!");
		return 1;
	}
	return 1;
}

/*CMD:setchamp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setchamp [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			new giveplayer[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			new nstring[MAX_PLAYER_NAME];
			format(nstring, sizeof(nstring), "%s", giveplayer);
			strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
			Titel[TitelWins] = PlayerInfo[giveplayerid][pWins];
			Titel[TitelLoses] = PlayerInfo[giveplayerid][pLoses];
			Misc_Save();
			format(string, sizeof(string), "* You have made %s the new Boxing Champion.", giveplayer);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}*/

CMD:boxstats(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 12 && PlayerInfo[playerid][pJob2] != 12 && PlayerInfo[playerid][pJob3] != 12)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Boxer!");
		return 1;
	}

	new string[128], ttext[20];//Title
	new clevel = PlayerInfo[playerid][pBoxSkill];
	if(clevel >= 0 && clevel <= 50) { ttext = "Beginner"; }
	else if(clevel >= 51 && clevel <= 200) { ttext = "Amateur"; }
	else if(clevel >= 201 && clevel <= 400) { ttext = "Professional"; }
	new ntext[20];//NickName
	new level = PlayerInfo[playerid][pWins];
	if(level > 0 && PlayerInfo[playerid][pLoses] == 0)
	{
		ntext = "Undefeated";
	}
	else
	{
		if(level >= 0 && level <= 10) { ntext = "Newcomer"; }
		else if(level >= 11 && level <= 20) { ntext = "Touchy Fist"; }
		else if(level >= 21 && level <= 30) { ntext = "Nut Cracker"; }
		else if(level >= 31 && level <= 40) { ntext = "Tommygun"; }
		else if(level >= 41 && level <= 50) { ntext = "Skull Breaker"; }
		else if(level >= 51 && level <= 60) { ntext = "Light Speed"; }
		else if(level >= 61 && level <= 70) { ntext = "Unbroken Warrior"; }
		else if(level >= 71) { ntext = "Itallion Stallion"; }
	}
	SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Boxing Records __________________|");
	format(string, sizeof(string), "| Current Champion: %s, with [%d] Winnings and [%d] Losses.", Titel[TitelName],Titel[TitelWins],Titel[TitelLoses]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Current Title: %s.", ttext);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Current NickName: %s.", ntext);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Total Wins: %d.", PlayerInfo[playerid][pWins]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Total Losses: %d.", PlayerInfo[playerid][pLoses]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	SendClientMessageEx(playerid, COLOR_WHITE, "|____________________________________________________|");
	return 1;
}

CMD:train(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 757.3734,5.7227,1000.7012) || IsPlayerInRangeOfPoint(playerid, 3.0, 758.43,-78.0,1000.65))
	{
		if(PlayerInfo[playerid][pDonateRank] >= 1)
		{
			ShowPlayerDialog(playerid, FIGHTMENU, DIALOG_STYLE_LIST, "Fighting Moves", "Boxing		$40000\nElbow		$40000\nKneehead	$40000\nKung-Fu	$40000\nGrabKick	$40000\nNormal", "Learn", "Cancel");
		}
		else
		{
			ShowPlayerDialog(playerid, FIGHTMENU, DIALOG_STYLE_LIST, "Fighting Moves", "Boxing		$50000\nElbow		$50000\nKneehead	$50000\nKung-Fu	$50000\nGrabKick	$50000\nNormal", "Learn", "Cancel");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " You are not at the learning area !(inside gym)");
	}
	return 1;
}

CMD:shakehand(playerid, params[])
{
	new string[128], giveplayerid, style;
	if(sscanf(params, "ud", giveplayerid, style)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shakehand [player] [style (1-8)]");

	if(IsPlayerConnected(giveplayerid) || (PlayerInfo[giveplayerid][pAdmin] >= 2 && PlayerInfo[playerid][pTogReports] == 0))
	{
		if(giveplayerid == playerid)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't shake your own hand.");
			return 1;
		}
		else if(PlayerInfo[giveplayerid][pAdmin] >= 2 && PlayerInfo[giveplayerid][pTogReports] != 1) {
			SendClientMessageEx(playerid, COLOR_GREY, "You are unable to shake this hand.");
			return 1;
		}
		if(style >= 1 && style < 9)
		{
			new Float: ppFloats[3];

			GetPlayerPos(giveplayerid, ppFloats[0], ppFloats[1], ppFloats[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2]))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You're too far away. You can't shake hands right now.");
				return 1;
			}

			SetPVarInt(playerid, "shrequest", giveplayerid);
			SetPVarInt(playerid, "shstyle", style);

			format(string, sizeof(string), "You have requested to shake %s's hand, please wait for them to respond.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "%s has requested to shake your hand, please use '/accept handshake' to approve the hand shake.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shakehand [player] [style (1-8)]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	return 1;
}

CMD:fight(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 12 && PlayerInfo[playerid][pJob2] != 12 && PlayerInfo[playerid][pJob3] != 12)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Boxer!");
		return 1;
	}
	if(InRing > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   There is already a Fight going on, wait for it to Finish!");
		return 1;
	}
	if(PlayerBoxing[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are already Fighting!");
		return 1;
	}

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fight [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(IsPlayerInRangeOfPoint(playerid,20.0,765.9343,0.2761,1000.7173) || IsPlayerInRangeOfPoint(playerid,20.0,768.48, -73.66, 1000.57))
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Box with yourself!"); return 1; }
				format(string, sizeof(string), "* You offered a Boxing Challenge to %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Boxer %s wants to Fight with you (type /accept boxing) to accept.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				BoxOffer[giveplayerid] = playerid;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2," You are not at the Gym!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:music(playerid, params[])
{
	if(PlayerInfo[playerid][pCDPlayer])
	{
		new choice[32];
		if(sscanf(params, "s[32]", choice))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /music [name]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: On, Off, Next");
			return 1;
		}

		if(strcmp(choice,"on",true) == 0)
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~Music person On", 5000, 5);
			new channel = Music[playerid];
			PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
		}
		else if(strcmp(choice,"off",true) == 0)
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~Music person Off", 5000, 5);
			PlayerFixRadio(playerid);
			if(GetPVarType(playerid, "MusicIRadio"))
			{
			    StopAudioStreamForPlayerEx(playerid);
			    DeletePVar(playerid, "MusicIRadio");
			}
		}
		else if(strcmp(choice,"next",true) == 0)
		{
			if(Music[playerid] == 0) { Music[playerid] = 1; }
			else if(Music[playerid] == 1) { Music[playerid] = 2; }
			else if(Music[playerid] == 2) { Music[playerid] = 3; }
			else if(Music[playerid] == 3) { Music[playerid] = 4; }
			else if(Music[playerid] == 4) { Music[playerid] = 5; }
			else if(Music[playerid] == 5) { Music[playerid] = 6; }
			else if(Music[playerid] == 6) { Music[playerid] = 0; }
			new channel = Music[playerid];
			PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   Unknown music command!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You don't have a Music-Player!");
		return 1;
	}
	return 1;
}

CMD:mp3(playerid, params[])
{
	if(PlayerInfo[playerid][pCDPlayer] || PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You must be on foot to use your MP3 Player.");
		
		ShowPlayerDialog(playerid, SETSTATION, DIALOG_STYLE_LIST, "MP3 Player - Choose a station","Genres\nTop 50 Stations\nSearch\nK-LSR\nNick's Radio\nCustom Audio URL\nTurn radio off", "Select", "Close");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have a CD Player/MP3 Player.");
	return 1;
}	

CMD:service(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /service [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Taxi, Bus, Medic, Mechanic, EMS");
		return 1;
	}

	if(PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this in jail/prison.");
		return 1;
	}
	if(gettime() < PlayerInfo[playerid][pServiceTime]) return SendClientMessage(playerid, COLOR_WHITE, "You must wait 30 seconds before using this command again. " );

	if(strcmp(choice,"ems",true) == 0)
	{
		if(GetPVarInt(playerid, "Injured") == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You are not injured, you can't call for EMS now!");
			return 1;
		}
		new zone[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
		SetPVarInt(playerid, "EMSAttempt", 1);
		SendClientMessageEx(playerid, COLOR_WHITE, "The EMS have been informed of your current location and are on their way.");
		format(string, sizeof(string), "Emergency Dispatch has reported (%d) %s to be wounded at %s, They require immediate emergency transport.",playerid, GetPlayerNameEx(playerid), zone);
		SendGroupMessage(3, TEAM_MED_COLOR, string);
		PlayerInfo[playerid][pServiceTime] = gettime()+30;
		return 1;
	}
	else if(strcmp(choice,"taxi",true) == 0)
	{
		if(TaxiDrivers < 1) return SendClientMessageEx(playerid, COLOR_GREY, "   There are no taxi drivers on duty at the moment, try again later!");
		if(TransportDuty[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You can't call for a taxi now!");

		new szZoneName[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, szZoneName, MAX_ZONE_NAME);
		format(string, sizeof(string), "** %s(%d) is in need of a taxi driver at %s - use /ataxi to accept the call.", GetPlayerNameEx(playerid), playerid, szZoneName );
		SendTaxiMessage(TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have called for a taxi driver, wait for a reply.");
		SetPVarInt(playerid, "TaxiCall", 1);
		PlayerInfo[playerid][pServiceTime] = gettime()+30;
		return 1;
	}
	else if(strcmp(choice,"bus",true) == 0)
	{
		if(BusDrivers < 1) return SendClientMessageEx(playerid, COLOR_GREY, "   There are no bus drivers at the moment, try again later!");
		if(TransportDuty[playerid] > 0) SendClientMessageEx(playerid, COLOR_GREY, "   You can't call for a bus now!");
		
		new szZoneName[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, szZoneName, sizeof(szZoneName));
		format(string, sizeof(string), "** %s(%d) is in need of a bus driver at %s - use /abus to accept the call.", GetPlayerNameEx(playerid), playerid, szZoneName );
		SendTaxiMessage(TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have called for a bus driver, wait for a reply.");
		SetPVarInt(playerid, "BusCall", 1);
		PlayerInfo[playerid][pServiceTime] = gettime()+30;
		return 1;
	}
	else if(strcmp(choice,"medic",true) == 0)
	{
		new OnDutyMedics;
		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(IsAMedic(i) && PlayerInfo[i][pDuty] == 1)
				{
					OnDutyMedics++;
				}
			}	
		}
		if(OnDutyMedics < 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   There are no medics on duty at the moment, try again later!");
			return 1;
		}
		else
		{
			format(string, sizeof(string), "** %s is in need of a Medic - use /accept medic to accept the call.", GetPlayerNameEx(playerid));
			SendGroupMessage(3, TEAM_AZTECAS_COLOR, string);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have called for a medic, wait for a reply.");
			MedicCall = playerid;
			PlayerInfo[playerid][pServiceTime] = gettime()+30;
			OnDutyMedics = 0;
			return 1;
		}
	}
	else if(strcmp(choice,"mechanic",true) == 0)
	{
		if(Mechanics < 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   There are no car mechanics on duty at the moment, try again later!");
			return 1;
		}
		format(string, sizeof(string), "** %s is in need of a car mechanic - use /accept mechanic to accept the call.", GetPlayerNameEx(playerid));
		SendJobMessage(7, TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have called for a car mechanic, wait for a reply.");
		MechanicCall = playerid;
		PlayerInfo[playerid][pServiceTime] = gettime()+30;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   Unknown service name!");
		return 1;
	}
}

CMD:requesthelp(playerid, params[])
{
	if(Advisors < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   There are no Community Advisors On Duty at the moment, try again later!");
		return 1;
	}
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /requesthelp [reason]");
		return 1;
	}

	new string[128];
	if(PlayerInfo[playerid][pLevel] < 4)
	{
		if(PlayerInfo[playerid][pRHMutes] >= 4 || PlayerInfo[playerid][pRHMuteTime] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are currently banned from requesting help.");
			return 1;
		}
		if(JustReported[playerid] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Wait 10 seconds after sending a next request!");
			return 1;
		}
		JustReported[playerid]=10;
		format(string, sizeof(string), "** %s(%i) is requesting help, reason: %s. (type /accepthelp %i)", GetPlayerNameEx(playerid), playerid, params, playerid);
		SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have requested help from a Community Advisor, wait for a reply.");
		SetPVarInt( playerid, "COMMUNITY_ADVISOR_REQUEST", 1 );
		SetPVarInt( playerid, "HelpTime", 5);
		SetPVarString( playerid, "HelpReason", params);
		SetTimerEx( "HelpTimer", 60000, 0, "d", playerid);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are not a newbie!");
	}
	return 1;
}

CMD:showrequests(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] >= 2)
	{
		new string[128], reason[64];
		SendClientMessageEx(playerid, COLOR_GREEN, "____________________ HELP REQUESTS _____________________");
		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(GetPVarInt(i, "COMMUNITY_ADVISOR_REQUEST"))
				{
					GetPVarString(i, "HelpReason", reason, 64);
					format(string, sizeof(string), "%s  | ID: %i | Reason: %s | Expires in: %i minutes.", GetPlayerNameEx(i), i, reason, GetPVarInt(i, "HelpTime"));
					SendClientMessageEx(playerid, COLOR_REPORT, string);
				}
			}	
		}
		SendClientMessageEx(playerid, COLOR_GREEN, "_________________________________________________________");
	}
	return 1;
}

CMD:rhmute(playerid, params[])
{
	if (PlayerInfo[playerid][pHelper] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rhmute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRHMuteTime] == 0)
			{
			    if(PlayerInfo[giveplayerid][pRHMutes] == 0)
			    {
  					PlayerInfo[giveplayerid][pRHMutes] = 1;
					format(string, sizeof(string), "*** %s has given %s their first warning about help request abuse", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendAdvisorMessage(COLOR_COMBINEDCHAT, string);

					ShowPlayerDialog(giveplayerid, 7954, DIALOG_STYLE_MSGBOX, "Help request abuse warning", "A Community Advisor has warned you not to abuse /requesthelp.\n\nNote that future abuse of /requesthelp could result in a mute from /requesthelp or loss of that privilege altogether.", "Next", "");

					format(string, sizeof(string), "AdmCmd: %s has given %s their first warning about help request abuse", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					Log("logs/mute.log", string);

			    }
			    else if(PlayerInfo[giveplayerid][pRHMutes] == 1)
			    {
  					PlayerInfo[giveplayerid][pRHMutes] = 2;
					PlayerInfo[giveplayerid][pRHMuteTime] = 30*60;
					format(string, sizeof(string), "*** %s has temporarily blocked %s from using /requesthelp", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendAdvisorMessage(COLOR_COMBINEDCHAT, string);

					ShowPlayerDialog(giveplayerid, 7954, DIALOG_STYLE_MSGBOX, "Temporarily blocked from /requesthelp", "You have been temporarily blocked from using /requesthelp\n\nAs this is the first time you have been blocked from requesting help, you will not be able to use /requesthelp for 30 minutes.\n\nTwo more mute will result in a total loss in privilege of the command.", "Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /requesthelp by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					Log("logs/mute.log", string);
			    }
			    else if(PlayerInfo[giveplayerid][pRHMutes] == 2)
			    {
  					PlayerInfo[giveplayerid][pRHMutes] = 3;
					PlayerInfo[giveplayerid][pRHMuteTime] = 90*60;
					format(string, sizeof(string), "*** %s has temporarily blocked %s from using /requesthelp", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendAdvisorMessage(COLOR_COMBINEDCHAT, string);

					ShowPlayerDialog(giveplayerid, 7954, DIALOG_STYLE_MSGBOX, "Temporarily blocked from /requesthelp", "You have been temporarily blocked from using /requesthelp\n\nAs this is the second time you have been blocked from requesting help, you will not be able to use /requesthelp for 1 hour and 30 minutes.\n\nOne more mute will result in a total loss in privilege of the command.", "Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /requesthelp by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					Log("logs/mute.log", string);
			    }
				else if(PlayerInfo[giveplayerid][pRHMutes] == 3)
			    {
  					PlayerInfo[giveplayerid][pRHMutes] = 4;
					format(string, sizeof(string), "*** %s has permanently blocked %s from using /requesthelp", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendAdvisorMessage(COLOR_COMBINEDCHAT, string);

					ShowPlayerDialog(giveplayerid,7954,DIALOG_STYLE_MSGBOX, "Permanently blocked from /requesthelp", "You have been permanently blocked from using /requesthelp.\n\nYou will need to contact an Administrator via /report to appeal this.", "Next", "");

					format(string, sizeof(string), "AdmCmd: %s was permanently blocked from /requesthelp by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					Log("logs/mute.log", string);
			    }
				DeletePVar(giveplayerid, "COMMUNITY_ADVISOR_REQUEST");
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That person is already disabled from /requesthelp.");
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:rhmutereset(playerid, params[])
{
	if (PlayerInfo[playerid][pHelper] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rhmutereset [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRHMutes] >= 2)
			{
				PlayerInfo[giveplayerid][pRHMutes]--;
				PlayerInfo[giveplayerid][pRHMuteTime] = 0;
				format(string, sizeof(string), "*** %s has unblocked %s from requesting help, reason: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
				SendAdvisorMessage(COLOR_COMBINEDCHAT, string);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "You have been unblocked from requesting help. You may now use the help request system again.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Please accept our apologies for any error and inconvenience this may have caused.");
				format(string, sizeof(string), "AdmCmd: %s was unblocked from /requesthelp by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/mute.log", string);
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GRAD1, "That person is not blocked from requesting help!");
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:findnewb(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] < 2) {
        SendClientMessageEx(playerid, COLOR_GREY, "You are not a community advisor.");
	}
	else if(GetPVarInt(playerid, "AdvisorDuty") == 0) {
	    SendClientMessageEx(playerid, COLOR_GREY, "You are not on duty as a community advisor.");
	}
	else {
	    new Float: Pos[3][2], i[2], vw[2], Message[38 + MAX_PLAYER_NAME];
	    if(!GetPVarType(playerid, "HelpingSomeone")) {
     		//foreach(new x: Player)
			for(new x = 0; x < MAX_PLAYERS; ++x)
			{
				if(IsPlayerConnected(x))
				{
					if(PlayerInfo[x][pLevel] == 1 && PlayerInfo[x][pHelpedBefore] == 0) {
						GetPlayerPos(x, Pos[0][0], Pos[1][0], Pos[2][0]);
						GetPlayerPos(playerid, Pos[0][1], Pos[1][1], Pos[2][1]);
						vw[0] = GetPlayerVirtualWorld(x);
						i[0] = GetPlayerInterior(x);
						vw[1] = GetPlayerVirtualWorld(playerid);
						i[1] = GetPlayerInterior(playerid);

						SetPVarFloat(playerid, "AdvisorLastx", Pos[0][1]);
						SetPVarFloat(playerid, "AdvisorLasty", Pos[1][1]);
						SetPVarFloat(playerid, "AdvisorLastz", Pos[2][1]);
						SetPVarInt(playerid, "AdvisorLastInt", i[1]);
						SetPVarInt(playerid, "AdvisorLastVW", vw[1]);

						SetPlayerVirtualWorld(playerid, vw[0]);
						SetPlayerInterior(playerid, i[0]);
						SetPlayerPos(playerid, Pos[0][0], Pos[1][0]+2, Pos[2][0]);
						PlayerInfo[x][pHelpedBefore] = 1;
						SetPVarInt(playerid, "HelpingSomeone", 1);
						ShowPlayerDialog(x, 0, DIALOG_STYLE_MSGBOX, "Helper Alert", "A community advisor has just teleported to you. Feel free to ask him anything related to Next Generation Gaming that you may have issues/concerns with.", "Close", "");
						if(i[0] > 0 || vw[0] > 0) Player_StreamPrep(playerid, Pos[0][0], Pos[1][0], Pos[2][0], FREEZE_TIME);
						format(Message, sizeof(Message), "You have been teleported to newbie %s, retype the command to be teleported back.", GetPlayerNameEx(x));
						SendClientMessageEx(playerid, COLOR_WHITE, Message);
						break;
					}
				}	
			}
		}
		else
		{
		    DeletePVar(playerid, "HelpingSomeone");
			SetPlayerPos(playerid, GetPVarFloat(playerid, "AdvisorLastx"), GetPVarFloat(playerid, "AdvisorLasty"), GetPVarFloat(playerid, "AdvisorLastz"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "AdvisorLastVW"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "AdvisorLastInt"));
			if(GetPVarInt(playerid, "AdvisorLastInt") > 0 || GetPVarInt(playerid, "AdvisorLastVW") > 0) Player_StreamPrep(playerid, GetPVarFloat(playerid, "AdvisorLastx"), GetPVarFloat(playerid, "AdvisorLasty"), GetPVarFloat(playerid, "AdvisorLastz"), FREEZE_TIME);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have been teleported back to your previous location.");
		}
	}
	return 1;
}

CMD:accepthelp(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] < 2) {
        SendClientMessageEx(playerid, COLOR_GREY, "You are not a community advisor.");
	}
	else if(HelpingNewbie[playerid] != INVALID_PLAYER_ID) {
	    SendClientMessageEx(playerid, COLOR_GREY, "You are already helping someone.");
	}
	else if(GetPVarInt(playerid, "AdvisorDuty") == 0) {
	    SendClientMessageEx(playerid, COLOR_GREY, "You are not on duty as a community advisor.");
	}
	else {

		new Player, string[128], Float:health, Float:armor;

		if(sscanf(params, "u", Player)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /accepthelp [PlayerID]");
		}
		else if(Player == playerid) {
		    SendClientMessageEx(playerid, COLOR_GREY, "You can't accept a help request from yourself.");
		}
		else if(!IsPlayerConnected(Player)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(GetPVarInt(Player, "COMMUNITY_ADVISOR_REQUEST") == 0) {
			SendClientMessageEx(playerid, COLOR_GREY, "That person doesn't need help.");
		}
		else {

		    format(string, sizeof(string), "* %s has accepted the help request from %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(Player));
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
			format(string, sizeof(string), "* You have accepted %s's help request, once you are done type /finishhelp to get back to your position.",GetPlayerNameEx(Player));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Advisor %s has accepted your help request.",GetPlayerNameEx(playerid));
			SendClientMessageEx(Player, COLOR_LIGHTBLUE, string);
			PlayerInfo[playerid][pAcceptedHelp]++;
			ReportCount[playerid]++;
			ReportHourCount[playerid]++;
			new Float: x, Float: y, Float: z, Float: r, i, vw;
			vw = GetPlayerVirtualWorld(playerid);
			i = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, r);
			SetPVarFloat(playerid, "AdvisorLastx", x);
			SetPVarFloat(playerid, "AdvisorLasty", y);
			SetPVarFloat(playerid, "AdvisorLastz", z);
			SetPVarFloat(playerid, "AdvisorLastr", r);
			SetPVarInt(playerid, "AdvisorLastInt", i);
			SetPVarInt(playerid, "AdvisorLastVW", vw);
			GetPlayerPos(Player, x, y, z);
			vw = GetPlayerVirtualWorld(Player);
			i = GetPlayerInterior(Player);
			SetPlayerPos(playerid, x, y+2, z);
			SetPlayerVirtualWorld(playerid, vw);
			SetPlayerInterior(playerid, i);
			GetPlayerHealth(playerid,health);
			SetPVarFloat(playerid, "pPreGodHealth", health);
			GetPlayerArmour(playerid,armor);
			SetPVarFloat(playerid, "pPreGodArmor", armor);
			SetPlayerHealth(playerid, 0x7FB00000);
		    SetPlayerArmor(playerid, 0x7FB00000);
		    SetPVarInt(playerid, "pGodMode", 1);
			if(i > 0 || vw > 0) Player_StreamPrep(playerid, x, y, z, FREEZE_TIME);
			HelpingNewbie[playerid] = Player;
			AddCAReportToken(playerid); // Advisor Tokens
			DeletePVar(Player, "COMMUNITY_ADVISOR_REQUEST");
			DeletePVar(Player, "HelpTime");
			return 1;

		}
	}
	return 1;
}

CMD:finishhelp(playerid, params[])
{
	if(HelpingNewbie[playerid] != INVALID_PLAYER_ID)
	{
		new string[128], Float:health, Float:armor;
		format(string, sizeof(string), "* %s has finished the help request from %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(HelpingNewbie[playerid]));
		SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
		SetPlayerPos(playerid, GetPVarFloat(playerid, "AdvisorLastx"), GetPVarFloat(playerid, "AdvisorLasty"), GetPVarFloat(playerid, "AdvisorLastz"));
		SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "AdvisorLastVW"));
		SetPlayerInterior(playerid, GetPVarInt(playerid, "AdvisorLastInt"));
		DeletePVar(playerid, "pGodMode");
		health = GetPVarFloat(playerid, "pPreGodHealth");
		SetPlayerHealth(playerid,health);
		armor = GetPVarFloat(playerid, "pPreGodArmor");
		if(armor > 0) {
			SetPlayerArmor(playerid,armor);
		}
		else
		{
			RemoveArmor(playerid);
		}
		DeletePVar(playerid, "pPreGodHealth");
		DeletePVar(playerid, "pPreGodArmor");
		if(GetPVarInt(playerid, "AdvisorLastInt") > 0 || GetPVarInt(playerid, "AdvisorLastVW") > 0) Player_StreamPrep(playerid, GetPVarFloat(playerid, "AdvisorLastx"), GetPVarFloat(playerid, "AdvisorLasty"), GetPVarFloat(playerid, "AdvisorLastz"), FREEZE_TIME);
		HelpingNewbie[playerid] = INVALID_PLAYER_ID;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not helping anyone!");
		return 1;
	}
}

CMD:tie(playerid, params[])
{
	if(PlayerInfo[playerid][pRope] > 0)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /tie [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerTied[giveplayerid] > 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   person already Tied!");
				return 1;
			}
			if(PlayerCuffed[giveplayerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't tie a cuffed/tazed player.");
			if(PlayerInfo[giveplayerid][pJailTime] > 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't tie a prisoned player." );
				return 1;
			}
			if( PlayerInfo[playerid][pRope] == 0 )
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "You don't have any rope left." );
			}
			else
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					new car = GetPlayerVehicleID(playerid);
					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot tie up yourself!"); return 1; }
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
					{
						if(PlayerCuffed[giveplayerid] == 1 || PlayerCuffed[giveplayerid] == 2) {
							SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this right now.");
							return 1;
						}

						format(string, sizeof(string), "* You were tied up by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* You tied %s up.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						switch( PlayerInfo[giveplayerid][pSex] ) {
							case 1: format(string, sizeof(string), "* %s ties %s up, so he won't go anywhere.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							case 2: format(string, sizeof(string), "* %s ties %s up, so she won't go anywhere.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						}
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveplayerid, "~r~Tied", 2500, 3);
						SetPVarInt(giveplayerid, "IsFrozen", 1);
						TogglePlayerControllable(giveplayerid, 0);
						PlayerTied[giveplayerid] = 1;
						PlayerInfo[playerid][pRope]--;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "   person not in your Car, or you are not the Driver!");
						return 1;
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}
			}

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You don't have a Rope!");
	}
	return 1;
}

CMD:untie(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /untie [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Untie yourself!"); return 1; }
			if(PlayerCuffed[giveplayerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't untie a cuffed/tazed player.");
			if(PlayerTied[giveplayerid])
			{
				DeletePVar(giveplayerid, "IsFrozen");
				format(string, sizeof(string), "* You were untied by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* You untied %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				GameTextForPlayer(giveplayerid, "~g~Untied", 2500, 3);
				TogglePlayerControllable(giveplayerid, 1);
				PlayerTied[giveplayerid] = 0;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That person isn't Tied up!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:usesprunk(playerid, params[])
{
	if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot do this while being in the Hunger Games Event!");
    #if defined zombiemode
	if(zombieevent == 1 && GetPVarType(playerid, "pIsZombie")) return SendClientMessageEx(playerid, COLOR_GREY, "Zombies can't use this.");
	#endif
	if(PlayerInfo[playerid][pSprunk] > 0)
	{
		if(GetPVarInt(playerid, "UsingSprunk") == 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're already drinking a sprunk can.");
		if( PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
			return 1;
		}

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(IsABike(GetPlayerVehicleID(playerid)))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this on a bike.");
				return 1;
			}
		}
		new string[128];
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		format(string, sizeof(string), "* %s opens a can of sprunk.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetPVarInt(playerid, "UsingSprunk", 1);
		SetPVarInt(playerid, "DrinkCooledDown", 1);
		PlayerInfo[playerid][pSprunk]--;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You don't have any sprunk, buy some from the 24/7!");
		return 1;
	}
}

CMD:usecigar(playerid, params[])
{
	if(PlayerInfo[playerid][pCigar] > 0)
	{
		if( PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1 )
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
			return 1;
		}
		new string[128];
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
		format(string, sizeof(string), "* %s takes out a cigar and lights it.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pCigar]--;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You don't have any cigars, buy some from the 24/7!");
		return 1;
	}
}

CMD:paintcar(playerid, params[]) {
	new iPaintID;
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a vehicle.");
	if(PlayerInfo[playerid][pSpraycan] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Your spraycan is empty.");
	if(sscanf(params, "i", iPaintID)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /paintcar [0-6] (3 to remove a paintjob)");
	if(!(0 <= iPaintID <= 6)) return SendClientMessageEx(playerid, COLOR_GRAD2, "The specified paint job ID must be between 0 and 6.");
	
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][i][pvId]))
		{
			PlayerVehicleInfo[playerid][i][pvPaintJob] = iPaintID;
			ChangeVehiclePaintjob(PlayerVehicleInfo[playerid][i][pvId], iPaintID);
			PlayerInfo[playerid][pSpraycan]--;
			g_mysql_SaveVehicle(playerid, i);
			return SendClientMessageEx(playerid, COLOR_GRAD2, "You have successfully applied a paint job to your vehicle.");
		}
	}
	for(new i = 0; i < sizeof(VIPVehicles); i++)
	{
		if(IsPlayerInVehicle(playerid, VIPVehicles[i]))
		{
			ChangeVehiclePaintjob(VIPVehicles[i], iPaintID);
			PlayerInfo[playerid][pSpraycan]--;
			return SendClientMessageEx(playerid, COLOR_GRAD2, "You have successfully applied a paint job to this vehicle.");		
		}
	}
	for(new i = 0; i < sizeof(FamedVehicles); i++)
	{
		if(IsPlayerInVehicle(playerid, FamedVehicles[i]))
		{
			ChangeVehiclePaintjob(FamedVehicles[i], iPaintID);
			PlayerInfo[playerid][pSpraycan]--;
			return SendClientMessageEx(playerid, COLOR_GRAD2, "You have successfully applied a paint job to this vehicle.");
		}
	}	
	SendClientMessageEx(playerid, COLOR_GREY, "You can't spray other people's vehicles.");
	return 1;
}

CMD:sellfish(playerid, params[])
{
	if (!IsAt247(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in a 24-7!");
		return 1;
	}

	new string[128], fishid;
	if(sscanf(params, "d", fishid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellfish [fish]");

	new price;
	if(fishid < 1 || fishid > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   Fish number cant be below 1 or above 5!"); return 1; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(1)!"); return 1; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(2)!"); return 1; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(3)!"); return 1; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(4)!"); return 1; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(5)!"); return 1; }

	switch (fishid)
	{
	case 1:
		{
			if(Fishes[playerid][pWeight1] < 20)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid1]);
			price = price * Fishes[playerid][pWeight1];
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 1);
		}
	case 2:
		{
			if(Fishes[playerid][pWeight2] < 20)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid2]);
			price = price * Fishes[playerid][pWeight2];
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 2);
		}
	case 3:
		{
			if(Fishes[playerid][pWeight3] < 20)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid3]);
			price = price * Fishes[playerid][pWeight3];
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 3);
		}
	case 4:
		{
			if(Fishes[playerid][pWeight4] < 20)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid4]);
			price = price * Fishes[playerid][pWeight4];
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 4);
		}
	case 5:
		{
			if(Fishes[playerid][pWeight5] < 20)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid5]);
			price = price * Fishes[playerid][pWeight5];
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 5);
		}
	}
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	return 1;
}

CMD:fare(playerid, params[])
{
	if(IsATaxiDriver(playerid) || PlayerInfo[playerid][pJob] == 17 || PlayerInfo[playerid][pJob2] == 17 && PlayerInfo[playerid][pTaxiLicense] == 1 || PlayerInfo[playerid][pJob3] == 17 && PlayerInfo[playerid][pTaxiLicense] == 1)
	{
		new string[128], fare;
		if(sscanf(params, "d", fare)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fare [price]");

		if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");

		if(TransportDuty[playerid] > 0)
		{
			if(TransportDuty[playerid] == 1)
			{
				TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
				BusDrivers -= 1;
			}

			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* You are now off duty and earned $%d.", TransportMoney[playerid]);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			SetPlayerToTeamColor(playerid);
			return 1;
		}
		if(GetPVarInt(playerid, "MechanicDuty") == 1 || GetPVarInt(playerid, "LawyerDuty") == 1) return SendClientMessageEx(playerid,COLOR_GREY,"You need to get off duty with your mechanic/lawyer job first.");
		if(GetPlayerState(playerid) != 2) return SendClientMessageEx(playerid, COLOR_GREY, "   You are not the driver!");
		if(fare < 1 || fare > 500) return SendClientMessageEx(playerid, COLOR_GREY, "   Fare price must be between $1 and $500!");
		new newcar = GetPlayerVehicleID(playerid);
		if(IsAnBus(newcar))
		{
			BusDrivers += 1; TransportDuty[playerid] = 2; TransportValue[playerid] = fare;
			format(string, sizeof(string), "You are now on-duty as Bus Driver, fare: $%d.", TransportValue[playerid]);
		}
		else
		{
			TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = fare;
			format(string, sizeof(string), "You are now on-duty as Taxi Driver, fare: $%d.", TransportValue[playerid]);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(IsATaxiDriver(playerid)) SetPlayerColor(playerid, COLOR_TAXI); else SetPlayerColor(playerid,TEAM_TAXI_COLOR);
	}
	else
	{
		return SendClientMessageEx(playerid,COLOR_GREY,"You're not a licensed taxi/bus driver!");
	}
	return 1;
}

CMD:fish(playerid, params[])
{
	if(PlayerInfo[playerid][pFishes] > 5)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You've caught enough fish for now - take a break.");
		return 1;
	}
	if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't carry more than five fish at a time - sell or release them first.");
		return 1;
	}

	new string[128];
	new Veh = GetPlayerVehicleID(playerid);
	if((IsAtFishPlace(playerid)) || IsABoat(Veh))
	{
		new Caught;
		new rand;
		new fstring[MAX_PLAYER_NAME];
		new Level = PlayerInfo[playerid][pFishSkill];
		if(Level >= 0 && Level <= 50) { Caught = random(20)-7; }
		else if(Level >= 51 && Level <= 100) { Caught = random(50)-20; }
		else if(Level >= 101 && Level <= 200) { Caught = random(100)-50; }
		else if(Level >= 201 && Level <= 400) { Caught = random(160)-60; }
		else if(Level >= 401) { Caught = random(180)-70; }
		rand = random(sizeof(FishNames));
		if(Caught <= 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "The line snapped.");
			return 1;
		}
		else if(rand == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You caught a jacket and threw it away.");
			return 1;
		}
		else if(rand == 4)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You caught a pair of trousers and threw it away.");
			return 1;
		}
		else if(rand == 7)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You caught a can and threw it away.");
			return 1;
		}
		else if(rand == 10)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You caught a pair of shoes and threw it away.");
			return 1;
		}
		else if(rand == 13)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You caught some garbage and threw it away.");
			return 1;
		}
		else if(rand == 20)
		{
			new mrand = random(500);
			format(string, sizeof(string), "* You caught a bag filled with money ($%d).", mrand);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, mrand);
			return 1;
		}
		if(Fishes[playerid][pWeight1] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;

  			if(PlayerInfo[playerid][pDoubleEXP] > 0)
			{
				format(string, sizeof(string), "You have gained 2 fisher skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
   				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
			{
  				PlayerInfo[playerid][pFishSkill] += 1;
			}

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish1], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight1] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish1], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 1;
			Fishes[playerid][pFid1] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight2] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;

  			if(PlayerInfo[playerid][pDoubleEXP] > 0)
			{
				format(string, sizeof(string), "You have gained 2 fisher skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
   				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
			{
  				PlayerInfo[playerid][pFishSkill] += 1;
			}

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish2], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight2] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish2], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 2;
			Fishes[playerid][pFid2] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight3] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;

  			if(PlayerInfo[playerid][pDoubleEXP] > 0)
			{
				format(string, sizeof(string), "You have gained 2 fisher skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
   				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
			{
  				PlayerInfo[playerid][pFishSkill] += 1;
			}

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish3], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight3] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish3], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 3;
			Fishes[playerid][pFid3] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight4] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;

  			if(PlayerInfo[playerid][pDoubleEXP] > 0)
			{
				format(string, sizeof(string), "You have gained 2 fisher skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
   				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
			{
  				PlayerInfo[playerid][pFishSkill] += 1;
			}

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish4], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight4] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish4], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 4;
			Fishes[playerid][pFid4] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight5] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;

  			if(PlayerInfo[playerid][pDoubleEXP] > 0)
			{
				format(string, sizeof(string), "You have gained 2 fisher skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
   				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
			{
  				PlayerInfo[playerid][pFishSkill] += 1;
			}

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish5], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight5] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish5], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 5;
			Fishes[playerid][pFid5] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You don't have any space for your fish.");
			return 1;
		}
		if(PlayerInfo[playerid][pFishSkill] == 50)
		{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Fishing Skill is now Level 2, you can now catch larger fish."); }
		else if(PlayerInfo[playerid][pFishSkill] == 100)
		{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Fishing Skill is now Level 3, you can now catch larger fish."); }
		else if(PlayerInfo[playerid][pFishSkill] == 200)
		{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Fishing Skill is now Level 4, you can now catch larger fish."); }
		else if(PlayerInfo[playerid][pFishSkill] == 400)
		{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Fishing Skill is now Level 5, you can now catch larger fish."); }
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not at the Santa Maria Pier, or on a fishing boat.");
		return 1;
	}
	return 1;
}

CMD:fishes(playerid, params[])
{
	new string[128];

	SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Fishes __________________|");
	format(string, sizeof(string), "** (1) Fish: %s.   Weight: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (2) Fish: %s.   Weight: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (3) Fish: %s.   Weight: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (4) Fish: %s.   Weight: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (5) Fish: %s.   Weight: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	SendClientMessageEx(playerid, COLOR_WHITE, "|____________________________________________|");
	return 1;
}

CMD:releasefish(playerid, params[])
{
	new fishid;
	if(sscanf(params, "d", fishid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /releasefish [fish 1-5]");

	if(fishid < 1 || fishid > 5) { SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /releasefish [fish 1-5]"); return 1; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	ClearFishID(playerid, fishid);
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	SendClientMessageEx(playerid, COLOR_GREY, "You released a fish");
	return 1;
}

CMD:throwback(playerid, params[])
{
	if(Fishes[playerid][pLastFish] > 0)
	{
		ClearFishID(playerid, Fishes[playerid][pLastFish]);
		Fishes[playerid][pLastFish] = 0;
		Fishes[playerid][pFishID] = 0;
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have thrown back your last fish.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You haven't even caught a fish yet.");
		return 1;
	}
	return 1;
}

CMD:throwbackall(playerid, params[])
{
	if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0)
	{
		ClearFishes(playerid);
		Fishes[playerid][pLastFish] = 0;
		Fishes[playerid][pFishID] = 0;
		SendClientMessageEx(playerid, COLOR_GREY, "You have thrown back all your fish");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You haven't even caught a fish yet.");
		return 1;
	}
	return 1;
}

CMD:licenses(playerid, params[])
{
	new string[128], text1[20], text2[20], text3[20], text4[20];
	if(PlayerInfo[playerid][pCarLic]) { text1 = "Acquired"; } else { text1 = "Not acquired"; }
	if(PlayerInfo[playerid][pFlyLic]) { text4 = "Acquired"; } else { text4 = "Not acquired"; }
	if(PlayerInfo[playerid][pBoatLic]) { text2 = "Acquired"; } else { text2 = "Not acquired"; }
	if(PlayerInfo[playerid][pTaxiLicense]) { text3 = "Acquired"; } else { text3 = "Not acquired"; }
	SendClientMessageEx(playerid, COLOR_WHITE, "Your licenses...");
	format(string, sizeof(string), "** Driver's license: %s.", text1);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Pilot license: %s.", text4);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Boating license: %s.", text2);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Taxi license: %s.", text3);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:showid(playerid, params[])
{
	return cmd_showlicenses(playerid, params);
}

CMD:showlicenses(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /showlicenses [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You can't show licenses to yourself - use /licenses for that."); return 1; }
			new text1[20], text2[20], text3[20], text4[20];
			if(PlayerInfo[playerid][pCarLic]) { text1 = "Acquired"; } else { text1 = "Not acquired"; }
			if(PlayerInfo[playerid][pFlyLic]) { text4 = "Acquired"; } else { text4 = "Not acquired"; }
			if(PlayerInfo[playerid][pBoatLic]) { text2 = "Acquired"; } else { text2 = "Not acquired"; }
			if(PlayerInfo[playerid][pTaxiLicense]) { text3 = "Acquired"; } else { text3 = "Not acquired"; }
			switch(PlayerInfo[playerid][pNation])
			{
				case 0:
				{
					SendClientMessageEx(giveplayerid, COLOR_WHITE, "** Citizen of San Andreas **");
				}
				case 1:
				{
					SendClientMessageEx(giveplayerid, COLOR_TR, "** Citizen of Tierra Robada **");
				}
			}
			format(string, sizeof(string), "Listing %s's licenses...", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
			format(string, sizeof(string), "Date of Birth: %s", PlayerInfo[playerid][pBirthDate]);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
			format(string, sizeof(string), "** Driver's license: %s.", text1);
			SendClientMessageEx(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Pilot license: %s.", text4);
			SendClientMessageEx(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Boating license: %s.", text2);
			SendClientMessageEx(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Taxi license: %s.", text3);
			SendClientMessageEx(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "* %s has shown their licenses to you.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* You have shown your licenses to %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:frisk(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pJob] == 8 || PlayerInfo[playerid][pJob2] == 8 || PlayerInfo[playerid][pJob3] == 8)
	{
		new string[128], storageid, giveplayerid;
		if(sscanf(params, "u", giveplayerid)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /frisk [player]");
			return 1;
		}
		/*if(sscanf(params, "ud", giveplayerid, storageid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /frisk [player] [storageid]");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
		}

		if(storageid < 0 || storageid > 1) {
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /frisk [player] [storageid]");
			SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
			return 1;
		}*/

		if(IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot frisk yourself!"); return 1; }

				/*// Find the storageid of the storagedevice.
				if(storageid == 1) {
					new bool:itemEquipped = false;
					for(new i = 0; i < 3; i++)
					{
						if(StorageInfo[giveplayerid][i][sAttached] == 1) {
							storageid = i+1;
							itemEquipped = true;
						}
					}
					if(itemEquipped == false) return SendClientMessageEx(playerid, COLOR_WHITE, "That person doesn't have a storage device equipped!");
				}*/
				new packages = GetPVarInt(giveplayerid, "Packages");
				new crates = PlayerInfo[giveplayerid][pCrates];
				SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
				format(string, sizeof(string), "*** %s' items...  ***", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				if(PlayerInfo[giveplayerid][pPot] > 0)
				{
					format(string, sizeof(string), "(Pocket) %d grams of pot.", PlayerInfo[giveplayerid][pPot]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}

				if(PlayerInfo[giveplayerid][pWSeeds] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "(Pocket) Marijuana Seeds");
				}
				if(PlayerInfo[giveplayerid][pCrack] > 0)
				{
					format(string, sizeof(string), "(Pocket) %d grams of crack.", PlayerInfo[giveplayerid][pCrack]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(PlayerInfo[giveplayerid][pMats] > 0)
				{
					format(string, sizeof(string), "(Pocket) %d materials.", PlayerInfo[giveplayerid][pMats]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(PlayerInfo[giveplayerid][pHeroin] > 0)
				{
					format(string, sizeof(string), "(Pocket) %d grams of heroin.", PlayerInfo[giveplayerid][pHeroin]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(PlayerInfo[giveplayerid][pRawOpium] > 0)
				{
					format(string, sizeof(string), "(Pocket) %d grams of raw opium.", PlayerInfo[giveplayerid][pRawOpium]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(PlayerInfo[giveplayerid][pSyringes] > 0)
				{
					format(string, sizeof(string), "(Pocket) %d syringes.", PlayerInfo[giveplayerid][pSyringes]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(PlayerInfo[giveplayerid][pOpiumSeeds] > 0)
				{
					format(string, sizeof(string), "(Pocket) %d opium seeds.", PlayerInfo[giveplayerid][pOpiumSeeds]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
                if(packages > 0)
				{
					format(string, sizeof(string), "(Pocket) %d material packages.", packages);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(crates > 0)
				{
					format(string, sizeof(string), "(Pocket) %d drug crates.", crates);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(storageid > 0)
				{
					if(StorageInfo[giveplayerid][storageid-1][sPot] > 0)
					{
						format(string, sizeof(string), "(%s) %d grams of pot.", storagetype[storageid], StorageInfo[giveplayerid][storageid-1][sPot]);
						SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					if(StorageInfo[giveplayerid][storageid-1][sCrack] > 0)
					{
						format(string, sizeof(string), "(%s) %d grams of crack.", storagetype[storageid], StorageInfo[giveplayerid][storageid-1][sCrack]);
						SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					if(StorageInfo[giveplayerid][storageid-1][sMats] > 0)
					{
						format(string, sizeof(string), "(%s) %d materials.", storagetype[storageid], StorageInfo[giveplayerid][storageid-1][sMats]);
						SendClientMessageEx(playerid, COLOR_GREY, string);
					}
				}

				if(Fishes[giveplayerid][pWeight1] > 0 || Fishes[giveplayerid][pWeight2] > 0 || Fishes[giveplayerid][pWeight3] > 0 || Fishes[giveplayerid][pWeight4] > 0 || Fishes[giveplayerid][pWeight5] > 0)
				{
					format(string, sizeof(string), "(Pocket) %d fish.", PlayerInfo[giveplayerid][pFishes]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(PlayerInfo[giveplayerid][pPhoneBook] > 0) SendClientMessageEx(playerid, COLOR_GREY, "Phone book.");
				if(PlayerInfo[giveplayerid][pCDPlayer] > 0) SendClientMessageEx(playerid, COLOR_GREY, "Music player.");
				new weaponname[50];
				format(string, sizeof(string), "*** %s' weapons...  ***", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				for (new i = 0; i < 12; i++)
				{
					if(PlayerInfo[giveplayerid][pGuns][i] > 0)
					{
						GetWeaponName(PlayerInfo[giveplayerid][pGuns][i], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "Weapon: %s.", weaponname);
						SendClientMessageEx(playerid, COLOR_GRAD1, string);
					}
				}
				SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
				format(string, sizeof(string), "* %s has frisked %s for any illegal items.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
			}

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a law enforcement officer, or a bodyguard!");
		return 1;
	}
	return 1;
}

CMD:hbadge(playerid, params[])
{
    #if defined zombiemode
	if(zombieevent == 1 && GetPVarType(playerid, "pIsZombie")) return SendClientMessageEx(playerid, COLOR_GREY, "Zombies can't use this.");
	#endif
	if (IsAHitman(playerid))
	{
		new giveplayerid = 1;
 		if(sscanf(params, "d", giveplayerid)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Type /hbadge 0 to reset");
		}
		if(giveplayerid == 0)
		{
  			SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge back to normal.");
  			SetPlayerColor(playerid,TEAM_HIT_COLOR);
		}
		else
		{
			Group_ListGroups(playerid, DIALOG_HBADGE);
		}
	}
	return 1;
}

CMD:profile(playerid, params[])
{
	if(IsAHitman(playerid))
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /profile [player]");

		if(IsPlayerConnected(giveplayerid))
		{
		    new f2text[42];

			if(PlayerInfo[giveplayerid][pFMember] < INVALID_FAMILY_ID)
			{
				format(f2text, sizeof(f2text), "%s", FamilyInfo[PlayerInfo[giveplayerid][pFMember]][FamilyName]);
			} else f2text = "None";

			SendClientMessageEx(playerid, COLOR_WHITE, "Profile Information:");
			format(string, sizeof(string), "Name: %s", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Date of Birth: %s", PlayerInfo[giveplayerid][pBirthDate]);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			if(0 <= PlayerInfo[giveplayerid][pMember] < MAX_GROUPS)
			{
				format(string, sizeof(string), "Organisation: %s", arrGroupData[PlayerInfo[giveplayerid][pMember]][g_szGroupName]);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
			format(string, sizeof(string), "Family: %s", f2text);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Bounty: $%d", PlayerInfo[giveplayerid][pHeadValue]);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
		}
	}
	return 1;
}

CMD:ranks(playerid, params[])
{
	if ((!IsAHitman(playerid)) && PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Member of the Hitman Agency!");
	SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Agency's Ranks __________________|");

	new string[128];
	//foreach(new i: Player)
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			if((IsAHitman(i)))
			{
				if( GoChase[playerid] == INVALID_PLAYER_ID )
				{
					format(string, sizeof(string), "* Name: %s | Rank %d | Completed Hits: %d | Failed Hits: %d", GetPlayerNameEx(i),PlayerInfo[i][pRank], PlayerInfo[i][pCHits], PlayerInfo[i][pFHits]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				else
				{
					format(string, sizeof(string), "* Name: %s | Rank %d | Completed Hits: %d | Failed Hits: %d | Chasing: %s", GetPlayerNameEx(i),PlayerInfo[i][pRank], PlayerInfo[i][pCHits], PlayerInfo[i][pFHits], GetPlayerNameEx(GoChase[i]));
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
			}
		}	
	}
	return 1;
}

CMD:plantcarbomb(playerid, params[]) {
	return cmd_pcb(playerid, params);
}

CMD:pcb(playerid, params[])
{
	if (IsAHitman(playerid))
	{
		if (PlayerInfo[playerid][pC4] == 0)
		{
			if (PlayerInfo[playerid][pBombs] != 0)
			{
				new carid = GetPlayerVehicleID(playerid);
				new closestcar = GetClosestCar(playerid, carid);
				if(IsPlayerInRangeOfVehicle(playerid, closestcar, 4.0))
				{
					if(VehicleBomb{closestcar} == 1)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "There is already a C4 on the vehicle engine!");
						return 1;
					}
					VehicleBomb{closestcar} = 1;
					PlacedVehicleBomb[playerid] = closestcar;
					ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
					ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
					SendClientMessageEx(playerid, COLOR_GREEN, "You have placed C4 on the vehicle engine, /pickupbomb to remove it.");
					PlayerInfo[playerid][pC4] = 1;
					PlayerInfo[playerid][pBombs]--;
					PlayerInfo[playerid][pC4Used] = 2;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "You are not close enough to any vehicle!");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have C4!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You can only deploy 1 C4 at a time ! ");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " You are not a member of the Hitman Agency ! ");
	}
	return 1;
}

CMD:plantbomb(playerid, params[]) {
	return cmd_pb(playerid, params);
}

CMD:pb(playerid, params[])
{
	if (IsAHitman(playerid))
	{
		if (PlayerInfo[playerid][pC4] == 0)
		{
			if (PlayerInfo[playerid][pBombs] != 0)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED,"You can't plant C4 while in a vehicle!");
					return 1;
				}
				GetPlayerPos(playerid,Positions[0][0], Positions[0][1], Positions[0][2]);
				SetPVarFloat(playerid, "DYN_C4_FLOAT_X", Positions[0][0]);
				SetPVarFloat(playerid, "DYN_C4_FLOAT_Y", Positions[0][1]);
				SetPVarFloat(playerid, "DYN_C4_FLOAT_Z", Positions[0][2]);
				PlayerInfo[playerid][pC4] = CreateDynamicObject(1654, Positions[0][0], Positions[0][1], Positions[0][2]-0.9, 0, 89.325012207031, 3.9700012207031);
				ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
				ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
				SendClientMessageEx(playerid, COLOR_GREEN, "You have placed C4 on the ground, /pickupbomb to remove it.");
				//PlayerInfo[playerid][pC4] = 1;
				PlayerInfo[playerid][pBombs]--;
				PlayerInfo[playerid][pC4Used] = 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have C4!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You can only deploy 1 C4 at a time ! ");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " You are not a member of the Hitman Agency ! ");
	}
	return 1;
}

CMD:pub(playerid, params[]) {
	return cmd_pickupbomb(playerid, params);
}

CMD:pickupbomb(playerid, params[])
{
	if (!IsAHitman(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not a Hitman!");
		return 1;
	}
	if (PlayerInfo[playerid][pC4] == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You haven't planted a bomb!");
		return 1;
	}
	new carid = GetPlayerVehicleID(playerid);
	new closestcar = GetClosestCar(playerid, carid);
	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 4.0) && VehicleBomb{closestcar} == 1)
	{
		VehicleBomb{closestcar} = 0;
		PlacedVehicleBomb[playerid] = INVALID_VEHICLE_ID;
		PickUpC4(playerid);
		SendClientMessageEx(playerid, COLOR_GREEN, "Bomb picked up successfully.");
		PlayerInfo[playerid][pBombs]++;
		PlayerInfo[playerid][pC4Used] = 0;
		PlayerInfo[playerid][pC4Get] = 1;
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "DYN_C4_FLOAT_X"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Y"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Z")))
	{
		PickUpC4(playerid);
		SendClientMessageEx(playerid, COLOR_GREEN, "Bomb picked up successfully.");
		PlayerInfo[playerid][pBombs]++;
		PlayerInfo[playerid][pC4Used] = 0;
		PlayerInfo[playerid][pC4Get] = 1;
		return 1;
	}
	return 1;
}

CMD:myc4(playerid, params[])
{
	if (IsAHitman(playerid))
	{
		new string[128];

		if (PlayerInfo[playerid][pBombs] > 0)
		{
			format(string, sizeof(string), "You currently have %i C4 in your inventory.", PlayerInfo[playerid][pBombs]);
		}
		else
		{
			format(string, sizeof(string), "You do not have any C4 in your inventory.");
		}

		SendClientMessageEx(playerid, COLOR_GRAD2, string);
	}

	return 1;
}

CMD:getmats(playerid, params[])
{
	if (PlayerInfo[playerid][pJob] != 9 && PlayerInfo[playerid][pJob2] != 9 && PlayerInfo[playerid][pJob3] != 9 && PlayerInfo[playerid][pJob] != 18 && PlayerInfo[playerid][pJob2] != 18 && PlayerInfo[playerid][pJob3] != 18)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"   You are not an Arms Dealer or Craftsman!");
		return 1;
	}
	if(CheckPointCheck(playerid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
		return 1;
	}

	new mypoint = -1;
	new mypointex = -1;
	new mydeliver = 0;

	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 1)
		{
			mypoint = i;
			mypointex = i;
			mydeliver = Points[i][MatPoint];
		}
	}
	if (IsPlayerInRangeOfPoint(playerid, 10.0, 2102.71, -103.97, 2.28)) // Matrun 3
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(IsABoat(vehicle))
		{
			if(GetPVarInt(playerid, "Packages") >= 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You must deliver your packages first.");

			if(PlayerInfo[playerid][pDonateRank] == 1)
			{
			    if(GetPlayerCash(playerid) < 1125)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1125!");
			        return 1;
			    }
				GivePlayerCash(playerid, -1125);
				SetPVarInt(playerid, "Packages", 23);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 23 Materials Packages for $1125.");
				SendClientMessageEx(playerid, COLOR_YELLOW,"Bronze VIP: You received 1.5x more packages, which will get you 1.5x more materials.");
			}
			else if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3)
			{
   				if(GetPlayerCash(playerid) < 1500)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1500!");
			        return 1;
			    }
				GivePlayerCash(playerid, -1500);
				SetPVarInt(playerid, "Packages", 30);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 30 Materials Packages for $1500.");
				SendClientMessageEx(playerid, COLOR_YELLOW,"Silver & Gold VIP: You received 2x more packages, which will get you 2x more materials.");
			}
			else if(PlayerInfo[playerid][pDonateRank] >= 4)
			{
				if(GetPlayerCash(playerid) < 1875)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1875!");
			        return 1;
			    }
				GivePlayerCash(playerid, -1875);
				SetPVarInt(playerid, "Packages", 38);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 38 Materials Packages for $1875.");
				SendClientMessageEx(playerid, COLOR_YELLOW,"Platinum VIP: You received 2.5x more packages, which will get you 2.5x more materials.");
			}
			else
			{
				if(GetPlayerCash(playerid) < 750)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $750!");
			        return 1;
			    }
				GivePlayerCash(playerid, -750);
				SetPVarInt(playerid, "Packages", 15);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 15 Materials Packages for $750.");
			}

			SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Follow the river to the West to get to the factory and deliver your Materials Packages.");
			SetPVarInt(playerid, "MatDeliver", 333);
			SetPVarInt(playerid, "tpMatRunTimer", 15);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
			SetPlayerCheckpoint(playerid, -330.44, -467.54, 0.85, 5);
			return 1;
		}
 		else
		{
			SendClientMessageEx(playerid, COLOR_GREY," You are not in a boat!");
		}
		return 1;
	}
	if (IsPlayerInRangeOfPoint(playerid, 4.0, -1816.528686, -179.502624, 9.398437)) // Matrun 4
	{
		if(GetPVarInt(playerid, "Packages") >= 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You must deliver your packages first.");

		if(PlayerInfo[playerid][pDonateRank] == 1)
		{
			if(GetPlayerCash(playerid) < 900)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $900!");
       			return 1;
   			}
			GivePlayerCash(playerid, -900);
			SetPVarInt(playerid, "Packages", 18);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 18 Materials Packages for $900.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"Bronze VIP: You received 1.5x more packages, which will get you 1.5x more materials.");
		}
		else if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3)
		{
			if(GetPlayerCash(playerid) < 1200)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1200!");
       			return 1;
   			}
			GivePlayerCash(playerid, -1200);
			SetPVarInt(playerid, "Packages", 24);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 24 Materials Packages for $1200.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"Silver & Gold VIP: You received 2x more packages, which will get you 2x more materials.");
		}
		else if(PlayerInfo[playerid][pDonateRank] >= 4)
		{
			if(GetPlayerCash(playerid) < 1500)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1500!");
       			return 1;
   			}
			GivePlayerCash(playerid, -1500);
			SetPVarInt(playerid, "Packages", 30);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 30 Materials Packages for $1500.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"Platinum VIP: You received 2.5x more packages, which will get you 2.5x more materials.");
		}
		else
		{
			if(GetPlayerCash(playerid) < 600)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $600!");
       			return 1;
   			}
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 12 Materials Packages for $600.");
			GivePlayerCash(playerid, -600);
			SetPVarInt(playerid, "Packages", 12);
		}

		SetPVarInt(playerid, "MatDeliver", 444);
		SetPVarInt(playerid, "tpMatRunTimer", 12);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
		SetPlayerCheckpoint(playerid, -1872.879760, 1416.312500, 7.180089, 5);
		return 1;
	}
	if (IsPlayerInRangeOfPoint(playerid, 4.0, -1522.7351, 2587.2612, 55.8359)) // Matrun TR
	{
		if(GetPVarInt(playerid, "Packages") >= 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You must deliver your packages first.");

		if(PlayerInfo[playerid][pDonateRank] == 1)
		{
			if(GetPlayerCash(playerid) < 2200)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $2,200!");
       			return 1;
   			}
			GivePlayerCash(playerid, -2200);
			SetPVarInt(playerid, "Packages", 30);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 30 Materials Packages for $2,200.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"Bronze VIP: You received 1.5x more packages, which will get you 1.5x more materials.");
		}
		else if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3)
		{
			if(GetPlayerCash(playerid) < 3000)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $3,000!");
       			return 1;
   			}
			GivePlayerCash(playerid, -3000);
			SetPVarInt(playerid, "Packages", 40);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 40 Materials Packages for $3,000.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"Silver & Gold VIP: You received 2x more packages, which will get you 2x more materials.");
		}
		else if(PlayerInfo[playerid][pDonateRank] >= 4)
		{
			if(GetPlayerCash(playerid) < 3500)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $3,500!");
       			return 1;
   			}
			GivePlayerCash(playerid, -3500);
			SetPVarInt(playerid, "Packages", 50);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 50 Materials Packages for $3,500.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"Platinum VIP: You received 2.5x more packages, which will get you 2.5x more materials.");
		}
		else
		{
			if(GetPlayerCash(playerid) < 1500)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1500!");
       			return 1;
   			}
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 20 Materials Packages for $1500.");
			GivePlayerCash(playerid, -1500);
			SetPVarInt(playerid, "Packages", 20);
		}

		SetPVarInt(playerid, "MatDeliver", 555);
		SetPVarInt(playerid, "tpMatRunTimer", 12);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
		SetPlayerCheckpoint(playerid, 578.0073, 1221.9861, 11.7113, 5);
		return 1;
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not at a Materials Pickup!");
		return 1;
	}
	mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (Points[i][MatPoint] == mydeliver && Points[i][Type] == 2)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " No Materials Factory found for that Pickup!");
		return 1;
	}

	if(PlayerInfo[playerid][pDonateRank] == 1)
	{
		if(GetPlayerCash(playerid) < 750)
		{
			SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $750!");
			return 1;
		}
		GivePlayerCash(playerid, -750);
		SetPVarInt(playerid, "Packages", 15);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 15 Materials Packages for $750.");
		SendClientMessageEx(playerid, COLOR_YELLOW,"Bronze VIP: You received 1.5x more packages, which will get you 1.5x more materials.");
	}
	else if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3)
	{
		if(GetPlayerCash(playerid) < 1000)
		{
			SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1000!");
			return 1;
		}
		GivePlayerCash(playerid, -1000);
		SetPVarInt(playerid, "Packages", 20);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 20 Materials Packages for $1000.");
		SendClientMessageEx(playerid, COLOR_YELLOW,"Silver & Gold VIP: You received 2x more packages, which will get you 2x more materials.");
	}
	else if(PlayerInfo[playerid][pDonateRank] >= 4)
	{
		if(GetPlayerCash(playerid) < 1250)
		{
			SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1250!");
			return 1;
		}
		GivePlayerCash(playerid, -1250);
		SetPVarInt(playerid, "Packages", 25);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 25 Materials Packages for $1250.");
		SendClientMessageEx(playerid, COLOR_YELLOW,"Platinum VIP: You received 2.5x more packages, which will get you 2.5x more materials.");
	}
	else
	{
		if(GetPlayerCash(playerid) < 500)
		{
			SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $500!");
			return 1;
		}
		GivePlayerCash(playerid, -500);
		SetPVarInt(playerid, "Packages", 10);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 10 Materials Packages for $500.");
	}

	SetPVarInt(playerid, "MatDeliver", mydeliver);
	SetPVarInt(playerid, "tpMatRunTimer", 10);
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
	for(new i = 0; i < sizeof(FamilyInfo); i++)
	{
		if(strcmp(Points[mypointex][Owner], FamilyInfo[i][FamilyName], true) == 0)
		{
			FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+125;
			//SendClientMessageEx(playerid, COLOR_WHITE, " Family owner recieved 50 percent of the cost.");
		}
	}
	SetPlayerCheckpoint(playerid, Points[mypoint][Pointx], Points[mypoint][Pointy], Points[mypoint][Pointz], 5);
	return 1;
}

CMD:getcrate(playerid, params[])
{
	if (PlayerInfo[playerid][pJob] != 14 && PlayerInfo[playerid][pJob2] != 14 && PlayerInfo[playerid][pJob3] != 14)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"   You are not a Drug Smuggler!");
		return 1;
	}
	new mypoint = -1;

	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Drug Factory", true) == 0)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not at the Drug Factory!");
		return 1;
	}
	if(PlayerInfo[playerid][pCrates])
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You can't hold any more Drug Crates!");
		return 1;
	}
	if(GetPlayerCash(playerid) > 1000)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED,"What type of drugs would you like to smuggle? (Type crack or pot)");
		SetPVarInt(playerid, "ChoosingDrugs", 1);
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1000!");
		return 1;
	}
}

CMD:getpizza(playerid, params[]) {
	if(PlayerInfo[playerid][pJob] != 21 && PlayerInfo[playerid][pJob2] != 21 && PlayerInfo[playerid][pJob3] != 21) {
		SendClientMessageEx(playerid,COLOR_GREY,"   You are not a Pizza Boy!");
	}
    else if(!IsAPizzaCar(GetPlayerVehicleID(playerid))) {
	    SendClientMessageEx(playerid,COLOR_GREY,"   You need to be driving a pizzaboy found at the side of the Pizza Stack!");
	}
	else if(GetPlayerSkin(playerid) != 155) {
	    SendClientMessageEx(playerid,COLOR_GREY,"   You need to be in the Pizza Stack uniform!");
	}
	else if(GetPVarType(playerid, "Pizza")) {
		SendClientMessageEx(playerid, COLOR_GREY, "   You are already delivering pizzas!");
	}
	else if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1713.961425, 1348.545166, 7.180452)) {
		SendClientMessageEx(playerid,COLOR_GREY,"   You are not at the Pizza Stack pickup!");
	}
	else if(gettime() < GetPVarInt(playerid, "PizzaCoolDown")) {
		new str[53];
		format(str, sizeof(str), "Please wait %d seconds before getting another pizza!", GetPVarInt(playerid, "PizzaCoolDown")-gettime());
		SendClientMessageEx(playerid,COLOR_GREY, str);
	}
	else {

		new rand = random(MAX_HOUSES - 1), i;
		while(!(HouseInfo[rand][hOwned] && HouseInfo[rand][hExteriorZ] <= 100 && HouseInfo[rand][hExteriorX] > -2802.389648 && HouseInfo[rand][hExteriorX] < -1400.710327 && HouseInfo[rand][hExteriorY] < 2800 && HouseInfo[rand][hExteriorY] > -216.298019)) {
			if(++rand >= MAX_HOUSES) {
				rand = 0;
			}
			if (i++ > MAX_HOUSES) return 1;
		}

		new
			iDist = floatround(GetPlayerDistanceFromPoint(playerid, HouseInfo[rand][hExteriorX], HouseInfo[rand][hExteriorY], HouseInfo[rand][hExteriorZ])),
			szMessage[86];

		SetPVarInt(playerid, "tpPizzaTimer", iDist / 80);
		SetPVarInt(playerid, "pizzaTotal", iDist / 10);
		SetPVarInt(playerid, "pizzaTimer", iDist / 10);
		SetPVarInt(playerid, "Pizza", rand);
		SetPVarInt(playerid, "PizzaCoolDown", gettime()+60);

		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPPIZZARUNTIMER);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PIZZATIMER);

		format(szMessage, sizeof(szMessage), "You have picked up a pizza for %s. You have %d seconds to deliver it!", StripUnderscore(HouseInfo[rand][hOwnerName]), iDist / 10);
		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);

		SetPlayerCheckpoint(playerid, HouseInfo[rand][hExteriorX], HouseInfo[rand][hExteriorY], HouseInfo[rand][hExteriorZ], 5);
	}
	return 1;
}

CMD:setrentable(playerid, params[])
{
	if(Homes[playerid] > 0)
	{
		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && ((IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExtVW] && GetPlayerInterior(playerid) == HouseInfo[i][hExtIW]) ||
			(IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW])))
			{
				if(!HouseInfo[i][hRentable])
				{
					HouseInfo[i][hRentable] = 1;
					ReloadHouseText(i);
					return SendClientMessageEx(playerid, COLOR_WHITE, "This house is now rentable.");
				}
				else
				{
					HouseInfo[i][hRentable] = 0;
					ReloadHouseText(i);
					return SendClientMessageEx(playerid, COLOR_WHITE, "This house is no longer rentable." );
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You're not at a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}

CMD:setrent(playerid, params[])
{
	new string[128], fee;
	if(Homes[playerid] > 0)
	{
		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && ((IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExtVW] && GetPlayerInterior(playerid) == HouseInfo[i][hExtIW]) ||
			(IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW])))
			{
				if(sscanf(params, "d", fee)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setrent [fee]");
				if(!(1 <= fee <= 10000)) return SendClientMessageEx(playerid, COLOR_WHITE, "Minimum rent is $1, maximum rent is $10,000.");
				else
				{
					HouseInfo[i][hRentFee] = fee;
					format(string, sizeof(string), "You have set your house's rent fee to $%s.", number_format(HouseInfo[i][hRentFee]));
					SendClientMessageEx(playerid, COLOR_WHITE, string);

					ReloadHouseText(i);
					return 1;
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You're not at a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}

CMD:evict(playerid, params[])
{
	new string[128], giveplayerid;
	if(Homes[playerid] > 0)
	{
		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && ((IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExtVW] && GetPlayerInterior(playerid) == HouseInfo[i][hExtIW]) ||
			(IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW])))
			{
				if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /evict [player]");
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't evict yourself.");
					else if(PlayerInfo[giveplayerid][pRenting] == i)
					{
						format(string, sizeof(string), "%s has evicted you from their house.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

						format(string, sizeof(string), "You have evicted %s from your house.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_WHITE, string);

						PlayerInfo[giveplayerid][pRenting] = INVALID_HOUSE_ID;
						return 1;
					}
					else return SendClientMessageEx(playerid, COLOR_WHITE, "That person isn't renting at your house.");
				}
				else return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You're not at a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}

CMD:evictall(playerid, params[])
{
	if(Homes[playerid] > 0)
	{
		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && ((IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExtVW] && GetPlayerInterior(playerid) == HouseInfo[i][hExtIW]) ||
			(IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW])))
			{
				new giveplayerid, string[56];
				//foreach(new p: Player)
				for(new p = 0; p < MAX_PLAYERS; ++p)
				{
					if(IsPlayerConnected(p))
					{
						if(PlayerInfo[p][pRenting] == i)
						{
							format(string, sizeof(string), "%s has evicted you from their house.", GetPlayerNameEx(playerid));
							SendClientMessageEx(p, COLOR_WHITE, string);
							PlayerInfo[p][pRenting] = INVALID_HOUSE_ID;
							++giveplayerid;
						}
					}	
				}
				format(string, sizeof(string), "%d online players have been evicted from your house.", giveplayerid);
				return SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You're not at a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}

CMD:lockhouse(playerid, params[])
{
	if(PlayerInfo[playerid][pFreezeHouse] != 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot do this while having your assets frozen!");
	if(Homes[playerid] > 0)
	{
		for(new i; i < MAX_HOUSES; i++)
		{
			if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && ((IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExtVW] && GetPlayerInterior(playerid) == HouseInfo[i][hExtIW]) ||
			(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW])))
			{
				new szMessage[30 + MAX_PLAYER_NAME];

				if(HouseInfo[i][hLock] == 1)
				{
					HouseInfo[i][hLock] = 0;
					format(szMessage, sizeof(szMessage), "* %s has unlocked their house.", GetPlayerNameEx(playerid));
					return ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					HouseInfo[i][hLock] = 1;
					format(szMessage, sizeof(szMessage), "* %s has locked their house.", GetPlayerNameEx(playerid));
					return ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You're not at a house that you own.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	return 1;
}

CMD:givehit(playerid, params[])
{
	if (IsAHitman(playerid))
	{
		if(PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   Only ranks 5 and above can assign contracts to people !");
			return 1;
		}

		new string[128], giveplayerid, targetid;
		if(sscanf(params, "uu", giveplayerid, targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givehit [player] [targetid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GoChase[giveplayerid] != INVALID_PLAYER_ID)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That Hitman is already busy with a Contract!");
				return 1;
			}
			if(GotHit[targetid] == 1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Another hitman has already assigned this target!");
				return 1;
			}
			if(IsPlayerConnected(targetid))
			{
				if(PlayerInfo[targetid][pHeadValue] == 0)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "   That target doesn't have a contract on them!");
					return 1;
				}

				format(string, sizeof(string), "* You offered %s a contract to kill %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(targetid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Hitman %s has offered you a contract to kill %s (type /accept contract), to accept it.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				HitOffer[giveplayerid] = playerid;
				HitToGet[giveplayerid] = targetid;
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   The contracted person is offline, use /contracts!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That Hitman is not Online!");
			return 1;
		}
	}
	return 1;
}

CMD:givemehit(playerid, params[])
{
	if (IsAHitman(playerid))
	{
		new string[128], targetid;
		if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givemehit [targetid]");

		if(IsPlayerConnected(targetid))
		{
			if(GoChase[playerid] != INVALID_PLAYER_ID)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   You are already busy with another contract!");
				return 1;
			}
			if(GotHit[targetid] == 1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Another hitman has already assigned this target!");
				return 1;
			}
			if(PlayerInfo[targetid][pHeadValue] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That target doesn't have a contract on them!");
				return 1;
			}
			format(string, sizeof(string), "* You have offered yourself a contract to kill %s. (type /accept contract)", GetPlayerNameEx(targetid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			HitOffer[playerid] = playerid;
			HitToGet[playerid] = targetid;
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The contracted person is offline, use /contracts!");
			return 1;
		}
	}
	return 1;
}

/*CMD:speedo(playerid, params[]) {
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) {
		SendClientMessageEx(playerid, COLOR_GREY, "You're not driving a vehicle.");
	}
	else if(!PlayerInfo[playerid][pSpeedo]) {
		SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled your speedometer.");
		PlayerInfo[playerid][pSpeedo] = 1;

		if(!FindTimePoints[playerid] && arr_Engine{GetPlayerVehicleID(playerid)} != 0) {

			new
				szSpeed[42];

			format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%.0f MPH", player_get_speed(playerid));
			GameTextForPlayer(playerid, szSpeed, 1500, 3);
		}
	}
	else {
		SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled your speedometer.");
		PlayerInfo[playerid][pSpeedo] = 0;
		if(!FindTimePoints[playerid] && arr_Engine{GetPlayerVehicleID(playerid)} != 0) GameTextForPlayer(playerid, " ", 1500, 3);
	}
	return 1;
} // old speedometer */

CMD:speedopos(playerid, params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetPlayerState(playerid) != PLAYER_STATE_PASSENGER )
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You're not driving a vehicle.");
	}
	if (PlayerInfo[playerid][pSpeedo])
	{
		new Float: TPosX[2], Float:TPosY[2];
		if(!sscanf(params, "ff", TPosX[0], TPosY[0]))
		{
			if(TPosX[0] < 0 || TPosX[0] > 640)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /speedopos (optional) [X] [Y]");
				return SendClientMessageEx(playerid, COLOR_GREY, "X must be above 0 and below 640");
			}
			if(TPosY[0] < 0 || TPosY[0] > 640)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /speedopos (optional) [X] [Y]");
				return SendClientMessageEx(playerid, COLOR_GREY, "Y must be above 0 and below 480");
			}
			TPosX[1] = TPosX[0] + 60.0;
			TPosY[1] = TPosY[0] + 17.0;
		}
		else
		{
			switch(GetPVarInt(playerid, "SpeedoPos"))
			{
				case 0:
				{
					TPosX[0] = 495.0;
					TPosY[0] = 20.0;
					TPosX[1] = 555.0;
					TPosY[1] = 37.0;
					SetPVarInt(playerid, "SpeedoPos", 1);				
				}
				case 1:
				{
					TPosX[0] = 495.0;
					TPosY[0] = 367.0;
					TPosX[1] = 555.0;
					TPosY[1] = 384.0;
					SetPVarInt(playerid, "SpeedoPos", 2);				
				}			
				case 2:
				{
					TPosX[0] = 495.0;
					TPosY[0] = 133.0;
					TPosX[1] = 555.0;
					TPosY[1] = 150.0;
					SetPVarInt(playerid, "SpeedoPos", 0);
				}
			}
		}
		
		PlayerTextDrawDestroy(playerid, _vhudTextFuel[playerid]);
		_vhudTextFuel[playerid] = CreatePlayerTextDraw(playerid, TPosX[0], TPosY[0], "~b~Fuel: N/A");
		PlayerTextDrawBackgroundColor(playerid, _vhudTextFuel[playerid], 255);
		PlayerTextDrawFont(playerid, _vhudTextFuel[playerid], 1);
		PlayerTextDrawLetterSize(playerid, _vhudTextFuel[playerid], 0.270000, 2.000000);
		PlayerTextDrawColor(playerid, _vhudTextFuel[playerid], -1);
		PlayerTextDrawSetOutline(playerid, _vhudTextFuel[playerid], 1);
		PlayerTextDrawSetProportional(playerid, _vhudTextFuel[playerid], 1);

		PlayerTextDrawDestroy(playerid, _vhudTextSpeed[playerid]);
		_vhudTextSpeed[playerid] = CreatePlayerTextDraw(playerid, TPosX[1], TPosY[0], "~b~MPH: N/A");
		PlayerTextDrawBackgroundColor(playerid, _vhudTextSpeed[playerid], 255);
		PlayerTextDrawFont(playerid, _vhudTextSpeed[playerid], 1);
		PlayerTextDrawLetterSize(playerid, _vhudTextSpeed[playerid], 0.270000, 2.000000);
		PlayerTextDrawColor(playerid, _vhudTextSpeed[playerid], -1);
		PlayerTextDrawSetOutline(playerid, _vhudTextSpeed[playerid], 1);
		PlayerTextDrawSetProportional(playerid, _vhudTextSpeed[playerid], 1);

		PlayerTextDrawDestroy(playerid, _vhudSeatBelt[playerid]);
		_vhudSeatBelt[playerid] = CreatePlayerTextDraw(playerid, TPosX[1], TPosY[1], "~b~SB: ~r~OFF");
		PlayerTextDrawBackgroundColor(playerid, _vhudSeatBelt[playerid], 255);
		PlayerTextDrawFont(playerid, _vhudSeatBelt[playerid], 1);
		PlayerTextDrawLetterSize(playerid, _vhudSeatBelt[playerid], 0.270000, 2.000000);
		PlayerTextDrawColor(playerid, _vhudSeatBelt[playerid], -1);
		PlayerTextDrawSetOutline(playerid, _vhudSeatBelt[playerid], 1);
		PlayerTextDrawSetProportional(playerid, _vhudSeatBelt[playerid], 1);

		PlayerTextDrawDestroy(playerid, _vhudLights[playerid]);
		_vhudLights[playerid] = CreatePlayerTextDraw(playerid, TPosX[0], TPosY[1], "~b~Lights: ~r~OFF");
		PlayerTextDrawBackgroundColor(playerid, _vhudLights[playerid], 255);
		PlayerTextDrawFont(playerid, _vhudLights[playerid], 1);
		PlayerTextDrawLetterSize(playerid, _vhudLights[playerid], 0.270000, 2.000000);
		PlayerTextDrawColor(playerid, _vhudLights[playerid], -1);
		PlayerTextDrawSetOutline(playerid, _vhudLights[playerid], 1);
		PlayerTextDrawSetProportional(playerid, _vhudLights[playerid], 1);
		
		ShowVehicleHUDForPlayer(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have moved the position of your speedometer.");

	}
	return 1;
}

CMD:speedo(playerid, params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetPlayerState(playerid) != PLAYER_STATE_PASSENGER )
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not driving a vehicle.");
	}
	else if (!PlayerInfo[playerid][pSpeedo])
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled your speedometer.");
		PlayerInfo[playerid][pSpeedo] = 1;
		ShowVehicleHUDForPlayer(playerid);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled your speedometer.");
		PlayerInfo[playerid][pSpeedo] = 0;
		HideVehicleHUDForPlayer(playerid);
	}

	return 1;
} // new speedometer

CMD:togglehunger(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] > 1)
		return 1;

	if (_hungerTextVisible[playerid] == 1)
	{
		PlayerTextDrawHide(playerid, _hungerText[playerid]);
		_hungerTextVisible[playerid] = 0;
	}
	else
	{
		PlayerTextDrawShow(playerid, _hungerText[playerid]);
		_hungerTextVisible[playerid] = 1;
	}

	SendClientMessage(playerid, COLOR_WHITE, "You have toggled the hunger meter (it will reset upon next login).");

	return 1;
}

CMD:pc(playerid, params[])
{
	if(PlayerInfo[playerid][pSurveillance] > 0)
	{
		if(GetPVarInt(playerid, "cameraactive") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Wait for your other camera to expire.");
			return 1;
		}

		new string[128];
		PlayerInfo[playerid][pSurveillance]--;
		SendClientMessageEx(playerid, COLOR_GRAD1, "You placed your camera, go hide and use /sc. Batteries expire in 2 minutes.");
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPVarInt(playerid, "cameraactive", 1);
		DestroyDynamic3DTextLabel(Camera3D[playerid]);
		Camera3D[playerid] = CreateDynamic3DTextLabel("** A small camera. **",0x008080FF,X,Y,Z,4.0,.worldid = GetPlayerVirtualWorld(playerid));
		SetPVarFloat(playerid, "cameraX", X);
		SetPVarFloat(playerid, "cameraY", Y);
		SetPVarFloat(playerid, "cameraZ", Z);
		SetPVarInt(playerid, "cameravw", GetPlayerVirtualWorld(playerid));
		SetPVarInt(playerid, "cameraint", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "cameraexpire", SetTimerEx("cameraexpire", 120000, 0, "d", playerid));
		format(string, sizeof(string), "* %s places something on the ground.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a surveillance camera!");
	}
	return 1;
}

CMD:sc(playerid, params[])
{
	if(GetPVarInt(playerid, "cameraactive") == 1)
	{
		new string[128];
		if(GetPVarInt(playerid, "camerasc") == 1)
		{
			SetCameraBehindPlayer(playerid); //view cam off
			SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
			TogglePlayerControllable(playerid,1);
			DeletePVar(playerid, "camerasc");
			KillTimer(GetPVarInt(playerid, "cameraexpire"));
		}
		else
		{
			format(string, sizeof(string), "* %s stares into a small screen.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "The camera will expire in a maximum of 2 minutes. (( %s ))", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPVarFloat(playerid, "cameraX2", X);
			SetPVarFloat(playerid, "cameraY2", Y);
			SetPVarFloat(playerid, "cameraZ2", Z);
			SetPVarInt(playerid, "cameravw2", GetPlayerVirtualWorld(playerid));
			SetPVarInt(playerid, "cameraint2", GetPlayerInterior(playerid));

			TogglePlayerControllable(playerid,0);
			SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX"), GetPVarFloat(playerid, "cameraY"), GetPVarFloat(playerid, "cameraZ") - 30.0);
			SetPlayerCameraPos(playerid, GetPVarFloat(playerid, "cameraX"), GetPVarFloat(playerid, "cameraY"), GetPVarFloat(playerid, "cameraZ") + 20.0); //viewcam on
			SetPlayerCameraLookAt(playerid, GetPVarFloat(playerid, "cameraX"), GetPVarFloat(playerid, "cameraY"), GetPVarFloat(playerid, "cameraZ"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint"));
			SetPVarInt(playerid, "camerasc", 1);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You have no active camera!");
	}
	return 1;
}

CMD:dc(playerid, params[])
{
	if(GetPVarInt(playerid, "cameraactive") == 1)
	{
		if(GetPVarInt(playerid, "camerasc") == 1)
		{
			SetCameraBehindPlayer(playerid);
			SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
			TogglePlayerControllable(playerid,1);
		}

		DestroyDynamic3DTextLabel(Camera3D[playerid]);
		SendClientMessageEx(playerid, COLOR_GRAD1, "Camera Destroyed!");
		KillTimer(GetPVarInt(playerid, "cameraexpire"));
		DeletePVar(playerid, "cameraexpire");
		DeletePVar(playerid, "cameraactive");
		DeletePVar(playerid, "camerasc");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "There is nothing to destroy!");
	}
	return 1;
}

CMD:rccam(playerid, params[])
{
	if(PlayerInfo[playerid][pRccam] > 0)
	{
		new string[128];
		if(GetPVarInt(playerid, "rccam") == 0)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You must be on foot to place an RCCam!");
				return 1;
			}
			PlayerInfo[playerid][pRccam]--;
			SetPVarInt(playerid, "rccam", 1);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPVarFloat(playerid, "rcX", X);
			SetPVarFloat(playerid, "rcY", Y);
			SetPVarFloat(playerid, "rcZ", Z);
			if(GetPVarInt(playerid, "rcveh") != 0)
			{
				DestroyVehicle(GetPVarInt(playerid, "rcveh"));
			}
			SetPVarInt(playerid, "rcveh", AddStaticVehicle(594, X, Y, Z, 0, 0, 0));
			IsPlayerEntering{playerid} = true;
			PutPlayerInVehicle(playerid, GetPVarInt(playerid, "rcveh"), 0);
			SetPVarInt(playerid, "rccamtimer", SetTimerEx("rccam", 60000, 0, "d", playerid));
			format(string, sizeof(string), "* %s places something on the ground.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			DestroyVehicle(GetPVarInt(playerid, "rcveh"));
			SetPlayerPos(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
			DeletePVar(playerid, "rccam");
			KillTimer(GetPVarInt(playerid, "rccamtimer"));
		}
	}
	else
	{
		if(GetPVarInt(playerid, "rccam") == 1)
		{
			DestroyVehicle(GetPVarInt(playerid, "rcveh"));
			SetPlayerPos(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
			DeletePVar(playerid, "rccam");
			KillTimer(GetPVarInt(playerid, "rccamtimer"));
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have an RC Cam!");
	}
	return 1;
}

CMD:firstaid(playerid, params[])
{
	if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot do this while being in the Hunger Games Event!");
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
		return 1;
	}
	if(PlayerInfo[playerid][pFirstaid] > 0)
	{
		if(GetPVarInt(playerid, "usingfirstaid") == 0)
		{
			new string[128];
			PlayerInfo[playerid][pFirstaid]--;
			SetPVarInt(playerid, "firstaid5", SetTimerEx("firstaid5", 5000, 1, "d", playerid));
			SetPVarInt(playerid, "firstaidexpire", SetTimerEx("firstaidexpire",10*60000, 0, "d", playerid));
			SetPVarInt(playerid, "usingfirstaid", 1);
			format(string, sizeof(string), "* %s uses a first aid kit.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You're already using first aid!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a first aid kit!");
	}
	return 1;
}

CMD:sweep(playerid, params[])
{
	if(PlayerInfo[playerid][pSweep] > 0)
	{
		if(PlayerInfo[playerid][pSweepLeft] > 0)
		{
			new string[128], giveplayerid;
			if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sweep [player]");

			if(!ProxDetectorS(4.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "You need to be close to the person.");
			PlayerInfo[playerid][pSweepLeft]--;
			format(string, sizeof(string), "* %s sweeps a large wand around %s's body...", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(PlayerInfo[giveplayerid][pBugged] != INVALID_GROUP_ID)
			{
				format(string, sizeof(string), "* A small spark is seen as the bug on %s shorts out.", GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "(bug) %s: *static*", GetPlayerNameEx(giveplayerid));
				SendBugMessage(PlayerInfo[giveplayerid][pBugged], string);
				PlayerInfo[giveplayerid][pBugged] = INVALID_GROUP_ID;
			}
			else
			{
				ProxDetector(30.0, playerid, "Nothing happens.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Your Bug Sweeper has ran out of batteries!");
			PlayerInfo[playerid][pSweep]--;
			PlayerInfo[playerid][pSweepLeft] = 3;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a bug sweep!");
	}
	return 1;
}

CMD:gps(playerid, params[])
{
	if(PlayerInfo[playerid][pGPS] > 0)
	{
		new string[128];
		if(GetPVarInt(playerid, "gpsonoff") == 0)
		{
			format(string, sizeof(string), "* %s turns on their GPS.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "gpsonoff", 1);
			textdrawscount++;
			GPS[playerid] = TextDrawCreate(95.000000, 319.000000, "Loading...");
			TextDrawAlignment(GPS[playerid], 2);
			TextDrawBackgroundColor(GPS[playerid], 255);
			TextDrawFont(GPS[playerid], 2);
			TextDrawLetterSize(GPS[playerid], 0.250000, 1.800000);
			TextDrawColor(GPS[playerid], -1);
			TextDrawSetOutline(GPS[playerid], 1);
			TextDrawSetProportional(GPS[playerid], 1);
			TextDrawShowForPlayer(playerid, GPS[playerid]);
		}
		else
		{
			format(string, sizeof(string), "* %s turns off their GPS.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "gpsonoff");
			TextDrawDestroy(GPS[playerid]);
			textdrawscount--;
		}
	}

	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a GPS!");
	}
	return 1;
}

CMD:ww(playerid, params[])
{
	return cmd_wristwatch(playerid, params);
}

CMD:wristwatch(playerid, params[])
{
	if(PlayerInfo[playerid][pWristwatch] > 0)
	{
		new string[128];
		if(GetPVarInt(playerid, "wristwatchonoff") == 0)
		{
			SetPVarInt(playerid, "wristwatchonoff", 1);
			TextDrawShowForPlayer(playerid, WristWatch);
			format(string, sizeof(string), "* %s turns on their wristwatch.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			KillTimer(GetPVarInt(playerid, "wristwatchtimer"));
			TextDrawHideForPlayer(playerid, WristWatch);
			DeletePVar(playerid, "wristwatchonoff");
			format(string, sizeof(string), "* %s turns off their wristwatch.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a wristwatch!");
	}
	return 1;
}

CMD:receiver(playerid, params[])
{
	if(PlayerInfo[playerid][pReceiver] > 0)
	{
		if(!GetPVarType(playerid, "pReceiverOn"))
		{
			SendClientMessageEx(playerid, COLOR_YELLOW, "You've turned on your receiver.");
			SetPVarInt(playerid, "pReceiverOn", 1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_YELLOW, "You've turned off your receiver.");
			DeletePVar(playerid, "pReceiverOn");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a receiver.");
	}
	return 1;
}

CMD:smslog(playerid, params[])
{
	if(PlayerInfo[playerid][pSmslog] > 0) GetSMSLog(playerid);
	else return SendClientMessageEx(playerid, COLOR_YELLOW, "    You don't have a SMS log!");
	return 1;
}

CMD:craft(playerid, params[])
{
	if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot do this while being in the Hunger Games Event!");
	if (PlayerInfo[playerid][pJob] != 18 && PlayerInfo[playerid][pJob2] != 18 && PlayerInfo[playerid][pJob3] != 18)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"   You are not a Craftsman!");
		return 1;
	}
	if (PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"   You can not make things while in jail or prison!");
		return 1;
	}
	new string[128];
	if (GetPVarInt(playerid, "ArmsTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before crafting again.", GetPVarInt(playerid, "ArmsTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}
	if(PlayerInfo[playerid][pHospital] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't craft whilst in Hospital.");
		return 1;
	}
	new giveplayerid, choice[32], weapon, price;
	if(sscanf(params, "us[32]", giveplayerid, choice))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_YELLOW, "<< Available crafts >>");
		SendClientMessageEx(playerid, COLOR_GRAD1, "screwdriver(1000)	 smslog(2000)");
		SendClientMessageEx(playerid, COLOR_GRAD2, "wristwatch(500)	 surveillance(8000)");
		SendClientMessageEx(playerid, COLOR_GRAD1, "tire(250)	         lock(500)");
		SendClientMessageEx(playerid, COLOR_GRAD2, "firstaid(1000)	 camera(250)");
		SendClientMessageEx(playerid, COLOR_GRAD1, "rccam(8000)	     receiver(5000)");
		SendClientMessageEx(playerid, COLOR_GRAD2, "gps(1000)          bugsweep(10000)");
		//SendClientMessageEx(playerid, COLOR_GRAD1, "parachute(50)          bag(6000)");
		SendClientMessageEx(playerid, COLOR_GRAD1, "parachute(50)		mailbox(15000)");
		SendClientMessageEx(playerid, COLOR_GRAD2, "metaldetector(12500) syringe(500)");
		SendClientMessageEx(playerid, COLOR_GRAD1, "closet(50000)		toolbox(15000)");
		SendClientMessageEx(playerid, COLOR_GRAD2, "crowbar(10000)");
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /craft [player] [craftname]");
		return 1;
	}
	if(HungerPlayerInfo[giveplayerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   This person is not able to receive anything at the moment.");
	if (IsPlayerConnected(giveplayerid))
	{
		if(isnull(choice))
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
			SendClientMessageEx(playerid, COLOR_YELLOW, "<< Available crafts >>");
			SendClientMessageEx(playerid, COLOR_GRAD1, "screwdriver(1000)	 smslog(2000)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "wristwatch(500)	 surveillance(8000)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "tire(250)	         lock(500)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "firstaid(1000)	 camera(250)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "rccam(8000)	     receiver(5000)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "gps(1000)          bugsweep(10000)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "parachute(50)          mailbox(15000)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "metaldetector(12500) syringe(500)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "closet(50000)");
			SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /craft [player] [craftname]");
			return 1;
		}
		/*if(strcmp(choice,"bag",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 6000)
			{
				price = 6000;
				weapon = 14;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}*/
		if(strcmp(choice, "screwdriver", true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 1000)
			{
				price = 1000;
				weapon = 1;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice, "smslog", true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 2000)
			{
				price = 2000;
				weapon = 2;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice, "wristwatch", true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 500)
			{
				price = 500;
				weapon = 3;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice, "surveillance", true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 8000)
			{
				price = 8000;
				weapon = 4;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice, "tire", true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 250)
			{
				price = 250;
				weapon = 5;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice, "lock", true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 500)
			{
				price = 500;
				weapon = 6;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice, "firstaid", true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 1000)
			{
				price = 1000;
				weapon = 7;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"camera",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 250)
			{
				price = 250;
				weapon = 8;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"rccam",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 8000)
			{
				price = 8000;
				weapon = 9;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"receiver",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 5000)
			{
				price = 5000;
				weapon = 10;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"gps",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 1000)
			{
				price = 1000;
				weapon = 11;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}

		else if(strcmp(choice,"bugsweep",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 10000)
			{
				price = 10000;
				weapon = 12;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}

		else if(strcmp(choice,"parachute",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 50)
			{
				price = 50;
				weapon = 13;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}

        else if(strcmp(choice,"metaldetector",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 12500)
			{
				price = 12500;
				weapon = 14;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}

		else if(strcmp(choice,"mailbox",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 15000)
			{
				price = 15000;
				weapon = 15;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
        else if(strcmp(choice,"syringe",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 500)
			{
				price = 500;
				weapon = 16;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"closet",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 50000)
			{
				price = 50000;
				weapon = 17;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"toolbox",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 15000)
			{
				price = 15000;
				weapon = 18;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"crowbar",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 10000)
			{
				price = 10000;
				weapon = 19;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else { SendClientMessageEx(playerid,COLOR_GREY,"   Invalid Craft name!"); return 1; }
		if (ProxDetectorS(5.0, playerid, giveplayerid))
		{
			if(weapon == 17)
			{
				if(PlayerInfo[giveplayerid][pPhousekey] == INVALID_HOUSE_ID && PlayerInfo[giveplayerid][pPhousekey2] == INVALID_HOUSE_ID && PlayerInfo[giveplayerid][pPhousekey3] == INVALID_HOUSE_ID)
				{
					if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house!");
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "They don't own a house!");
						SendClientMessageEx(giveplayerid, COLOR_GREY, "You don't own a house!");
					}
				}
			}
			if(giveplayerid == playerid)
			{
				if(weapon != 16 && weapon != 17)
				{
					PlayerInfo[playerid][pMats] -= price;
				}

				switch(weapon)
				{
				case 1:
					{
						PlayerInfo[playerid][pScrewdriver]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/sellgun");
					}
				case 2:
					{
						PlayerInfo[playerid][pSmslog]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/smslog");
					}
				case 3:
					{
						PlayerInfo[playerid][pWristwatch]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/wristwatch");
					}
				case 4:
					{
						PlayerInfo[playerid][pSurveillance]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/(p)lace(c)amera /(s)ee(c)amera /(d)estroy(c)amera");
					}
				case 5:
					{
						PlayerInfo[playerid][pTire]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/repair");
					}
				case 6:
					{
						PlayerInfo[playerid][pLock]=1;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/lock");
					}
				case 7:
					{
						PlayerInfo[playerid][pFirstaid]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/firstaid");
					}
				case 8:
					{
						GivePlayerValidWeapon(playerid, 43, 50);
					}
				case 9:
					{
						PlayerInfo[playerid][pRccam]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/rccam");
					}
				case 10:
					{
						PlayerInfo[playerid][pReceiver]++;
						SetPVarInt(playerid, "pReceiverMLeft", 4);
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "You will receive the next four department radio messages.");
					}
				case 11:
					{
						PlayerInfo[playerid][pGPS]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/gps");
					}
				case 12:
					{
						PlayerInfo[playerid][pSweep]++;
						PlayerInfo[playerid][pSweepLeft] = 3;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/sweep");
					}
				case 13:
					{
						GivePlayerValidWeapon(playerid, 46, 99999);
					}
				case 14:
					{
						if(PlayerInfo[playerid][pTreasureSkill] >=0 && PlayerInfo[playerid][pTreasureSkill] <= 24) PlayerInfo[playerid][pMetalDetector] += 25;
						else if(PlayerInfo[playerid][pTreasureSkill] >=25 && PlayerInfo[playerid][pTreasureSkill] <= 149) PlayerInfo[playerid][pMetalDetector] += 50;
						else if(PlayerInfo[playerid][pTreasureSkill] >=150 && PlayerInfo[playerid][pTreasureSkill] <= 299) PlayerInfo[playerid][pMetalDetector] += 75;
						else if(PlayerInfo[playerid][pTreasureSkill] >=300 && PlayerInfo[playerid][pTreasureSkill] <= 599) PlayerInfo[playerid][pMetalDetector] += 100;
						else if(PlayerInfo[playerid][pTreasureSkill] >=600) PlayerInfo[playerid][pMetalDetector] += 125;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/search");
					}
				case 15:
					{
						PlayerInfo[playerid][pMailbox]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "Type /placemailbox where you want mailbox to be at.");
					}
				case 16:
					{
						if(PlayerInfo[playerid][pSyringes] < 3)
						{
							PlayerInfo[playerid][pMats] -= price;
							PlayerInfo[playerid][pSyringes]++;
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/useheroin");
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_GREY, "You can't hold anymore syringes.");
						}
					}
				case 17:
					{
						if(GetPlayerVirtualWorld(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey]][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey]][hIntIW])
						{
							if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorZ]))
							{
								GetPlayerPos(playerid, HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetZ]);
								if(IsValidDynamic3DTextLabel(HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetTextID])) DestroyDynamic3DTextLabel(Text3D:HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetTextID]);
								HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetTextID] = CreateDynamic3DTextLabel("Closet\n/closet to use", 0xFFFFFF88, HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hClosetZ]+0.5,10.0, .testlos = 1, .worldid = HouseInfo[PlayerInfo[playerid][pPhousekey]][hIntVW], .interiorid = HouseInfo[PlayerInfo[playerid][pPhousekey]][hIntIW], .streamdistance = 10.0);
								SaveHouse(PlayerInfo[playerid][pPhousekey]);
								PlayerInfo[playerid][pMats] -= price;
								SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/closet(add/remove)");
							}
							else return SendClientMessageEx(playerid, COLOR_GREY, "You aren't inside of your house!");
						}
						else if(GetPlayerVirtualWorld(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey2]][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey2]][hIntIW])
						{
							if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorZ]))
							{
								GetPlayerPos(playerid, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetZ]);
								if(IsValidDynamic3DTextLabel(HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetTextID])) DestroyDynamic3DTextLabel(Text3D:HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetTextID]);
								HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetTextID] = CreateDynamic3DTextLabel("Closet\n/closet to use", 0xFFFFFF88, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hClosetZ]+0.5,10.0, .testlos = 1, .worldid = HouseInfo[PlayerInfo[playerid][pPhousekey2]][hIntVW], .interiorid = HouseInfo[PlayerInfo[playerid][pPhousekey2]][hIntIW], .streamdistance = 10.0);
								SaveHouse(PlayerInfo[playerid][pPhousekey2]);
								PlayerInfo[playerid][pMats] -= price;
								SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/closet(add/remove)");
								printf("Check 5");
							}
							else return SendClientMessageEx(playerid, COLOR_GREY, "You aren't inside of your house!");
						}
						else if(GetPlayerVirtualWorld(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey3]][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[PlayerInfo[playerid][pPhousekey3]][hIntIW])
						{
							if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hInteriorZ]))
							{
								GetPlayerPos(playerid, HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetZ]);
								if(IsValidDynamic3DTextLabel(HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetTextID])) DestroyDynamic3DTextLabel(Text3D:HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetTextID]);
								HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetTextID] = CreateDynamic3DTextLabel("Closet\n/closet to use", 0xFFFFFF88, HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetX], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetY], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hClosetZ]+0.5,10.0, .testlos = 1, .worldid = HouseInfo[PlayerInfo[playerid][pPhousekey3]][hIntVW], .interiorid = HouseInfo[PlayerInfo[playerid][pPhousekey3]][hIntIW], .streamdistance = 10.0);
								SaveHouse(PlayerInfo[playerid][pPhousekey3]);
								PlayerInfo[playerid][pMats] -= price;
								SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/closet(add/remove)");
								printf("Check 5");
							}
							else return SendClientMessageEx(playerid, COLOR_GREY, "You aren't inside of your house!");
						}	
						else return SendClientMessageEx(playerid, COLOR_GREY, "You aren't inside of your house!");
					}
				case 18:
					{
						PlayerInfo[playerid][pToolBox] += 25;
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Type /pickveh(icle) in any car to attempt to lock pick it.");
					}
				case 19:
					{
						PlayerInfo[playerid][pCrowBar] += 1;
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Type /cranktrunk in any car that you already lock picked to attempt to open the trunk.");
					}
				}
				format(string, sizeof(string), "   You have given yourself a %s.", choice);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				switch( PlayerInfo[playerid][pSex] )
				{
					case 1: format(string, sizeof(string), "* %s created something from Materials, and hands it to himself.", GetPlayerNameEx(playerid));
					case 2: format(string, sizeof(string), "* %s created something from Materials, and hands it to herself.", GetPlayerNameEx(playerid));
				}
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			format(string, sizeof(string), "* You offered %s to buy a %s.", GetPlayerNameEx(giveplayerid), choice);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Craftsman %s wants to sell you a %s, (type /accept craft) to buy.", GetPlayerNameEx(playerid), choice);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			CraftOffer[giveplayerid] = playerid;
			CraftId[giveplayerid] = weapon;
			CraftMats[giveplayerid] = price;
			format(CraftName[giveplayerid], 50, "%s", choice);
			if(PlayerInfo[playerid][pAdmin] < 3)
			{
				SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
			}
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		return 1;
	}
}

CMD:getpot(playerid, params[])
{
	new string[128], amount;
	if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /getpot [amount]");

	new tel;
	new price;
	new level = PlayerInfo[playerid][pDrugsSkill];
	if(level >= 0 && level <= 50)
	{ tel = 100; if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "   You cant go above 10 at your Skill Level!"); return 1; } }
	else if(level >= 51 && level <= 100)
	{ tel = 100; if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   You cant go above 20 at your Skill Level!"); return 1; } }
	else if(level >= 101 && level <= 200)
	{ tel = 100; if(amount < 1 || amount > 30) { SendClientMessageEx(playerid, COLOR_GREY, "   You cant go above 30 at your Skill Level!"); return 1; } }
	else if(level >= 201 && level <= 400)
	{ tel = 100; if(amount < 1 || amount > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   You cant go above 40 at your Skill Level!"); return 1; } }
	else if(level >= 401)
	{ tel = 100; if(amount < 1 || amount > 50) { SendClientMessageEx(playerid, COLOR_GREY, "   You cant go above 50 at your Skill Level!"); return 1; } }
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't at the Drug House!");
		return 1;
	}
	if ( PlayerInfo[playerid][pPot] >= 25)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have reached your pot limit of 25 pot.");
		return 1;
	}
	if (PlayerInfo[playerid][pJob] == 4 || PlayerInfo[playerid][pJob2] == 4 || PlayerInfo[playerid][pJob3] == 4)
	{
		price = amount * tel;
		if(Points[mypoint][Stock] < amount && PlayerInfo[playerid][pDonateRank] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "   This Drug House doesn't have that much pot!");
		if(GetPlayerCash(playerid) > price)
		{
			format(string, sizeof(string), "* You bought %d grams for $%d.", amount, price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, -price);
			PlayerInfo[playerid][pPot] += amount;
			if(PlayerInfo[playerid][pDonateRank] < 1)
			{
				Points[mypoint][Stock] -= amount;
				format(string, sizeof(string), " POT/OPIUM AVAILABLE: %d/1000.", Points[mypoint][Stock]);
				UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
			}
			for(new i = 0; i < sizeof(FamilyInfo); i++)
			{
				if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
				{
					FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+price/2;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't afford the drugs!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a drug dealer.");
		return 1;
	}
	return 1;
}

CMD:getcrack(playerid, params[])
{
	new string[128], amount;
	if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /getcrack [amount]");

	new tel;
	new price;
	new level = PlayerInfo[playerid][pDrugsSkill];
	if(level >= 0 && level <= 50)
	{
		tel = 500;
		if(amount < 1 || amount > 5)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You can't go above 5 at your Skill Level!");
			return 1;
		}
	}
	else if(level >= 51 && level <= 100)
	{ tel = 500; if(amount < 1 || amount > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   You can't go above 10 at your Skill Level!"); return 1; } }
	else if(level >= 101 && level <= 200)
	{ tel = 500; if(amount < 1 || amount > 15) { SendClientMessageEx(playerid, COLOR_GREY, "   You can't go above 15 at your Skill Level!"); return 1; } }
	else if(level >= 201 && level <= 400)
	{ tel = 500; if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   You can't go above 20 at your Skill Level!"); return 1; } }
	else if(level >= 401)
	{ tel = 500; if(amount < 1 || amount > 25) { SendClientMessageEx(playerid, COLOR_GREY, "   You can't go above 25 at your Skill Level!"); return 1; } }
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 4)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not at the Crack Lab!");
		return 1;
	}
	if ( PlayerInfo[playerid][pCrack] >= 25)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " You have reached your crack limit of 25 crack.");
		return 1;
	}
	if (PlayerInfo[playerid][pJob] == 4 || PlayerInfo[playerid][pJob2] == 4 || PlayerInfo[playerid][pJob3] == 4)
	{
		price = amount * tel;
		if(Points[mypoint][Stock] < amount && PlayerInfo[playerid][pDonateRank] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "   This Crack Lab doesn't have that much crack!");
		if(GetPlayerCash(playerid) > price)
		{
			format(string, sizeof(string), "* You bought %d grams for $%d.", amount, price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, -price);
			PlayerInfo[playerid][pCrack] += amount;
			if(PlayerInfo[playerid][pDonateRank] < 1) Points[mypoint][Stock] = Points[mypoint][Stock]-amount;
			format(string, sizeof(string), " CRACK AVAILABLE: %d/500.", Points[mypoint][Stock]);
			UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
			for(new i = 0; i < sizeof(FamilyInfo); i++)
			{
				if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
				{
					FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+price/2;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You cant afford the Drugs!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a drug dealer.");
		return 1;
	}
	return 1;
}

CMD:holster(playerid, params[])
{
	new string[128];
    if(!GetPVarType(playerid, "WeaponsHolstered"))
    {
        SetPlayerArmedWeapon(playerid, 0);
        SetPVarInt(playerid, "WeaponsHolstered", 1);
    	format(string, sizeof(string), "* %s holsters their weapon.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
    }
	else
	{
	    if(GetPVarInt(playerid, "TackleMode") == 0)
		{
			DeletePVar(playerid, "WeaponsHolstered");
			format(string, sizeof(string), "* %s unholsters their weapon.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		else
		{
			return SendClientMessageEx(playerid, COLOR_GRAD2, "You must disable tackling before unholstering");
		}
	}
}


CMD:tackle(playerid, params[])
{
	#if defined zombiemode
	if(zombieevent == 1 && GetPVarType(playerid, "pIsZombie")) return SendClientMessageEx(playerid, COLOR_GREY, "Zombies can't tackle humans!");
	#endif
	if((0 <= PlayerInfo[playerid][pMember] < MAX_GROUPS) && PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iTackleAccess])
	{
		if(GetPVarInt(playerid, "ReTackleCooldown") != 0 && gettime() < GetPVarInt(playerid, "ReTackleCooldown") + 30)
		{
			new string[128];
			format(string, sizeof(string), "You must wait %d seconds before you can enable tackle mode again!", GetPVarInt(playerid, "ReTackleCooldown") + 30 - gettime());
			return SendClientMessageEx(playerid, COLOR_GRAD2, string);
		}
		if(GetPVarInt(playerid, "WeaponsHolstered") == 0) //Unholstered
	    {
	        cmd_holster(playerid, params);
		}
        if(GetPVarInt(playerid, "TackleMode") == 0)
        {
	        SetPVarInt(playerid, "TackleMode", 1);
	        return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You've enabled tackling.  Aim at the suspect and hit enter to initiate the tackle.");
		}
		else
		{
	        SetPVarInt(playerid, "TackleMode", 0);
	        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You've disabled tackling. You may now unholster your weapon. (/holster)");
			cmd_holster(playerid, params);
			return SetPVarInt(playerid, "ReTackleCooldown", gettime());
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not allowed to use this command.");
}

CMD:tazer(playerid, params[])
{
	if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot do this while being in the Hunger Games Event!");
	if(PlayerInfo[playerid][pAccountRestricted] != 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "Your account is restricted!");
    #if defined zombiemode
	if(zombieevent == 1 && GetPVarType(playerid, "pIsZombie")) return SendClientMessageEx(playerid, COLOR_GREY, "Zombies can't use this.");
	#endif
	if(IsACop(playerid))
	{
		new string[128];
		if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");

		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");
			return 1;
		}

		if(GetPVarInt(playerid, "IsInArena") >= 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
			return 1;
		}
		if(GetPVarInt( playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use the tazer while you're in an event.");
			return 1;
		}
		if(PlayerCuffedTime[playerid] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this right now.");
			return 1;
		}
		if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this right now.");
			return 1;
		}

		if(PlayerInfo[playerid][pJailTime] > 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this in jail/prison.");
			return 1;
		}
		if(PlayerCuffed[playerid] >= 1) {
			SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this while tazed/cuffed.");
			return 1;
		}
		if(PlayerInfo[playerid][pHasTazer] < 1)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "You do not have a tazer!");
		    return 1;
		}

		if(pTazer{playerid} == 0)
		{
			pTazerReplace{playerid} = PlayerInfo[playerid][pGuns][2];
			if(PlayerInfo[playerid][pGuns][2] != 0) RemovePlayerWeapon(playerid, PlayerInfo[playerid][pGuns][2]);
			format(string, sizeof(string), "* %s unholsters their tazer.", GetPlayerNameEx(playerid));
			ProxDetector(4.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GivePlayerValidWeapon(playerid, 23, 60000);
			pTazer{playerid} = 1;
		}
		else
		{
			RemovePlayerWeapon(playerid, 23);
			GivePlayerValidWeapon(playerid, pTazerReplace{playerid}, 60000);
			format(string, sizeof(string), "* %s holsters their tazer.", GetPlayerNameEx(playerid));
			ProxDetector(4.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			pTazer{playerid} = 0;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not a law enforcement officer!");
		return 1;
	}
	return 1;
}

CMD:vradar(playerid, params[])
{
	if (!IsPlayerInAnyVehicle(playerid))
		return SendClientMessageEx(playerid, 0xFF0000FF, "You cannot use a dashboard radar outside of a vehicle.");

	if(!IsACop(playerid))
	    return SendClientMessageEx(playerid, COLOR_GREY, "You are not a law enforcement officer!");

	switch (CarRadars[playerid])
	{
		case 0: // player has not deployed dashboard radar
		{
			CarRadars[playerid] = 1;
			PlayerTextDrawShow(playerid, _crTextTarget[playerid]);
			PlayerTextDrawShow(playerid, _crTextSpeed[playerid]);
			PlayerTextDrawShow(playerid, _crTickets[playerid]);

			SendClientMessageEx(playerid, COLOR_WHITE, "You are now using your dashboard radar, use /vradar again to disable it.");
			SetPVarInt(playerid, "_lastTicketWarning", 0);
		}

		case 1..2: // dashboard radar has been deployed
		{
			CarRadars[playerid] = 0;
			PlayerTextDrawHide(playerid, _crTextTarget[playerid]);
			PlayerTextDrawHide(playerid, _crTextSpeed[playerid]);
			PlayerTextDrawHide(playerid, _crTickets[playerid]);
			
			SendClientMessageEx(playerid, COLOR_WHITE, "You are no longer using your dashboard radar.");
			DeletePVar(playerid, "_lastTicketWarning");
		}
	}

	return 1;
}

CMD:radargun(playerid, params[])
{
	if(IsACop(playerid))
	{
		new string[128];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");
			return 1;
		}

		if(GetPVarInt(playerid, "IsInArena") >= 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
			return 1;
		}
		if(GetPVarInt( playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use the tazer while you're in an event.");
			return 1;
		}

		if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this right now.");
			return 1;
		}

		if(PlayerInfo[playerid][pJailTime] > 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this in jail/prison.");
			return 1;
		}
		if(PlayerCuffed[playerid] >= 1) {
			SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this while tazed/cuffed.");
			return 1;
		}

		new SpeedRadar = GetPVarInt(playerid, "SpeedRadar");
		if(SpeedRadar == 0)
		{
			SetPVarInt(playerid, "RadarReplacement", PlayerInfo[playerid][pGuns][9]);
			if(PlayerInfo[playerid][pGuns][9] != 0) RemovePlayerWeapon(playerid, PlayerInfo[playerid][pGuns][9]);
			format(string, sizeof(string), "* %s takes out a LIDAR speed gun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GivePlayerValidWeapon(playerid, 43, 60000);
			SetPVarInt(playerid, "SpeedRadar", 1);
		}
		else
		{
			RemovePlayerWeapon(playerid, 43);
			GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"), 60000);
			format(string, sizeof(string), "* %s puts away their LIDAR speed gun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "SpeedRadar");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not a law enforcement officer!");
		return 1;
	}
	return 1;
}

CMD:nextpaycheck(playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "Total Minutes since last Paycheck: %d  Approximate time until next Paycheck: %d", floatround(PlayerInfo[playerid][pConnectSeconds]/60), floatround((3600-PlayerInfo[playerid][pConnectSeconds]) / 60));
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	SendClientMessageEx(playerid, COLOR_GRAD2, "Please note that you will not accrue time if your game is paused.");
	return 1;
}

CMD:cuff(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(GetPVarInt(playerid, "Injured") == 1 || PlayerCuffed[ playerid ] >= 1 || PlayerInfo[ playerid ][ pJailTime ] > 0 || PlayerInfo[playerid][pHospital] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this right now.");
			return 1;
		}

		if(PlayerInfo[playerid][pHasCuff] < 1)
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "You do not have any pair of cuffs on you!");
		    return 1;
		}

		new string[128], giveplayerid, Float:health, Float:armor;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cuff [player]");
		if(IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot cuff yourself!"); return 1; }
				if(PlayerCuffed[giveplayerid] == 1 || GetPlayerSpecialAction(giveplayerid) == SPECIAL_ACTION_HANDSUP)
				{
					format(string, sizeof(string), "* You have been handcuffed by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You handcuffed %s, till uncuff.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s handcuffs %s, tightening the cuffs securely.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~r~Cuffed", 2500, 3);
					TogglePlayerControllable(giveplayerid, 0);
					ClearAnimations(giveplayerid);
					GetPlayerHealth(giveplayerid, health);
					GetPlayerArmour(giveplayerid, armor);
					SetPVarFloat(giveplayerid, "cuffhealth",health);
					SetPVarFloat(giveplayerid, "cuffarmor",armor);
					SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
					ApplyAnimation(giveplayerid,"ped","cower",1,1,0,0,0,0,1);
					PlayerCuffed[giveplayerid] = 2;
					SetPVarInt(giveplayerid, "PlayerCuffed", 2);
					SetPVarInt(giveplayerid, "IsFrozen", 1);
					//Frozen[giveplayerid] = 1;
					PlayerCuffedTime[giveplayerid] = 300;
				}
				else if(GetPVarType(giveplayerid, "IsTackled"))
				{
				    format(string, sizeof(string), "* %s removes a set of cuffs from his belt and attempts to cuff %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetTimerEx("CuffTackled", 4000, 0, "ii", playerid, giveplayerid);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't restrained!");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:uncuff(playerid, params[])
{
	if(IsACop(playerid))
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /uncuff [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				/*if(PlayerInfo[giveplayerid][pJailTime] >= 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't uncuff a jailed player.");
					return 1;
				} */
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You can't uncuff yourself."); return 1; }
				if(PlayerCuffed[giveplayerid]>1)
				{
					DeletePVar(giveplayerid, "IsFrozen");
					format(string, sizeof(string), "* You have been uncuffed by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You uncuffed %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s has uncuffed %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~g~Uncuffed", 2500, 3);
					TogglePlayerControllable(giveplayerid, 1);
					ClearAnimations(giveplayerid);
					SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);
					PlayerCuffed[giveplayerid] = 0;
                    PlayerCuffedTime[giveplayerid] = 0;
                    SetPlayerHealth(giveplayerid, GetPVarFloat(giveplayerid, "cuffhealth"));
                    SetPlayerArmor(giveplayerid, GetPVarFloat(giveplayerid, "cuffarmor"));
                    DeletePVar(giveplayerid, "cuffhealth");
					DeletePVar(giveplayerid, "PlayerCuffed");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't cuffed.");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:detain(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");
			return 1;
		}

		new string[128], giveplayerid, seat;
		if(sscanf(params, "ud", giveplayerid, seat)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /detain [player] [seatid 1-3]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(seat < 1 || seat > 3)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "The seat ID cannot be above 3 or below 1.");
				return 1;
			}
			if(IsACop(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You can't detain other law enforcement officers.");
				return 1;
			}
			if(IsPlayerInAnyVehicle(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person is in a car - get them out first.");
				return 1;
			}
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot detain yourself!"); return 1; }
				if(PlayerCuffed[giveplayerid] == 2)
				{
					new carid = gLastCar[playerid];
					if(IsSeatAvailable(carid, seat))
					{
						new Float:pos[6];
						GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
						GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
						GetVehiclePos( carid, pos[0], pos[1], pos[2]);
						if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
								floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
								floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
						format(string, sizeof(string), "* You were detained by %s .", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* You detained %s .", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s throws %s in the vehicle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveplayerid, "~r~Detained", 2500, 3);
						ClearAnimations(giveplayerid);
						TogglePlayerControllable(giveplayerid, false);
						IsPlayerEntering{giveplayerid} = true;
						PutPlayerInVehicle(giveplayerid, carid, seat);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That seat isn't available!");
						return 1;
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't cuffed.");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, " You're not close enough to the person or your car!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not a law enforcement officer!");
	}
	return 1;
}

CMD:drag(playerid, params[])
{
	if(IsACop(playerid))
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /drag [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "PlayerCuffed") == 2)
			{
				if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, " You must be out of the vehicle to use this command.");
				if(GetPVarInt(giveplayerid, "BeingDragged") == 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, " That person is already being dragged. ");
					return 1;
				}
                new Float:dX, Float:dY, Float:dZ;
				GetPlayerPos(giveplayerid, dX, dY, dZ);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, dX, dY, dZ))
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " That suspect is not near you.");
					return 1;
				}
				format(string, sizeof(string), "* %s is now dragging you.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* You are now dragging %s, you may move them now.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s grabs ahold of %s and begins to move them.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SendClientMessageEx(playerid, COLOR_WHITE, "You are now dragging the suspect, press the '{AA3333}FIRE{FFFFFF}' button to stop.");
				SetPVarInt(giveplayerid, "BeingDragged", 1);
				SetPVarInt(playerid, "DraggingPlayer", giveplayerid);
				SetTimerEx("DragPlayer", 1000, 0, "ii", playerid, giveplayerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, " The specified person is not cuffed !");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not a Law Enforcement Official!");
		return 1;
	}
	return 1;
}

CMD:find(playerid, params[]) {
	if(PlayerInfo[playerid][pJob] != 1 && PlayerInfo[playerid][pJob2] != 1 && PlayerInfo[playerid][pJob3] != 1) {
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a detective.");
	}
	else if(gettime() < UsedFind[playerid]) {
		SendClientMessageEx(playerid, COLOR_GREY, "You've already searched for someone - wait a little.");
	}
	else {
		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /find [player]");
		}
		else if(iTargetID == playerid) {
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use this command on yourself.");
		}
		else if(!IsPlayerConnected(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(GetPlayerInterior(iTargetID) != 0) {
			SendClientMessageEx(playerid, COLOR_GREY, "That person is inside an interior.");
		}
		else if(PlayerInfo[iTargetID][pAdmin] >= 2 && PlayerInfo[iTargetID][pTogReports] != 1) {
			SendClientMessageEx(playerid, COLOR_GREY, "You are unable to find this person.");
		}
		else if (GetPVarInt(playerid, "_SwimmingActivity") >= 1) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "You are unable to find people while swimming.");
		}
		else if(PhoneOnline[iTargetID] == 0 && PlayerInfo[iTargetID][pPnumber] != 0|| PlayerInfo[iTargetID][pBugged] == PlayerInfo[playerid][pMember])
		{
			switch(PlayerInfo[playerid][pDetSkill]) {
				case 0 .. 50: {
					FindTimePoints[playerid] = 4;
					UsedFind[playerid] = gettime()+120;
				}
				case 51 .. 100: {
					FindTimePoints[playerid] = 6;
					UsedFind[playerid] = gettime()+90;
				}
				case 101 .. 200: {
					FindTimePoints[playerid] = 8;
					UsedFind[playerid] = gettime()+60;
				}
				case 201 .. 400: {
					FindTimePoints[playerid] = 10;
					UsedFind[playerid] = gettime()+30;
				}
				default: {
					FindTimePoints[playerid] = 12;
					UsedFind[playerid] = gettime()+15;
				}
			}

			new
				szZone[MAX_ZONE_NAME],
				szMessage[108];

			SetPlayerMarkerForPlayer(playerid, iTargetID, FIND_COLOR);
			GetPlayer3DZone(iTargetID, szZone, sizeof(szZone));
			format(szMessage, sizeof(szMessage), "%s has been last seen at %s.", GetPlayerNameEx(iTargetID), szZone);
			SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
			FindingPlayer[playerid]=iTargetID;
			FindTime[playerid] = 1;

			if(PlayerInfo[playerid][pDoubleEXP] > 0) {
				format(szMessage, sizeof(szMessage), "You have gained 2 detective skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
				SendClientMessageEx(playerid, COLOR_YELLOW, szMessage);
				PlayerInfo[playerid][pDetSkill] += 2;
			}
			else ++PlayerInfo[playerid][pDetSkill];

			switch(PlayerInfo[playerid][pDetSkill]) {
				case 50: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Detective Skill is now Level 2, you can find a little faster.");
				case 100: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Detective Skill is now Level 3, you can find a little faster.");
				case 200: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Detective Skill is now Level 4, you can find a little faster.");
				case 400: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Detective Skill is now Level 5, you can find a little faster.");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You are unable to get a trace on this person.");
			return 1;
		}
	}
	return 1;
}
 
CMD:hfind(playerid, params[])
{
	if (IsAHitman(playerid) || PlayerInfo[playerid][pRank] >= arrGroupData[PlayerInfo[playerid][pMember]][g_iBugAccess])
	{
	    if(GetPVarType(playerid, "hFind")) {
	   		SendClientMessageEx(playerid, COLOR_GRAD2, "Stopped Updating");
	        DeletePVar(playerid, "hFind");
	        DisablePlayerCheckpoint(playerid);
		}
		else
		{
			new	iTargetID;

			if(sscanf(params, "u", iTargetID)) {
				return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hfind [player]");
			}
			else if(iTargetID == playerid) {
				return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this command on yourself.");
			}

			else if(!IsPlayerConnected(iTargetID)) {
				return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			}
			else if(GetPlayerInterior(iTargetID) != 0) {
				return SendClientMessageEx(playerid, COLOR_GREY, "That person is inside an interior.");
			}
			else if(PlayerInfo[iTargetID][pAdmin] >= 2 && PlayerInfo[iTargetID][pTogReports] != 1) {
				return SendClientMessageEx(playerid, COLOR_GREY, "You are unable to find this person.");
			}
			else if (GetPVarInt(playerid, "_SwimmingActivity") >= 1) {
				return SendClientMessageEx(playerid, COLOR_GRAD2, "You are unable to find people while swimming.");
			}
			if (GetPVarInt(playerid, "_SwimmingActivity") >= 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "  You must stop swimming first! (/stopswimming)");
				return 1;
			}
			if(PhoneOnline[iTargetID] == 0 && PlayerInfo[iTargetID][pPnumber] != 0|| PlayerInfo[iTargetID][pBugged] == PlayerInfo[playerid][pMember])
			{


				new
					szZone[MAX_ZONE_NAME],
					szMessage[108];

				new Float:X, Float:Y, Float:Z;
			    GetPlayerPos(iTargetID, X, Y, Z);
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, X, Y, Z, 4.0);
				GetPlayer3DZone(iTargetID, szZone, sizeof(szZone));
				format(szMessage, sizeof(szMessage), "Tracking on %s, last seen at %s.", GetPlayerNameEx(iTargetID), szZone);
				SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
				SendClientMessageEx(playerid, COLOR_GRAD2, "Type /hfind again to stop tracking.");
				SetPVarInt(playerid, "hFind", iTargetID);
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "You are unable to get a trace on this person.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:deletehit(playerid, params[])
{
	if( PlayerInfo[playerid][pAdmin] >= 4 || (arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] == 2 && PlayerInfo[playerid][pRank] >= 5) || arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] == 2 )
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /deletehit [player]");

		if(!IsPlayerConnected(giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}

		if(PlayerInfo[giveplayerid][pHeadValue] >= 1 )
		{
			PlayerInfo[giveplayerid][pHeadValue] = 0;
			format(string, sizeof(string), "<< %s has removed the contract on %s >>", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("logs/contracts.log", string);
			format(string, sizeof(string), "You have removed the contract which was on %s's head.", GetPlayerNameEx(giveplayerid) );
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			GoChase[giveplayerid] = INVALID_PLAYER_ID;

			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if( HitToGet[i] == giveplayerid )
					{
						HitToGet[i] = INVALID_PLAYER_ID;
						HitOffer[i] = INVALID_PLAYER_ID;
					}
				}	
			}
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There's not an active contract on that player!" );
		}
	}
	return 1;
}

CMD:guard(playerid, params[])
{
	if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot do this while being in the Hunger Games Event!");
	if(PlayerInfo[playerid][pJob] != 8 && PlayerInfo[playerid][pJob2] != 8 && PlayerInfo[playerid][pJob3] != 8)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a bodyguard.");
		return 1;
	}
	if(WatchingTV[playerid] != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can not do this while watching TV!");
		return 1;
	}
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
		return 1;
	}
	new string[128], giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /guard [player] [price]");
	if (GetPVarInt(playerid, "GuardTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before selling another vest.", GetPVarInt(playerid, "GuardTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}
	if(money < 2000 || money > 10000) { SendClientMessageEx(playerid, COLOR_GREY, "Specified price must be between $2,000 and $10,000."); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{

		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You can't /guard yourself.");
				return 1;
			}

			SetPVarInt(playerid, "GuardTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
			format(string, sizeof(string), "* You offered protection to %s for $%d.", GetPlayerNameEx(giveplayerid), money);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Bodyguard %s wants to protect you for $%d, type /accept bodyguard to accept.", GetPlayerNameEx(playerid), money);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			GuardOffer[giveplayerid] = playerid;
			GuardPrice[giveplayerid] = money;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	return 1;
}

CMD:free(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 2 && PlayerInfo[playerid][pJob2] != 2 && PlayerInfo[playerid][pJob3] != 2)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Lawyer!");
		return 1;
	}
	if(PlayerInfo[playerid][pLawSkill] >= 401)
	{
		ApprovedLawyer[playerid] = 1;
	}

	new
		giveplayerid;

	if(sscanf(params, "u", giveplayerid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /free [player]");
	}
	else if(!IsPlayerConnected(giveplayerid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	else if(giveplayerid == playerid) {
		SendClientMessageEx(playerid, COLOR_GREY, "You cannot free yourself.");
	}
	else if(PlayerInfo[giveplayerid][pJailTime] > 0 && ApprovedLawyer[playerid] == 1 && WantLawyer[giveplayerid] >= 1) {

		new
			string[128];

		format(string, sizeof(string), "* You freed %s from jail.", GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* You were freed from jail, by Lawyer %s.", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		ApprovedLawyer[playerid] = 0;
		WantLawyer[giveplayerid] = 0;
		CallLawyer[giveplayerid] = 0;
		JailPrice[giveplayerid] = 0;
		PlayerInfo[giveplayerid][pJailTime] = 1;

		if(PlayerInfo[playerid][pDoubleEXP] > 0)
		{
			format(string, sizeof(string), "You have gained 2 lawyer skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
			PlayerInfo[playerid][pLawSkill] += 2;
		}
		else ++PlayerInfo[playerid][pLawSkill];

		switch(PlayerInfo[playerid][pLawSkill]) {
			case 50: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your lawyer skill is now Level 2, you will earn more money and now have a shorter reload time.");
			case 100: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your lawyer skill is now Level 3, you will earn more money and now have a shorter reload time.");
			case 200: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your lawyer skill is now Level 4, you will earn more money and now have a shorter reload time.");
			case 400: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your lawyer skill is now Level 5, you will earn more money and now have a shorter reload time.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "That person doesn't need a laywer.");
	return 1;
}

CMD:defendtime(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pDefendTime] < 1)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "You're able to receive defense now.");
	}
	else {	
		format(string, sizeof(string), "You will be able to receive a defense in %d minutes.", PlayerInfo[playerid][pDefendTime]);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}	
	return 1;
}

CMD:defend(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 2 && PlayerInfo[playerid][pJob2] != 2 && PlayerInfo[playerid][pJob3] != 2)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Lawyer!");
		return 1;
	}

	new string[128];
	if(gettime() < PlayerInfo[playerid][pLawyerTime])
	{
		format(string, sizeof(string), "You must wait %d seconds!", PlayerInfo[playerid][pLawyerTime]-gettime());
		SendClientMessageEx(playerid, COLOR_GRAD1,string);
		return 1;
	}

	new giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /defend [player] [price]");
	if(money < 2000 || money > 10000) { SendClientMessageEx(playerid, COLOR_GREY, "   Price not lower then $2,000 or above $10,000!"); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Cant offer protection to yourself!");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pDefendTime] > 0) {
			    return SendClientMessageEx(playerid, COLOR_GRAD2, "You need wait 1 hour before defending this player.");
			}
			if(PlayerInfo[giveplayerid][pWantedLevel] > 0)
			{
				format(string, sizeof(string), "* You offered to defend %s for $%d.", GetPlayerNameEx(giveplayerid), money);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Lawyer %s wants to defend you for $%d, (type /accept defense) to accept.", GetPlayerNameEx(playerid), money);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pLawyerTime] = gettime()+60;
				DefendOffer[giveplayerid] = playerid;
				DefendPrice[giveplayerid] = money;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That person is not wanted!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	return 1;
}

CMD:cancel(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Cancel __________________|");
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cancel [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Sex, Mats, Pot, Crack, Weapon, Craft, Repair, Lawyer, Bodyguard, Live, Refill, Car, Boxing");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Taxi, Bus, Medic, Mechanic, Ticket, Witness, Marriage, Divorce, Drink, House, Shipment, Help");
		if(IsAHitman(playerid)) { SendClientMessageEx(playerid, COLOR_GREY, "Special: contract"); }
		SendClientMessageEx(playerid, COLOR_WHITE, "|____________________________________________|");
		return 1;
	}

	if(strcmp(choice,"sex",true) == 0) {	SexOffer[playerid] = INVALID_PLAYER_ID; SexPrice[playerid] = 0; }
	else if(strcmp(choice,"mats",true) == 0) { MatsOffer[playerid] = INVALID_PLAYER_ID; MatsStorageID[playerid] = -1; MatsPrice[playerid] = 0; MatsAmount[playerid] = 0; }
	else if(strcmp(choice,"pot",true) == 0) { PotOffer[playerid] = INVALID_PLAYER_ID; PotStorageID[playerid] = -1; PotPrice[playerid] = 0; PotGram[playerid] = 0; }
	else if(strcmp(choice,"crack",true) == 0) { CrackOffer[playerid] = INVALID_PLAYER_ID; CrackStorageID[playerid] = -1; CrackPrice[playerid] = 0; CrackGram[playerid] = 0; }
	else if(strcmp(choice,"weapon",true) == 0) { GunOffer[playerid] = INVALID_PLAYER_ID; GunStorageID[playerid] = -1; GunId[playerid] = 0; }
	else if(strcmp(choice,"craft",true) == 0) { CraftOffer[playerid] = INVALID_PLAYER_ID; CraftId[playerid] = 0; }
	else if(strcmp(choice,"repair",true) == 0) {	RepairOffer[playerid] = INVALID_PLAYER_ID; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; }
	else if(strcmp(choice,"lawyer",true) == 0) { WantLawyer[playerid] = 0; CallLawyer[playerid] = 0; }
	else if(strcmp(choice,"bodyguard",true) == 0) { GuardOffer[playerid] = INVALID_PLAYER_ID; GuardPrice[playerid] = 0; }
	else if(strcmp(choice,"live",true) == 0) { LiveOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"refill",true) == 0) { RefillOffer[playerid] = INVALID_PLAYER_ID; RefillPrice[playerid] = 0; }
	else if(strcmp(choice,"car",true) == 0) { VehicleOffer[playerid] = INVALID_PLAYER_ID; VehiclePrice[playerid] = 0; VehicleId[playerid] = -1; }
	else if(strcmp(choice,"house",true) == 0) { HouseOffer[playerid] = INVALID_PLAYER_ID; HousePrice[playerid] = 0; House[playerid] = 0; }
	else if(strcmp(choice,"boxing",true) == 0) { BoxOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"witness",true) == 0) { MarryWitnessOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"marriage",true) == 0) { ProposeOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"divorce",true) == 0) { DivorceOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"drink",true) == 0) { DrinkOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"shipment",true) == 0)
	{
 		DeletePVar(playerid, "LoadTruckTime");
		DeletePVar(playerid, "TruckDeliver");
		TruckUsed[playerid] = INVALID_VEHICLE_ID;
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 		DisablePlayerCheckpoint(playerid);
	}
	else if(strcmp(choice,"help", true) == 0)
	{
	    if(GetPVarInt(playerid, "COMMUNITY_ADVISOR_REQUEST") == 1)
	    {
		    DeletePVar(playerid, "COMMUNITY_ADVISOR_REQUEST");
			DeletePVar(playerid, "HelpTime");
			DeletePVar(playerid, "HelpReason");
		}
		else {
		    SendClientMessageEx(playerid, COLOR_GRAD2, "You did not requested help.");
		    return 1;
		}
	}
	else if(strcmp(choice,"contract",true) == 0)
	{
		if(GoChase[playerid] != INVALID_PLAYER_ID || HitToGet[playerid] != INVALID_PLAYER_ID) {
			new Float:health;
			GetPlayerHealth(playerid, health);
			new hpint = floatround( health, floatround_round );
			if (hpint >=  80)
			{
				HitToGet[playerid] = INVALID_PLAYER_ID;
				HitOffer[playerid] = INVALID_PLAYER_ID;
				GetChased[GoChase[playerid]] = INVALID_PLAYER_ID;
				GotHit[GoChase[playerid]] = 0;
				GoChase[playerid] = INVALID_PLAYER_ID;
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot cancel a contract with less than 80 percent health!");
		
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have an active contract!");
	}
	else if(strcmp(choice,"ticket",true) == 0) { TicketOffer[playerid] = INVALID_PLAYER_ID; TicketMoney[playerid] = 0; }
	else if(strcmp(choice,"medic",true) == 0) { if(IsPlayerConnected(MedicCall)) { if(MedicCall == playerid) { MedicCall = INVALID_PLAYER_ID; } else { SendClientMessageEx(playerid, COLOR_GREY, "   You are not the current Caller!"); return 1; } } }
	else if(strcmp(choice,"mechanic",true) == 0) { if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = INVALID_PLAYER_ID; } else { SendClientMessageEx(playerid, COLOR_GREY, "   You are not the current Caller!"); return 1; } } }
	else if(strcmp(choice,"help",true) == 0) { if(GetPVarInt(playerid, "COMMUNITY_ADVISOR_REQUEST")) { DeletePVar(playerid, "COMMUNITY_ADVISOR_REQUEST"); } else { SendClientMessageEx(playerid, COLOR_GREY, "   You are not the current Caller!"); return 1; } }
	else if(strcmp(choice,"taxi",true) == 0)
	{
		if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0)
		{
			GameTextForPlayer(TaxiAccepted[playerid], "~w~Taxi Driver~n~~r~Canceled the call", 5000, 1);
			DeletePVar(TaxiAccepted[playerid], "TaxiCall");
			TaxiAccepted[playerid] = INVALID_PLAYER_ID;
			GameTextForPlayer(playerid, "~w~You have~n~~r~Canceled the call", 5000, 1);
			TaxiCallTime[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
		}
		else
		{
			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(TaxiAccepted[i] != INVALID_PLAYER_ID && TaxiAccepted[i] == playerid)
					{
							GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Canceled the call", 5000, 1);
							TaxiCallTime[i] = 0;
							DeletePVar(TaxiAccepted[i], "TaxiCall");
							TaxiAccepted[i] = INVALID_PLAYER_ID;
							DisablePlayerCheckpoint(i);
					}
				}	
			}
		}
	}
	else if(strcmp(choice,"bus",true) == 0)
	{
		if(TransportDuty[playerid] == 2 && BusCallTime[playerid] > 0)
		{
			GameTextForPlayer(BusAccepted[playerid], "~w~Bus Driver~n~~r~Canceled the call", 5000, 1);
			DeletePVar(BusAccepted[playerid], "BusCall");
			BusAccepted[playerid] = INVALID_PLAYER_ID;
			GameTextForPlayer(playerid, "~w~You have~n~~r~Canceled the call", 5000, 1);
			BusCallTime[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
		}
		else
		{
			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(BusAccepted[i] != INVALID_PLAYER_ID && BusAccepted[i] == playerid)
					{
						GameTextForPlayer(i, "~w~Bus Caller~n~~r~Canceled the call", 5000, 1);
						BusCallTime[i] = 0;
						DeletePVar(BusAccepted[i], "BusCall");
						BusAccepted[i] = INVALID_PLAYER_ID;
						DisablePlayerCheckpoint(i);
					}
				}	
			}
		}
	}
	else { return 1; }
	format(string, sizeof(string), "* You have canceled: %s.", choice);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:refill(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pJob2] != 7 && PlayerInfo[playerid][pJob3] != 7)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You're not a mechanic.");
	}

	new string[128];
	if(gettime() < PlayerInfo[playerid][pMechTime])
	{
		format(string, sizeof(string), "You must wait %d seconds!", PlayerInfo[playerid][pMechTime]-gettime());
		return SendClientMessageEx(playerid, COLOR_GRAD1,string);
	}
	new giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /refill [player] [price]");

	if(!(money >= 1 && money < 100000))
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "Invalid price specified - can't be lower than 1 or higher than $99,999.");
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid) && IsPlayerInAnyVehicle(giveplayerid))
		{

			new Float: fueltogive;
			switch(PlayerInfo[playerid][pMechSkill])
			{
			case 0 .. 49: fueltogive = 2.0;
			case 50 .. 99: fueltogive = 4.0;
			case 100 .. 199: fueltogive = 6.0;
			case 200 .. 399: fueltogive = 8.0;
			default: fueltogive = 10.0;
			}
			if(giveplayerid == playerid)
			{
				if(PlayerInfo[playerid][pMechSkill] >= 400)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					VehicleFuel[vehicleid] = VehicleFuel[vehicleid] + fueltogive;
					if(VehicleFuel[vehicleid] > 100.0) VehicleFuel[vehicleid] = 100.0;
					format(string, sizeof(string), "* %s has refilled their vehicle.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "* You added %.2f fuel to your car.",fueltogive);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					for(new vehicleslot = 0; vehicleslot < MAX_PLAYERVEHICLES; vehicleslot++)
					{
						if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][vehicleslot][pvId]))
						{
							if(vehicleslot != -1) {
								format(string, sizeof(string), "UPDATE `vehicles` SET `pvFuel` = %0.5f WHERE `id` = '%d'", VehicleFuel[vehicleid], PlayerVehicleInfo[playerid][vehicleslot][pvSlotId]);
								mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
							}
						}
					}
					return 1;
				}
				SendClientMessageEx(playerid, COLOR_GREY, "You can't offer a refill to yourself."); return 1;
			}
			format(string, sizeof(string), "* You offered %s to add %.2f fuel to their car for $%d.",GetPlayerNameEx(giveplayerid),fueltogive,money);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Car Mechanic %s wants to add %.2f fuel to your car for $%d, type /accept refill to accept.",GetPlayerNameEx(playerid),fueltogive,money);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			PlayerInfo[playerid][pMechTime] = gettime()+60;
			RefillOffer[giveplayerid] = playerid;
			RefillPrice[giveplayerid] = money;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That person is not near you, or isn't in a car.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	return 1;
}


CMD:repair(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pJob2] != 7 && PlayerInfo[playerid][pJob3] != 7)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Car Mechanic!");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can not repair while inside the vehicle.");

	new string[128];
	if(gettime() < PlayerInfo[playerid][pMechTime])
	{
		format(string, sizeof(string), "You must wait %d seconds!", PlayerInfo[playerid][pMechTime]-gettime());
		SendClientMessageEx(playerid, COLOR_GRAD1,string);
		return 1;
	}
	if(GetPVarInt(playerid, "EventToken")) {
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this while in an event.");
	}
	new giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /repair [player] [price]");

	if(PlayerInfo[playerid][pTire] > 0)
	{
		if(money < 1 || money > 10000) { SendClientMessageEx(playerid, COLOR_GREY, "   Price not lower then $1 or above $10,000!"); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    new closestcar = GetClosestCar(playerid);

	  			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 8.0))
	  			{
					if(ProxDetectorS(8.0, playerid, giveplayerid)&& IsPlayerInAnyVehicle(giveplayerid))
					{
						if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "   Can't do that!"); return 1; }
	                    if(!IsABike(closestcar) && !IsAPlane(closestcar))
						{
							new engine,lights,alarm,doors,bonnet,boot,objective;
							GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
							if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
							{
								SendClientMessageEx(playerid, COLOR_GRAD1, "The vehicle hood must be opened in order to repair it.");
								return 1;
							}
						}
						format(string, sizeof(string), "* You offered %s to fix their car for $%d .",GetPlayerNameEx(giveplayerid),money);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Car Mechanic %s wants to repair your car for $%d, (type /accept repair) to accept.",GetPlayerNameEx(playerid),money);
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						PlayerInfo[playerid][pMechTime] = gettime()+60;
						RepairOffer[giveplayerid] = playerid;
						RepairPrice[giveplayerid] = money;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "   That person is not near you / not in a car.");
					}
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "   You are not near any vehicle.");
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That person is offline.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You do not have any tires, buy one from a craftsman.");
	}
	return 1;
}

CMD:f(playerid, params[])
{
	if(gFam[playerid] == 1)
	{
		SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "You have your family chat disabled. /togfamily!");
		return 1;
	}

	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/f)amily [family chat]");

	if(IsAHitman(playerid))
	{
		format(string, sizeof(string), "** (%d) %s %s: %s **", PlayerInfo[playerid][pRank], arrGroupRanks[PlayerInfo[playerid][pMember]][PlayerInfo[playerid][pRank]], GetPlayerNameEx(playerid), params);
		SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_AZTECAS_COLOR, string);
	}
	else if(PlayerInfo[playerid][pFMember] < INVALID_FAMILY_ID)
	{
	    new fam = PlayerInfo[playerid][pFMember];
	    if(0 <= PlayerInfo[playerid][pDivision] < 5)
	    {
	        new division[GROUP_MAX_DIV_LEN];
	        format(division, sizeof(division), "%s", FamilyDivisionInfo[PlayerInfo[playerid][pFMember]][PlayerInfo[playerid][pDivision]]);
		    format(string, sizeof(string), "** (%i) %s (%s) %s: %s **", PlayerInfo[playerid][pRank], FamilyRankInfo[fam][PlayerInfo[playerid][pRank]], division, GetPlayerNameEx(playerid), params);
			SendNewFamilyMessage(fam, TEAM_AZTECAS_COLOR, string);
		}
		else
		{
		    format(string, sizeof(string), "** (%i) %s %s: %s **", PlayerInfo[playerid][pRank], FamilyRankInfo[fam][PlayerInfo[playerid][pRank]], GetPlayerNameEx(playerid), params);
			SendNewFamilyMessage(fam, TEAM_AZTECAS_COLOR, string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a part of a Family!");
	}
	return 1;
}

/*CMD:g(playerid, params[])
{

	new
		string[128],
		iGroupID = PlayerInfo[playerid][pMember],
		iRank = PlayerInfo[playerid][pRank];

	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/g)roup [group chat]");
	if (iGroupID == INVALID_GROUP_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a part of a group!");

	format(string, sizeof(string), "** (%d) %s %s: %s **", iRank, arrGroupRanks[iGroupID][iRank], GetPlayerNameEx(playerid), params);
	foreach(new i: Player) {
	    if (PlayerInfo[playerid][pMember] == iGroupID) SendClientMessageEx(i, TEAM_AZTECAS_COLOR, string);
	}

	return 1;
}*/

CMD:news(playerid, params[])
{
	if (IsAReporter(playerid))
	{
		new string[128];
		if(shutdown == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "The news system is currently shut down." );
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /news [text]");

		new newcar = GetPlayerVehicleID(playerid);
		if(IsANewsCar(newcar) || IsPlayerInRangeOfPoint(playerid,15.0,639.7627,-11.1346,1107.9656))
		{
			if(PlayerInfo[playerid][pRank] < 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You must be at least rank 1.");
			}
			else
			{
				format(string, sizeof(string), "NR %s: %s", GetPlayerNameEx(playerid), params);
				OOCNews(COLOR_NEWS,string);
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You're not in a news van or chopper or in the studio.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a News Reporter!");
	}
	return 1;
}

CMD:watchtv(playerid, params[])
{
	for(new i; i < MAX_HOUSES; i++)
	{
		if(WatchingTV[playerid] != 0 || (IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW]))
		{
			if(broadcasting == 0) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Nothings on TV!");

			new string[128];
			if(WatchingTV[playerid] == 0)
			{
				format(string, sizeof(string), "* %s starts watching TV", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Type /watchtv again to stop watching TV");
				BroadcastLastVW[playerid] = GetPlayerVirtualWorld(playerid);
				BroadcastLastInt[playerid] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, BroadcastFloats[playerid][1], BroadcastFloats[playerid][2], BroadcastFloats[playerid][3]);
				GetPlayerFacingAngle(playerid, BroadcastFloats[playerid][0]);

				WatchingTV[playerid] = 1;
				viewers++;
				UpdateSANewsBroadcast();

				TogglePlayerControllable(playerid, false);
				SetPlayerInterior(playerid, 1);
				SetPlayerVirtualWorld(playerid, 4225);
				SetPlayerPos(playerid, 639.2813,-11.8090,1111.4656);

				if(cameraangle == 0)
				{
					SetPlayerCameraPos(playerid, 635.6883,-11.1890,1108.6041);
					SetPlayerCameraLookAt(playerid, 641.3040,-12.2565,1108.1642);
				}
				else if(cameraangle == 1)
				{
					SetPlayerCameraPos(playerid, 637.9041,-8.3097,1108.9656);
					SetPlayerCameraLookAt(playerid, 640.9764,-14.7714,1107.9656);
				}
				else if(cameraangle == 2)
				{
					SetPlayerCameraPos(playerid, 638.6522,-15.6267,1108.9656);
					SetPlayerCameraLookAt(playerid, 640.7208,-9.5926,1107.2006);
				}
				else
				{
					SetPlayerCameraPos(playerid, 635.6883,-11.1890,1108.6041);
					SetPlayerCameraLookAt(playerid, 641.3040,-12.2565,1108.1642);
				}
				return 1;
			}
			else
			{
				SetPlayerPos(playerid,BroadcastFloats[playerid][1],BroadcastFloats[playerid][2],BroadcastFloats[playerid][3]);
				SetPlayerVirtualWorld(playerid, BroadcastLastVW[playerid]);
				PlayerInfo[playerid][pVW] = BroadcastLastVW[playerid];
				SetPlayerInterior(playerid, BroadcastLastInt[playerid]);
				PlayerInfo[playerid][pInt] = BroadcastLastInt[playerid];
				SetPlayerFacingAngle(playerid, BroadcastFloats[playerid][0]);
				SetCameraBehindPlayer(playerid);
				Player_StreamPrep(playerid, BroadcastFloats[playerid][1],BroadcastFloats[playerid][2],BroadcastFloats[playerid][3], FREEZE_TIME);

				WatchingTV[playerid] = 0;
				viewers--;
				UpdateSANewsBroadcast();

				format(string, sizeof(string), "* %s stops watching TV", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				return 1;
			}
		}
	}
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You must be in a house!");
	return 1;
}

CMD:cameraangle(playerid, params[])
{
	if (IsAReporter(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,10.0,631.8096,-10.9424,1107.9729))
		{
			if(broadcasting == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Not currently broadcasting!");
				return 1;
			}

			new string[128], choice[32];
			if(sscanf(params, "s[32]", choice))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cameraangle [location]");
				SendClientMessageEx(playerid, COLOR_GRAD1, "Locations: Center,Left,Right");
				return 1;
			}

			if(strcmp(choice,"center",true) == 0)
			{
				format(string, sizeof(string), "** %s changes the camera angle to the center **", GetPlayerNameEx(playerid));
				SendGroupMessage(4, RADIO, string);
				cameraangle = 0;
				DestroyDynamic3DTextLabel(camera);
				camera = CreateDynamic3DTextLabel("*The Camera*",COLOR_RED,635.6883,-11.1890,1108.6041,13.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
			}
			else if(strcmp(choice,"left",true) == 0)
			{
				format(string, sizeof(string), "** %s changes the camera angle to the left **", GetPlayerNameEx(playerid));
				SendGroupMessage(4, RADIO, string);
				cameraangle = 1;
				DestroyDynamic3DTextLabel(camera);
				camera = CreateDynamic3DTextLabel("*The Camera*",COLOR_RED,637.9041,-8.3097,1107.9656,13.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
			}
			else if(strcmp(choice,"right",true) == 0)
			{
				format(string, sizeof(string), "** %s changes the camera angle to the right **", GetPlayerNameEx(playerid));
				SendGroupMessage(4, RADIO, string);
				cameraangle = 2;
				DestroyDynamic3DTextLabel(camera);
				camera = CreateDynamic3DTextLabel("*The Camera*",COLOR_RED,638.6522,-15.6267,1107.9656,13.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Unrecognized camera angle");
				return 1;
			}
			//foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(WatchingTV[i] == 1)
					{
						if(cameraangle == 0)
						{
							SetPlayerCameraPos(i, 635.6883,-11.1890,1108.6041);
							SetPlayerCameraLookAt(i, 641.3040,-12.2565,1108.1642);
						}
						else if(cameraangle == 1)
						{
							SetPlayerCameraPos(i, 637.9041,-8.3097,1108.9656);
							SetPlayerCameraLookAt(i, 640.9764,-14.7714,1107.9656);
						}
						else if(cameraangle == 2)
						{
							SetPlayerCameraPos(i, 638.6522,-15.6267,1108.9656);
							SetPlayerCameraLookAt(i, 640.7208,-9.5926,1107.2006);
						}
						else
						{
							SetPlayerCameraPos(i, 635.6883,-11.1890,1108.6041);
							SetPlayerCameraLookAt(i, 641.3040,-12.2565,1108.1642);
						}
					}
				}	
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Not in the studio!");
		}
	}
	return 1;
}

CMD:stopnews(playerid, params[])
{
	if(IsAReporter(playerid) && (PlayerInfo[playerid][pRank] >= 5 || arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] == 4))
	{
	    if(shutdown == 0)
	    {
	        shutdown = 1;
	        SendClientMessageEx(playerid, COLOR_WHITE, "You have just shutdown the whole news system and are ending anything in progres..." );
	        if(broadcasting == 1)
	        {
	            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Broadcasting has just been shutdown..");
				broadcasting = 0;
				UpdateSANewsBroadcast();
				DestroyDynamic3DTextLabel(camera);
	            //foreach(new i: Player)
				for(new i = 0; i < MAX_PLAYERS; ++i)
				{
					if(IsPlayerConnected(i))
					{
						if(WatchingTV[i] == 1)
						{
							SetPlayerPos(i,BroadcastFloats[i][1],BroadcastFloats[i][2],BroadcastFloats[i][3]);
							SetPlayerVirtualWorld(i, BroadcastLastVW[i]);
							PlayerInfo[i][pInt] = BroadcastLastVW[i];
							SetPlayerInterior(i, BroadcastLastInt[i]);
							PlayerInfo[i][pInt] = BroadcastLastInt[i];
							SetPlayerFacingAngle(i, BroadcastFloats[i][0]);
							SetCameraBehindPlayer(i);
							WatchingTV[i] = 0;
							viewers = 0;
							UpdateSANewsBroadcast();
							Player_StreamPrep(i, BroadcastFloats[i][1],BroadcastFloats[i][2],BroadcastFloats[i][3], FREEZE_TIME);
						}
					}	
				}
	        }
	        //foreach(new i: Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if(TalkingLive[i] != INVALID_PLAYER_ID)
					{
						SendClientMessageEx(i, COLOR_LIGHTBLUE, "* Live conversation ended.");
						SendClientMessageEx(TalkingLive[i], COLOR_LIGHTBLUE, "* Live conversation ended.");
						TogglePlayerControllable(i, 1);
						TogglePlayerControllable(TalkingLive[i], 1);
						TalkingLive[TalkingLive[i]] = INVALID_PLAYER_ID;
						TalkingLive[i] = INVALID_PLAYER_ID;
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Live has just been shutdown..");
						return 1;
					}
				}	
	        }
	    }
	    else
	    {
	        shutdown = 0;
	        SendClientMessageEx(playerid, COLOR_WHITE, "You have just turned on the news system. " );
	    }
	}
	return 1;
}

CMD:liveban(playerid, params[])
{
	if (IsAReporter(playerid))
	{
	    new giveplayerid,
	        string[128];

	    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /liveban [player]");
	    if(PlayerInfo[giveplayerid][pLiveBanned] == 0)
	    {
	        PlayerInfo[giveplayerid][pLiveBanned] = 1;
	        format(string, sizeof(string), "%s has interview banned %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	        SendGroupMessage(4, RADIO, string);
	        return 1;
	    }
	    else
	    {
	        PlayerInfo[giveplayerid][pLiveBanned] = 0;
	        format(string, sizeof(string), "%s has unbanned %s from interviews", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	        SendGroupMessage(4, RADIO, string);
	        return 1;
	    }
	}
	return 1;
}

CMD:broadcast(playerid, params[])
{
	if (IsAReporter(playerid))
	{
	    if(shutdown == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "The news system is currently shut down." );
		if(IsPlayerInRangeOfPoint(playerid,15.0,631.8096,-10.9424,1107.9729))
		{
			new string[128];
			if(broadcasting == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Now broadcasting LIVE");
				broadcasting = 1;
				cameraangle = 0;
				UpdateSANewsBroadcast();
				format(string, sizeof(string), "%s will now broadcast LIVE from the studio! /watchtv to tune in!", GetPlayerNameEx(playerid));
				OOCNews(COLOR_NEWS,string);
				camera = CreateDynamic3DTextLabel("*The Camera*",COLOR_RED,635.6883,-11.1890,1108.6041,13.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* No longer broadcasting");
				broadcasting = 0;
				UpdateSANewsBroadcast();
				DestroyDynamic3DTextLabel(camera);
				//foreach(new i: Player)
				for(new i = 0; i < MAX_PLAYERS; ++i)
				{
					if(IsPlayerConnected(i))
					{
						if(WatchingTV[i] == 1)
						{
							SetPlayerPos(i,BroadcastFloats[i][1],BroadcastFloats[i][2],BroadcastFloats[i][3]);
							SetPlayerVirtualWorld(i, BroadcastLastVW[i]);
							PlayerInfo[i][pInt] = BroadcastLastVW[i];
							SetPlayerInterior(i, BroadcastLastInt[i]);
							PlayerInfo[i][pInt] = BroadcastLastInt[i];
							SetPlayerFacingAngle(i, BroadcastFloats[i][0]);
							SetCameraBehindPlayer(i);
							WatchingTV[i] = 0;
							viewers = 0;
							UpdateSANewsBroadcast();
							Player_StreamPrep(i, BroadcastFloats[i][1],BroadcastFloats[i][2],BroadcastFloats[i][3], FREEZE_TIME);
						}
					}	
				}
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You aren't in the studio!");
		}
	}
	return 1;
}

CMD:live(playerid, params[])
{
	if(IsAReporter(playerid) && PlayerInfo[playerid][pRank] > 0)
	{
	    if(shutdown == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "The news system is currently shut down." );
		if(TalkingLive[playerid] != INVALID_PLAYER_ID)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Live conversation ended.");
			SendClientMessageEx(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Live conversation ended.");
			TogglePlayerControllable(playerid, 1);
			TogglePlayerControllable(TalkingLive[playerid], 1);
			DeletePVar(playerid, "IsLive");
			DeletePVar(TalkingLive[playerid], "IsLive");
			TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
			TalkingLive[playerid] = INVALID_PLAYER_ID;
			return 1;
		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /live [player]");

		if (IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
			    if(PlayerInfo[giveplayerid][pLiveBanned] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "That person is interview banned.");
				if(PlayerCuffed[giveplayerid] >= 1 || PlayerCuffed[playerid] >= 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "You are unable to do this right now.");
				}
				else
				{
					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot talk live with yourself!"); return 1; }
					format(string, sizeof(string), "* You offered %s to have a live conversation.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s offered you to have a live conversation, type /accept live to accept.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					LiveOffer[giveplayerid] = playerid;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
				return 1;
			}

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a News Reporter!");
	}
	return 1;
}

CMD:usepot(playerid, params[])
{
	if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot do this while being in the Hunger Games Event!");
	#if defined zombiemode
	if(zombieevent == 1 && GetPVarType(playerid, "pIsZombie")) return SendClientMessageEx(playerid, COLOR_GREY, "Zombies can't use this.");
	#endif
	if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen") || PlayerInfo[playerid][pHospital] || PlayerInfo[playerid][pJailTime] > 0) {
   		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
	}
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
		return 1;
	}
	if(PlayerBoxing[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use drugs while you're fighting.");
		return 1;
	}
	if(UsedWeed[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You must wait 5 seconds before using more drugs.");
		return 1;
	}
	new string[128], Float:health, healthint, storageid;

	/*if(sscanf(params, "d", storageid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /usepot [storageid]");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	if(storageid < 0 || storageid > 1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /usepot [storageid]");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	// Find the storageid of the storagedevice.
	if(storageid == 1) {
		new bool:itemEquipped = false;
		for(new i = 0; i < 3; i++)
		{
			if(StorageInfo[playerid][i][sAttached] == 1) {
				storageid = i+1;
				itemEquipped = true;
			}
		}
		if(itemEquipped == false) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a storage device equipped!");
	}*/

	if(storageid == 0 && PlayerInfo[playerid][pPot] > 1 || (storageid > 0) && StorageInfo[playerid][storageid-1][sPot] > 1)
	{
		GetPlayerHealth(playerid, health);
		healthint = floatround(health, floatround_round);
		if(healthint >= 100 )
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You already have full health.");
			return 1;
		}
		if(PlayerStoned[playerid] > 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are too stoned to use pot.");
		PlayerStoned[playerid] += 1;
		if(PlayerStoned[playerid] == 3)
		{
			GameTextForPlayer(playerid, "~w~you are ~b~stoned", 5000, 3);
		}
		if(healthint > 80)
		{
			SetPlayerHealth(playerid, 100);
		}
		else
		{
			SetPlayerHealth(playerid, health + 20.0);
		}
		SendClientMessageEx(playerid, COLOR_GREY, " You used 2 grams of pot!");
		format(string, sizeof(string), "* %s has used some pot.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		if(storageid == 0) {
			PlayerInfo[playerid][pPot] -= 2;
		} else {
			StorageInfo[playerid][storageid-1][sPot] -= 2;
		}

		UsedWeed[playerid] = 1;
		SetTimerEx("ClearDrugs", 5000, false, "d", playerid);
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		switch(GetPVarInt(playerid, "STD")) {
			case 1:
			{
				DeletePVar(playerid, "STD");
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are no longer infected with a STI anymore because of the Drugs!");
			}
			case 2:
			{
				SetPVarInt(playerid, "STD", 1);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You reduced the STI to chlamydia because of the drugs!");
			}
			case 3:
			{
				SetPVarInt(playerid, "STD", 2);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You reduced the STI to gonorrhea because of the drugs!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You don't have any pot left!");
	}
	return 1;
}

CMD:usecrack(playerid, params[])
{
	if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot do this while being in the Hunger Games Event!");
    #if defined zombiemode
	if(zombieevent == 1 && GetPVarType(playerid, "pIsZombie")) return SendClientMessageEx(playerid, COLOR_GREY, "Zombies can't use this.");
	#endif
	if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen") || PlayerInfo[playerid][pHospital] || PlayerInfo[playerid][pJailTime] > 0) {
   		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
	}
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
		return 1;
	}
	if(PlayerBoxing[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use drugs while you're fighting.");
		return 1;
	}
	if(UsedCrack[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You must wait 5 seconds before using more drugs.");
		return 1;
	}
	new Float:armour;
	GetPlayerArmour(playerid, armour);
	if(armour >= 100)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You already have full armor.");
		return 1;
	}

	new storageid;
	/*if(sscanf(params, "d", storageid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /usecrack [storageid]");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	if(storageid < 0 || storageid > 1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /usecrack [storageid]");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	// Find the storageid of the storagedevice.
	if(storageid == 1) {
		new bool:itemEquipped = false;
		for(new i = 0; i < 3; i++)
		{
			if(StorageInfo[playerid][i][sAttached] == 1) {
				storageid = i+1;
				itemEquipped = true;
			}
		}
		if(itemEquipped == false) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a storage device equipped!");
	}*/

	if(storageid == 0 && PlayerInfo[playerid][pCrack] > 1 || (storageid > 0) && StorageInfo[playerid][storageid-1][sCrack] > 1)
	{
		if(PlayerStoned[playerid] > 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are too stoned to use crack.");
		PlayerStoned[playerid] += 1;
		if(PlayerStoned[playerid] == 3)
		{
			GameTextForPlayer(playerid, "~w~you are ~b~stoned", 5000, 3);
		}
		new string[128], Float:PlayersArmour;
		GetPlayerArmour(playerid, PlayersArmour);
		SendClientMessageEx(playerid, COLOR_GREY, " You used 2 grams of crack!");
		format(string, sizeof(string), "* %s has used some crack.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		if(storageid == 0) {
			PlayerInfo[playerid][pCrack] -= 2;
		} else {
			StorageInfo[playerid][storageid-1][sCrack] -= 2;
		}
		if(CurrentArmor[playerid] < PlayersArmour && GetPVarInt(playerid, "IsInArena") == 0)
	    {
	    	format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) may possibly be armor hacking. (Recorded: %f - Current: %f) (2)", GetPlayerNameEx(playerid), playerid, CurrentArmor[playerid], PlayersArmour);
			ABroadCast( COLOR_YELLOW, string, 2 );
			format(string, sizeof(string), "%s (ID %d) may possibly be armor hacking. (Recorded: %f - Current: %f) (2)", GetPlayerNameEx(playerid), playerid, CurrentArmor[playerid], PlayersArmour);
			Log("logs/hack.log", string);
	        return 1;
	    }
		UsedCrack[playerid] = 1;
		SetTimerEx("ClearDrugs", 5000, false, "d", playerid);
		if(PlayersArmour > 90)
		{
			SetPlayerArmor(playerid, 100);
		}
		else
		{
			SetPlayerArmor(playerid, PlayersArmour + 10.0);
		}
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		switch(GetPVarInt(playerid, "STD")) {
			case 1:
			{
				DeletePVar(playerid, "STD");
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are no longer infected with an STI anymore because of the drugs!");
			}
			case 2:
			{
				SetPVarInt(playerid, "STD", 1);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You reduced the STI to chlamydia because of the drugs!");
			}
			case 3:
			{
				SetPVarInt(playerid, "STD", 2);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You reduced the STI to gonorrhea because of the drugs!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You don't have any crack left!");
	}
	return 1;
}

CMD:healme(playerid, params[])
{
	if (IsPlayerInRangeOfPoint(playerid, 2.0, 1179.4012451172,-1331.5632324219,2423.0461425781))//2103.3252,2824.2102,-16.1672
	{
		if(GetPVarType(playerid, "STD"))
		{
			DeletePVar(playerid, "STD");
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are no longer infected with a STD anymore because of the Hospital's help!");
			GivePlayerCash(playerid, -1000);
			SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Doc: Your medical bill contained $1000,-. Have a nice day!");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You Don't have a STD to heal!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not at a Hospital!");
	}
	return 1;
}

CMD:eject(playerid, params[])
{
	new State;
	if(IsPlayerInAnyVehicle(playerid))
	{
		State=GetPlayerState(playerid);
		if(State!=PLAYER_STATE_DRIVER)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"   You can only eject people as the driver!");
			return 1;
		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /eject [player]");

		new test;
		test = GetPlayerVehicleID(playerid);
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Eject yourself!"); return 1; }
				if(IsPlayerInVehicle(giveplayerid,test))
				{
					if(GetPVarInt(giveplayerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't eject patients!");
					format(string, sizeof(string), "* You have thrown %s out of the car.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You have been thrown out the car by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					RemovePlayerFromVehicle(giveplayerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(giveplayerid, slx, sly, slz);
					SetPlayerPos(giveplayerid, slx, sly+3, slz+1);
					format(string, sizeof(string), "* %s has ejected %s from the vehicle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "   That person is not in your Car!");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, " Invalid ID/Name!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You need to be in a Vehicle to use this!");
	}
	return 1;
}

CMD:sex(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 3 || PlayerInfo[playerid][pJob2] == 3 || PlayerInfo[playerid][pJob3] == 3)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You can only have Sex in a Car!");
			return 1;
		}
		new Car = GetPlayerVehicleID(playerid);

		new string[128], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sex [player] [price]");

		if(money < 1 || money > 10000) { SendClientMessageEx(playerid, COLOR_GREY, "   Price not lower then $1 or above $10,000!"); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot have Sex with yourself!"); return 1; }
					if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(giveplayerid, Car))
					{
						if(gettime() >= PlayerInfo[playerid][pSexTime])
						{
							format(string, sizeof(string), "* You offered %s to have sex with you, for $%s.", GetPlayerNameEx(giveplayerid), number_format(money));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Whore %s has offered you to have sex with them, for $%s (type /accept sex) to accept.", GetPlayerNameEx(playerid), number_format(money));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							SexOffer[giveplayerid] = playerid;
							SexPrice[giveplayerid] = money;
							PlayerInfo[playerid][pSexTime] = gettime()+60;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_GRAD2, " You have already had sex, wait for your reload time to finish!");
							return 1;
						}
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "   You or the other person must be in a Car together!");
						return 1;
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Whore!");
	}
	return 1;
}

CMD:wanted(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pJob] == 2 || PlayerInfo[playerid][pJob2] == 2 || PlayerInfo[playerid][pJob3] == 2)
	{
		new string[128], x;

		SendClientMessageEx(playerid, COLOR_GREEN, "Current Wanted Suspects:");
		//foreach(new i: Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pWantedLevel] >= 1)
				{
					format(string, sizeof(string), "%s%s: %d", string,GetPlayerNameEx(i),PlayerInfo[i][pWantedLevel]);
					x++;
					if(x > 3) {
						SendClientMessageEx(playerid, COLOR_YELLOW, string);
						x = 0;
						format(string, sizeof(string), " ");
					} else {
						format(string, sizeof(string), "%s, ", string);
					}
				}
			}	
		}
		if(x <= 3 && x > 0)
		{
			string[strlen(string)-2] = '.';
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a lawyer or a law enforcement officer!");
	}
	return 1;
}

CMD:drop(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /drop [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Weapons, Pot, Crack, Materials, Packages, Crates, Radio, Pizza, Seeds, Rawopium, Heroin, Syringes, Backpack");
		return 1;
	}
    else if(strcmp(choice,"seeds",true) == 0)
	{
		if(PlayerInfo[playerid][pOpiumSeeds] > 0 || PlayerInfo[playerid][pWSeeds] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "You have dropped %d seeds.", PlayerInfo[playerid][pOpiumSeeds]+PlayerInfo[playerid][pWSeeds]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pOpiumSeeds] = 0, PlayerInfo[playerid][pWSeeds] = 0;
			format(string, sizeof(string), "* %s has thrown away their seeds.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any seeds to throw away!");
		}
	}
	else if(strcmp(choice,"backpack",true) == 0)
	{
		if(PlayerInfo[playerid][pBackpack] > 0)
		{
			ShowPlayerDialog(playerid, DIALOG_BDROP, DIALOG_STYLE_MSGBOX, "Drop Backpack Confirmation", "{FFFFFF}Are you sure you would like to drop your backpack?\n{FF8000}Note{FFFFFF}: This will {FF0000}permanently{FFFFFF} remove the backpack and all of its contents!", "Yes", "No");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have a backpack!");
		}
	}
    else if(strcmp(choice,"rawopium",true) == 0)
	{
		if(PlayerInfo[playerid][pRawOpium] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "You have dropped %d grams of raw opium.", PlayerInfo[playerid][pRawOpium]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pRawOpium] = 0;
			format(string, sizeof(string), "* %s has thrown away their raw opium.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any raw opium to throw away!");
		}
	}
	else if(strcmp(choice,"heroin",true) == 0)
	{
		if(PlayerInfo[playerid][pHeroin] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "You have dropped %d grams of heroin.", PlayerInfo[playerid][pHeroin]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pHeroin] = 0;
			format(string, sizeof(string), "* %s has thrown away their heroin.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any heroin to throw away!");
		}
	}
	else if(strcmp(choice,"syringes",true) == 0)
	{
		if(PlayerInfo[playerid][pSyringes] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "You have dropped %d syringes.", PlayerInfo[playerid][pSyringes]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pSyringes] = 0;
			format(string, sizeof(string), "* %s has thrown away their syringes.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any syringes to throw away!");
		}
	}

	else if(strcmp(choice,"materials",true) == 0)
	{
		if(PlayerInfo[playerid][pMats] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "You have dropped %d materials.", PlayerInfo[playerid][pMats]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s has thrown away their materials.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pMats] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any materials to throw away!");
		}
	}
	else if(strcmp(choice,"radio",true) == 0)
	{
		if(PlayerInfo[playerid][pRadio] != 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their portable radio.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pRadio] = 0;
			PlayerInfo[playerid][pRadioFreq] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying a portable radio to throw away!");
		}
	}
	else if(strcmp(choice,"weapons",true) == 0)
	{
		if(GetPVarInt(playerid, "IsInArena") >= 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
			return 1;
		}
		if(GetPVarInt( playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
			return 1;
		}
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		ResetPlayerWeaponsEx(playerid);
		format(string, sizeof(string), "* %s has thrown away their Weapons.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(strcmp(choice,"pot",true) == 0)
	{
		if(PlayerInfo[playerid][pPot] > 0)
		{
			format(string, sizeof(string), "You have dropped %d grams of pot.", PlayerInfo[playerid][pPot]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their pot.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pPot] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any pot to throw away!");
		}
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if(PlayerInfo[playerid][pCrack] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "You have dropped %d grams of crack.", PlayerInfo[playerid][pCrack]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s has thrown away their crack.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pCrack] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any crack to throw away!");
		}
	}
	else if(strcmp(choice,"packages",true) == 0)
	{
		if(GetPVarInt(playerid, "Packages") > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their material packages.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "Packages");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any material packages to throw away!");
		}
	}
	else if(strcmp(choice,"crates",true) == 0)
	{
		if(PlayerInfo[playerid][pCrates] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their drug crates.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pCrates] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any drug crates to throw away!");
		}
	}
	else if(strcmp(choice,"pizza",true) == 0)
	{
		if(GetPVarInt(playerid, "Pizza") > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their pizza delivery.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            DeletePVar(playerid, "Pizza");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not delivering any pizzas!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /drop [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Weapons, Pot, Crack, Materials, Packages, Crates, Radio");
	}
	return 1;
}

CMD:show(playerid, params[])
{
	new string[128], giveplayerid, choice[32];
	if(sscanf(params, "us[32]", giveplayerid, choice))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /show [player] [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack, Heroin, Materials");
		return 1;
	}

	if(giveplayerid == playerid)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You can not show this to yourself!");
		return 1;
	}

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if (!ProxDetectorS(5.0, playerid, giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
				return 1;
			}

			if (strcmp(choice, "materials", true) == 0)
			{
			    new amount = PlayerInfo[playerid][pMats];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "You do not have any materials!");
					return 1;
			    }
				format(string, sizeof(string), "%s has shown you their %d Materials.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "You have shown %s your %d Materials.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "* %s has shown %s some Materials.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			if (strcmp(choice, "pot", true) == 0)
			{
			    new amount = PlayerInfo[playerid][pPot];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "You do not have any pot!");
					return 1;
			    }
				format(string, sizeof(string), "%s has shown you their %d grams of pot.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "You have shown %s your %d grams of pot.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "* %s has shown %s some Pot.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			if (strcmp(choice, "crack", true) == 0)
			{
			    new amount = PlayerInfo[playerid][pCrack];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "You do not have any crack!");
					return 1;
			    }
				format(string, sizeof(string), "%s has shown you their %d grams of crack.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "You have shown %s your %d grams of crack.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "* %s has shown %s some Crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
   			if (strcmp(choice, "heroin", true) == 0)
			{
			    new amount = PlayerInfo[playerid][pHeroin];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "You do not have any heroin!");
					return 1;
			    }
				format(string, sizeof(string), "%s has shown you their %d milligrams of heroin.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "You have shown %s your %d milligrams of heroin.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "* %s has shown %s some heroin.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
		}
	}
	return 1;
}

/*CMD:givestorage(playerid, params[])
{
	new string[128], giveplayerid, choice[32];
	if(sscanf(params, "us[32]", giveplayerid, choice))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givestorage [player] [storage item]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Bag, Backpack, Briefcase");
		return 1;
	}

	if(IsPlayerConnected(giveplayerid))
	{
		if(!ProxDetectorS(5.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You can not use this command on yourself!");

		if (strcmp(choice, "bag", true) == 0)
		{
			if(StorageInfo[playerid][0][sAttached] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You must unequip it first before giving it away!");

			format(string, sizeof(string), "You have recieved a Bag from %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
			StorageInfo[giveplayerid][0][sStorage] = 1;
			StorageInfo[playerid][0][sStorage] = 0;
			new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
			format(string, sizeof(string), "%s(IP:%s) has given %s (IP:%s) a Bag.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);
			if(PlayerInfo[playerid][pAdmin] >= 2)
			{
				format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) a Bag.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/admingive.log", string);
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) a Bag.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				ABroadCast(COLOR_YELLOW, string, 2);
			}
			format(string, sizeof(string), "You have given %s a Bag.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "* %s has given %s a Bag.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		if (strcmp(choice, "backpack", true) == 0)
		{
			if(StorageInfo[playerid][1][sAttached] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You must unequip it first before giving it away!");

			format(string, sizeof(string), "You have recieved a Backpack from %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
			StorageInfo[giveplayerid][1][sStorage] = 1;
			StorageInfo[playerid][1][sStorage] = 0;
			new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
			format(string, sizeof(string), "%s(IP:%s) has given %s (IP:%s) a Backpack.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);
			if(PlayerInfo[playerid][pAdmin] >= 2)
			{
				format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) a Backpack.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/admingive.log", string);
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) a Backpack.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				ABroadCast(COLOR_YELLOW, string, 2);
			}
			format(string, sizeof(string), "You have given %s a Backpack.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "* %s has given %s a Backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		if (strcmp(choice, "briefcase", true) == 0)
		{
			if(StorageInfo[playerid][2][sAttached] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You must unequip it first before giving it away!");

			format(string, sizeof(string), "You have recieved a Briefcase from %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
			StorageInfo[giveplayerid][2][sStorage] = 1;
			StorageInfo[playerid][2][sStorage] = 0;
			new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
			format(string, sizeof(string), "%s(IP:%s) has given %s (IP:%s) a Briefcase.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);
			if(PlayerInfo[playerid][pAdmin] >= 2)
			{
				format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) a Briefcase.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/admingive.log", string);
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) a Briefcase.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				ABroadCast(COLOR_YELLOW, string, 2);
			}
			format(string, sizeof(string), "You have given %s a Briefcase.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "* %s has given %s a Briefcase.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
	}
	return 1;
}*/

CMD:give(playerid, params[])
{
	new string[128], giveplayerid, choice[32], storageid, amount;

	if(sscanf(params, "us[32]d", giveplayerid, choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /give [player] [name] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack, Materials, Firework, GoldTokens, Heroin, Rawopium, Syringes, Opiumseeds");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Sprunk, Pbtokens");
		return 1;
	}
	/*if(sscanf(params, "us[32]dd", giveplayerid, choice, storageid, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /give [player] [name] [storageid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack, Materials, Firework");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	if(storageid < 0 || storageid > 1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /give [player] [name] [storageid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack, Materials, Firework");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	// Find the storageid of the storagedevice.
	if(storageid == 1) {
		new bool:itemEquipped = false;
		for(new i = 0; i < 3; i++)
		{
			if(StorageInfo[playerid][i][sAttached] == 1) {
				storageid = i+1;
				itemEquipped = true;
			}
		}
		if(itemEquipped == false) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a storage device equipped!");
	}*/

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have that much!");
			if(!ProxDetectorS(5.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You can not use this command on yourself!");

			if (strcmp(choice, "materials", true) == 0)
			{
				TransferStorage(giveplayerid, -1, playerid, storageid, 4, amount, -1, -1);
			}
			if(strcmp(choice, "sprunk", true) == 0)
			{
				if(PlayerInfo[playerid][pSprunk] >= amount)
				{
					format(string, sizeof(string), "You have received %d Sprunk Can(s) from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pSprunk] += amount;
					PlayerInfo[playerid][pSprunk] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s (IP:%s) %s Sprunk Can(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, number_format(amount));
					Log("logs/pay.log", string);
					format(string, sizeof(string), "You have given %s %d Sprunk Can(s).", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s has given %s some Sprunk Can(s).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else return SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have that many.");
			}		
			if(strcmp(choice, "pbtokens", true) == 0)
			{
				if(PlayerInfo[playerid][pPaintTokens] >= amount)
				{
					format(string, sizeof(string), "You have received %d Paintball Token(s) from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pPaintTokens] += amount;
					PlayerInfo[playerid][pPaintTokens] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s (IP:%s) %s Paintball Token(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, number_format(amount));
					Log("logs/pay.log", string);
					format(string, sizeof(string), "You have given %s %d Paintball Token(s).", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s has given %s some Paintball Token(s).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else return SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have that many.");
			}
			if (strcmp(choice, "goldtokens", true) == 0)
			{
				if(PlayerInfo[playerid][pGoldBoxTokens] >= amount)
				{
					format(string, sizeof(string), "You have recieved %d Gold Box Token(s) from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pGoldBoxTokens] += amount;
					PlayerInfo[playerid][pGoldBoxTokens] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s (IP:%s) %s Gold Box Token(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, number_format(amount));
					Log("logs/pay.log", string);
					if(PlayerInfo[playerid][pAdmin] >= 2)
					{

						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d Gold Box Token(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/admingive.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) %d Gold Box Token(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					format(string, sizeof(string), "You have given %s %d Gold Box Token(s).", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s has given %s some Gold Box Token(s).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many!");
					return 1;
				}
			}
			if (strcmp(choice, "firework", true) == 0)
			{
				if(PlayerInfo[playerid][pFirework] >= amount)
				{
					format(string, sizeof(string), "You have recieved %d firework(s) from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pFirework] += amount;
					PlayerInfo[playerid][pFirework] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s (IP:%s) %s firework(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, number_format(amount));
					Log("logs/pay.log", string);
					if(PlayerInfo[playerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d firework(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/admingive.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) %d firework(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					format(string, sizeof(string), "You have given %s %d firework(s).", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s has given %s some firework(s).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many!");
					return 1;
				}
			}
			if (strcmp(choice, "opiumseeds", true) == 0)
			{
				if(PlayerInfo[playerid][pOpiumSeeds] >= amount)
				{
					format(string, sizeof(string), "You have recieved %d opium seed(s) from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pOpiumSeeds] += amount;
					PlayerInfo[playerid][pOpiumSeeds] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s (IP:%s) %s opium seed(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, number_format(amount));
					Log("logs/pay.log", string);
					if(PlayerInfo[playerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d opium seed(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/admingive.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) %d opium seed(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					format(string, sizeof(string), "You have given %s %d opium seed(s).", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s has given %s some opium seed(s).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many!");
					return 1;
				}
			}
			if (strcmp(choice, "syringes", true) == 0)
			{
				if(PlayerInfo[playerid][pSyringes] >= amount)
				{
					format(string, sizeof(string), "You have recieved %d syringe(s) from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pSyringes] += amount;
					PlayerInfo[playerid][pSyringes] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s (IP:%s) %s syringe(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, number_format(amount));
					Log("logs/pay.log", string);
					if(PlayerInfo[playerid][pAdmin] >= 2)
					{

						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d syringe(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/admingive.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) %d syringe(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					format(string, sizeof(string), "You have given %s %d syringe(s).", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s has given %s some syringe(s).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many!");
					return 1;
				}
			}
			if (strcmp(choice, "heroin", true) == 0)
			{
				if(PlayerInfo[playerid][pHeroin] >= amount)
				{
					format(string, sizeof(string), "You have recieved %d milligram(s) of heroin from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pHeroin] += amount;
					PlayerInfo[playerid][pHeroin] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s (IP:%s) %s milligram(s) of heroin.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, number_format(amount));
					Log("logs/pay.log", string);
					if(PlayerInfo[playerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d milligram(s) of heroin.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/admingive.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) %d milligram(s) of heroin.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					format(string, sizeof(string), "You have given %s %d milligram(s) of heroin.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s has given %s some milligram(s) of heroin.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many!");
					return 1;
				}
			}
			if (strcmp(choice, "rawopium", true) == 0)
			{
				if(PlayerInfo[playerid][pRawOpium] >= amount)
				{
					format(string, sizeof(string), "You have recieved %d milligram(s) of raw opium from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pRawOpium] += amount;
					PlayerInfo[playerid][pRawOpium] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s (IP:%s) %s milligram(s) of raw opium.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, number_format(amount));
					Log("logs/pay.log", string);
					if(PlayerInfo[playerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d milligram(s) of raw opium.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/admingive.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) %d milligram(s) of raw opium.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					format(string, sizeof(string), "You have given %s %d milligram(s) of raw opium.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s has given %s some milligram(s) of raw opium.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many!");
					return 1;
				}
			}
			if (strcmp(choice, "pot", true) == 0)
			{
				TransferStorage(giveplayerid, -1, playerid, storageid, 2, amount, -1, -1);
			}
			if (strcmp(choice, "crack", true) == 0)
			{
				TransferStorage(giveplayerid, -1, playerid, storageid, 3, amount, -1, -1);
			}
		}
	}
	return 1;
}

CMD:selltreasure(playerid, params[])
{
	new choice[32], amount;
    if(sscanf(params, "s[32]d", choice, amount))
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /selltreasure [name] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: junkmetal ($150), newcoin ($50), oldcoin ($100), brokenwatch ($5), oldkey ($20), goldwatch ($50000)");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: goldnugget ($100000), silvernugget ($25000), treasurechest ($1000000)");
		return 1;
	}
	else if(!IsPlayerInRangeOfPoint(playerid, 3 , 164.9517, -1779.5931, 4.3000)) {
	    return SendClientMessageEx(playerid, COLOR_GREY, "You are not at a treasure sell point.");
	}
	else if(amount < 0) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You can't sell negative of an item.");
	}
	new szMessage[128];
	if(strcmp(choice, "junkmetal", true) == 0) {
	    if(amount <= GetPVarInt(playerid, "junkmetal") && amount > 0) {
	        format(szMessage, 128, "You have sold %d junk metals for $%d.", amount, amount*150);
	        SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	        GivePlayerCash(playerid, amount*150);
	        SetPVarInt(playerid, "junkmetal", GetPVarInt(playerid, "junkmetal")-amount);
	        SaveTreasureInventory(playerid);
	    }
	    else {
	        SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough of that item to sell.");
	    }
	}
	else if(strcmp(choice, "newcoin", true) == 0) {
	    if(amount <= GetPVarInt(playerid, "newcoin") && amount > 0) {
	        format(szMessage, 128, "You have sold %d new coins for $%d.", amount, amount*50);
	        SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	        GivePlayerCash(playerid, amount*50);
	        SetPVarInt(playerid, "newcoin", GetPVarInt(playerid, "newcoin")-amount);
	        SaveTreasureInventory(playerid);
	    }
	    else {
	        SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough of that item to sell.");
	    }
	}
	else if(strcmp(choice, "oldcoin", true) == 0) {
	    if(amount <= GetPVarInt(playerid, "oldcoin") && amount > 0) {
	        format(szMessage, 128, "You have sold %d old coins for $%d.", amount, amount*100);
	        SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	        GivePlayerCash(playerid, amount*100);
	        SetPVarInt(playerid, "oldcoin", GetPVarInt(playerid, "oldcoin")-amount);
	        SaveTreasureInventory(playerid);
	    }
	    else {
	        SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough of that item to sell.");
	    }
	}
	else if(strcmp(choice, "brokenwatch", true) == 0) {
	    if(amount <= GetPVarInt(playerid, "brokenwatch") && amount > 0) {
	        format(szMessage, 128, "You have sold %d broken watchs for $%d.", amount, amount*5);
	        SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	        GivePlayerCash(playerid, amount*5);
	        SetPVarInt(playerid, "brokenwatch", GetPVarInt(playerid, "brokenwatch")-amount);
	        SaveTreasureInventory(playerid);
	    }
	    else {
	        SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough of that item to sell.");
	    }
	}
	else if(strcmp(choice, "oldkey", true) == 0) {
	    if(amount <= GetPVarInt(playerid, "oldkey") && amount > 0) {
	        format(szMessage, 128, "You have sold %d old keys for $%d.", amount, amount*20);
	        SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	        GivePlayerCash(playerid, amount*20);
	        SetPVarInt(playerid, "oldkey", GetPVarInt(playerid, "oldkey")-amount);
	        SaveTreasureInventory(playerid);
	    }
	    else {
	        SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough of that item to sell.");
	    }
	}
	else if(strcmp(choice, "goldwatch", true) == 0) {
	    if(amount <= GetPVarInt(playerid, "goldwatch") && amount > 0) {
	        format(szMessage, 128, "You have sold %d gold watchs for $%d.", amount, amount*50000);
	        SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	        GivePlayerCash(playerid, amount*50000);
	        SetPVarInt(playerid, "goldwatch", GetPVarInt(playerid, "goldwatch")-amount);
	        SaveTreasureInventory(playerid);
	    }
	    else {
	        SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough of that item to sell.");
	    }
	}
	else if(strcmp(choice, "goldnugget", true) == 0) {
	    if(amount <= GetPVarInt(playerid, "goldnugget") && amount > 0) {
	        format(szMessage, 128, "You have sold %d gold nuggets for $%d.", amount, amount*100000);
	        SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	        GivePlayerCash(playerid, amount*100000);
	        SetPVarInt(playerid, "goldnugget", GetPVarInt(playerid, "goldnugget")-amount);
	        SaveTreasureInventory(playerid);
	    }
	    else {
	        SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough of that item to sell.");
	    }
	}
	else if(strcmp(choice, "silvernugget", true) == 0) {
	    if(amount <= GetPVarInt(playerid, "silvernugget") && amount > 0) {
	        format(szMessage, 128, "You have sold %d silver nuggets for $%d.", amount, amount*25000);
	        SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	        GivePlayerCash(playerid, amount*25000);
	        SetPVarInt(playerid, "silvernugget", GetPVarInt(playerid, "silvernugget")-amount);
	        SaveTreasureInventory(playerid);
	    }
	    else {
	        SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough of that item to sell.");
	    }
	}
	else if(strcmp(choice, "treasurechest", true) == 0) {
	    if(amount <= GetPVarInt(playerid, "treasurechest") && amount > 0) {
	        format(szMessage, 128, "You have sold %d treasure chests for $%d.", amount, amount*1000000);
	        SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	        GivePlayerCash(playerid, amount*1000000);
	        SetPVarInt(playerid, "treasure", GetPVarInt(playerid, "treasure")-amount);
	        SaveTreasureInventory(playerid);
	    }
	    else {
	        SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough of that item to sell.");
	    }
	}
	return 1;
}

CMD:sell(playerid, params[])
{
	new string[128], giveplayerid, choice[32], amount, price;
    if(sscanf(params, "us[32]dd", giveplayerid, choice, amount, price))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sell [player] [name] [amount] [price]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack, Materials, Firework, Syringes, Rawopium, Heroin, RimKit, Carvoucher, PVIPVoucher");
		return 1;
	}
	if(PlayerCuffed[playerid] >= 1 || PlayerInfo[playerid][pHospital] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
	if(WatchingTV[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can not do this while watching TV!");
	if(price < 50000) return SendClientMessageEx(playerid, COLOR_GREY, "Price can't be lower than $50,000. Use /give for deals below the scam limit.");
	if(price > 500000000) return SendClientMessageEx(playerid, COLOR_GREY, "Price can't be lower than $50,000. Use /give for deals below the scam limit.");
	if(price > 100000000) 
	{
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s is trying to sell %s to %s for $%d.", GetPlayerNameEx(playerid), choice, GetPlayerNameEx(giveplayerid), price);
		ABroadCast(COLOR_YELLOW, string, 2);
	}
	if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Amount cannot be below 1.");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	if(playerid == giveplayerid) return SendClientMessageEx(playerid, COLOR_GREY, "You can't sell to yourself!");
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");

	if(strcmp(choice, "materials", true) == 0)
	{
 		if(PlayerInfo[playerid][pJob] != 9 && PlayerInfo[playerid][pJob2] != 9 && PlayerInfo[playerid][pJob3] != 9 && PlayerInfo[playerid][pJob] != 18 && PlayerInfo[playerid][pJob2] != 18 && PlayerInfo[playerid][pJob3] != 18)
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "You're not an arms dealer or craftsman.");
		}
		if(GetPVarInt(playerid, "SellMatsTimer") > 0)
		{
			format(string, sizeof(string), "You must wait %d seconds before selling more materials.", GetPVarInt(playerid, "SellMatsTimer"));
			return SendClientMessageEx(playerid,COLOR_GREY,string);
		}
		if(amount > PlayerInfo[playerid][pMats]) { SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many materials!"); return 1; }
		format(string, sizeof(string), "* You offered %s to buy %s materials for $%s.", GetPlayerNameEx(giveplayerid), number_format(amount), number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* %s wants to sell you %s materials for $%s, (type /accept mats) to buy.", GetPlayerNameEx(playerid), number_format(amount), number_format(price));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		SetPVarInt(playerid, "SellMatsTimer", 30);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMATSTIMER);
		MatsOffer[giveplayerid] = playerid;
		MatsPrice[giveplayerid] = price;
		MatsAmount[giveplayerid] = amount;
	 	SetPVarInt(giveplayerid, "MatsSeller_SQLId", GetPlayerSQLId(playerid));
	}

	else if (strcmp(choice, "crack", true) == 0)
	{
 		if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4 && PlayerInfo[playerid][pJob3] != 4)
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "   You're not a drug dealer.");
		}
		if(gettime() < PlayerInfo[playerid][pDrugsTime])
		{
			return SendClientMessageEx(playerid, COLOR_WHITE, "You must wait 1 minute before selling more drugs.");
		}
		if(amount < 1 || amount > 99) { SendClientMessageEx(playerid, COLOR_GREY, "   Grams no lower then 1, or above 99!"); return 1; }
		if(price < 1 || price > 99999) { SendClientMessageEx(playerid, COLOR_GREY, "   Price not lower then 1, or above 99999!"); return 1; }
		if(amount > PlayerInfo[playerid][pCrack]) { SendClientMessageEx(playerid, COLOR_GREY, "   You Don't have that much Crack with you!"); return 1; }
		format(string, sizeof(string), "* You offered %s to buy %d grams of crack for $%d.", GetPlayerNameEx(giveplayerid), amount, price);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Drug Dealer %s wants to sell you %d grams of crack for $%s, (type /accept crack) to buy.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		PlayerInfo[playerid][pDrugsTime] = gettime()+60;
		CrackOffer[giveplayerid] = playerid;
		CrackPrice[giveplayerid] = price;
		CrackGram[giveplayerid] = amount;
	 	SetPVarInt(giveplayerid, "CrackSeller_SQLId", GetPlayerSQLId(playerid));
	}

	else if (strcmp(choice, "pot", true) == 0)
	{
 		if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4 && PlayerInfo[playerid][pJob3] != 4)
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "   You're not a drug dealer.");
		}
		if(gettime() < PlayerInfo[playerid][pDrugsTime])
		{
			return SendClientMessageEx(playerid, COLOR_WHITE, "You must wait 1 minute before selling more drugs.");
		}
		if(amount < 1 || amount > 99) { return SendClientMessageEx(playerid, COLOR_GREY, "   Grams no lower then 1, or above 99!"); }
		if(price < 1 || price > 99999) { return SendClientMessageEx(playerid, COLOR_GREY, "   Price not lower then 1, or above 99999!"); }
		if(amount > PlayerInfo[playerid][pPot]) { return SendClientMessageEx(playerid, COLOR_GREY, "   You Don't have that much pot with you!"); }
		format(string, sizeof(string), "* You offered %s to buy %d grams of pot for $%d.", GetPlayerNameEx(giveplayerid), amount, price);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Drug Dealer %s wants to sell you %d grams of pot for $%s, (type /accept pot) to buy.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		PlayerInfo[playerid][pDrugsTime] = gettime()+60;
		PotOffer[giveplayerid] = playerid;
		PotPrice[giveplayerid] = price;
		PotGram[giveplayerid] = amount;
	 	SetPVarInt(giveplayerid, "PotSeller_SQLId", GetPlayerSQLId(playerid));
	}

	else if (strcmp(choice, "firework", true) == 0)
	{
		if(amount > PlayerInfo[playerid][pFirework]) { SendClientMessageEx(playerid, COLOR_GREY, "   You don't have that many fireworks with you!"); return 1; }
		format(string, sizeof(string), "* You offered %s to buy %d fireworks for $%s.", GetPlayerNameEx(giveplayerid), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* %s wants to sell you %d fireworks for $%s, (type /accept firework) to buy.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	 	SetPVarInt(giveplayerid, "FireworkOffer", playerid);
	 	SetPVarInt(giveplayerid, "FireworkPrice", price);
	 	SetPVarInt(giveplayerid, "FireworkCount", amount);
	 	SetPVarInt(giveplayerid, "FireworkSeller_SQLId", GetPlayerSQLId(playerid));
	}
	else if (strcmp(choice, "syringes", true) == 0)
	{
		if(amount > PlayerInfo[playerid][pSyringes])
			return SendClientMessageEx(playerid, COLOR_GREY, " You don't have that many syringes with you.");

		if(PlayerInfo[giveplayerid][pSyringes] >= 3)
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player already has 3 syringes.");

		format(string, sizeof(string), "* You offered %s to buy %d syringes for $%s.", GetPlayerNameEx(giveplayerid), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* %s wants to sell you %d syringes for $%s, (type /accept syringes) to buy.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	 	SetPVarInt(giveplayerid, "SyringesOffer", playerid);
	 	SetPVarInt(giveplayerid, "SyringesPrice", price);
	 	SetPVarInt(giveplayerid, "SyringesCount", amount);
	 	SetPVarInt(giveplayerid, "SyringesSeller_SQLId", GetPlayerSQLId(playerid));
	}

    else if (strcmp(choice, "rawopium", true) == 0)
	{
		if(amount > PlayerInfo[playerid][pRawOpium])
			return SendClientMessageEx(playerid, COLOR_GREY, " You don't have that much raw opium with you.");

		format(string, sizeof(string), "* You offered %s to buy %d grams of raw opium for $%s.", GetPlayerNameEx(giveplayerid), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* %s wants to sell you %d grams of raw opium for $%s, (type /accept rawopium) to buy.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	 	SetPVarInt(giveplayerid, "RawOpiumOffer", playerid);
	 	SetPVarInt(giveplayerid, "RawOpiumPrice", price);
	 	SetPVarInt(giveplayerid, "RawOpiumCount", amount);
	 	SetPVarInt(giveplayerid, "RawOpiumSeller_SQLId", GetPlayerSQLId(playerid));
	}

	else if (strcmp(choice, "heroin", true) == 0)
	{
		if(amount > PlayerInfo[playerid][pHeroin])
			return SendClientMessageEx(playerid, COLOR_GREY, " You don't have that much heroin with you.");

		format(string, sizeof(string), "* You offered %s to buy %d grams of heroin for $%s.", GetPlayerNameEx(giveplayerid), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* %s wants to sell you %d grams of heroin for $%s, (type /accept heroin) to buy.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	 	SetPVarInt(giveplayerid, "HeroinOffer", playerid);
	 	SetPVarInt(giveplayerid, "HeroinPrice", price);
	 	SetPVarInt(giveplayerid, "HeroinCount", amount);
	 	SetPVarInt(giveplayerid, "HeroinSeller_SQLId", GetPlayerSQLId(playerid));
	}

    else if (strcmp(choice, "rimkit", true) == 0)
	{
		if(amount > PlayerInfo[playerid][pRimMod])
			return SendClientMessageEx(playerid, COLOR_GREY, " You don't have that many rim kits.");

		format(string, sizeof(string), "* You offered %s to buy %d rim kits for $%s.", GetPlayerNameEx(giveplayerid), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* %s wants to sell you %d rim kits for $%s, (type /accept rimkit) to buy.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	 	SetPVarInt(giveplayerid, "RimOffer", playerid);
	 	SetPVarInt(giveplayerid, "RimPrice", price);
	 	SetPVarInt(giveplayerid, "RimCount", amount);
	 	SetPVarInt(giveplayerid, "RimSeller_SQLId", GetPlayerSQLId(playerid));
	}
	else if (strcmp(choice, "pvipvoucher", true) == 0)
	{
		if(amount > PlayerInfo[playerid][pPVIPVoucher])
			return SendClientMessageEx(playerid, COLOR_GREY, " You don't have that many Platinum VIP Vouchers.");

		format(string, sizeof(string), "* You offered %s to buy %d Platinum VIP Voucher(s) for $%s.", GetPlayerNameEx(giveplayerid), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* %s wants to sell you %d Platinum VIP Voucher(s) for $%s, (type /accept pvipvoucher) to buy.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	 	SetPVarInt(giveplayerid, "PVIPVoucherOffer", playerid);
	 	SetPVarInt(giveplayerid, "PVIPVoucherPrice", price);
	 	SetPVarInt(giveplayerid, "PVIPVoucherCount", amount);
	 	SetPVarInt(giveplayerid, "PVIPVoucherSeller_SQLId", GetPlayerSQLId(playerid));
	}
	return 1;

}

CMD:quitjob(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] >= 1 || PlayerInfo[playerid][pFamed] >= 1)
	{
		new jobid;
		if(sscanf(params, "d", jobid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /quitjob [jobid]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available: 1, 2, 3 (secondary VIP/Famed)");
			return 1;
		}

		switch(jobid)
		{
		case 1:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have quit your Job.");
				PlayerInfo[playerid][pJob] = 0;
			}
		case 2:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have quit your secondary Job.");
				PlayerInfo[playerid][pJob2] = 0;
			}
		case 3:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have quit your third Job.");
				PlayerInfo[playerid][pJob3] = 0;
			}
		default:
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /quitjob [jobid]");
				SendClientMessageEx(playerid, COLOR_GREY, "Available: 1, 2, 3 (secondary VIP/Famed)");
			}
		}
	}
	else
	{
		if(PlayerInfo[playerid][pJob] > 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have quit your Job.");
			PlayerInfo[playerid][pJob] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You don't even have a Job!");
		}
	}
	return 1;
}

CMD:bail(playerid, params[])
{
	if(PlayerInfo[playerid][pJailTime] > 0)
	{
		if(JailPrice[playerid] > 0)
		{
			if(GetPlayerCash(playerid) > JailPrice[playerid])
			{
				new string[128];
				format(string, sizeof(string), "You bailed yourself out for $%d.", JailPrice[playerid]);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, -JailPrice[playerid]);
				JailPrice[playerid] = 0;
				WantLawyer[playerid] = 0; CallLawyer[playerid] = 0;
				PlayerInfo[playerid][pJailTime] = 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You can't afford the bail price.");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a bail price.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in jail.");
	}
	return 1;
}

CMD:ticket(playerid, params[])
{
	if(IsACop(playerid))
	{

		new string[128], giveplayerid, moneys, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, moneys, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ticket [player] [price] [reason]");

		if(giveplayerid == playerid)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't ticket yourself.");
			return 1;
		}

		if(moneys < 1 || moneys > 100000) { SendClientMessageEx(playerid, COLOR_GREY, "The ticket price can't be below $1 or higher then $100,000."); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					if(giveplayerid == playerid) return 1;

					format(string, sizeof(string), "* You gave %s a ticket costing $%d, reason: %s", GetPlayerNameEx(giveplayerid), moneys, reason);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has given you a ticket costing $%d, reason: %s", GetPlayerNameEx(playerid), moneys, reason);
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s writes up a ticket and gives it to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "* Type /accept ticket, to accept it.");
					TicketOffer[giveplayerid] = playerid;
					TicketMoney[giveplayerid] = moneys;
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't near you.");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	return 1;
}

CMD:backentrance(playerid, params[])
{
	if(IsACop(playerid) && PlayerInfo[playerid][pRank] >= 3) {
	    if(BackEntrance) {
	        BackEntrance = 0;
	        SendClientMessageEx(playerid, COLOR_WHITE, "The back entrance has been locked.");
	    }
	    else {
	        BackEntrance = 1;
	        SendClientMessageEx(playerid, COLOR_WHITE, "The back entrance has been unlocked.");
	    }
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	return 1;
}

CMD:isolate(playerid, params[])
{
	if(!IsACop(playerid)) {
	    SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command!");
	}

	else {

		new
		    iGivePlayer,
			szMessage[128];

	    if(sscanf(params, "u", iGivePlayer)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /isolate [player]");
		}
		else if(iGivePlayer == playerid) {
		    SendClientMessageEx(playerid, COLOR_GREY, "You can't use this command on yourself!");
		}
		else if(!IsPlayerConnected(iGivePlayer)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(!ProxDetectorS(10.0, playerid, iGivePlayer)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "That person is to far from you.");
		}
		else {
			if(strfind(PlayerInfo[iGivePlayer][pPrisonReason], "[IC]", true) != -1)
   			{
                strcpy(PlayerInfo[iGivePlayer][pPrisonReason], "[ISOLATE] EBCF Arrest", 128);
         		format(szMessage, sizeof(szMessage), "You have sent %s to isolation.", GetPlayerNameEx(iGivePlayer));
           		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
            	format(szMessage, sizeof(szMessage), "%s has sent you to isolation.", GetPlayerNameEx(playerid));
	            SendClientMessageEx(iGivePlayer, COLOR_WHITE, szMessage);
	            SetPlayerPos(iGivePlayer, -2095.3391, -215.8563, 978.8315);

	        }
	        else if(strfind(PlayerInfo[iGivePlayer][pPrisonReason], "[ISOLATE]", true) != -1)
	        {
         		new rand;
           		strcpy(PlayerInfo[iGivePlayer][pPrisonReason], "[IC] EBCF Arrest", 128);
	            format(szMessage, sizeof(szMessage), "You have released %s from isolation.", GetPlayerNameEx(iGivePlayer));
	            SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	            format(szMessage, sizeof(szMessage), "%s has released you from isolation.", GetPlayerNameEx(playerid));
	            SendClientMessageEx(iGivePlayer, COLOR_WHITE, szMessage);
          		rand = random(sizeof(DocPrison));
				SetPlayerPos(iGivePlayer, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2]);
		    }
		    else SendClientMessageEx(playerid, COLOR_WHITE, "That person isn't imprisoned.");
		}
	}
	return 1;
}

CMD:docarrest(playerid, params[])
{
	if(!IsACop(playerid)) SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a LEO faction. ");
	else if(!IsAtArrestPoint(playerid, 2)) SendClientMessageEx(playerid, COLOR_GREY, "You are not at the DoC Prison arrest point." );

	else
	{
   		new
     		moneys,
       		time,
			string[256];

        new suspect = GetClosestPlayer(playerid);
  		if(sscanf(params, "dddd", moneys, time)) SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /docarrest [fine] [minutes]");
		else if(!(1 <= moneys <= 250000)) SendClientMessageEx(playerid, COLOR_GREY, "The jail fine can't be below $1 or above $250,000.");
		else if(!(1 <= time <= 120)) SendClientMessageEx(playerid, COLOR_GREY, "Jail time can't be below 1 or above 120 minutes - take the person to prison for more time.");
		else if(!IsPlayerConnected(suspect)) SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(!ProxDetectorS(5.0, playerid, suspect)) SendClientMessageEx(playerid, COLOR_GREY, "You are close enough to the suspect.");
		else if(PlayerInfo[suspect][pWantedLevel] < 1 && PlayerInfo[playerid][pMember] != 12) SendClientMessageEx(playerid, COLOR_GREY, "The person must have a wanted level of at least one star.");
		else {
			SetPVarInt(playerid, "Arrest_Price", moneys);
			SetPVarInt(playerid, "Arrest_Time", time);
			SetPVarInt(playerid, "Arrest_Suspect", suspect);
			SetPVarInt(playerid, "Arrest_Type", 2);
			format(string, sizeof(string), "Please write a brief arrest report on how %s acted during the arrest.\n\nThis report must be at least 30 characters and no more than 128.", GetPlayerNameEx(suspect));
			ShowPlayerDialog(playerid, DIALOG_ARRESTREPORT, DIALOG_STYLE_INPUT, "Arrest Report", string, "Submit", "");
	    }
	}
	return 1;
}

/*CMD:docarrest(playerid, params[])
{
	if(!IsACop(playerid)) SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a LEO faction. ");
	else if(!IsAtArrestPoint(playerid, 2)) SendClientMessageEx(playerid, COLOR_GREY, "You are not at the DoC Prison arrest point." );

	else
	{
   		new
     		moneys,
       		time,
			string[128];

        new suspect = GetClosestPlayer(playerid);
  		if(sscanf(params, "dddd", moneys, time)) SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /docarrest [fine] [minutes]");
		else if(!(1 <= moneys <= 250000)) SendClientMessageEx(playerid, COLOR_GREY, "The jail fine can't be below $1 or above $250,000.");
		else if(!(1 <= time <= 120)) SendClientMessageEx(playerid, COLOR_GREY, "Jail time can't be below 1 or above 120 minutes - take the person to prison for more time.");
		else if(!IsPlayerConnected(suspect)) SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(!ProxDetectorS(5.0, playerid, suspect)) SendClientMessageEx(playerid, COLOR_GREY, "You are close enough to the suspect.");
		else if(PlayerInfo[suspect][pWantedLevel] < 1 && PlayerInfo[playerid][pMember] != 12) SendClientMessageEx(playerid, COLOR_GREY, "The person must have a wanted level of at least one star.");
		else {

			format(string, sizeof(string), "* You arrested %s!", GetPlayerNameEx(suspect));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(suspect, -moneys);
			new money = floatround(moneys / 3), iGroupID = PlayerInfo[playerid][pMember];
			Tax += money;
			arrGroupData[iGroupID][g_iBudget] += money;
			new str[128], file[32];
            format(str, sizeof(str), "%s has been arrested by %s and fined $%d. $%d has been sent to %s's budget fund.",GetPlayerNameEx(suspect), GetPlayerNameEx(playerid), moneys, money, arrGroupData[iGroupID][g_szGroupName]);
            new month, day, year;
			getdate(year,month,day);
			format(file, sizeof(file), "grouppay/%d/%d-%d-%d.log", iGroupID, month, day, year);
			Log(file, str);
			ResetPlayerWeaponsEx(suspect);
			for(new x; x < MAX_PLAYERVEHICLES; x++) if(PlayerVehicleInfo[suspect][x][pvTicket] >= 1) {
				PlayerVehicleInfo[suspect][x][pvTicket] = 0;
			}
			SetPlayerInterior(suspect, 10);
			new rand = random(sizeof(DocPrison));
			SetPlayerFacingAngle(suspect, 0);
			SetPlayerPos(suspect, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2]);
			if(PlayerInfo[suspect][pDonateRank] >= 2) PlayerInfo[suspect][pJailTime] = ((time*60)*75)/100;
			else PlayerInfo[suspect][pJailTime] = time * 60;
			DeletePVar(suspect, "IsFrozen");
			PhoneOnline[suspect] = 1;
			PlayerInfo[suspect][pArrested] += 1;
			SetPlayerFree(suspect,playerid, "was arrested");
			PlayerInfo[suspect][pWantedLevel] = 0;
			SetPlayerToTeamColor(suspect);
			SetPlayerWantedLevel(suspect, 0);
			WantLawyer[suspect] = 1;
			TogglePlayerControllable(suspect, 1);
			ClearAnimations(suspect);
			SetPlayerSpecialAction(suspect, SPECIAL_ACTION_NONE);
			PlayerCuffed[suspect] = 0;
			DeletePVar(suspect, "PlayerCuffed");
			PlayerCuffedTime[suspect] = 0;
			PlayerInfo[suspect][pVW] = 0;
			SetPlayerVirtualWorld(suspect, 0);
			SetPlayerHealth(suspect, 100);
			strcpy(PlayerInfo[suspect][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			strcpy(PlayerInfo[suspect][pPrisonReason], "[IC] EBCF Arrest", 128);
			SetPlayerToTeamColor(suspect);
			Player_StreamPrep(suspect, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2], FREEZE_TIME);
	    }
	}
	return 1;
}*/
CMD:abus(playerid, params[]) return cmd_ataxi(playerid, params);
CMD:ataxi(playerid, params[])
{
	if(!IsATaxiDriver(playerid) && PlayerInfo[playerid][pJob] != 17 && PlayerInfo[playerid][pJob2] != 17 && PlayerInfo[playerid][pJob3] != 17 && PlayerInfo[playerid][pTaxiLicense] != 1) 
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not a taxi/bus driver!");
	if(TransportDuty[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You are currently not on duty.");

	new
		szMessage[128],
		iTarget;
	if(TransportDuty[playerid] == 1)
	{
		if(sscanf(params, "u", iTarget)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ataxi [player]");
		if(!IsPlayerConnected(iTarget)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		if(iTarget == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You can't accept your own taxi call.");
		if(TaxiCallTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You have already accepted a call.");
		if(!GetPVarType(iTarget, "TaxiCall")) return SendClientMessageEx(playerid, COLOR_GREY, "That person has not called for a taxi.");

		format(szMessage, sizeof(szMessage), "** Taxi Driver %s has accepted the Taxi Call from %s(%d)" , GetPlayerNameEx(playerid), GetPlayerNameEx(iTarget), iTarget);
		SendTaxiMessage(TEAM_AZTECAS_COLOR, szMessage);
		format(szMessage, sizeof(szMessage), "* Taxi Driver %s has accepted your Taxi Call, please wait at your current position.", GetPlayerNameEx(playerid));
		SendClientMessageEx(iTarget, COLOR_LIGHTBLUE, szMessage);
		GameTextForPlayer(playerid, "~w~Taxi Caller~n~~r~Go to the red marker.", 5000, 1);
		TaxiCallTime[playerid] = 1;
		TaxiAccepted[playerid] = iTarget;
		DeletePVar(iTarget, "TaxiCall");
	}
	if(TransportDuty[playerid] == 2)
	{
		if(sscanf(params, "u", iTarget)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /abus [player]");
		if(!IsPlayerConnected(iTarget)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		if(iTarget == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You can't accept your own bus call.");
		if(BusCallTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You have already accepted a call.");
		if(!GetPVarType(iTarget, "BusCall")) return SendClientMessageEx(playerid, COLOR_GREY, "That person has not called for a bus.");
		
		format(szMessage, sizeof(szMessage), "** Bus Driver %s has accepted the Bus Call from %s(%d)" , GetPlayerNameEx(playerid), GetPlayerNameEx(iTarget), iTarget);
		SendTaxiMessage(TEAM_AZTECAS_COLOR, szMessage);
		format(szMessage, sizeof(szMessage), "* Bus Driver %s has accepted your Bus Call, please wait at your current position.", GetPlayerNameEx(playerid));
		SendClientMessageEx(iTarget, COLOR_LIGHTBLUE, szMessage);
		GameTextForPlayer(playerid, "~w~Bus Caller~n~~r~Goto redmarker", 5000, 1);
		BusCallTime[playerid] = 1;
		BusAccepted[playerid] = iTarget;
		DeletePVar(iTarget, "BusCall");
	}
	PlayerInfo[playerid][pCallsAccepted]++;
	return 1;
}

CMD:arrestedit(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], choice[32], id, amount;
		if(sscanf(params, "s[32]dD", choice, id, amount))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /arrestedit [name] [id] [amount]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Position, Type, Delete");
			return 1;
		}

		if(id >= MAX_ARRESTPOINTS)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Invalid Arrest Points ID!");
			return 1;
		}

		if(strcmp(choice, "position", true) == 0)
		{
			GetPlayerPos(playerid, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ]);
			ArrestPoints[id][arrestInt] = GetPlayerInterior(playerid);
			ArrestPoints[id][arrestVW] = GetPlayerVirtualWorld(playerid);
			format(string, sizeof(string), "You have changed the position on Arrest Point #%d.", id);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			DestroyDynamic3DTextLabel(ArrestPoints[id][arrestTextID]);
			DestroyDynamicPickup(ArrestPoints[id][arrestPickupID]);
			switch(ArrestPoints[id][arrestType])
			{
				case 0:
				{
					format(string, sizeof(string), "/arrest\nArrest Point #%d", id);
					ArrestPoints[id][arrestTextID] = CreateDynamic3DTextLabel(string, COLOR_DBLUE, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ]+0.6, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ArrestPoints[id][arrestVW], ArrestPoints[id][arrestInt], -1);
					ArrestPoints[id][arrestPickupID] = CreateDynamicPickup(1247, 23, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ], ArrestPoints[id][arrestVW]);
				}
				case 2:
				{
					format(string, sizeof(string), "/docarrest\nArrest Point #%d", id);
					ArrestPoints[id][arrestTextID] = CreateDynamic3DTextLabel(string, COLOR_DBLUE, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ]+0.6, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ArrestPoints[id][arrestVW], ArrestPoints[id][arrestInt], -1);
					ArrestPoints[id][arrestPickupID] = CreateDynamicPickup(1247, 23, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ], ArrestPoints[id][arrestVW]);
				}
				case 3:
				{
					format(string, sizeof(string), "/warrantarrest\nArrest Point #%d", id);
					ArrestPoints[id][arrestTextID] = CreateDynamic3DTextLabel(string, COLOR_DBLUE, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ]+0.6, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ArrestPoints[id][arrestVW], ArrestPoints[id][arrestInt], -1);
					ArrestPoints[id][arrestPickupID] = CreateDynamicPickup(1247, 23, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ], ArrestPoints[id][arrestVW]);
				}
				case 4:
				{
					format(string, sizeof(string), "/jarrest\nArrest Point #%d", id);
					ArrestPoints[id][arrestTextID] = CreateDynamic3DTextLabel(string, COLOR_DBLUE, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ]+0.6, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ArrestPoints[id][arrestVW], ArrestPoints[id][arrestInt], -1);
					ArrestPoints[id][arrestPickupID] = CreateDynamicPickup(1247, 23, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ], ArrestPoints[id][arrestVW]);
				}
			}
			SaveArrestPoint(id);
			format(string, sizeof(string), "%s has edited Arrest Point ID %d's position.", GetPlayerNameEx(playerid), id);
			Log("logs/arrestedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "type", true) == 0)
		{
			if(ArrestPoints[id][arrestPosX] == 0)
			{
				format(string, sizeof(string), "Arrest Point #%d does not exist.", id);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				return 1;
			}
			ArrestPoints[id][arrestType] = amount;
			format(string, sizeof(string), "You have changed the type for Arrest Point #%d to %d.", id, amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			DestroyDynamic3DTextLabel(ArrestPoints[id][arrestTextID]);
			DestroyDynamicPickup(ArrestPoints[id][arrestPickupID]);
			switch(ArrestPoints[id][arrestType])
			{
				case 0:
				{
					format(string, sizeof(string), "/arrest\nArrest Point #%d", id);
					ArrestPoints[id][arrestTextID] = CreateDynamic3DTextLabel(string, COLOR_DBLUE, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ]+0.6, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ArrestPoints[id][arrestVW], ArrestPoints[id][arrestInt], -1);
					ArrestPoints[id][arrestPickupID] = CreateDynamicPickup(1247, 23, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ], ArrestPoints[id][arrestVW]);
				}
				case 2:
				{
					format(string, sizeof(string), "/docarrest\nArrest Point #%d", id);
					ArrestPoints[id][arrestTextID] = CreateDynamic3DTextLabel(string, COLOR_DBLUE, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ]+0.6, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ArrestPoints[id][arrestVW], ArrestPoints[id][arrestInt], -1);
					ArrestPoints[id][arrestPickupID] = CreateDynamicPickup(1247, 23, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ], ArrestPoints[id][arrestVW]);
				}
				case 3:
				{
					format(string, sizeof(string), "/warrantarrest\nArrest Point #%d", id);
					ArrestPoints[id][arrestTextID] = CreateDynamic3DTextLabel(string, COLOR_DBLUE, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ]+0.6, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ArrestPoints[id][arrestVW], ArrestPoints[id][arrestInt], -1);
					ArrestPoints[id][arrestPickupID] = CreateDynamicPickup(1247, 23, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ], ArrestPoints[id][arrestVW]);
				}
				case 4:
				{
					format(string, sizeof(string), "/jarrest\nArrest Point #%d", id);
					ArrestPoints[id][arrestTextID] = CreateDynamic3DTextLabel(string, COLOR_DBLUE, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ]+0.6, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ArrestPoints[id][arrestVW], ArrestPoints[id][arrestInt], -1);
					ArrestPoints[id][arrestPickupID] = CreateDynamicPickup(1247, 23, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ], ArrestPoints[id][arrestVW]);
				}
			}
			SaveArrestPoint(id);
			format(string, sizeof(string), "%s has changed the type on Arrest Point ID %d to %d.", GetPlayerNameEx(playerid), id, amount);
			Log("logs/arrestedit.log", string);
			return 1;
		}
		else if(strcmp(choice, "delete", true) == 0)
		{
			if(ArrestPoints[id][arrestPosX] == 0)
			{
				format(string, sizeof(string), "Arrest Point #%d does not exist.", id);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				return 1;
			}
			DestroyDynamic3DTextLabel(ArrestPoints[id][arrestTextID]);
			DestroyDynamicPickup(ArrestPoints[id][arrestPickupID]);
			ArrestPoints[id][arrestPosX] = 0.0;
			ArrestPoints[id][arrestPosY] = 0.0;
			ArrestPoints[id][arrestPosZ] = 0.0;
			ArrestPoints[id][arrestVW] = 0;
			ArrestPoints[id][arrestInt] = 0;
			ArrestPoints[id][arrestType] = 0;
			SaveArrestPoint(id);
			format(string, sizeof(string), "You have deleted Arrest Point #%d.", id);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has deleted Arrest Point ID %d.", GetPlayerNameEx(playerid), id);
			Log("logs/arrestedit.log", string);
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:arreststatus(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /arreststatus [id]");
		return 1;
	}
	if (PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1)
	{
		new string[128];
		format(string,sizeof(string),"|___________ Arrest Point Status (ID: %d) ___________|", id);
		SendClientMessageEx(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "[Position] X: %f | Y: %f | Z: %f | VW: %d | Int: %d | Type: %d", ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ], ArrestPoints[id][arrestVW], ArrestPoints[id][arrestInt], ArrestPoints[id][arrestType]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:arrestnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available Arrest Point...");
		for(new x = 0; x < MAX_ARRESTPOINTS; x++)
		{
			if(ArrestPoints[x][arrestPosX] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:gotoarrestpoint(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1)
	{
		new id;
		if(sscanf(params, "d", id)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotoarrestpoint [id]");

		SetPlayerPos(playerid, ArrestPoints[id][arrestPosX], ArrestPoints[id][arrestPosY], ArrestPoints[id][arrestPosZ]);
		SetPlayerInterior(playerid, ArrestPoints[id][arrestInt]);
		PlayerInfo[playerid][pInt] = ArrestPoints[id][arrestInt];
		SetPlayerVirtualWorld(playerid, ArrestPoints[id][arrestVW]);
		PlayerInfo[playerid][pVW] = ArrestPoints[id][arrestVW];
	}
	return 1;
}

CMD:arrest(playerid, params[])
{
	if(!IsACop(playerid)) {
	    SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a LEO faction. ");
	}
	else if(!IsAtArrestPoint(playerid, 0) && !IsAtArrestPoint(playerid, 1)) {
 		SendClientMessageEx(playerid, COLOR_GREY, "You are not at a arrest point." );
 	}

	else {


   		new
     		moneys,
       		time,
         	bail,
          	bailprice,
			string[256];

        new suspect = GetClosestPlayer(playerid);
  		if(sscanf(params, "dddd", moneys, time, bail, bailprice)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /arrest [price] [time (minutes)] [bail (0=no 1=yes)] [bailprice]");
		}
		else if(!(1 <= moneys <= 30000)) {
  			SendClientMessageEx(playerid, COLOR_GREY, "The jail price can't be below $1 or above $30,000.");
		}
		else if(!(1 <= time <= 30)) {
  			SendClientMessageEx(playerid, COLOR_GREY, "Jail time can't be below 1 or above 30 minutes - take the person to prison for more time.");
		}
		else if(!(0 <= bail <= 1)) {
  			SendClientMessageEx(playerid, COLOR_GREY, "The bail option must be set to 0 or 1.");
		}
		else if(!(0 <= bailprice <= 100000)) {
  			SendClientMessageEx(playerid, COLOR_GREY, "The bail price can't be below $0 or above $100,000.");
		}
		else if(!IsPlayerConnected(suspect)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(!ProxDetectorS(5.0, playerid, suspect)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "You are not close enough to the suspect.");
		}
		else if(PlayerInfo[suspect][pWantedLevel] < 1 && !IsAJudge(playerid)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "The person must have a wanted level of at least one star.");
		}
		else {
			SetPVarInt(playerid, "Arrest_Price", moneys);
			SetPVarInt(playerid, "Arrest_Time", time);
			SetPVarInt(playerid, "Arrest_Bail", bail);
			SetPVarInt(playerid, "Arrest_BailPrice", bailprice);
			SetPVarInt(playerid, "Arrest_Suspect", suspect);
			SetPVarInt(playerid, "Arrest_Type", 0);
			format(string, sizeof(string), "Please write a brief arrest report on how %s acted during the arrest.\n\nThis report must be at least 30 characters and no more than 128.", GetPlayerNameEx(suspect));
			ShowPlayerDialog(playerid, DIALOG_ARRESTREPORT, DIALOG_STYLE_INPUT, "Arrest Report", string, "Submit", "");
	    }
	}
	return 1;
}

CMD:deport(playerid, params[])
{
	if((0 <= PlayerInfo[playerid][pLeader] < MAX_GROUPS) && arrGroupData[PlayerInfo[playerid][pLeader]][g_iGroupType] == 5)
	{
   		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /deport [player]");
		if(!IsPlayerConnected(giveplayerid)) SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(!ProxDetectorS(5.0, playerid, giveplayerid)) SendClientMessageEx(playerid, COLOR_GREY, "You are not close enough to the giveplayerid.");
		else if(PlayerInfo[playerid][pNation] == 0 && PlayerInfo[giveplayerid][pNation] == 0) SendClientMessageEx(playerid, COLOR_GREY, "You can't deport a citizen of San Andreas!");
		else
		{
			format(string, sizeof(string), "* You deported %s!", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			DeletePVar(giveplayerid, "IsFrozen");
			TogglePlayerControllable(giveplayerid, 1);
			ClearAnimations(giveplayerid);
			SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);
			PlayerCuffed[giveplayerid] = 0;
			DeletePVar(giveplayerid, "PlayerCuffed");
			PlayerCuffedTime[giveplayerid] = 0;
			if(PlayerInfo[playerid][pNation] == 0 && PlayerInfo[giveplayerid][pNation] == 1)
			{
				switch(random(2))
				{
					case 0:
					{
						SetPlayerPos(giveplayerid, 1699.2, 1435.1, 10.7);
						SetPlayerFacingAngle(giveplayerid, 270.0);
					}
					case 1:
					{
						SetPlayerPos(giveplayerid, -1446.5997, 2608.4478, 55.8359);
						SetPlayerFacingAngle(giveplayerid, 180.0);
					}
				}
				SendClientMessageEx(giveplayerid, COLOR_RED, "You have been deported back to Tierra Robada.");
			}
			else if(PlayerInfo[playerid][pNation] == 1 && PlayerInfo[giveplayerid][pNation] == 0)
			{
				switch(random(2))
				{
					case 0:
					{
						SetPlayerPos(giveplayerid, 1715.1201,-1903.1711,13.5665);
						SetPlayerFacingAngle(giveplayerid, 360.0);
					}
					case 1:
					{
						SetPlayerPos(giveplayerid, -1969.0737,138.1210,27.6875);
						SetPlayerFacingAngle(giveplayerid, 90.0);
					}
				}
				SendClientMessageEx(giveplayerid, COLOR_RED, "You have been deported back to San Andreas.");
			}
			else if(PlayerInfo[playerid][pNation] == 1 && PlayerInfo[giveplayerid][pNation] == 1)
			{
				switch(random(2))
				{
					case 0:
					{
						SetPlayerPos(giveplayerid, 1715.1201,-1903.1711,13.5665);
						SetPlayerFacingAngle(giveplayerid, 360.0);
					}
					case 1:
					{
						SetPlayerPos(giveplayerid, -1969.0737,138.1210,27.6875);
						SetPlayerFacingAngle(giveplayerid, 90.0);
					}
				}
				PlayerInfo[giveplayerid][pNation] = 0;
				SendClientMessageEx(giveplayerid, COLOR_RED, "You have been deported to San Andreas.");
			}
	    }
	}
	else SendClientMessage(playerid, COLOR_GREY, "You are not the leader of a Government agency.");
	return 1;
}

CMD:contract(playerid, params[])
{
	if(PlayerCuffed[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't place contracts while in cuffs.");
	if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't place contracts while in jail.");
	
	new string[128], giveplayerid, moneys, detail[32];
	if(sscanf(params, "uds[32]", giveplayerid, moneys, detail)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /contract [player] [amount] [details]");

	if (!IsPlayerConnected(giveplayerid)) {
		return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	if(PlayerInfo[playerid][pLevel] < 5 || PlayerInfo[giveplayerid][pLevel] < 5) {
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot place a contract unless both you and the hit are at least level 5.");
	}
	if( moneys < 50000 || moneys > 1000000)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't place contracts that are less than $50,000 or more than $1,000,000.");
		return 1;
	}
	else if((moneys < 100000 || moneys > 1000000) && IsACop(giveplayerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "The minimum hit amount for a law enforcement officer is $100,000.");
		return 1;
	}
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You must be level 3 to place a contract.");
		return 1;
	}
	if(PlayerInfo[giveplayerid][pConnectHours] < 12)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not place contracts on players with less than 12 playing hours.");
		return 1;
	}
	if(PlayerInfo[playerid][pMember] != INVALID_GROUP_ID && arrGroupData[PlayerInfo[playerid][pMember]][g_iGroupType] == 2)
	{
		SendClientMessageEx( playerid, COLOR_GREY, "You can't place contracts as a hitman." );
	}
	else
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if( moneys >= 1000001 )
			{
				SendClientMessageEx( playerid, COLOR_GREY, "The maximum contract price is $1,000,000!" );
				return 1;
			}

			if( PlayerInfo[giveplayerid][pHeadValue] >= 1000000 )
			{
				SendClientMessageEx( playerid, COLOR_GREY, "That person has the maximum on their head." );
				return 1;
			}
			if(moneys + PlayerInfo[giveplayerid][pHeadValue] >= 1000001 )
			{
				SendClientMessageEx( playerid, COLOR_GREY, "That person has the maximum on their head." );
				return 1;
			}

			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You can't contract yourself."); return 1; }
			new playermoney = GetPlayerCash(playerid);
			if (moneys > 0 && playermoney >= moneys)
			{
				if(strlen(detail) > 32) return SendClientMessageEx(playerid, COLOR_GRAD1, "Contract details may not be longer than 32 characters in length.");
				GivePlayerCash(playerid, (0 - moneys));
				PlayerInfo[giveplayerid][pHeadValue]+=moneys;
				strmid(PlayerInfo[giveplayerid][pContractBy], GetPlayerNameEx(playerid), 0, strlen(GetPlayerNameEx(playerid)), MAX_PLAYER_NAME);
				strmid(PlayerInfo[giveplayerid][pContractDetail], detail, 0, strlen(detail), 32);
				format(string, sizeof(string), "%s has placed a contract on %s for $%d, details: %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
				SendGroupMessage(2, COLOR_YELLOW, string);
				format(string, sizeof(string), "* You placed a contract on %s for $%d, details: %s.",GetPlayerNameEx(giveplayerid), moneys, detail);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "<< %s has placed a contract on %s for $%d, details: %s >>",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),moneys,detail);
				Log("logs/contracts.log", string);
				format(string, sizeof(string), "%s has placed a contract on %s for $%d, details: %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
				ABroadCast(COLOR_YELLOW,string,4);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have enough money for this.");
			}
		}
	}
	return 1;
}

CMD:locker(playerid, params[]) {

	new
		iGroupID = PlayerInfo[playerid][pMember],
		szTitle[18 + GROUP_MAX_NAME_LEN],
		szDialog[100];
		
	if(PlayerInfo[playerid][pWRestricted] != 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot use this command while having a weapon restriction.");
	if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot do this while being in the Hunger Games Event!");
	if(0 <= iGroupID < MAX_GROUPS)
	{
		for(new i; i < MAX_GROUPS; i++)
		{
			for(new j; j < MAX_GROUP_LOCKERS; j++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, arrGroupLockers[i][j][g_fLockerPos][0], arrGroupLockers[i][j][g_fLockerPos][1], arrGroupLockers[i][j][g_fLockerPos][2]) && arrGroupLockers[i][j][g_iLockerVW] == GetPlayerVirtualWorld(playerid))
				{
					if(i == iGroupID || (arrGroupData[i][g_iGroupType] == arrGroupData[iGroupID][g_iGroupType] && arrGroupLockers[i][j][g_iLockerShare]))
					{
					    format(szTitle, sizeof(szTitle), "%s Locker Menu", arrGroupData[iGroupID][g_szGroupName]);
					    if(arrGroupData[iGroupID][g_iLockerCostType] == 0) {
					        if(arrGroupData[iGroupID][g_iLockerStock] > 100)
					        {
					        	format(szTitle, sizeof(szTitle), "%s - Locker Stock: %d", szTitle, arrGroupData[iGroupID][g_iLockerStock]);
							}
							else
							{
							    format(szTitle, sizeof(szTitle), "%s - {AA3333}Locker Stock: %d", szTitle, arrGroupData[iGroupID][g_iLockerStock]);
							}
					    }
					    format(szDialog, sizeof(szDialog), "Duty\nEquipment\nUniform%s", (arrGroupData[iGroupID][g_iGroupType] == 1) ? ("\nClear Suspect\nFirstAid & Kevlar\nMedkit & Vest Kit\nTazer & Cuffs") : ((arrGroupData[iGroupID][g_iGroupType] == 3 || arrGroupData[iGroupID][g_iGroupType] == 5) ? ("\nMedkit & Vest Kit") : ("")));
						ShowPlayerDialog(playerid, G_LOCKER_MAIN, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
						return 1;
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_GREY, "You can't access this locker.");
						return 1;
					}
				}
			}
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "You're not near a locker!");
	return 1;
}

CMD:editgroup(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pFactionModerator] >= 2)
	{
		Group_ListGroups(playerid);
	}
	return 1;
}

CMD:groupaddjurisdiction(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pFactionModerator] >= 2) Group_ListGroups(playerid, DIALOG_GROUP_JURISDICTION_ADD);
	return 1;
}

CMD:uninvite(playerid, params[]) {
	if(0 <= PlayerInfo[playerid][pLeader] < MAX_GROUPS) {

		new
			iTargetID,
			iGroupID = PlayerInfo[playerid][pLeader];

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /uninvite [player]");
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(iGroupID == PlayerInfo[iTargetID][pMember]) {
				if(playerid == iTargetID) {
					SendClientMessageEx(playerid, COLOR_GREY, "You can't uninvite yourself.");
				}
				else if(PlayerInfo[playerid][pRank] > PlayerInfo[iTargetID][pRank] || PlayerInfo[playerid][pRank] >= Group_GetMaxRank(iGroupID)) {

					new
						szMessage[128],
						iRank = PlayerInfo[playerid][pRank];

					format(szMessage, sizeof szMessage, "%s %s has kicked you out of %s.", arrGroupRanks[iGroupID][iRank], GetPlayerNameEx(playerid), arrGroupData[iGroupID][g_szGroupName]);
					SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szMessage);
					SendClientMessageEx(iTargetID, COLOR_WHITE, "You are now a civilian again.");

					format(szMessage, sizeof szMessage, "You have kicked %s out of the group.", GetPlayerNameEx(iTargetID));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

					format(szMessage, sizeof szMessage, "%s %s (rank %i) has uninvited %s (rank %i) from %s (%i).", arrGroupRanks[iGroupID][iRank], GetPlayerNameEx(playerid), iRank, GetPlayerNameEx(iTargetID), PlayerInfo[iTargetID][pRank], arrGroupData[iGroupID][g_szGroupName], iGroupID + 1);
					Log("logs/group.log", szMessage);

					PlayerInfo[iTargetID][pMember] = INVALID_GROUP_ID;
					PlayerInfo[iTargetID][pDivision] = -1;
					PlayerInfo[iTargetID][pLeader] = INVALID_GROUP_ID;
					PlayerInfo[iTargetID][pDuty] = 0;
					PlayerInfo[iTargetID][pRank] = INVALID_RANK;
					PlayerInfo[iTargetID][pModel] = NOOB_SKIN;
					SetPlayerSkin(iTargetID, NOOB_SKIN);

					SetPlayerToTeamColor(iTargetID);
					pTazer{iTargetID} = 0;
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "You can't do this to a person of equal or higher rank.");
			}
			else SendClientMessageEx(playerid, COLOR_GRAD1, "That person is not in your group.");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else if(PlayerInfo[playerid][pFMember] != INVALID_FAMILY_ID && PlayerInfo[playerid][pRank] >= 5)
	{
		new string[128], giveplayerid;
		new family = PlayerInfo[playerid][pFMember];
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /uninvite [player]");
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pFMember] != PlayerInfo[playerid][pFMember])
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player isn't in your family.");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pRank] > PlayerInfo[playerid][pRank])
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You can't uninvite higher ranks.");
				return 1;
			}
			new file[32], month, day, year ;
			getdate(year,month,day);
			format(string, sizeof(string), "* You've kicked %s out of your family.",GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Family leader %s has kicked you out of the family.",GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			PlayerInfo[giveplayerid][pFMember] = INVALID_FAMILY_ID;
			PlayerInfo[giveplayerid][pRank] = INVALID_RANK;
			FamilyInfo[family][FamilyMembers] --;
			SaveFamilies();
			format(string, sizeof(string), "%s uninvited %s from %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), FamilyInfo[family][FamilyName]);
			format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
			Log(file, string);
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Only group leaders may use this command.");
	return 1;
}

CMD:ouninvite(playerid, params[]) {
	if(0 <= PlayerInfo[playerid][pLeader] < MAX_GROUPS) {
		if(!isnull(params)) {

			if (IsPlayerConnected(ReturnUser(params)))
			{
				return SendClientMessageEx(playerid, COLOR_GREY, "That person is currently online - use /uninvite.");
			}
			new
				szQuery[96],
				szName[MAX_PLAYER_NAME],
				iPos;

			mysql_escape_string(params, szName);
			format(szQuery, sizeof szQuery, "SELECT `Member`, `Rank`, `id` FROM `accounts` WHERE `Username` = '%s'", szName);
			mysql_function_query(MainPipeline, szQuery, true, "Group_QueryFinish", "ii", GROUP_QUERY_UNCHECK, playerid);

			while((iPos = strfind(szName, "_", false, iPos)) != -1) szName[iPos] = ' ';
			SetPVarString(playerid, "Group_Uninv", szName);

			format(szQuery, sizeof szQuery, "Attempting to remove %s from the group, please wait...", szName);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szQuery);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ouninvite [account name]");
	}
	else if(PlayerInfo[playerid][pFMember] != INVALID_FAMILY_ID && PlayerInfo[playerid][pRank] >= 5)
	{
		if(isnull(params)) {
		return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ouninvite [name]");
		}

		new query[512], tmpName[24];
		mysql_escape_string(params, tmpName);
		SetPVarString(playerid, "OnUninvite", tmpName);

		format(query,sizeof(query),"UPDATE `accounts` SET `FMember` = 255, `Rank` = %d,`Model` = %d WHERE `Username`='%s' \
			AND `GangModerator`=0 \
			AND `AdminLevel` < 4 \
			AND `FMember`=%d \
			AND `Rank` < %d",
			INVALID_RANK,
			CIV[random(sizeof(CIV))],
			tmpName,
			PlayerInfo[playerid][pFMember],
			PlayerInfo[playerid][pRank]
		);
		mysql_function_query(MainPipeline, query, false, "OnUninvite", "i", playerid);

		new string[128];
		format(string, sizeof(string), "Attempting to kick %s from the family...", tmpName);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Only group leaders may use this command.");
	return 1;
}

CMD:giverank(playerid, params[]) {
	if(0 <= PlayerInfo[playerid][pLeader] < MAX_GROUPS) {

		new
			iTargetID,
			iRank,
			iGroupID = PlayerInfo[playerid][pLeader],
            szMessage[128];

		if(sscanf(params, "ui", iTargetID, iRank)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giverank [player] [rank]");
		}
		else if(!(0 <= iRank <= Group_GetMaxRank(iGroupID))) {
		    format(szMessage, sizeof(szMessage), "Invalid rank specified (must be between 0 and %d)", Group_GetMaxRank(iGroupID));
			SendClientMessageEx(playerid, COLOR_GREY, szMessage);
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(iGroupID == PlayerInfo[iTargetID][pMember]) {
				if(iRank == PlayerInfo[iTargetID][pRank]) {
					SendClientMessageEx(playerid, COLOR_GREY, "That person is already of that rank.");
				}
				else if(playerid == iTargetID) {
					SendClientMessageEx(playerid, COLOR_GREY, "You can't change your own rank!");
				}
				if(PlayerInfo[iTargetID][pRank] > PlayerInfo[playerid][pRank])
		    	{
			        SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot perform this command on a higher rank than you!");
			        return 1;
		    	}
				else if(PlayerInfo[playerid][pRank] > PlayerInfo[iTargetID][pRank] || PlayerInfo[playerid][pRank] >= Group_GetMaxRank(iGroupID) || PlayerInfo[playerid][pAdmin] >= 4) {

					format(szMessage, sizeof szMessage, "%s %s has %s you to the rank of %s.", arrGroupRanks[iGroupID][PlayerInfo[playerid][pRank]], GetPlayerNameEx(playerid), ((iRank > PlayerInfo[iTargetID][pRank]) ? ("promoted") : ("demoted")), arrGroupRanks[iGroupID][iRank]);
					SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szMessage);

					format(szMessage, sizeof szMessage, "You have %s %s to the rank of %s.", ((iRank > PlayerInfo[iTargetID][pRank]) ? ("promoted") : ("demoted")), GetPlayerNameEx(iTargetID), arrGroupRanks[iGroupID][iRank]);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

					format(szMessage, sizeof szMessage, "%s %s (rank %i) has given %s rank %i (%s) in %s (%i).", arrGroupRanks[iGroupID][PlayerInfo[playerid][pRank]], GetPlayerNameEx(playerid), PlayerInfo[playerid][pRank], GetPlayerNameEx(iTargetID), iRank, arrGroupRanks[iGroupID][iRank], arrGroupData[iGroupID][g_szGroupName], iGroupID + 1);
					Log("logs/group.log", szMessage);

					PlayerInfo[iTargetID][pRank] = iRank;
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "You can't do this to a person of equal or higher rank.");
			}
			else SendClientMessageEx(playerid, COLOR_GRAD1, "That person is not in your group.");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else if(PlayerInfo[playerid][pFMember] != INVALID_FAMILY_ID && PlayerInfo[playerid][pRank] >= 5) {
		new string[128], giveplayerid, rank;
		new family = PlayerInfo[playerid][pFMember];
		if(sscanf(params, "ud", giveplayerid, rank)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giverank [player] [Rank (1-6)]");

		if(PlayerInfo[playerid][pRank] == 6)
		{
			if(rank > 6 || rank < 0) { SendClientMessageEx(playerid, COLOR_GREY, "   Don't go below number 0, or above number 6!"); return 1; }
		}
		else if(PlayerInfo[playerid][pRank] == 5)
		{
			if(rank > 5 || rank < 0) { SendClientMessageEx(playerid, COLOR_GREY, "   Don't go below number 0, or above number 5!"); return 1; }
		}

		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[giveplayerid][pRank] > PlayerInfo[playerid][pRank])
		    {
		        SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot perform this command on a higher rank than you!");
		        return 1;
		    }
			if(PlayerInfo[playerid][pFMember] != PlayerInfo[giveplayerid][pFMember])
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "   That person is not in your family!");
				return 1;
			}

			if(rank > PlayerInfo[giveplayerid][pRank])
			{
				format(string, sizeof(string), "   You have been promoted to a higher rank by %s.", GetPlayerNameEx(playerid));
			}
			if(rank < PlayerInfo[giveplayerid][pRank])
			{
				format(string, sizeof(string), "   You have been demoted to a lower rank by %s.", GetPlayerNameEx(playerid));
			}
			new file[32], month, day, year;
			getdate(year,month,day);
			format(string, sizeof(string), "* You've given %s rank %d.",GetPlayerNameEx(giveplayerid),rank);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Family leader %s has given you rank %d.",GetPlayerNameEx(playerid),rank);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			new temprank = PlayerInfo[giveplayerid][pRank];
			PlayerInfo[giveplayerid][pRank] = rank;
			format(string, sizeof(string), "%s set %s rank from %d to %d in %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), temprank, rank, FamilyInfo[family][FamilyName]);
			format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
			Log(file, string);
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Only group leaders may use this command.");
	return 1;
}

CMD:setdiv(playerid, params[]) {
	if(0 <= PlayerInfo[playerid][pLeader] < MAX_GROUPS) {

		new
			iTargetID,
			iDiv,
			iGroupID = PlayerInfo[playerid][pLeader],
			szMessage[128];

		if(sscanf(params, "ui", iTargetID, iDiv)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setdiv [player] [div]");
			format(szMessage, sizeof(szMessage), "%s", "0 (None), ");
			for(new i; i < MAX_GROUP_DIVS; i++)
			{
			    if(arrGroupDivisions[iGroupID][i][0]) format(szMessage, sizeof(szMessage), "%s%d (%s), ", szMessage, i+1, arrGroupDivisions[iGroupID][i]);
				if(strlen(szMessage) > 64 || i == (MAX_GROUP_DIVS -1) && strlen(szMessage)) { SendClientMessageEx(playerid, COLOR_GRAD2, szMessage); szMessage[0] = 0; }

			}
		}
		else if(!(0 <= iDiv <= Group_GetMaxDiv(iGroupID)+1)) {
		    format(szMessage, sizeof(szMessage), "Invalid division specified (must be between 0 and %d)", Group_GetMaxDiv(iGroupID) + 1);
			SendClientMessageEx(playerid, COLOR_GREY, szMessage);
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(iGroupID == PlayerInfo[iTargetID][pMember]) {
				if(iDiv - 1 == PlayerInfo[iTargetID][pDivision]) {
					if (iDiv == 0) SendClientMessageEx(playerid, COLOR_GREY, "That person already has no division.");
					else SendClientMessageEx(playerid, COLOR_GREY, "That person is already in that division.");
				}
				else if(PlayerInfo[playerid][pLeader] == iGroupID || PlayerInfo[playerid][pDivision] == PlayerInfo[iTargetID][pDivision] || PlayerInfo[playerid][pRank] >= (Group_GetMaxRank(iGroupID) - 3)) {

					if(iDiv == 0)
					{
						format(szMessage, sizeof(szMessage), "You have been kicked out of your current division by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof(szMessage), "You have kicked %s from their division.", GetPlayerNameEx(iTargetID));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof szMessage, "%s %s has kicked %s out of their division in %s (%d).", arrGroupRanks[iGroupID][PlayerInfo[playerid][pRank]], GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), arrGroupData[iGroupID][g_szGroupName], iGroupID + 1);
						Log("logs/group.log", szMessage);
					}
					else
					{
						format(szMessage, sizeof szMessage, "%s %s has set you to the %s division.", arrGroupRanks[iGroupID][PlayerInfo[playerid][pRank]], GetPlayerNameEx(playerid), arrGroupDivisions[iGroupID][iDiv-1]);
						SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof szMessage, "You have set %s to the %s division.", GetPlayerNameEx(iTargetID), arrGroupDivisions[iGroupID][iDiv-1]);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
						format(szMessage, sizeof szMessage, "%s %s has set %s's division to %s in %s (%d).", arrGroupRanks[iGroupID][PlayerInfo[playerid][pRank]], GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), arrGroupDivisions[iGroupID][iDiv-1], arrGroupData[iGroupID][g_szGroupName], iGroupID + 1);
						Log("logs/group.log", szMessage);
					}
					PlayerInfo[iTargetID][pDivision] = iDiv-1;
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "You're not authorized to make that division change.");
			}
			else SendClientMessageEx(playerid, COLOR_GRAD1, "That person is not in your group.");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else if(PlayerInfo[playerid][pFMember] != 0 && PlayerInfo[playerid][pRank] >= 5) //Gotta do it like this since we dont have  Gang Leader system
	{
	    new
			iFamily = PlayerInfo[playerid][pFMember],
			iDiv,
			targetid,
			szMessage[128];

	    if(sscanf(params, "ui", targetid, iDiv))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "Usage: /setdiv [player] [division]");
	    } else {
	        if(IsPlayerConnected(targetid))
	        {
	            if(PlayerInfo[targetid][pFMember] == PlayerInfo[playerid][pFMember])
	            {
	                if(PlayerInfo[targetid][pRank] <= PlayerInfo[playerid][pRank])
	                {
	                    if(iDiv != PlayerInfo[targetid][pDivision])
	                    {
                            if(0 <= iDiv <= 5)
							{
								new file[32], month, day, year ;
								getdate(year,month,day);
       							format(szMessage, sizeof(szMessage), "You have been moved to division %s by %s.", FamilyDivisionInfo[iFamily][iDiv], GetPlayerNameEx(playerid));
              					SendClientMessageEx(targetid, COLOR_LIGHTBLUE, szMessage);
                   				format(szMessage, sizeof(szMessage), "You moved %s to division %s.", GetPlayerNameEx(targetid), FamilyDivisionInfo[iFamily][iDiv]);
                       			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
                       			format(szMessage, sizeof(szMessage), "%s has moved %s to division %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), FamilyDivisionInfo[iFamily][iDiv]);
								format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", iFamily, year, month, day);
								Log(file, szMessage);
								PlayerInfo[targetid][pDivision] = iDiv;
							}
					  		else return SendClientMessageEx(playerid, COLOR_GREY, "Invalid division ID, Please choose one between 0-4");
  						}
						else return SendClientMessageEx(playerid, COLOR_GREY, "This player is already in that division!");
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, "This player is a higher rank than you!");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "This player is not in your family/gang!");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	    }
	}
	else
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're not authorized to use this command!");
	return 1;
}

CMD:invite(playerid, params[]) {
	if(0 <= PlayerInfo[playerid][pLeader] < MAX_GROUPS) {

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /invite [player]");
		}
		else if(IsPlayerConnected(iTargetID)) {
		    if (iTargetID != playerid) {
				if(!(0 <= PlayerInfo[iTargetID][pLeader] < MAX_GROUPS) && !(0 <= PlayerInfo[iTargetID][pMember] < MAX_GROUPS) && PlayerInfo[iTargetID][pFMember] == INVALID_FAMILY_ID) {

					new
						szQuery[128],
						iGroupID = PlayerInfo[playerid][pLeader];

					format(szQuery, sizeof szQuery, "SELECT `TypeBan` FROM `groupbans` WHERE `PlayerID` = %i AND (`TypeBan` = %i OR `GroupBan` = %i)", GetPlayerSQLId(iTargetID), arrGroupData[iGroupID][g_iGroupType], iGroupID);
					mysql_function_query(MainPipeline, szQuery, true, "Group_QueryFinish", "ii", GROUP_QUERY_INVITE, playerid);

					SendClientMessage(playerid, COLOR_WHITE, "Checking group ban list, please wait...");
					SetPVarInt(playerid, "Group_Invited", iTargetID);
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "The person you're trying to invite is already in another group.");
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else if(PlayerInfo[playerid][pFMember] != INVALID_FAMILY_ID && PlayerInfo[playerid][pRank] >= 5)
	{
		new
			string[128],
			iTargetID,
			family = PlayerInfo[playerid][pFMember];

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /invite [player]");
		}
		else if(IsPlayerConnected(iTargetID))
		{
			if (!(0 <= PlayerInfo[iTargetID][pLeader] < MAX_GROUPS) && !(0 <= PlayerInfo[iTargetID][pMember] < MAX_GROUPS) && PlayerInfo[iTargetID][pFMember] == INVALID_FAMILY_ID)
			{
				if(PlayerInfo[iTargetID][pGangWarn] >= 3)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "That player can not be invited. They are banned from being in a gang.");
					return 1;
				}
				new file[32], month, day, year;
				getdate(year,month,day);
				format(string, sizeof(string), "* You've invited %s to join '%s'.",GetPlayerNameEx(iTargetID), FamilyInfo[family][FamilyName]);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s has invited you to join '%s'. (type /accept family)",GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName]);
				SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, string);
				InviteOffer[iTargetID] = playerid;
				InviteFamily[iTargetID] = family;
				format(string, sizeof(string), "%s invited %s to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), FamilyInfo[family][FamilyName]);
				format(file, sizeof(file), "family_logs/%d/%d-%02d-%02d.log", family, year, month, day);
				Log(file, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player is already in a family/faction.");
			}
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Only group leaders may use this command.");
	return 1;
}
 
CMD:buybizlevel(playerid, params[])
{
	if (PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID || PlayerInfo[playerid][pBusinessRank] < 5)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "Only business owners can use this command.");
	}
	if (Businesses[PlayerInfo[playerid][pBusiness]][bLevel] >= 5)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You cannot buy levels anymore.");
	}

	new newLevel = Businesses[PlayerInfo[playerid][pBusiness]][bLevel] + 1;
	new totalSales = Businesses[PlayerInfo[playerid][pBusiness]][bTotalSales];
	new totalProfits = Businesses[PlayerInfo[playerid][pBusiness]][bTotalProfits];

	if (newLevel == 2 && totalSales < 1000 && totalProfits < 300000)
		return SendClientMessageEx(playerid, COLOR_GREY, "This business does not have enough total sales/profits to purchase this uprgade!");
	else if (newLevel == 3 && totalSales < 5000 && totalProfits < 2000000)
		return SendClientMessageEx(playerid, COLOR_GREY, "This business does not have enough total sales/profits to purchase this uprgade!");
	else if (newLevel == 4 && totalSales < 15000 && totalProfits < 10000000)
		return SendClientMessageEx(playerid, COLOR_GREY, "This business does not have enough total sales/profits to purchase this uprgade!");

	new cost = Businesses[PlayerInfo[playerid][pBusiness]][bLevel] * 100000;
	if(Businesses[PlayerInfo[playerid][pBusiness]][bSafeBalance] < cost)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "The business does not have enough money in the safe to purchase this upgrade!");
	}
	Businesses[PlayerInfo[playerid][pBusiness]][bSafeBalance] -= cost;
	OnPlayerStatsUpdate(playerid);
	new string[128];
   	format(string, sizeof(string), "~g~BUSINESS LEVEL UP~n~~w~Current Level %d", ++Businesses[PlayerInfo[playerid][pBusiness]][bLevel]);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

    Businesses[PlayerInfo[playerid][pBusiness]][bLevelProgress] = 0;
    Businesses[PlayerInfo[playerid][pBusiness]][bInventoryCapacity] *= 2;
	if(IsBusinessGasAble(Businesses[PlayerInfo[playerid][pBusiness]][bType]))
	{
		for (new i; i < MAX_BUSINESS_GAS_PUMPS; i++)
		{
			Businesses[PlayerInfo[playerid][pBusiness]][GasPumpCapacity][i] *= 2;
		}
	}
    SaveBusiness(PlayerInfo[playerid][pBusiness]);

    return 1;
}
 
 
// Citizenship Commands
/*CMD:grantcitizenship(playerid, params[]) {

	new iGroupID = PlayerInfo[playerid][pLeader];

	if((0 <= iGroupID < MAX_GROUPS)) {


	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Only authorized business employees may use this command.");
	return 1;
}*/

// Business Leadership Commands Start

CMD:binvite(playerid, params[]) {

	new iBusinessID = PlayerInfo[playerid][pBusiness];

	if((0 <= iBusinessID < MAX_BUSINESSES) && PlayerInfo[playerid][pBusinessRank] >= Businesses[iBusinessID][bMinInviteRank]) {

		new
			iTargetID,
			string[128];

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /binvite [player]");
		}
		else if(IsPlayerConnected(iTargetID)) {
		    if (iTargetID != playerid) {
				if(!(0 <= PlayerInfo[iTargetID][pBusiness] < MAX_BUSINESSES)) {

					SetPVarInt(iTargetID, "Business_Inviter", playerid);
					SetPVarInt(iTargetID, "Business_InviterSQLId", GetPlayerSQLId(playerid));
					SetPVarInt(iTargetID, "Business_Invited", iBusinessID);
					format(string, sizeof(string), "You have invited %s to join %s", GetPlayerNameEx(iTargetID), Businesses[iBusinessID][bName]);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s %s has offered you a job at %s - type /accept business", GetBusinessRankName(PlayerInfo[playerid][pBusinessRank]), GetPlayerNameEx(playerid), Businesses[iBusinessID][bName]);
					SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, string);

					format(string, sizeof(string), "%s has invited %s to join %s", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), Businesses[iBusinessID][bName]);
					Log("logs/business.log", string);

				}
				else SendClientMessageEx(playerid, COLOR_GREY, "The person you're trying to invite is already in another business.");
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Only authorized business employees may use this command.");
	return 1;
}

CMD:buninvite(playerid, params[]) {
	if(0 <= PlayerInfo[playerid][pBusiness] < MAX_BUSINESSES && PlayerInfo[playerid][pBusinessRank] >= Businesses[PlayerInfo[playerid][pBusiness]][bMinInviteRank]) {

		new
			iTargetID,
			iGroupID = PlayerInfo[playerid][pBusiness];

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /buninvite [player]");
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(iGroupID == PlayerInfo[iTargetID][pBusiness]) {
				if(playerid == iTargetID) {
					SendClientMessageEx(playerid, COLOR_GREY, "You can't uninvite yourself.");
				}
				else if(PlayerInfo[playerid][pBusinessRank] > PlayerInfo[iTargetID][pBusinessRank]) {

					new
						szMessage[128],
						iRank = PlayerInfo[iTargetID][pBusinessRank];

					format(szMessage, sizeof(szMessage), "You have kicked %s from the business.", GetPlayerNameEx(iTargetID));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
					format(szMessage, sizeof(szMessage), "* You have been kicked from the business by %s %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szMessage);
					format(szMessage, sizeof(szMessage), "%s uninvited %s from the %s as a rank %i.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), Businesses[PlayerInfo[iTargetID][pBusiness]][bName], iRank);
					Log("logs/business.log", szMessage);

					PlayerInfo[iTargetID][pBusiness] = INVALID_BUSINESS_ID;
					PlayerInfo[iTargetID][pBusinessRank] = 0;
					OnPlayerStatsUpdate(iTargetID);

				}
				else SendClientMessageEx(playerid, COLOR_GREY, "You can't do this to a person of equal or higher rank.");
			}
			else SendClientMessageEx(playerid, COLOR_GRAD1, "That person is not in your business.");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Only authorized business employees may use this command.");
	return 1;
}



CMD:bouninvite(playerid, params[])
{
	new name[32], query[128];
	if (sscanf(params, "s[32]", name)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /bouninvite [account name]");
    if(PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID) {
		SendClientMessageEx(playerid, COLOR_GREY, "You don't own a business.");
		return 1;
	}
    if(PlayerInfo[playerid][pBusinessRank] != 5) {
		SendClientMessageEx(playerid, COLOR_GREY, "You don't own a business.");
		return 1;
	}
	format(query, sizeof(query), "UPDATE `accounts` SET `Business` = "#INVALID_BUSINESS_ID", `BusinessRank` = 0 WHERE `Username` = '%s' AND `Business` = %d", g_mysql_ReturnEscaped(name, MainPipeline), PlayerInfo[playerid][pBusiness]);
	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	SendClientMessageEx(playerid, COLOR_GREY, "You have offline kicked that person.");
	return 1;
}

CMD:bgiverank(playerid, params[])
{
    new string[128], targetid, rank;
	if (PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not in a business!");
	}
	if(sscanf(params, "ud", targetid, rank)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /bgiverank [player] [rank]");
	}
	else if (PlayerInfo[playerid][pBusinessRank] < Businesses[PlayerInfo[playerid][pBusiness]][bMinGiveRankRank]) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Your rank is not high enough for promoting or demoting someone!");
	}
	else if (!IsPlayerConnected(targetid)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified!");
	}
	else if (playerid == targetid) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You can not use this command on yourself!");
	}
	else if(PlayerInfo[playerid][pBusiness] != PlayerInfo[targetid][pBusiness]) {
		return SendClientMessageEx(playerid, COLOR_GREY, "That person is not in your business!");
	}
	else if (PlayerInfo[targetid][pBusinessRank] > PlayerInfo[playerid][pBusinessRank])	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You can not use this command on that rank persons!");
	}
	else if(rank < 0 || rank > 5) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Don't go below number 0 or above number 5!");
	}
	if (rank > PlayerInfo[targetid][pBusinessRank])	{
		format(string, sizeof(string), "* You have been promoted to a higher rank (%s) by %s.", GetBusinessRankName(rank), GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
	}
	else if (rank < PlayerInfo[targetid][pBusinessRank]) {
		format(string, sizeof(string), "* You have been demoted to a lower rank (%s) by %s.", GetBusinessRankName(rank), GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
	}
	else {
		SendClientMessageEx(playerid, COLOR_GREY, "That person already has rank");
	}
	PlayerInfo[targetid][pBusinessRank] = rank;
	format(string, sizeof(string), "* You have given %s rank %d.", GetPlayerNameEx(targetid), rank);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has given %s rank %i in %s", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), rank, Businesses[PlayerInfo[targetid][pBusiness]][bName]);
	Log("logs/business.log", string);
	return 1;
}

CMD:resign(playerid, params[])
{
	if (PlayerInfo[playerid][pBusiness] != INVALID_BUSINESS_ID)
	{
		new string[128];
		format(string, sizeof(string), "%s has resigned from their business as a rank %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pBusinessRank]);
		Log("logs/business.log", string);
		PlayerInfo[playerid][pBusiness] = INVALID_BUSINESS_ID;
		PlayerInfo[playerid][pBusinessRank] = INVALID_RANK;
		return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have resigned from your business.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You are not in a business!");
}

CMD:bsafe(playerid, params[])
{
    if(PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID) {
		SendClientMessageEx(playerid, COLOR_GREY, "You don't own a business.");
		return 1;
	}
	else if(!IsPlayerInRangeOfPoint(playerid, 25.0, Businesses[PlayerInfo[playerid][pBusiness]][bIntPos][0], Businesses[PlayerInfo[playerid][pBusiness]][bIntPos][1], Businesses[PlayerInfo[playerid][pBusiness]][bIntPos][2])) {
		SendClientMessageEx(playerid, COLOR_GREY, "You need to be inside your business to access your business safe.");
		return 1;
	}
	else if(PlayerInfo[playerid][pBusinessRank] < Businesses[PlayerInfo[playerid][pBusiness]][bMinSafeRank]) {
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't high enough rank to access the business safe.");
		return 1;
	}
	else {
	    new choice[10], Amount, string[128];
	    if(sscanf(params, "s[10]D", choice, Amount)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /bsafe [name] [amount]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Balance, Withdraw, Deposit");
			return 1;
		}
		else if(!strcmp(choice, "Balance", true))
		{
		    format(string, sizeof(string), "Business(%d) Safe Balance: $%s", PlayerInfo[playerid][pBusiness], number_format(Businesses[PlayerInfo[playerid][pBusiness]][bSafeBalance]));
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(Amount < 1) {
		    SendClientMessageEx(playerid, COLOR_GREY, "The amount can't be under 1.");
		    return 1;
		}
		else if(!strcmp(choice, "Withdraw", true))
		{
		    if(Businesses[PlayerInfo[playerid][pBusiness]][bSafeBalance] >= Amount) {
		    	format(string, sizeof(string), "You have withdrew $%s from your business safe.", number_format(Amount));
		    	SendClientMessageEx(playerid, COLOR_WHITE, string);
		    	Businesses[PlayerInfo[playerid][pBusiness]][bSafeBalance] -= Amount;
		    	format(string, sizeof(string), "Business(%d) Safe Balance: $%s", PlayerInfo[playerid][pBusiness], number_format(Businesses[PlayerInfo[playerid][pBusiness]][bSafeBalance]));
		    	SendClientMessageEx(playerid, COLOR_WHITE, string);
		    	format(string,sizeof(string),"%s (IP: %s) has withdrawn $%s from their business safe (BusinessID - %d)",GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), number_format(Amount), PlayerInfo[playerid][pBusiness]);
				Log("logs/business.log", string);
		   		GivePlayerCash(playerid, Amount);
		   		SaveBusiness(PlayerInfo[playerid][pBusiness]);
			}
			else {
			    SendClientMessageEx(playerid, COLOR_GREY, "You don't have that much in your business safe.");
			}
		}
		else if(!strcmp(choice, "Deposit", true))
		{
		    if(GetPlayerCash(playerid) >= Amount) {
		    	format(string, sizeof(string), "You have deposited $%s into your business safe.", number_format(Amount));
		    	SendClientMessageEx(playerid, COLOR_WHITE, string);
		    	Businesses[PlayerInfo[playerid][pBusiness]][bSafeBalance] += Amount;
		    	format(string, sizeof(string), "Business(%d) Safe Balance: $%s", PlayerInfo[playerid][pBusiness], number_format(Businesses[PlayerInfo[playerid][pBusiness]][bSafeBalance]));
		    	SendClientMessageEx(playerid, COLOR_WHITE, string);
		    	format(string,sizeof(string),"%s (IP: %s) has deposited $%s into their business safe (BusinessID - %d)",GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), number_format(Amount), PlayerInfo[playerid][pBusiness]);
				Log("logs/business.log", string);
		   		GivePlayerCash(playerid, -Amount);
		   		SaveBusiness(PlayerInfo[playerid][pBusiness]);
			}
			else {
			    SendClientMessageEx(playerid, COLOR_GREY, "You don't have that much cash on you.");
			}
		}
	}
	return 1;
}

// Business Admin Commands
CMD:bedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}

	new choice[32], businessid, amount, string[128];
	if(sscanf(params, "s[32]dD(0)", choice, businessid, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /bedit [name] [businessid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, SupplyPoint, Price, Type, Inventory, InventoryCapacity, SafeBalance, Delete");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: CustomInterior, CustomExterior, Months, GymEntryFee, GymType, VW, Grade");
		return 1;
	}

	if (!IsValidBusinessID(businessid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid business ID entered.");
		return 1;
	}
	if(!strcmp(choice, "grade", true))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the grade on this business!");
		format(string, sizeof(string), "%s has changed BusinessID %d's Grade to %i", GetPlayerNameEx(playerid), businessid, amount);
		Businesses[businessid][bGrade] = amount;
		Log("logs/bedit.log", string);
	}
    if(!strcmp(choice, "months", true))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the months left on this business!");
		format(string, sizeof(string), "%s has changed BusinessID %d's Months to %i", GetPlayerNameEx(playerid), businessid, amount);
		Businesses[businessid][bMonths] = 2592000*amount+gettime()+259200;
		Log("logs/bedit.log", string);
	}
	else if(!strcmp(choice, "vw", true))
	{
		Businesses[businessid][bVW] = amount;
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the VW!");
		format(string, sizeof(string), "%s has changed BusinessID %d's vw to %d", GetPlayerNameEx(playerid), businessid, amount);
		Log("logs/bedit.log", string);
	}
	if(!strcmp(choice, "exterior", true))
	{
		GetPlayerPos(playerid, Businesses[businessid][bExtPos][0], Businesses[businessid][bExtPos][1], Businesses[businessid][bExtPos][2]);
		GetPlayerFacingAngle(playerid, Businesses[businessid][bExtPos][3]);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the exterior!");
		format(string, sizeof(string), "%s has changed BusinessID %d's Exterior to X:%f Y:%f Z:%f", GetPlayerNameEx(playerid), businessid, Businesses[businessid][bExtPos][0], Businesses[businessid][bExtPos][1],Businesses[businessid][bExtPos][2]);
		Log("logs/bedit.log", string);
	}
	else if(!strcmp(choice, "interior", true))
	{
		GetPlayerPos(playerid, Businesses[businessid][bIntPos][0], Businesses[businessid][bIntPos][1], Businesses[businessid][bIntPos][2]);
		GetPlayerFacingAngle(playerid, Businesses[businessid][bIntPos][3]);
		Businesses[businessid][bInt] = GetPlayerInterior(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the interior!");
		format(string, sizeof(string), "%s has changed BusinessID %d's Interior to X:%f Y:%f Z:%f", GetPlayerNameEx(playerid), businessid, Businesses[businessid][bIntPos][0], Businesses[businessid][bIntPos][1],Businesses[businessid][bIntPos][2]);
		Log("logs/bedit.log", string);
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(Businesses[businessid][bCustomInterior] == 0)
		{
			Businesses[businessid][bCustomInterior] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Business set to custom interior!");
		}
		else
		{
			Businesses[businessid][bCustomInterior] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Business set to normal (not custom) interior!");
		}
		format(string, sizeof(string), "%s has edited BusinessID %d's CustomInterior.", GetPlayerNameEx(playerid), businessid);
		Log("logs/bedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(Businesses[businessid][bCustomExterior] == 0)
		{
			Businesses[businessid][bCustomExterior] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Business set to custom exterior!");
		}
		else
		{
			Businesses[businessid][bCustomExterior] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Business set to normal (not custom) exterior!");
		}
		format(string, sizeof(string), "%s has edited BusinessID %d's CustomExterior.", GetPlayerNameEx(playerid), businessid);
		Log("logs/bedit.log", string);
		return 1;
	}
	else if(!strcmp(choice, "supplypoint", true))
	{
		if(Businesses[businessid][bOrderState] == 2)
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "You can't change the supply point when a delivery is on its way.");
		}
		GetPlayerPos(playerid, Businesses[businessid][bSupplyPos][0], Businesses[businessid][bSupplyPos][1], Businesses[businessid][bSupplyPos][2]);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have edited the supply point!");
		format(string, sizeof(string), "%s has changed BusinessID %d's Supply Point to X:%f Y:%f Z:%f", GetPlayerNameEx(playerid), businessid, Businesses[businessid][bSupplyPos][0], Businesses[businessid][bSupplyPos][1],Businesses[businessid][bSupplyPos][2]);
		Log("logs/bedit.log", string);
	}

	else if(!strcmp(choice, "price", true))
	{
		Businesses[businessid][bValue] = amount;
		format(string, sizeof(string), "You have set the business price to $%d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has changed BusinessID %d's Price to $%d.", GetPlayerNameEx(playerid), businessid, amount);
		Log("logs/bedit.log", string);
	}

	else if(!strcmp(choice, "type", true))
	{
		if(Businesses[businessid][bOrderState] == 2)
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "You can't change the business type when a delivery is on its way.");
		}
		Businesses[businessid][bType] = amount;
		format(string, sizeof(string), "You have set the business type to %s.", GetBusinessTypeName(amount));
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has changed BusinessID %d's Type to %s (%d).", GetPlayerNameEx(playerid), businessid, GetBusinessTypeName(amount), amount);
		Log("logs/bedit.log", string);
	}

	else if(!strcmp(choice, "inventory", true))
	{
		Businesses[businessid][bInventory] = amount;
		format(string, sizeof(string), "You have set the business inventory to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has changed BusinessID %d's Inventory to %d.", GetPlayerNameEx(playerid), businessid, amount);
		Log("logs/bedit.log", string);
	}
	else if(!strcmp(choice, "InventoryCapacity", true))
	{
		Businesses[businessid][bInventoryCapacity] = amount;
		format(string, sizeof(string), "You have set the business inventory capacity to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has changed BusinessID %d's Inventory Capacity to %d.", GetPlayerNameEx(playerid), businessid, amount);
		Log("logs/bedit.log", string);
	}

	else if(!strcmp(choice, "safebalance", true))
	{
		Businesses[businessid][bSafeBalance] = amount;
		format(string, sizeof(string), "You have set the business safe to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has changed BusinessID %d's safe to %d.", GetPlayerNameEx(playerid), businessid, amount);
		Log("logs/bedit.log", string);
	}

	else if (!strcmp(choice, "gymentryfee", true))
	{
		if (Businesses[businessid][bType] != BUSINESS_TYPE_GYM)
		{
			return SendClientMessageEx(playerid, COLOR_GRAD2, "Only Gyms can have entrance fees!");
		}

		Businesses[businessid][bGymEntryFee] = amount;
		format(string, sizeof(string), "You have set the gym entry fee to %i.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has changed BusinessID %i's gym entry fee to %i.", GetPlayerNameEx(playerid), businessid, amount);
		Log("logs/bedit.log", string);
	}

	else if (!strcmp(choice, "gymtype", true))
	{
		if (Businesses[businessid][bType] != BUSINESS_TYPE_GYM)
		{
			return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only use this command on a gym!");
		}

		if (amount == 1) // swimming pool & boxing arena
		{
			Businesses[businessid][bGymType] = amount;
		}
		else if (amount == 2) // bike parkour
		{
			Businesses[businessid][bGymType] = amount;
		}
		else
		{
			return SendClientMessageEx(playerid, COLOR_GRAD2, "Available types are: Swimming Pool / Boxing Arena(1) or Bike Parkour (2)");
		}

		format(string, sizeof(string), "You have the set the gym type to %i.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has changed BusinessID %i's gym type to %i.", GetPlayerNameEx(playerid), businessid, amount);
		Log("logs/bedit.log", string);
	}

	else if(!strcmp(choice, "delete", true))
	{
		Businesses[businessid][bExtPos][0] = 0;
		Businesses[businessid][bExtPos][1] = 0;
		Businesses[businessid][bExtPos][2] = 0;
		Businesses[businessid][bName][0] = 0;
		Businesses[businessid][bType] = 0;
		format(string, sizeof(string), "You have deleted the business.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has deleted BusinessID %d.", GetPlayerNameEx(playerid), businessid);
		Log("logs/bedit.log", string);
		//TODO IMPROVE
		for (new i; i < MAX_BUSINESS_GAS_PUMPS; i++) {
			DestroyDynamicGasPump(businessid, i);
		}
		for (new i; i < MAX_BUSINESS_DEALERSHIP_VEHICLES; i++) {
			DestroyVehicle(Businesses[businessid][bVehID][i]);
		}
	}

	RefreshBusinessPickup(businessid);
	SaveBusiness(businessid);
	Streamer_UpdateEx(playerid, Businesses[businessid][bExtPos][0], Businesses[businessid][bExtPos][1], Businesses[businessid][bExtPos][2]);

	return 1;
}

CMD:bname(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new name[40], businessid;

		if(sscanf(params, "ds[40]", businessid, name)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /bname [business id] [name]");
		}
		else if (!IsValidBusinessID(businessid)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "Invalid business specified.");
		}
		else if(strfind(name, "\r") != -1 || strfind(name, "\n") != -1) {
			return SendClientMessageEx(playerid, COLOR_GREY, "Newline characters are forbidden.");
		}

		strcpy(Businesses[businessid][bName], name, sizeof(name));
		SaveBusiness(businessid);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully changed the name of this business.");
		RefreshBusinessPickup(businessid);

		new string[128];
		format(string, sizeof(string), "%s has edited business ID %d's name to %s.", GetPlayerNameEx(playerid), businessid, Businesses[businessid][bName]);
		Log("logs/bedit.log", string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}

	return 1;
}

CMD:bnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available business...");
		for(new i; i<MAX_BUSINESSES;i++)
		{
		    if(Businesses[i][bType] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", i);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}


CMD:bnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing businesses within 30 meters of you");
		for(new i;i<MAX_BUSINESSES;i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30, Businesses[i][bExtPos][0], Businesses[i][bExtPos][1], Businesses[i][bExtPos][2]))
			{
			    new string[128];
		    	format(string, sizeof(string), "Business ID %d | %f from you", i, GetPlayerDistanceFromPoint(playerid,Businesses[i][bExtPos][0], Businesses[i][bExtPos][1], Businesses[i][bExtPos][2]));
		    	SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:gotobiz(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new id;
		if(sscanf(params, "d", id)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotobiz [business id]");
		if(!IsValidBusinessID(id)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid business ID specified.");
		if (Businesses[id][bExtPos][0] == 0.0) return SendClientMessageEx(playerid, COLOR_GREY, "No exterior set for this business.");
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		PlayerInfo[playerid][pVW] = 0;
		SetPlayerPos(playerid,Businesses[id][bExtPos][0],Businesses[id][bExtPos][1],Businesses[id][bExtPos][2]);
		SetPlayerFacingAngle(playerid,Businesses[id][bExtPos][3]);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}


CMD:goinbiz(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new id;
		if(sscanf(params, "d", id)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /goinbiz [businessid]");
		if(!IsValidBusinessID(id)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid business ID specified.");
		if (Businesses[id][bExtPos][0] == 0.0) return SendClientMessageEx(playerid, COLOR_GREY, "No interior set for this business.");
		SetPlayerInterior(playerid,Businesses[id][bInt]);
		SetPlayerPos(playerid,Businesses[id][bIntPos][0],Businesses[id][bIntPos][1],Businesses[id][bIntPos][2]);
		SetPlayerFacingAngle(playerid,Businesses[id][bIntPos][3]);
		SetPVarInt(playerid, "BusinessesID", id);
		if(Businesses[id][bVW] == 0) SetPlayerVirtualWorld(playerid, BUSINESS_BASE_VW + id), PlayerInfo[playerid][pVW] = BUSINESS_BASE_VW + id;
		else SetPlayerVirtualWorld(playerid, Businesses[id][bVW]), PlayerInfo[playerid][pVW] = Businesses[id][bVW];
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 4) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}

	new string[128], biz;
	if(sscanf(params, "d", biz)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /asellbiz [business id]");

	Businesses[biz][bOwner] = -1;
	SaveBusiness(biz);
	RefreshBusinessPickup(biz);
	new ip[16];
	GetPlayerIp(playerid,ip,sizeof(ip));
	format(string,sizeof(string),"Administrator %s (IP: %s) has admin-sold business ID %d (was owned by %d).",GetPlayerNameEx(playerid),ip,biz,Businesses[biz][bOwner]);
	Log("logs/business.log", string);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof(string), "~w~You have sold business %d.", biz);
	GameTextForPlayer(playerid, string, 10000, 3);
	//foreach(new j: Player) {
	for(new j = 0; j < MAX_PLAYERS; ++j)
	{
		if(IsPlayerConnected(j))
		{	
			if(PlayerInfo[j][pBusiness] == biz) 
			{
				PlayerInfo[j][pBusiness] = INVALID_BUSINESS_ID;
				PlayerInfo[j][pBusinessRank] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "An admin has sold this business, your business stats have been reset.");
			}
		}	
	}

	format(string, sizeof(string), "UPDATE `accounts` SET `Business` = "#INVALID_BUSINESS_ID", `BusinessRank` = 0 WHERE `Business` = '%d'", biz);
	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	return 1;
}

/*CMD:sellbiz(playerid, params[])
{
    if(PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID )
    {
        return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a business!");
	}
	else if(PlayerInfo[playerid][pBusinessRank] < 5 && Businesses[PlayerInfo[playerid][pBusiness]][bOwner] != GetPlayerSQLId(playerid)) {
	    return SendClientMessageEx(playerid, COLOR_GREY, "You aren't the owner of the business.");
	}
    else if (IsPlayerInRangeOfPoint(playerid, 2.0, Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][0], Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][1], Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][2]))
    {
        new i = PlayerInfo[playerid][pBusiness];

		PlayerInfo[playerid][pBusiness] = INVALID_BUSINESS_ID;
		PlayerInfo[playerid][pBusinessRank] = 0;
		GivePlayerCash(playerid,Businesses[i][bValue]);
		OnPlayerStatsUpdate(playerid);
		Businesses[i][bOwner] = -1;
		SaveBusiness(i);
		RefreshBusinessPickup(i);
		new string[128];
		format(string,sizeof(string),"%s (IP: %s) has sold business ID %d for $%d",GetPlayerNameEx(playerid),GetPlayerIpEx(playerid),i, Businesses[i][bValue]);
		Log("logs/business.log", string);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Congratulations~n~You have sold your business for ~n~~g~$%d", Businesses[i][bValue]);
		GameTextForPlayer(playerid, string, 10000, 3);
		foreach(new j: Player) {
			if(PlayerInfo[j][pBusiness] == i) {
				PlayerInfo[j][pBusiness] = INVALID_BUSINESS_ID;
				PlayerInfo[j][pBusinessRank] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "The owner of the business you were a part of has sold his business.");
			}
		}

		format(string, sizeof(string), "UPDATE `accounts` SET `Business` = "#INVALID_BUSINESS_ID", `BusinessRank` = 0 WHERE `Business` = '%d'", i);
		mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);
		return 1;
    }
    else
    {
	    SendClientMessageEx(playerid, COLOR_WHITE, "You need to be at your business in order to sell it.");
	    return 1;
    }
}

CMD:buybiz(playerid, params[])
{
    if(PlayerInfo[playerid][pBusiness] != INVALID_BUSINESS_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You already own a business!");
	for(new i = 0; i < sizeof(Businesses); i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, Businesses[i][bExtPos][0], Businesses[i][bExtPos][1], Businesses[i][bExtPos][2]))
	    {
	        if (Businesses[i][bOwner] >= 1)
	        {
	        	return SendClientMessageEx(playerid, COLOR_GREY, "This business is already owned!");
	        }
	        if (GetPlayerCash(playerid) < Businesses[i][bValue])
	        {
	        	return SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough cash!");
	        }
			GivePlayerCash(playerid, -Businesses[i][bValue]);
			Businesses[i][bOwner] = GetPlayerSQLId(playerid);
			strcpy(Businesses[i][bOwnerName], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			PlayerInfo[playerid][pBusiness] = i;
			PlayerInfo[playerid][pBusinessRank] = 5;
			SendClientMessageEx(playerid, COLOR_WHITE, "Congratulations on your new purchase!");
			SendClientMessageEx(playerid, COLOR_WHITE, "Type /help to review the business help section!");
			SaveBusiness(i);
			OnPlayerStatsUpdate(playerid);
			RefreshBusinessPickup(i);
			new string[128];
			format(string,sizeof(string),"%s (IP: %s) has bought business ID %d for $%d.", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), i, Businesses[i][bValue]);
			Log("logs/business.log", string);
			return 1;
	    }
	}
	return SendClientMessageEx(playerid, COLOR_WHITE, "You're not near a business!");
}
*/

CMD:creategaspump(playerid, params[])
{
    new string[128], iBusinessID;
    if(PlayerInfo[playerid][pAdmin] >= 4) {

		if(sscanf(params, "d", iBusinessID)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /creategaspump [business id]");
		}
		else
		{
			if (GetFreeGasPumpID(iBusinessID) == INVALID_GAS_PUMP)
			return SendClientMessageEx(playerid, COLOR_GRAD1, "The maximum number of gas pumps has been reached for this business.");

			if (!(0 <= iBusinessID < MAX_BUSINESSES)) {
				return SendClientMessageEx(playerid, COLOR_GREY, "Invalid business specified.");
			}
		 	if (!Businesses[iBusinessID][bType]) {
		 		return SendClientMessageEx(playerid, COLOR_GREY, "Type of this business must have been set before using this command.");
		 	}
			if(!IsBusinessGasAble(Businesses[iBusinessID][bType])) {
		        return SendClientMessageEx(playerid, COLOR_GREY, "You can't create gas pumps for this type of business.");
		    }
		    if(!IsPlayerInRangeOfPoint(playerid, 150.0, Businesses[iBusinessID][bExtPos][0], Businesses[iBusinessID][bExtPos][1], Businesses[iBusinessID][bExtPos][2])) {
		        return SendClientMessageEx(playerid, COLOR_GREY, "You are too far away from the business.");
		    }
			new iPump = GetFreeGasPumpID(iBusinessID);
			Businesses[iBusinessID][GasPumpCapacity][iPump] = Businesses[iBusinessID][bLevel] * 100;
			CreateDynamicGasPump(playerid, iBusinessID, iPump);
			SaveBusiness(iBusinessID);

			format(string, sizeof(string), "%s has created a gas pump for %s (%d)", Businesses[iBusinessID][bName], iBusinessID);
			Log("logs/bedit.log", string);
			return 1;

		}
    } else return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
}

CMD:editgaspump(playerid, params[])
{
    new iBusinessID, iPumpID, szLog[128], szName[9], Float: fValue;
    if(PlayerInfo[playerid][pAdmin] < 4) {
        return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
    }

	if(sscanf(params, "dds[9]F(0)", iBusinessID, iPumpID, szName, fValue)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editgaspump [business id] [pump id] [name] [value]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available Names: Capacity, Gas, Position");
	}

	if (!(0 <= iBusinessID < MAX_BUSINESSES))
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "Invalid business specified.");
	}
	else if (!(0 <= iPumpID < MAX_BUSINESS_GAS_PUMPS))
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "Invalid gas pump specified.");
	}
	else if(Businesses[iBusinessID][GasPumpVehicleID][iPumpID])
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You can't edit a gas pump while it is in use.");
	}

	if(!strcmp(szName, "position", true))
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 150.0, Businesses[iBusinessID][bExtPos][0], Businesses[iBusinessID][bExtPos][1], Businesses[iBusinessID][bExtPos][2])) {
        	return SendClientMessageEx(playerid, COLOR_GREY, "You are far away from the business.");
    	}
    	format(szLog, sizeof(szLog), "%s has changed the position of pump %d for business %d", GetPlayerNameEx(playerid), iPumpID, iBusinessID);

		DestroyDynamicGasPump(iBusinessID, iPumpID);
		CreateDynamicGasPump(playerid, iBusinessID, iPumpID);
		SaveBusiness(iBusinessID);

	}
	else if(!strcmp(szName, "gas", true))
	{
	    if (fValue > Businesses[iBusinessID][GasPumpCapacity][iPumpID])
	    {
		    SendClientMessageEx(playerid, COLOR_GREY, "The value cannot be higher than the capacity!");
		    return 1;
	    }
		Businesses[iBusinessID][GasPumpGallons][iPumpID] = fValue;
		SendClientMessageEx(playerid, COLOR_WHITE, "You have edited the gas pump gas amount!");
		format(szLog, sizeof(szLog), "%s has changed the gas amount of pump %d for %s (%d) to %.2f", GetPlayerNameEx(playerid), iPumpID, Businesses[iBusinessID][bName], iBusinessID, fValue);
	}
	else if(!strcmp(szName, "capacity", true))
	{
		Businesses[iBusinessID][GasPumpCapacity][iPumpID] = fValue;
		SendClientMessageEx(playerid, COLOR_WHITE, "You have edited the gas pump capacity!");
		format(szLog, sizeof(szLog), "%s has changed the gas capacity of pump %d for %s (%d) to %.2f", GetPlayerNameEx(playerid), iPumpID, Businesses[iBusinessID][bName], iBusinessID, fValue);
	}

	SaveBusiness(iBusinessID);
	Log("logs/bedit.log", szLog);
	return 1;
}

CMD:deletegaspump(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4) {
        return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    }
    new businessid, id, string[128];
	if(sscanf(params, "dd", businessid, id)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /deletegaspump [business id] [pump id]");
	}
	if(!IsValidBusinessID(businessid) || id < 0 || id >= MAX_BUSINESS_GAS_PUMPS || Businesses[businessid][GasPumpPosX][id] == 0) {
		return SendClientMessageEx(playerid, COLOR_GREY, "No gas pump found with that ID.");
	}
	if(Businesses[businessid][GasPumpVehicleID][id]) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You can't delete a gas pump while it is in use.");
	}

 	DestroyDynamicGasPump(businessid, id);
	Businesses[businessid][GasPumpPosX][id] = 0;
	Businesses[businessid][GasPumpPosY][id] = 0;
	Businesses[businessid][GasPumpPosZ][id] = 0;
	Businesses[businessid][GasPumpAngle][id] = 0;
	Businesses[businessid][GasPumpCapacity][id] = 0;
	Businesses[businessid][GasPumpGallons][id] = 0;
	Businesses[businessid][GasPumpSaleGallons][id] = 0;
	Businesses[businessid][GasPumpSalePrice][id] = 0;
	SaveBusiness(businessid);

    format(string, sizeof(string), "You have successfully deleted the gas pump %d for business %d.", id, businessid);
    SendClientMessageEx(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "Admin %s deleted a gas pump for business %d", businessid);
	Log("logs/bedit.log", string);

	return 1;
}

CMD:addmats(playerid, params[]) {
	return cmd_addmaterials(playerid, params);
}

CMD:addmaterials(playerid, params[])
{
    new	string[128], amount;
	if (PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not in a business!");
	}
	if (Businesses[PlayerInfo[playerid][pBusiness]][bType] != BUSINESS_TYPE_GUNSHOP) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Command not available for this type of business.");
	}
	if(sscanf(params, "d", amount) || amount < 0) {
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /addmaterials [amount]");
	}
	if (amount > PlayerInfo[playerid][pMats]) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many materials.");
	}
	if (Businesses[PlayerInfo[playerid][pBusiness]][bInventory] + amount > Businesses[PlayerInfo[playerid][pBusiness]][bInventoryCapacity]) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Inventory capacity exceeded.");
	}
	if (InBusiness(playerid) != PlayerInfo[playerid][pBusiness]) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You must be inside the business.");
	}
	Businesses[PlayerInfo[playerid][pBusiness]][bInventory] += amount;
	PlayerInfo[playerid][pMats] -= amount;
	OnPlayerStatsUpdate(playerid);
	SaveBusiness(PlayerInfo[playerid][pBusiness]);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have successfully added materials to the business inventory!");
	format(string, sizeof(string), "INVENTORY: %d/%d materials", Businesses[PlayerInfo[playerid][pBusiness]][bInventory], Businesses[PlayerInfo[playerid][pBusiness]][bInventoryCapacity]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:offergun(playerid, params[])
{
	if (PlayerInfo[playerid][pBusiness] != INVALID_BUSINESS_ID && Businesses[PlayerInfo[playerid][pBusiness]][bType] != BUSINESS_TYPE_GUNSHOP)	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not working for a gun store!");
	}
	new buyerid, weapon;
	if (sscanf(params, "uk<sweapon>", buyerid, weapon)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /offergun [player] [weapon name]");
	}
	if (!IsPlayerConnected(buyerid)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified!");
	}
	if (playerid == buyerid) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You can't offer a gun to yourself!");
	}
    if(!ProxDetectorS(5.0, playerid, buyerid)) {
    	return SendClientMessageEx(playerid, COLOR_GREY, "The customer is not near you!");
    }
	if (InBusiness(playerid) != PlayerInfo[playerid][pBusiness]) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not inside the business!");
	}
	if(PlayerInfo[buyerid][pConnectHours] < 2 || PlayerInfo[buyerid][pWRestricted] > 0) {
		return SendClientMessageEx(playerid, COLOR_GREY, "That player is currently weapon restricted!");
	}	
	new b = InBusiness(playerid);
	if (Businesses[b][bInventory] < GetWeaponParam(weapon, WeaponMats)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Business inventory does not have enough materials for that weapon.");
	}
	if (Businesses[b][bInventory] < GetWeaponParam(weapon, WeaponMinLevel)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Business level is not high enough to sell that type of gun.");
 	}

	new price = GetWeaponPrice(PlayerInfo[playerid][pBusiness], weapon);

	new string[128];
	format(string, sizeof(string), "* You offered %s to buy a %s for $%s", GetPlayerNameEx(buyerid), Weapon_ReturnName(weapon), number_format(price));
    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* Employee %s offers you a %s for $%s (type /accept gun) to buy.", GetPlayerNameEx(playerid), Weapon_ReturnName(weapon), number_format(price));
    SendClientMessageEx(buyerid, COLOR_LIGHTBLUE, string);

	SetPVarInt(buyerid, "Business_WeapType", weapon);
	SetPVarInt(buyerid, "Business_WeapOfferer", playerid);
	SetPVarInt(buyerid, "Business_WeapOffererSQLId", GetPlayerSQLId(playerid));
	SetPVarInt(buyerid, "Business_WeapPrice", price);
	return 1;
}


CMD:offermenu(playerid, params[])
{
    new iBusiness = InBusiness(playerid);

   	if(iBusiness == INVALID_BUSINESS_ID || (Businesses[iBusiness][bType] != BUSINESS_TYPE_BAR && Businesses[iBusiness][bType] != BUSINESS_TYPE_CLUB && Businesses[iBusiness][bType] != BUSINESS_TYPE_RESTAURANT)) return SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in a bar, club or restaurant!");
	else if(Businesses[iBusiness][bInventory] < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "   Business does not have enough inventory!");

	new szDialog[512], pvar[25], line;

	if (Businesses[iBusiness][bType] == BUSINESS_TYPE_BAR || Businesses[iBusiness][bType] == BUSINESS_TYPE_CLUB)
	{
		for (new item; item < sizeof(Drinks); item++)
		{
			new cost = (PlayerInfo[playerid][pDonateRank] >= 1) ? (floatround(Businesses[iBusiness][bItemPrices][item] * 0.8)) : (Businesses[iBusiness][bItemPrices][item]);
			format(szDialog, sizeof(szDialog), "%s%s  ($%s)\n", szDialog, Drinks[item], number_format(cost));
			format(pvar, sizeof(pvar), "Business_MenuItem%d", line);
			SetPVarInt(playerid, pvar, item);
			format(pvar, sizeof(pvar), "Business_MenuItemPrice%d", line);
			SetPVarInt(playerid, pvar, Businesses[iBusiness][bItemPrices][item]);
			line++;
		}
	}
	else if(Businesses[iBusiness][bType] == BUSINESS_TYPE_RESTAURANT)
	{
		for (new item; item < sizeof(RestaurantItems); ++item)
		{
			new cost = (PlayerInfo[playerid][pDonateRank] >= 1) ? (floatround(Businesses[iBusiness][bItemPrices][item] * 0.8)) : (Businesses[iBusiness][bItemPrices][item]);
			format(szDialog, sizeof(szDialog), "%s%s  ($%s)\n", szDialog, RestaurantItems[item], number_format(cost));
			format(pvar, sizeof(pvar), "Business_MenuItem%d", line);
			SetPVarInt(playerid, pvar, item);
			format(pvar, sizeof(pvar), "Business_MenuItemPrice%d", line);
			SetPVarInt(playerid, pvar, Businesses[iBusiness][bItemPrices][item]);
			line++;
		}
	}

   	if(strlen(szDialog) == 0) SendClientMessageEx(playerid, COLOR_GRAD2, "   Store is not selling any items!");
    else ShowPlayerDialog(playerid, RESTAURANTMENU, DIALOG_STYLE_LIST, "Menu", szDialog, "Buy", "Cancel");
    return 1;
}

CMD:buyfood(playerid, params[])
{
	if (!IsAtRestaurant(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in a restaurant!");
		return 1;
	}

	new iBusiness = InBusiness(playerid);

	if (Businesses[iBusiness][bInventory] < 1) {
	    SendClientMessageEx(playerid, COLOR_GRAD2, "   Business does not have enough inventory!");
	    return 1;
	}

	if (!Businesses[iBusiness][bStatus])
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "This restaurant is closed!");
		return 1;
	}

	new szDialog[512], pvar[25], line;

	for (new item; item < sizeof(RestaurantItems); ++item)
	{
		format(szDialog, sizeof(szDialog), "%s%s  ($%s)\n", szDialog, RestaurantItems[item], number_format(Businesses[iBusiness][bItemPrices][item]));
		format(pvar, sizeof(pvar), "Business_MenuItem%d", line);
		SetPVarInt(playerid, pvar, item);
		format(pvar, sizeof(pvar), "Business_MenuItemPrice%d", line);
		SetPVarInt(playerid, pvar, Businesses[iBusiness][bItemPrices][item]);
		line++;
	}

	if (strlen(szDialog) == 0)
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "   Store is not selling any items!");
    }
    else
	{
    	ShowPlayerDialog(playerid, RESTAURANTMENU, DIALOG_STYLE_LIST, "Menu", szDialog, "Buy", "Cancel");
    }

	return 1;
}

CMD:bpanic(playerid, params[])
{
	if (PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not working for a business!");
	}
	if (PlayerInfo[playerid][pBusiness] != InBusiness(playerid)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not in the business interior!");
	}
	new string[128];
	if(GetPVarInt(playerid, "bizpanic") == 0)
	{
		format(string, sizeof(string), "** %s hits a small button.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(string, sizeof(string), "* %s %s has hit the panic button at %s - /bizfind %d for a gps location.", GetBusinessRankName(PlayerInfo[playerid][pBusinessRank]), GetPlayerNameEx(playerid), Businesses[InBusiness(playerid)][bName], InBusiness(playerid));
		SendClientMessage(playerid, COLOR_GRAD2, "* The police have been notified that you require help. ");
		SetPVarInt(playerid, "bizpanic", 1);
	}
	else
	{
		format(string, sizeof(string), "** %s hits a small button.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(string, sizeof(string), "* %s %s no longer requires help at %s.", GetBusinessRankName(PlayerInfo[playerid][pBusinessRank]), GetPlayerNameEx(playerid), Businesses[InBusiness(playerid)][bName]);
		SendClientMessage(playerid, COLOR_GRAD2, "* The police have been notified that you no longer require help. ");
		SetPVarInt(playerid, "bizpanic", 0);
	}
	//foreach(new i: Player)
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{	
			if(IsACop(i))
			{
				SetPlayerMarkerForPlayer(i, playerid, 0x2641FEAA);
				SendClientMessageEx(i, COLOR_LIGHTBLUE, string);
			}
		}	
	}
	return 1;
}

CMD:bizfind(playerid, params[])
{
	if(IsACop(playerid))
	{
	    new iBusinessID, string[128];
	    if(sscanf(params, "d", iBusinessID))
	    {
	        return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /bizfind [business id]");
	    }
		if(IsValidBusinessID(iBusinessID))
		{
		    if(Businesses[iBusinessID][bOwner])
		    {
                SetPVarInt(playerid,"bpanic", 1);
		        format(string, sizeof(string), "* Setting your GPS Waypoint to find %s", Businesses[iBusinessID][bName]);
 				SetPlayerCheckpoint(playerid, Businesses[iBusinessID][bExtPos][0], Businesses[iBusinessID][bExtPos][1], Businesses[iBusinessID][bExtPos][2], 4.0);
 				return 1;
			}
			return SendClientMessageEx(playerid, COLOR_GRAD2, " That business doesn't have an owner. ");
		}
		return SendClientMessageEx(playerid, COLOR_GRAD2, " Invalid Business ID.");
	}
	return SendClientMessageEx(playerid, COLOR_GRAD2, " You do not have access to the Business Directory. (Law Enforcement Only)");
}

CMD:binventory(playerid, params[])
{
	new
		string[128],
		iBusiness = PlayerInfo[playerid][pBusiness];
	if(iBusiness != INVALID_BUSINESS_ID)
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "|_________ Business Inventory_________|");
		format(string, sizeof(string), "Amount: %d / Capacity: %d / Type: %s", Businesses[iBusiness][bInventory], Businesses[iBusiness][bInventoryCapacity], GetInventoryType(iBusiness));
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		for (new i; i < MAX_BUSINESS_GAS_PUMPS; i++) {
			if (Businesses[iBusiness][GasPumpPosX][i] != 0.0) {
				format(string, sizeof(string), "Gas Tank %d:  %.2f gal / %.2f gal", i+1, Businesses[iBusiness][GasPumpGallons][i], Businesses[iBusiness][GasPumpCapacity][i]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, " You don't own or work for a business.");
	return 1;
}

CMD:offeritem(playerid, params[])
{
	new buyerid, item;
	if (PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID || Businesses[PlayerInfo[playerid][pBusiness]][bType] != BUSINESS_TYPE_STORE && Businesses[PlayerInfo[playerid][pBusiness]][bType] != BUSINESS_TYPE_GASSTATION) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not working for a 24/7 store!");
	}
	if (sscanf(params, "uk<storeitem>", buyerid, item))	{
	    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /offeritem [Player] [Item]");
	    SendClientMessageEx(playerid, COLOR_GREY, "Items - cellphone, phonebook, dice, condom, musicplayer, rope, cigar, sprunk, lock, spraycan, radio, camera, lotteryticket,");
	    return SendClientMessageEx(playerid, COLOR_GREY, "checkbook, paper, industriallock, elock, and standardcaralarm");
	}
	if (PlayerInfo[playerid][pBusiness] != InBusiness(playerid)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not in the business interior!");
	}
	if (Businesses[PlayerInfo[playerid][pBusiness]][bInventory] < 1) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Business inventory has no items.");
	}
	if (!IsPlayerConnected(buyerid)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified!");
	}
	if (item == INVALID_STORE_ITEM)	{
		return SendClientMessageEx(playerid, COLOR_GREY, "Invalid item specified!");
	}
	if (!Businesses[PlayerInfo[playerid][pBusiness]][bItemPrices][item-1]) {
	    SendClientMessageEx(playerid, COLOR_GRAD4, "This item is not for sale.");
	    return 1;
	}
	if (playerid == buyerid) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You can't offer an item to yourself!");
	}
    if(!ProxDetectorS(5.0, playerid, buyerid)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "The customer is not near you!");
    }

	new string[128];
    format(string, sizeof(string), "* You offered %s to buy a %s.", GetPlayerNameEx(buyerid), StoreItems[item-1]);
    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* %s wants to sell you a %s for $%s (type /accept item to buy)", GetPlayerNameEx(playerid), StoreItems[item-1], number_format(Businesses[PlayerInfo[playerid][pBusiness]][bItemPrices][item-1]));
    SendClientMessageEx(buyerid, COLOR_LIGHTBLUE, string);

	SetPVarInt(buyerid, "Business_ItemType", item-1);
	SetPVarInt(buyerid, "Business_ItemPrice", Businesses[PlayerInfo[playerid][pBusiness]][bItemPrices][item-1]);
	SetPVarInt(buyerid, "Business_ItemOfferer", playerid);
	SetPVarInt(buyerid, "Business_ItemOffererSQLId", GetPlayerSQLId(playerid));

	return 1;
}

CMD:resupply(playerid, params[])
{
	new iBusiness = PlayerInfo[playerid][pBusiness];
	new amount;
	new string[128];
	new year, month, day;
	if (sscanf(params, "d", amount))
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /resupply [amount]");
	}
	if (PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID) {
	    return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a business.");
	}
	if (PlayerInfo[playerid][pBusinessRank] < Businesses[iBusiness][bMinSupplyRank]) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Your rank is not high enough for placing resupply orders!");
	}
	if(amount < 1) { 
		return SendClientMessageEx(playerid, COLOR_GREY, "Resupply amount cannot be below 1.");
	}	
	if (Businesses[iBusiness][bOrderState] == 1) {
		return SendClientMessageEx(playerid, COLOR_WHITE, "You already have a pending order. Either cancel it or wait for it to be delivered before placing orders.");
	}
	if (Businesses[iBusiness][bOrderState] == 2) {
		return SendClientMessageEx(playerid, COLOR_WHITE, "You already have an order which is being delivered.");
	}
	if (Businesses[iBusiness][bSupplyPos][0] == 0.0) {
		return SendClientMessageEx(playerid, COLOR_GREY, "This business does not have a delivery point for Shipment Contractors.");
	}
	if (Businesses[iBusiness][bInventory] >= Businesses[iBusiness][bInventoryCapacity]) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Inventory is already at full capacity.");
	}
	if(Businesses[iBusiness][bInventory] + amount > Businesses[iBusiness][bInventoryCapacity])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "Your inventory does not have the capacity.");
	}
	if (Businesses[iBusiness][bSafeBalance] < floatround(amount * BUSINESS_ITEMS_COST)) {
	    format(string, sizeof(string), "Safe balance is not enough for this. ($%s)", number_format(floatround(amount * BUSINESS_ITEMS_COST)));
		return SendClientMessageEx(playerid, COLOR_GREY, string);
	}

	format(Businesses[iBusiness][bOrderBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
	getdate(year, month, day);
	format(Businesses[iBusiness][bOrderDate], 30, "%d-%02d-%02d %02d:%02d:%02d", year, month, day, hour, minuite, second);
	Businesses[iBusiness][bSafeBalance] -= floatround(amount * BUSINESS_ITEMS_COST);
	Businesses[iBusiness][bOrderAmount] = amount;
	Businesses[iBusiness][bOrderState] = 1;
	SaveBusiness(iBusiness);
	format(string, sizeof(string), "%s (IP: %s) has placed a resupply order for %s (%d)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), Businesses[PlayerInfo[playerid][pBusiness]][bName], PlayerInfo[playerid][pBusiness]);
	Log("logs/business.log", string);
	format(string, sizeof(string), "* You have placed a resupply order for %s", Businesses[PlayerInfo[playerid][pBusiness]][bName]);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	return 1;
}

CMD:checkresupply(playerid, params[])
{
	new iBusinessID = PlayerInfo[playerid][pBusiness];
	if((0 <= iBusinessID < MAX_BUSINESSES) && PlayerInfo[playerid][pBusinessRank] >= Businesses[iBusinessID][bMinSupplyRank])
	{
		new iOrderState = Businesses[iBusinessID][bOrderState];
		if (!iOrderState)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Your business has never placed a resupply order.");
			return 1;
		}
		else
		{
			new string[128];
			SendClientMessageEx(playerid, COLOR_GREEN, "|___________ Latest Resupply Order ___________|");
			format(string,sizeof(string), "Date/Time: %s -- Amount: %s -- Status: %s", Businesses[iBusinessID][bOrderDate], number_format(Businesses[iBusinessID][bOrderAmount]), GetSupplyState(iOrderState));
			//if (iOrderState == 2) format(string,sizeof(string), "%s {DDDDDD}(Truck Distance: %d)");
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string,sizeof(string), "This order was submitted by %s", Businesses[iBusinessID][bOrderBy]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			if (iOrderState == 1) SendClientMessageEx(playerid, COLOR_YELLOW, "You can use /cancelresupply to cancel this order.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Only authorized business employees may use this command.");
	return 1;
}

CMD:cancelresupply(playerid, params[])
{
	if (PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID)	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You are not in a business!");
	}
	else if (PlayerInfo[playerid][pBusinessRank] < Businesses[PlayerInfo[playerid][pBusiness]][bMinSupplyRank]) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Your rank is not high enough for cancelling resupply orders!");
	}
	else {
		new orderstate = Businesses[PlayerInfo[playerid][pBusiness]][bOrderState];
		if (orderstate == 0) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "Your business has never placed a resupply order.");
		}
		else if (orderstate == 2) {
		    //foreach(new i : Player)
			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{			
					if(TruckDeliveringTo[GetPlayerVehicleID(i)] == PlayerInfo[playerid][pBusiness])
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "You can't cancel an order while it is being shipped!");
						return 1;
					}
				}	
		    }
		    Businesses[PlayerInfo[playerid][pBusiness]][bSafeBalance] += floatround(Businesses[PlayerInfo[playerid][pBusiness]][bOrderAmount] * BUSINESS_ITEMS_COST);
		    Businesses[PlayerInfo[playerid][pBusiness]][bOrderState] = 4;
			SaveBusiness(PlayerInfo[playerid][pBusiness]);
			new string[128];
			format(string, sizeof(string), "%s (IP: %s) has cancelled the resupply order for %s (%d)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), Businesses[PlayerInfo[playerid][pBusiness]][bName], PlayerInfo[playerid][pBusiness]);
			Log("logs/business.log", string);
			format(string, sizeof(string), "You have cancelled your resupply order! A refund of $%s has been given.", number_format(floatround(Businesses[PlayerInfo[playerid][pBusiness]][bOrderAmount] * (BUSINESS_ITEMS_COST * 0.8))));
			return SendClientMessageEx(playerid, COLOR_WHITE, string);

		}
		else if (orderstate == 1) {
		    Businesses[PlayerInfo[playerid][pBusiness]][bSafeBalance] += floatround(Businesses[PlayerInfo[playerid][pBusiness]][bOrderAmount] * BUSINESS_ITEMS_COST);
		    Businesses[PlayerInfo[playerid][pBusiness]][bOrderState] = 4;
			SaveBusiness(PlayerInfo[playerid][pBusiness]);
			new string[128];
			format(string, sizeof(string), "%s (IP: %s) has cancelled the resupply order for %s (%d)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), Businesses[PlayerInfo[playerid][pBusiness]][bName], PlayerInfo[playerid][pBusiness]);
			Log("logs/business.log", string);
			format(string, sizeof(string), "You have cancelled your resupply order! A refund of $%s has been given.", number_format(floatround(Businesses[PlayerInfo[playerid][pBusiness]][bOrderAmount] * (BUSINESS_ITEMS_COST * 0.8))));
			return SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:minrank(playerid, params[])
{
	new rank, command[32];
	if (PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID || PlayerInfo[playerid][pBusinessRank] < 5)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "Only business owners can use this command.");
	}
	if (sscanf(params, "ds[32]", rank, command))
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /minrank [rank] [invite/giverank/supply]");
	}
	if(rank < 0 || rank > 5)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Don't go below number 0 or above number 5!");
	}
	if (strcmp(command, "invite", true) == 0) Businesses[PlayerInfo[playerid][pBusiness]][bMinInviteRank] = rank, SaveBusiness(PlayerInfo[playerid][pBusiness]);
	else if (strcmp(command, "giverank", true) == 0) Businesses[PlayerInfo[playerid][pBusiness]][bMinGiveRankRank] = rank, SaveBusiness(PlayerInfo[playerid][pBusiness]);
	else if (strcmp(command, "supply", true) == 0) Businesses[PlayerInfo[playerid][pBusiness]][bMinSupplyRank] = rank, SaveBusiness(PlayerInfo[playerid][pBusiness]);
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid Permission Name");

	new string[128];
	format(string, sizeof(string), "You have set the minimum rank for %s to %d (%s)", command, rank, GetBusinessRankName(rank));
	SendClientMessageEx(playerid, COLOR_GREY, string);

	return 1;
}

CMD:br(playerid, params[])
{
	return cmd_bizradio(playerid, params);
}

CMD:togbiz(playerid, params[])
{
    if (!IsValidBusinessID(PlayerInfo[playerid][pBusiness])) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not an Employee of a Business!");
    else if(PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not an Employee of a Business!");

    if(GetPVarInt(playerid, "BusinessRadio"))
    {
        DeletePVar(playerid, "BusinessRadio");
        SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled business radio.");
    }
    else
    {
        SetPVarInt(playerid, "BusinessRadio", 1);
        SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled business radio.");
    }
	return 1;
}

CMD:bizradio(playerid, params[])
{

	new
		string[128],
		iBusinessID = PlayerInfo[playerid][pBusiness],
		iRank = PlayerInfo[playerid][pBusinessRank];

	if (!IsValidBusinessID(iBusinessID)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not an employee of a business!");
	else if(iBusinessID == INVALID_BUSINESS_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not an employee of a business!");
	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0 || PlayerInfo[playerid][pJailTime] > 0 || GetPVarInt(playerid, "Injured")) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot do this at this time.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /b(iz)r(radio) [biz chat]");

	format(string, sizeof(string), "** (%d) %s %s: %s **", iRank, GetBusinessRankName(iRank), GetPlayerNameEx(playerid), params);
	//foreach(new i: Player) {
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			if (PlayerInfo[i][pBusiness] == iBusinessID && GetPVarInt(i, "BusinessRadio") != 1) SendClientMessageEx(i, COLOR_BR, string);
		}	
	}

	return 1;
}

CMD:employeepayset(playerid, params[])
{
	if (PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID || PlayerInfo[playerid][pBusinessRank] != 5)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "Not authorized to use this command!");
	}
	new rank, amount;
	if (sscanf(params, "dd", rank, amount))
	{
	    SendClientMessageEx(playerid, COLOR_RED, "Listing current paycheck amounts...");
	    for (new i, string[64]; i < 5; i++) {
	        format(string,sizeof(string), "Rank %d (%s): $%s", i, GetBusinessRankName(i), number_format(Businesses[PlayerInfo[playerid][pBusiness]][bRankPay][i]));
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
	    }
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /employeepayset [rank] [amount]");
	}
	if (rank < 0 || rank > 4)
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "Invalid rank entered!");
   	}
	if (amount < 1 || amount > 100000)
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "Amount can't be lower than $1 or higher than $100,000!");
    }

	Businesses[PlayerInfo[playerid][pBusiness]][bRankPay][rank] = amount;
	SaveBusiness(PlayerInfo[playerid][pBusiness]);
    new string[128];
    format(string, sizeof(string), "You have set paycheck amount for rank %d (%s) to $%s", rank, GetBusinessRankName(rank), number_format(amount));
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	format(string,sizeof(string),"%s has changed paycheck of rank %d to $%s for business %d", GetPlayerNameEx(playerid), rank, number_format(amount), PlayerInfo[playerid][pBusiness]);
	Log("logs/business.log", string);

	return 1;
}


CMD:employeeautopay(playerid, params[])
{
	if (PlayerInfo[playerid][pBusiness] == INVALID_BUSINESS_ID || PlayerInfo[playerid][pBusinessRank] != 5)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "Not authorized to use this command!");
	}
	if (Businesses[PlayerInfo[playerid][pBusiness]][bAutoPay])
	{
		Businesses[PlayerInfo[playerid][pBusiness]][bAutoPay] = 0;
		SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled paychecks for the business.");
		SaveBusiness(PlayerInfo[playerid][pBusiness]);
		return 1;
	}
 	else
	{
		Businesses[PlayerInfo[playerid][pBusiness]][bAutoPay] = 1;
		SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled paychecks for the business.");
		SaveBusiness(PlayerInfo[playerid][pBusiness]);
		return 1;
	}
}

CMD:editgasprice(playerid, params[])
{
	if (PlayerInfo[playerid][pBusiness] != INVALID_BUSINESS_ID && PlayerInfo[playerid][pBusinessRank] >= 5 && IsBusinessGasAble(Businesses[PlayerInfo[playerid][pBusiness]][bType]))
	{
		ShowPlayerDialog(playerid, DIALOG_GASPRICE, DIALOG_STYLE_INPUT, "Edit Gas Price", "Enter the new price per 1 gallon (e.g. 4.52)", "OK", "Cancel");
		SetPVarInt(playerid, "EditingBusiness", PlayerInfo[playerid][pBusiness]);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "Your are not the owner of a gas station!");
	return 1;
}

CMD:editprices(playerid, params[])
{
	new
		iBusiness = PlayerInfo[playerid][pBusiness];

	if (iBusiness != INVALID_BUSINESS_ID)
	{
	    if(PlayerInfo[playerid][pBusinessRank] >= 5)
		{
			if(Businesses[iBusiness][bType] == BUSINESS_TYPE_STORE || Businesses[iBusiness][bType] == BUSINESS_TYPE_GASSTATION) {
	    		new szDialog[912];
				for (new i = 0; i < sizeof(StoreItems); i++) format(szDialog, sizeof(szDialog), "%s%s  ($%s) (Cost of Good: $%s)\n", szDialog, StoreItems[i], number_format(Businesses[iBusiness][bItemPrices][i]), number_format(floatround(StoreItemCost[i][ItemValue] * BUSINESS_ITEMS_COST)) );
				ShowPlayerDialog(playerid, DIALOG_STOREPRICES, DIALOG_STYLE_LIST, "Edit 24/7 Prices", szDialog, "Edit", "Cancel");
				SetPVarInt(playerid, "EditingBusiness", iBusiness);
			}

		    else if(Businesses[iBusiness][bType] == BUSINESS_TYPE_CLOTHING) {
		    	ShowPlayerDialog(playerid, DIALOG_STORECLOTHINGPRICE, DIALOG_STYLE_INPUT, "Edit Price", "{FFFFFF}Enter the new sale price for clothing\n(Items with the price of $0 will not be for sale)", "Okay", "Cancel");
                SetPVarInt(playerid, "EditingBusiness", iBusiness);
			}
			else if(Businesses[iBusiness][bType] == BUSINESS_TYPE_GUNSHOP) {
			    new szDialog[512];
				for (new i = 0; i < sizeof(Weapons); i++) format(szDialog, sizeof(szDialog), "%s%s  ($%s)\n", szDialog, GetWeaponNameEx(Weapons[i][WeaponId]), number_format(Businesses[iBusiness][bItemPrices][i]));
				ShowPlayerDialog(playerid, DIALOG_GUNPRICES, DIALOG_STYLE_LIST, "Edit Weapon Prices", szDialog, "Edit", "Cancel");
				SetPVarInt(playerid, "EditingBusiness", iBusiness);
			}
			else if(Businesses[iBusiness][bType] == BUSINESS_TYPE_BAR || Businesses[iBusiness][bType] == BUSINESS_TYPE_CLUB /*|| Businesses[iBusiness][bType] == BUSINESS_TYPE_RESTAURANT*/)
			{
			    new szDialog[512];
				for (new i; i < sizeof(Drinks); i++) format(szDialog, sizeof(szDialog), "%s%s  ($%s)\n", szDialog, Drinks[i], number_format(Businesses[iBusiness][bItemPrices][i]));
				ShowPlayerDialog(playerid, DIALOG_BARPRICE, DIALOG_STYLE_LIST, "Edit Business Prices", szDialog, "Edit", "Cancel");
				SetPVarInt(playerid, "EditingBusiness", iBusiness);
			}
			else if(Businesses[iBusiness][bType] == BUSINESS_TYPE_SEXSHOP)
			{
			    new szDialog[512];
				for (new i = 0; i < sizeof(SexItems); i++) format(szDialog, sizeof(szDialog), "%s%s  ($%s)\n", szDialog, SexItems[i], number_format(Businesses[iBusiness][bItemPrices][i]));
				ShowPlayerDialog(playerid, DIALOG_SEXSHOP, DIALOG_STYLE_LIST, "Edit Business Prices", szDialog, "Edit", "Cancel");
				SetPVarInt(playerid, "EditingBusiness", iBusiness);
			}
			else if (Businesses[iBusiness][bType] == BUSINESS_TYPE_RESTAURANT)
			{
				new buf[512];
				for (new i = 0; i < sizeof(RestaurantItems); ++i)
				{
					format(buf, sizeof(buf), "%s%s  ($%s)\n", buf, RestaurantItems[i], number_format(Businesses[iBusiness][bItemPrices][i]));
				}

				ShowPlayerDialog(playerid, DIALOG_RESTAURANT, DIALOG_STYLE_LIST, "Edit Business Prices", buf, "Edit", "Cancel");
				SetPVarInt(playerid, "EditingBusiness", iBusiness);
			}
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "You aren't a store owner.");
		    return 1;
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "You are not a store owner.");
	}
	return 1;
}

CMD:bizlock(playerid, params[])
{
	if(PlayerInfo[playerid][pBusiness] != INVALID_BUSINESS_ID && PlayerInfo[playerid][pBusinessRank] >= Businesses[PlayerInfo[playerid][pBusiness]][bMinDoorRank] &&
	IsPlayerInRangeOfPoint(playerid, 2.0, Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][0], Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][1], Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][2]))
	{
		if(Businesses[PlayerInfo[playerid][pBusiness]][bStatus] == 1)
		{
			Businesses[PlayerInfo[playerid][pBusiness]][bStatus] = 0;
			new string[MAX_PLAYER_NAME + 28];
			format(string, sizeof(string), "* %s has locked the door.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			Businesses[PlayerInfo[playerid][pBusiness]][bStatus] = 1;
			new string[MAX_PLAYER_NAME + 28];
			format(string, sizeof(string), "* %s has unlocked the door.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		RefreshBusinessPickup(PlayerInfo[playerid][pBusiness]);
		Streamer_UpdateEx(playerid, Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][0], Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][1], Businesses[PlayerInfo[playerid][pBusiness]][bExtPos][2]);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are not near your business or not authorized.");
		return 1;
	}
	return 1;
}

CMD:togglecleo(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1338)
	    return 0;

	if(prisonactive == 0)
		SendClientMessageEx(playerid, COLOR_CYAN, "Cleo prison system deactivated."), prisonactive = 1;
	else
	    SendClientMessageEx(playerid, COLOR_CYAN, "Cleo prison system activated."), prisonactive = 0;

	return 1;
}


CMD:reloadlist(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
	    ToyList2 = LoadModelSelectionMenu("ToyList.txt");
		CarList2 = LoadModelSelectionMenu("CarList.txt");
		PlaneList = LoadModelSelectionMenu("PlaneList.txt");
		BoatList = LoadModelSelectionMenu("BoatList.txt");
		SendClientMessageEx(playerid, COLOR_CYAN, "List's have been reloaded.");
	}
	return 1;
}

//======[Start of Famed Commands]=======

CMD:fc(playerid, params[]) {
	if(PlayerInfo[playerid][pFamed] >= 1 || PlayerInfo[playerid][pAdmin] >= 4) {
		if(isnull(params)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fc [message]");
		}
		else if(gettime() < GetPVarInt(playerid, "timeFamed")) {

			new
				szMessage[64];

			format(szMessage, sizeof(szMessage), "You must wait %d seconds before speaking again in this channel.", GetPVarInt(playerid, "timeFamed") - gettime());
			SendClientMessageEx(playerid, COLOR_GREY, szMessage);
		}
		else if(PlayerInfo[playerid][pFamedTogged] == 0) {
		    SendClientMessageEx(playerid, COLOR_GREY, "You have the famed chat toggled - /togfamed to enable it.");
		}
		else if(PlayerInfo[playerid][pFMuted] != 0) {
			SendClientMessageEx(playerid, COLOR_GREY, "You are muted from the famed chat channel.");
		}
		else {

			new
				szMessage[128];

			if(PlayerInfo[playerid][pAdmin] > 2 && GetPVarInt(playerid, "Undercover") == 0)
			{
				format(szMessage, sizeof(szMessage), "** %s %s: %s", GetAdminRankName(PlayerInfo[playerid][pAdmin]), GetPlayerNameEx(playerid), params);
			}
			else if(GetPVarInt(playerid, "Undercover") == 1 || PlayerInfo[playerid][pFamed] > 0)
			{
				format(szMessage, sizeof(szMessage), "** %s %s: %s", GetFamedRankName(PlayerInfo[playerid][pFamed]), GetPlayerNameEx(playerid), params);
			}
			SendFamedMessage(COLOR_FAMED, szMessage);
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not a famed member!");
	return 1;
}

CMD:togfamed(playerid, params[])
{
	if(PlayerInfo[playerid][pFamed] >= 1)
	{
	    if(PlayerInfo[playerid][pFamedTogged] == 0)
	    {
	        PlayerInfo[playerid][pFamedTogged] = 1;
	        SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled the famed chat.");
	    }
		else {
		    PlayerInfo[playerid][pFamedTogged] = 0;
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the famed chat.");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not a famed member!");
	return 1;
}

CMD:fmute(playerid, params[])
{
	if(PlayerInfo[playerid][pFamed] >= 4 || PlayerInfo[playerid][pAdmin] >= 4)
	{
	    new string[128], targetid, reason[64];
	    if(sscanf(params, "us[64]", targetid, reason))
			return SendClientMessageEx(playerid, COLOR_GRAD1, "Usage: /fmute [player] [reason]");

		if(IsPlayerConnected(targetid))
		{
		    if(PlayerInfo[targetid][pFMuted] == 0)
		    {
		        if(targetid != INVALID_PLAYER_ID)
		        {
			        if(PlayerInfo[targetid][pFamed] > PlayerInfo[playerid][pFamed] || PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
		 				return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot use this command on this person!");

					PlayerInfo[targetid][pFMuted] = 1;
					format(string, sizeof(string), "You were muted from the famed channel by %s, reason: %s. You may appeal this mute at www.ng-gaming.net/forums", GetPlayerNameEx(playerid), reason);
					SendClientMessageEx(targetid, COLOR_GRAD2, string);
					format(string, sizeof(string), "AdmCmd: %s has muted %s from the Famed Channel, reason: %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), reason);
					ABroadCast(COLOR_LIGHTRED, string, 1);
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					format(string, sizeof(string), "AdmCmd: %s has muted %s(%d) from the Famed Channel, reason: %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), GetPlayerSQLId(targetid), reason);
					Log("logs/admin.log", string);
				}
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD1, "This person is already muted from the famed channel!");
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return 1;
}

CMD:funmute(playerid, params[])
{
	if(PlayerInfo[playerid][pFamed] >= 4 || PlayerInfo[playerid][pAdmin] >= 4)
	{
	    new string[128], targetid, reason[64];
	    if(sscanf(params, "us[64]", targetid, reason))
			return SendClientMessageEx(playerid, COLOR_GRAD1, "Usage: /funmute [player] [reason]");

		if(IsPlayerConnected(targetid))
		{
		    if(PlayerInfo[targetid][pFMuted] == 1)
		    {
		        if(targetid != INVALID_PLAYER_ID)
		        {
			        if(PlayerInfo[targetid][pFamed] > PlayerInfo[playerid][pFamed] || PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
		 				return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot use this command on this person!");

					PlayerInfo[targetid][pFMuted] = 0;
					format(string, sizeof(string), "You were unmuted from the famed channel by %s, reason: %s.", GetPlayerNameEx(playerid), reason);
					SendClientMessageEx(targetid, COLOR_GRAD2, string);
					format(string, sizeof(string), "AdmCmd: %s has unmuted %s from the Famed Channel, reason: %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), reason);
					ABroadCast(COLOR_LIGHTRED, string, 1);
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					format(string, sizeof(string), "AdmCmd: %s has unmuted %s(%d) from the Famed Channel, reason: %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), GetPlayerSQLId(targetid), reason);
					Log("logs/admin.log", string);
				}
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD1, "This person is not muted from the famed channel!");
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return 1;
}

CMD:setfamed(playerid, params[])
{
    if(PlayerInfo[playerid][pFamed] >= 6 || PlayerInfo[playerid][pAdmin] >= 4)
    {
        new string[128], targetid, level;
	    if(sscanf(params, "ui", targetid, level)) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "Usage: /setfamed [player] [level]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "(1) Old-School - (2) Chartered Old-School - (3) Famed - (4) Famed Commissioner");
			SendClientMessageEx(playerid, COLOR_GRAD2, "(5) Famed Moderator - (6) Vice-Chairman - (7) Chairman");
			return 1;
		}

		if(IsPlayerConnected(targetid))
		{
		    if(targetid != INVALID_PLAYER_ID)
		    {
		
			    if(PlayerInfo[targetid][pFamed] > PlayerInfo[playerid][pFamed])
			        return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot use this command on this person!");

				PlayerInfo[targetid][pFamed] = level;
				format(string, sizeof(string), "AdmCmd: %s has set %s famed level to %d.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), level);
				ABroadCast(COLOR_LIGHTRED, string, 2);
				SendFamedMessage(COLOR_LIGHTRED, string);
				Log("logs/setfamed.log", string);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return 1;
}

CMD:osetfamed(playerid, params[])
{
    if(PlayerInfo[playerid][pFamed] >= 6 || PlayerInfo[playerid][pAdmin] >= 4)
    {
        new string[128], pname[MAX_PLAYER_NAME], level;
	    if(sscanf(params, "s[32]i", pname, level))
			return SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /osetfamed [player] [level]");

        new targetid = ReturnUser(pname);
		if(IsPlayerConnected(targetid))
		{
		    return SendClientMessageEx(playerid, COLOR_WHITE, "This player is connected, please use /setfamed");
		}
		else {
		    new
				szQuery[128],
				szPlayerName[MAX_PLAYER_NAME];

			mysql_escape_string(pname, szPlayerName);
			
			SetPVarInt(playerid, "Offline_Famed", level);
			SetPVarString(playerid, "Offline_Name", szPlayerName);
			
            format(szQuery, sizeof(szQuery), "SELECT `Famed` FROM `accounts` WHERE `Username` = '%s'", szPlayerName);
 			mysql_function_query(MainPipeline, szQuery, true, "OnQueryFinish", "iii", OFFLINE_FAMED_THREAD, playerid, g_arrQueryHandle{playerid});
 			
 			format(string, sizeof(string), "Attempting to offline set %s account to level %d famed.", szPlayerName, level);
 			SendClientMessageEx(playerid, COLOR_WHITE, string);
 			SendClientMessageEx(playerid, COLOR_YELLOW, "Please wait...");
 		}
 	}
 	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
 	return 1;
}

CMD:flocker(playerid, params[]) {
	return cmd_famedlocker(playerid, params);
}	

CMD:famedlocker(playerid, params[]) {
    #if defined zombiemode
	if(zombieevent == 1 && GetPVarType(playerid, "pIsZombie")) return SendClientMessageEx(playerid, COLOR_GREY, "Zombies can't use this.");
	#endif
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 900.5656, 1429.6812, -82.3250))
	{
	    switch(PlayerInfo[playerid][pFamed])
	    {
			case 0: SendClientMessageEx(playerid, COLOR_GRAD2, "You're not part of famed!");
			case 1: ShowPlayerDialog(playerid, DIALOG_LOCKER_OS, DIALOG_STYLE_LIST, "Old-School Locker", "First Aid Kit (Free)\nKevlar Vest ($10000)\nChange Skin ($3,000)\nJob Center", "Select", "Cancel");
			case 2: ShowPlayerDialog(playerid, DIALOG_LOCKER_COS, DIALOG_STYLE_LIST, "Chartered Old-School Locker", "First Aid Kit (Free)\nKevlar Vest ($5000)\nChange Skin ($1,500)\nJob Center", "Select", "Cancel");
			case 3: ShowPlayerDialog(playerid, DIALOG_LOCKER_FAMED, DIALOG_STYLE_LIST, "Famed Locker", "First Aid Kit (Free)\nKevlar Vest (Free)\nWeapons (Free)\nChange Skin (Free)\nJob Center\nFamed Color", "Select", "Cancel");
            case 4: ShowPlayerDialog(playerid, DIALOG_LOCKER_FAMED, DIALOG_STYLE_LIST, "Famed Commissioner Locker", "First Aid Kit (Free)\nKevlar Vest (Free)\nWeapons (Free)\nChange Skin (Free)\nJob Center\nFamed Color", "Select", "Cancel");
            case 5: ShowPlayerDialog(playerid, DIALOG_LOCKER_FAMED, DIALOG_STYLE_LIST, "Famed Moderator Locker", "First Aid Kit (Free)\nKevlar Vest (Free)\nWeapons (Free)\nChange Skin (Free)\nJob Center\nFamed Color", "Select", "Cancel");
            case 6: ShowPlayerDialog(playerid, DIALOG_LOCKER_FAMED, DIALOG_STYLE_LIST, "Famed Vice-Chairman Locker", "First Aid Kit (Free)\nKevlar Vest (Free)\nWeapons (Free)\nChange Skin (Free)\nJob Center\nFamed Color", "Select", "Cancel");
            case 7: ShowPlayerDialog(playerid, DIALOG_LOCKER_FAMED, DIALOG_STYLE_LIST, "Famed Chairman Locker", "First Aid Kit (Free)\nKevlar Vest (Free)\nWeapons (Free)\nChange Skin (Free)\nJob Center\nFamed Color", "Select", "Cancel");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not at the famed locker!");
	return 1;
}

CMD:famedplate(playerid, params[])
{
	if(PlayerInfo[playerid][pFamed] < 1)
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not part of famed!");
		
	new string[128], Float: vHealth, inpveh;
	if(IsPlayerConnected(playerid))
	{
	    if(isnull(params))
	        return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /famedplate [os/cos/famed/remove]");

		inpveh = false;
	    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	    {
     		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
       		{
				GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], vHealth);
				inpveh = 1;
	                
    			if(vHealth < 800)
       				return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Please repair your vehicle before replacing your plate.");
       				
    			if(strcmp(params, "os", true) == 0)
    			{
    			    format(string, sizeof(string), "{29942B}OLD-SCHOOL");
   			    	format(PlayerVehicleInfo[playerid][d][pvPlate], 32, "%s", string);
    			    SendClientMessageEx(playerid, COLOR_FAMED, "Your vehicle will now appear with the Old-School Plate, parking your vehicle momentarily...");
					cmd_park(playerid, params); //Save a few lines of code here xD
	            }
	            else if(strcmp(params, "cos", true) == 0)
	            {
	                if(PlayerInfo[playerid][pFamed] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a high enough famed member for this plate, sorry.");
                    format(string, sizeof(string), "{F2B602}COS");
					format(PlayerVehicleInfo[playerid][d][pvPlate], 32, "%s", string);
    			    SendClientMessageEx(playerid, COLOR_FAMED, "Your vehicle will now appear with the Chartered Old-School Plate, parking your vehicle momentarily...");
					cmd_park(playerid, params); //Save a few lines of code here xD
	            }
	            else if(strcmp(params, "famed", true) == 0)
	            {
	                if(PlayerInfo[playerid][pFamed] < 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a high enough famed member for this plate, sorry.");
                    format(string, sizeof(string), "{99FF00}FAMED");
					format(PlayerVehicleInfo[playerid][d][pvPlate], 32, "%s", string);
    			    SendClientMessageEx(playerid, COLOR_FAMED, "Your vehicle will now appear with the Famed Plate, parking your vehicle momentarily...");
					cmd_park(playerid, params); //Save a few lines of code here xD
	            }
	            else if(strcmp(params, "remove", true) == 0)
	            {
					PlayerVehicleInfo[playerid][d][pvPlate] = 0;
    			    SendClientMessageEx(playerid, COLOR_FAMED, "Your vehicle will now appear with the default plate, parking your vehicle momentarily...");
					cmd_park(playerid, params); //Save a few lines of code here xD
	            }
	            else
	                return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /famedplate [os/cos/famed/remove]");
			}
		}
		
		if(inpveh == 0)
		    return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not inside a vehicle that you own!");
	}
	return 1;
}

CMD:fmembers(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFamed] >= 4)
	{
		new string[1024];
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pFamed] >= 1)
				{
					format(string, sizeof(string), "%s\nLevel %d Famed %s", string, PlayerInfo[i][pFamed], GetPlayerNameEx(i));
				}
			}	
		}
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Current Online Famed Members", string, "Close", "");
	}
	else
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return 1;
}

CMD:mods(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[3024]; // This is what happens when there is 100 moderators online
		//foreach(new i : Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pAdmin] == 1)
				{
					format(string, sizeof(string), "%s\nModerator %s (ID %i)", string, GetPlayerNameEx(i), i);
				}
			}	
		}
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Current Online Moderators", string, "Close", "");
	}
	else
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return 1;
}

CMD:selltoy(playerid, params[])
{
	new string[1000], name[24], targetid, cost;
	if(GetPVarInt(playerid, "ttBuyer") != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You're already trading with someone else.");
	if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid,COLOR_GREY,"You cannot do this while being in an arena!");
   	if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
	if(PlayerCuffed[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while being cuffed.");
    if(WatchingTV[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can not do this while watching TV!");
    if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_GREY,"You can not do this while in jail or prison!");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	if(sscanf(params, "ud", targetid, cost)) return SendClientMessageEx(playerid, COLOR_GRAD1, "USAGE: /selltoy [playerid] [price]");
	if(!IsPlayerConnected(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	if(targetid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
	if(!ProxDetectorS(5.0, playerid, targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "This player is not near you.");
	if(InsideTradeToys[targetid] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "This person is currently trading at the moment, please try again later.");
	if(cost < 1 || cost > 1000000000) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot sell a toy for less than $1.");
	SetPVarInt(targetid, "ttSeller", playerid);
	SetPVarInt(playerid, "ttBuyer", targetid);
	SetPVarInt(playerid, "ttCost", cost);
	
	new icount = GetPlayerToySlots(playerid);
	for(new x;x<icount;x++)
	{
		format(name, sizeof(name), "None");
		for(new i;i<sizeof(HoldingObjectsAll);i++)
		{
			if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			{
				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
			}
		}
		if(PlayerToyInfo[playerid][x][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
		{
			format(name, sizeof(name), "ID: %d", PlayerToyInfo[playerid][x][ptModelID]);
		}
		format(string, sizeof(string), "%s(%d) %s\n", string, x, name);
	}	
	ShowPlayerDialog(playerid, SELLTOY, DIALOG_STYLE_LIST, "Select a toy to sell", string, "Sell", "Cancel");
	return 1;
}	

// Relay For Life
CMD:setlapcount(playerid, params[]) 
{
    if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new totallaps;
	if(sscanf(params, "i", totallaps)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setlapcount [totallaps]");
   	RaceTotalLaps = totallaps;
	new string[52];
   	format(string, sizeof(string), "You have changed the Total Laps Completed to: %d", RaceTotalLaps);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:eventstats(playerid, params[]) 
{
    if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new string[50];
	format(string, sizeof(string), "Total Laps Completed: %d | Total Players: %d", RaceTotalLaps, TotalJoinsRace);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:rfltoggle(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(rflstatus > 0) {
		rflstatus = 0;
		SendClientMessageEx(playerid, COLOR_GREY, "You have disabled relay for life.");
		Misc_Save();
	}
	else {
		rflstatus = 1;
		SendClientMessageEx(playerid, COLOR_GREY, "You have enabled relay for life.");
		Misc_Save();
	}	
	return 1;
}

CMD:toglapcount(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(toglapcount == 0) {
   		toglapcount = 1;
		SendClientMessageEx(playerid, COLOR_WHITE, "Lap counting has been turned off, new laps completed by players will not be counted.");
	} else {
	    toglapcount = 0;
		SendClientMessageEx(playerid, COLOR_WHITE, "Lap counting has been turned on, new laps completed by players will now be counted.");
	}
	return 1;
}

CMD:rflscore(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_RFL_SEL, DIALOG_STYLE_LIST, "Relay For Life Scoreboard", "Team Scores\nPlayer Top 25", "Choose", "Close");
	return 1;
}

CMD:buyrflteam(playerid, params[])
{
	if(rflstatus < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Relay For Life is currently not enabled.");
	if(PlayerInfo[playerid][pRFLTeam] != -1) return SendClientMessageEx(playerid, COLOR_GREY, "You are already part of a team.");
	if(GetPlayerCash(playerid) < 100000) return SendClientMessageEx(playerid, COLOR_GREY, "You need $100000 to buy a team.");
	for(new i = 0; i < MAX_RFLTEAMS; i++) {
		if(RFLInfo[i][RFLmembers] < 1) {
			format(RFLInfo[i][RFLname], 25, "Team %s", GetPlayerNameEx(playerid));
			format(RFLInfo[i][RFLleader], 25, "%s", GetPlayerNameEx(playerid));
			RFLInfo[i][RFLused] = 1;
			RFLInfo[i][RFLmembers] = 1;
			RFLInfo[i][RFLlaps] = 0;
			PlayerInfo[playerid][pRFLTeam] = i;
			PlayerInfo[playerid][pRFLTeamL] = i;
			GivePlayerCash(playerid, -100000);
			SendClientMessageEx(playerid, COLOR_GREY, "You have bought a team for $100000. You may now use /rflhelp.");
			if( GetPVarInt( playerid, "EventToken" ) == 1 ) {
				if( EventKernel[ EventStatus ] == 1 || EventKernel[ EventStatus ] == 2 ) {
					if(EventKernel[EventType] == 3) {
						new Float:X, Float:Y, Float:Z, string[64];
						GetPlayerPos( playerid, X, Y, Z );
						format(string, sizeof(string), "Team: %s", RFLInfo[i][RFLname]);
						RFLTeamN3D[playerid] = CreateDynamic3DTextLabel(string,0x008080FF,X,Y,Z,10.0,.attachedplayer = playerid, .worldid = GetPlayerVirtualWorld(playerid));
					}
				}
			}
			SaveRelayForLifeTeam(i);
			OnPlayerStatsUpdate(i);
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "All team slots have been used.");
	return 1;
}

CMD:leaverflteam(playerid, params[])
{
	if(rflstatus < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Relay For Life is currently not enabled.");
	if(PlayerInfo[playerid][pRFLTeam] == -1) return SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a team.");
	new team = PlayerInfo[playerid][pRFLTeam];
	if(PlayerInfo[playerid][pRFLTeamL] == team)
	{
		new string[128];
		format(RFLInfo[team][RFLname], 25, "Unused");
		format(RFLInfo[team][RFLleader], 25, "None");
		RFLInfo[team][RFLlaps] = 0;
		RFLInfo[team][RFLmembers] = 0;
		RFLInfo[team][RFLused] = 0;
		PlayerInfo[playerid][pRFLTeam] = -1;
		PlayerInfo[playerid][pRFLTeamL] = -1;
		if(IsValidDynamic3DTextLabel(RFLTeamN3D[playerid])) {
			DestroyDynamic3DTextLabel(RFLTeamN3D[playerid]);
		}
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Your team has been deleted due to you being the leader.");
		//foreach(new i: Player) {
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pRFLTeam] == team) {
					PlayerInfo[i][pRFLTeam] = -1;
					PlayerInfo[i][pRFLTeamL] = -1;
					if(IsValidDynamic3DTextLabel(RFLTeamN3D[i])) {
						DestroyDynamic3DTextLabel(RFLTeamN3D[i]);
					}
					SendClientMessageEx(i, COLOR_LIGHTBLUE, "You have been removed from your team due to it being removed.");
					OnPlayerStatsUpdate(i);
				}
			}	
		}	
		OnPlayerStatsUpdate(playerid);
		format(string, sizeof(string), "UPDATE `accounts` SET `RFLTeam` = -1, `RFLTeamL` = -1 WHERE `RFLTeam` = %d", team);
		mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);		
	}
	else
	{
		RFLInfo[team][RFLmembers] -= 1;
		PlayerInfo[playerid][pRFLTeam] = -1;
		PlayerInfo[playerid][pRFLTeamL] = -1;
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have left the team.");
		OnPlayerStatsUpdate(playerid);
	}
	SaveRelayForLifeTeam(team);
	return 1;
}

CMD:rflinvite(playerid, params[])
{
	if(rflstatus < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Relay For Life is currently not enabled.");
	if(PlayerInfo[playerid][pRFLTeam] == -1) return SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a team.");
	if(PlayerInfo[playerid][pRFLTeamL] == -1) return SendClientMessageEx(playerid, COLOR_GREY, "You are not the leader of this team.");
	if(RFLInfo[PlayerInfo[playerid][pRFLTeam]][RFLmembers] >= 20) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot invite more than 19 members.");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rflinvite [playerid/PlayerName]");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	if(PlayerInfo[giveplayerid][pRFLTeam] != -1) return SendClientMessageEx(playerid, COLOR_GREY, "This player is already part of a team.");
	new string[128];
	SetPVarInt(giveplayerid, "RFLTeam_Invite", 1);
	SetPVarInt(giveplayerid, "RFLTeam_Team", PlayerInfo[playerid][pRFLTeam]);
	SetPVarInt(giveplayerid, "RFLTeam_Inviter", playerid);
	format(string, sizeof(string), "* You have offered %s to join your team.", GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* %s has offered you to join his team. Use /accept rflteam to accept it.", GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:rflkick(playerid, params[])
{
	if(rflstatus < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Relay For Life is currently not enabled.");
	if(PlayerInfo[playerid][pRFLTeam] == -1) return SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a team.");
	if(PlayerInfo[playerid][pRFLTeamL] == -1) return SendClientMessageEx(playerid, COLOR_GREY, "You are not the leader of this team.");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rflkick [playerid/PlayerName]");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	if(PlayerInfo[giveplayerid][pRFLTeam] != PlayerInfo[playerid][pRFLTeam]) return SendClientMessageEx(playerid, COLOR_GREY, "This player is not part of your team.");
	new string[128], team = PlayerInfo[playerid][pRFLTeam];
	PlayerInfo[giveplayerid][pRFLTeam] = -1;
	PlayerInfo[giveplayerid][pRFLTeamL] = -1;
	RFLInfo[team][RFLmembers] -=1;
	format(string, sizeof(string), "* You have kicked %s out of your team.", GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* %s has kicked you out of his team.", GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	if(IsValidDynamic3DTextLabel(RFLTeamN3D[giveplayerid])) {
		DestroyDynamic3DTextLabel(RFLTeamN3D[giveplayerid]);
	}	
	OnPlayerStatsUpdate(giveplayerid);
	SaveRelayForLifeTeam(team);
	return 1;
}

CMD:rflmembers(playerid, params[])
{
	if(rflstatus < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Relay For Life is currently not enabled.");
	if(PlayerInfo[playerid][pRFLTeam] == -1) return SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a team.");
	new string[64];
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Listing all team members online:");
	//foreach(new i: Player) {
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pRFLTeam] == PlayerInfo[playerid][pRFLTeam]) {
				if(PlayerInfo[i][pRFLTeamL] != -1) {
					format(string, sizeof(string), "%s - Leader", GetPlayerNameEx(i));
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				else {
					SendClientMessageEx(playerid, COLOR_GREY, GetPlayerNameEx(i));
				}
			}
		}
	}
	return 1;
}

CMD:rflchangename(playerid, params[])
{
	if(rflstatus < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Relay For Life is currently not enabled.");
	if(PlayerInfo[playerid][pRFLTeam] == -1) return SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a team.");
	if(PlayerInfo[playerid][pRFLTeamL] == -1) return SendClientMessageEx(playerid, COLOR_GREY, "You are not the leader of this team.");
	new name[25];
	if(sscanf(params, "s[25]", name)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rflchangename <teamname>");
	if(GetPVarType(playerid, "HasReport")) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can only have 1 active report at a time. (/cancelreport)");
		return 1;
	}
	if(strfind(name, "'", true) != -1) {
		SendClientMessageEx(playerid, COLOR_GREY, "Please do not use ' inside of your teamname.");
		return 1;
	}	
	new String[128];
	SetPVarInt(playerid, "RFLNameRequest", 1);
	SetPVarString(playerid, "NewRFLName", name);
   	format( String, sizeof( String ), "You have requested to change your team name to %s, please wait for an admin to approve it.", name);
   	SendClientMessageEx( playerid, COLOR_YELLOW, String );
	SendReportToQue(playerid, "Team Name Request", 2, 4);
	return 1;
}

CMD:buyhotdog(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, -2450.6028, 161.1246, 35.1210) && !IsPlayerInRangeOfPoint(playerid, 4.0, 2958.0425, -1393.6724, 5.5500) && 
	!IsPlayerInRangeOfPoint(playerid, 4.0, 300.4977, 200.2298, 1104.3500) && !IsPlayerInRangeOfPoint(playerid, 4.0, 1973.0710, -1298.6427, 25.0172))
		return SendClientMessage(playerid, COLOR_GREY, "You are not at a hot dog stand.");
	if(GetPlayerCash(playerid) < 2000) return SendClientMessage(playerid, COLOR_GREY, "You need $2000 to buy a hot dog.");
	SendClientMessageEx(playerid, COLOR_GRAD4, "You have purchased a 'Hot Dog' for $2000.");
	GivePlayerCash(playerid, -2000);
	PlayerInfo[playerid][pHunger] += 83;
	if (PlayerInfo[playerid][pFitness] >= 5) {
		PlayerInfo[playerid][pFitness] -= 5;
	}
	else {
		PlayerInfo[playerid][pFitness] = 0;
	}
	PlayerInfo[playerid][pHungerTimer] = 0;
	PlayerInfo[playerid][pHungerDeathTimer] = 0;
	if (PlayerInfo[playerid][pHunger] > 100) {
		PlayerInfo[playerid][pHunger] = 100;
	}
	new Float:health;
	GetPlayerHealth(playerid, health);
	if(health < 100) 
	{
		if(health > 90) 
		{
			SetPlayerHealth(playerid, 100);
		}
		else 
		{
			SetPlayerHealth(playerid, health + 10.0);
		}
	}
	return 1;
}

CMD:rflhelp(playerid, params[])
{
	if(rflstatus < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Relay For Life is currently not enabled.");
	SendClientMessageEx(playerid, COLOR_WHITE, "Relay For Life Commands");
	SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________________________________________________________");
	SendClientMessageEx(playerid, COLOR_GREY, "GENERAL: /rflscore /buyrflteam(100k) /leaverflteam");
	if(PlayerInfo[playerid][pRFLTeam] != -1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "MEMBER: /rflmembers");
	}
	if(PlayerInfo[playerid][pRFLTeamL] != -1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "TEAMOWNER: /rflinvite (20 Members Max.) /rflkick /rflchangename");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "ADMIN: /toglapcount /rfltoggle /setlapcount /eventstats /seteventtype race /editevent checkpoints");
	}
	SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________________________________________________________");
	return 1;
}

// Start of the voucher commands
CMD:myvouchers(playerid, params[])
{
	if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot use this command while being in jail/prison.");
	
	ShowVouchers(playerid, playerid);
	return 1;
}

CMD:checkvouchers(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /checkvouchers [player]");
	if(!IsPlayerConnected(targetid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	
	ShowVouchers(playerid, targetid);
	return 1;
}		

CMD:sellvoucher(playerid, params[])
{
	new choice[32], amount, price, buyer;
    if(sscanf(params, "s[32]ddu", choice, amount, price, buyer))
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellvoucher [name] [amount] [price] [buyer]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: CarVoucher, SilverVIP, GoldVIP, PVIP, RestrictedCar, Advert, 7DaySVIP, 7DayGVIP");
		return 1;
	}
	
	new Float: bPos[3];
	GetPlayerPos(buyer, bPos[0], bPos[1], bPos[2]);
	if(GetPlayerVirtualWorld(buyer) != GetPlayerVirtualWorld(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not near this player.");
	if(price < 1 || price > 99999999) return SendClientMessageEx(playerid, COLOR_GRAD1, "You must specify a price greater than $0 or less than $99,999,999.");
	if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid amount specified.");
	if(!IsPlayerConnected(buyer)) return SendClientMessageEx(playerid, COLOR_GRAD1, "This player isn't connected.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, bPos[0], bPos[1], bPos[2])) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not near this player.");
	if(GetPVarInt(playerid, "Injured") != 0 || PlayerCuffed[playerid] != 0 || PlayerInfo[playerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do that right now.");
	if(GetPVarInt(buyer, "Injured") != 0 || PlayerCuffed[buyer] != 0 || PlayerInfo[buyer][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't offer a Prisoner or a Injured player a voucher.");
	if(GetPVarInt(buyer, "buyingVoucher") != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GRAD1, "This player is already buying another voucher, please try again later.");
	
	new string[128];
	if(strcmp(choice, "carvoucher", true) == 0) 
	{
		if(amount > PlayerInfo[playerid][pVehVoucher]) return SendClientMessageEx(playerid, COLOR_GRAD1, "You do not have that much vouchers.");
		
		SetPVarInt(buyer, "priceVoucher", price);
		SetPVarInt(buyer, "amountVoucher", amount);
		SetPVarInt(buyer, "buyingVoucher", 1);
		SetPVarInt(buyer, "sellerVoucher", playerid);
		SetPVarInt(playerid, "buyerVoucher", buyer);
		format(string, sizeof(string), "%s has offered to sell you %d car voucher(s) for $%s - Type /accept voucher or /denyvoucher.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(buyer, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have offered %s %d car voucher(s) for $%s, please wait until he accept/decline the offer.", GetPlayerNameEx(buyer), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		SetPVarInt(buyer, "SQLID_Voucher", GetPlayerSQLId(playerid));
	}
	else if(strcmp(choice, "silvervip", true) == 0) 
	{
		if(amount > PlayerInfo[playerid][pSVIPVoucher]) return SendClientMessageEx(playerid, COLOR_GRAD1, "You do not have that much vouchers.");
		
		SetPVarInt(buyer, "priceVoucher", price);
		SetPVarInt(buyer, "amountVoucher", amount);
		SetPVarInt(buyer, "buyingVoucher", 2);
		SetPVarInt(buyer, "sellerVoucher", playerid);
		SetPVarInt(playerid, "buyerVoucher", buyer);
		format(string, sizeof(string), "%s has offered to sell you %d Silver VIP voucher(s) for $%s - Type /accept voucher or /denyvoucher.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(buyer, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have offered %s %d Silver VIP voucher(s) for $%s, please wait until he accept/decline the offer.", GetPlayerNameEx(buyer), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		SetPVarInt(buyer, "SQLID_Voucher", GetPlayerSQLId(playerid));
	}
	else if(strcmp(choice, "goldvip", true) == 0) 
	{
		if(amount > PlayerInfo[playerid][pGVIPVoucher]) return SendClientMessageEx(playerid, COLOR_GRAD1, "You do not have that much vouchers.");
		
		SetPVarInt(buyer, "priceVoucher", price);
		SetPVarInt(buyer, "amountVoucher", amount);
		SetPVarInt(buyer, "buyingVoucher", 3);
		SetPVarInt(buyer, "sellerVoucher", playerid);
		SetPVarInt(playerid, "buyerVoucher", buyer);
		format(string, sizeof(string), "%s has offered to sell you %d Gold VIP voucher(s) for $%s - Type /accept voucher or /denyvoucher.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(buyer, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have offered %s %d Gold VIP voucher(s) for $%s, please wait until he accept/decline the offer.", GetPlayerNameEx(buyer), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		SetPVarInt(buyer, "SQLID_Voucher", GetPlayerSQLId(playerid));
	}
	else if(strcmp(choice, "pvip", true) == 0)
	{
		if(amount > PlayerInfo[playerid][pPVIPVoucher]) return SendClientMessageEx(playerid, COLOR_GRAD1, "You do not have that much vouchers.");

		SetPVarInt(buyer, "priceVoucher", price);
		SetPVarInt(buyer, "amountVoucher", amount);
		SetPVarInt(buyer, "buyingVoucher", 4);
		SetPVarInt(buyer, "sellerVoucher", playerid);
		SetPVarInt(playerid, "buyerVoucher", buyer);
		format(string, sizeof(string), "%s has offered to sell you %d Platinum VIP voucher(s) for $%s - Type /accept voucher or /denyvoucher.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(buyer, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have offered %s %d Platinum VIP voucher(s) for $%s, please wait until he accept/decline the offer.", GetPlayerNameEx(buyer), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	 	SetPVarInt(buyer, "SQLID_Voucher", GetPlayerSQLId(playerid));
	}
	else if(strcmp(choice, "restrictedcar", true) == 0)
	{
		if(amount > PlayerInfo[playerid][pCarVoucher]) return SendClientMessageEx(playerid, COLOR_GRAD1, "You do not have that much vouchers.");

		SetPVarInt(buyer, "priceVoucher", price);
		SetPVarInt(buyer, "amountVoucher", amount);
		SetPVarInt(buyer, "buyingVoucher", 5);
		SetPVarInt(buyer, "sellerVoucher", playerid);
		SetPVarInt(playerid, "buyerVoucher", buyer);
		format(string, sizeof(string), "%s has offered to sell you %d Restricted Car voucher(s) for $%s - Type /accept voucher or /denyvoucher.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(buyer, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have offered %s %d Restricted Car voucher(s) for $%s, please wait until he accept/decline the offer.", GetPlayerNameEx(buyer), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	 	SetPVarInt(buyer, "SQLID_Voucher", GetPlayerSQLId(playerid));
	}
	else if(strcmp(choice, "advert", true) == 0)
	{
		if(amount > PlayerInfo[playerid][pAdvertVoucher]) return SendClientMessageEx(playerid, COLOR_GRAD1, "You do not have that much vouchers.");

		SetPVarInt(buyer, "priceVoucher", price);
		SetPVarInt(buyer, "amountVoucher", amount);
		SetPVarInt(buyer, "buyingVoucher", 6);
		SetPVarInt(buyer, "sellerVoucher", playerid);
		SetPVarInt(playerid, "buyerVoucher", buyer);
		format(string, sizeof(string), "%s has offered to sell you %d Priority Advertisement voucher(s) for $%s - Type /accept voucher or /denyvoucher.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(buyer, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have offered %s %d Priority Advertisement voucher(s) for $%s, please wait until he accept/decline the offer.", GetPlayerNameEx(buyer), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	 	SetPVarInt(buyer, "SQLID_Voucher", GetPlayerSQLId(playerid));
	}
	else if(strcmp(choice, "7daysvip", true) == 0)
	{
		if(amount > PlayerInfo[playerid][pSVIPExVoucher]) return SendClientMessageEx(playerid, COLOR_GRAD1, "You do not have that much vouchers.");

		SetPVarInt(buyer, "priceVoucher", price);
		SetPVarInt(buyer, "amountVoucher", amount);
		SetPVarInt(buyer, "buyingVoucher", 7);
		SetPVarInt(buyer, "sellerVoucher", playerid);
		SetPVarInt(playerid, "buyerVoucher", buyer);
		format(string, sizeof(string), "%s has offered to sell you %d 7 Days Silver VIP voucher(s) for $%s - Type /accept voucher or /denyvoucher.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(buyer, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have offered %s %d 7 Days Silver VIP voucher(s) for $%s, please wait until he accept/decline the offer.", GetPlayerNameEx(buyer), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	 	SetPVarInt(buyer, "SQLID_Voucher", GetPlayerSQLId(playerid));
	}
	else if(strcmp(choice, "7daygvip", true) == 0)
	{
		if(amount > PlayerInfo[playerid][pGVIPExVoucher]) return SendClientMessageEx(playerid, COLOR_GRAD1, "You do not have that much vouchers.");

		SetPVarInt(buyer, "priceVoucher", price);
		SetPVarInt(buyer, "amountVoucher", amount);
		SetPVarInt(buyer, "buyingVoucher", 8);
		SetPVarInt(buyer, "sellerVoucher", playerid);
		SetPVarInt(playerid, "buyerVoucher", buyer);
		format(string, sizeof(string), "%s has offered to sell you %d 7 Days Gold VIP voucher(s) for $%s - Type /accept voucher or /denyvoucher.", GetPlayerNameEx(playerid), amount, number_format(price));
		SendClientMessageEx(buyer, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have offered %s %d 7 Days Gold VIP voucher(s) for $%s, please wait until he accept/decline the offer.", GetPlayerNameEx(buyer), amount, number_format(price));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	 	SetPVarInt(buyer, "SQLID_Voucher", GetPlayerSQLId(playerid));
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid choice.");
	return 1;
}	

CMD:denyvoucher(playerid, params[])
{
	if(GetPVarInt(playerid, "buyingVoucher") != INVALID_PLAYER_ID)
	{
		new string[128];
		format(string, sizeof(string), "* %s has declined your voucher offer.", GetPlayerNameEx(playerid));
		SendClientMessageEx(GetPVarInt(playerid, "sellerVoucher"), COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* You have declined %s voucher offer.", GetPlayerNameEx(GetPVarInt(playerid, "sellerVoucher")));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		DeletePVar(playerid, "priceVoucher");
		DeletePVar(playerid, "amountVoucher");
		SetPVarInt(playerid, "buyingVoucher", INVALID_PLAYER_ID);
		SetPVarInt(playerid, "sellerVoucher", INVALID_PLAYER_ID);
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "No-one has offered you any vouchers.");
	return 1;
}		

CMD:voucherhelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GRAD1, "** Player Commands: /myvouchers /denyvoucher /accept voucher");
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "** Admin Commands: /checkvouchers");
	}
	return 1;
}	
//end of the voucher commands

CMD:qs(playerid, params[]) return cmd_quickstats(playerid, params);

CMD:quickstats(playerid, params[])
{
	new string[128], Float: health, Float: armor;
	GetPlayerHealth(playerid, health);
	GetPlayerArmour(playerid, armor);
	
	format(string, sizeof(string), "---===== ** Stats of %s ** =====---", GetPlayerNameEx(playerid));
	SendClientMessageEx(playerid, COLOR_GREEN, string);
	format(string, sizeof(string), "** Level: %d | Bank: %s | Cash: %s | Radio Frequency: %dkhz | Warning: %d", PlayerInfo[playerid][pLevel],
	number_format(PlayerInfo[playerid][pAccount]), number_format(PlayerInfo[playerid][pCash]), PlayerInfo[playerid][pRadioFreq], PlayerInfo[playerid][pWarns]);
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	format(string, sizeof(string), "** Health: %d | Armour: %d | Hunger: %d | Fitness: %d", floatround(health), floatround(armor), PlayerInfo[playerid][pHunger], PlayerInfo[playerid][pFitness]);
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	SendClientMessageEx(playerid, COLOR_GREEN, "--------------------------------------------------------------------------------------------------------------------");
	return 1;
}	

CMD:givesprize(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1338 && PlayerInfo[playerid][pHR] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	new PName[MAX_PLAYER_NAME], choice[16], amount;
	if(sscanf(params, "s[24]s[16]d", PName, choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /givesprize [playerid/PlayerName] [Choice] [Amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Choice: CarSlot | ToySlot | CarVoucher | GiftVoucher");
		SendClientMessageEx(playerid, COLOR_GREY, "Note: This command works offline and online.");
		return 1;
	}
	if(amount < 1) return SendClientMessage(playerid, COLOR_GREY, "Amount cannot go below 1");
	new string[128];
	new pID = ReturnUser(PName);
	if(IsPlayerConnected(pID))
	{
		if(strcmp(choice, "carslot", true) == 0)
		{
			PlayerInfo[pID][pVehicleSlot] += amount;
			LoadPlayerDisabledVehicles(pID);
			format(string, sizeof(string), "AdmCmd: %s has given %s %d free car slot(s).", GetPlayerNameEx(playerid), GetPlayerNameEx(pID), amount);
			ABroadCast(COLOR_LIGHTRED, string, 2);
			format(string, sizeof(string), "You received %d free car slot(s) from %s.",amount, GetPlayerNameEx(playerid));
			SendClientMessageEx(pID, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You have given %s %d car slot(s).", GetPlayerNameEx(pID), amount);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d free car slot(s).", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), GetPlayerNameEx(pID), GetPlayerIpEx(pID), amount);
			Log("logs/adminrewards.log", string);
		}
		else if(strcmp(choice, "toyslot", true) == 0)
		{
			PlayerInfo[pID][pToySlot] += amount;
			format(string, sizeof(string), "AdmCmd: %s has given %s %d free toy slot(s).", GetPlayerNameEx(playerid), GetPlayerNameEx(pID), amount);
			ABroadCast(COLOR_LIGHTRED, string, 2);
			format(string, sizeof(string), "You received %d free toy slot(s) from %s.",amount, GetPlayerNameEx(playerid));
			SendClientMessageEx(pID, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You have given %s %d toy slot(s).", GetPlayerNameEx(pID), amount);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d free toy slot(s).", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), GetPlayerNameEx(pID), GetPlayerIpEx(pID), amount);
			Log("logs/adminrewards.log", string);
		}
		else if(strcmp(choice, "carvoucher", true) == 0)
		{
			PlayerInfo[pID][pVehVoucher] += amount;
			format(string, sizeof(string), "AdmCmd: %s has given %s %d free car voucher(s).", GetPlayerNameEx(playerid), GetPlayerNameEx(pID), amount);
			ABroadCast(COLOR_LIGHTRED, string, 2);
			format(string, sizeof(string), "You received %d free car voucher(s) from %s.",amount, GetPlayerNameEx(playerid));
			SendClientMessageEx(pID, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You have given %s %d car voucher(s).", GetPlayerNameEx(pID), amount);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d free car voucher(s).", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), GetPlayerNameEx(pID), GetPlayerIpEx(pID), amount);
			Log("logs/adminrewards.log", string);
		}
		else if(strcmp(choice, "giftvoucher", true) == 0)
		{
			PlayerInfo[pID][pGiftVoucher] += amount;
			format(string, sizeof(string), "AdmCmd: %s has given %s %d free gift reset voucher(s).", GetPlayerNameEx(playerid), GetPlayerNameEx(pID), amount);
			ABroadCast(COLOR_LIGHTRED, string, 2);
			format(string, sizeof(string), "You received %d free gift reset voucher(s) from %s.",amount, GetPlayerNameEx(playerid));
			SendClientMessageEx(pID, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You have given %s %d gift reset voucher(s).", GetPlayerNameEx(pID), amount);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d free gift reset voucher(s).", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), GetPlayerNameEx(pID), GetPlayerIpEx(pID), amount);
			Log("logs/adminrewards.log", string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid choice.");
		}
	}
	else
	{
		new tmpName[24];
		if(strcmp(choice, "carslot", true) == 0)
		{
			mysql_escape_string(PName, tmpName);
			format(string, sizeof(string), "UPDATE `accounts` SET `VehicleSlot` = `VehicleSlot`+%d WHERE `Username`='%s'",amount, tmpName);
			mysql_function_query(MainPipeline, string, false, "OnStaffPrize", "i", playerid);
			format(string, sizeof(string), "Attempting to give %s %d car slot(s)..", tmpName, amount);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
			SetPVarString(playerid, "OnSPrizeType", "Car Slot(s)");
			SetPVarString(playerid, "OnSPrizeName", tmpName);
			SetPVarInt(playerid, "OnSPrizeAmount", amount);
		}
		else if(strcmp(choice, "toyslot", true) == 0)
		{
			mysql_escape_string(PName, tmpName);
			format(string, sizeof(string), "UPDATE `accounts` SET `ToySlot` = `ToySlot`+%d WHERE `Username`='%s'",amount, tmpName);
			mysql_function_query(MainPipeline, string, false, "OnStaffPrize", "i", playerid);
			format(string, sizeof(string), "Attempting to give %s %d toy slot(s)..", tmpName, amount);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
			SetPVarString(playerid, "OnSPrizeType", "Toy Slot(s)");
			SetPVarString(playerid, "OnSPrizeName", tmpName);
			SetPVarInt(playerid, "OnSPrizeAmount", amount);
		}
		else if(strcmp(choice, "carvoucher", true) == 0)
		{
			mysql_escape_string(PName, tmpName);
			format(string, sizeof(string), "UPDATE `accounts` SET `VehVoucher` = `VehVoucher`+%d WHERE `Username`='%s'",amount, tmpName);
			mysql_function_query(MainPipeline, string, false, "OnStaffPrize", "i", playerid);
			format(string, sizeof(string), "Attempting to give %s %d car voucher(s)..", tmpName, amount);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
			SetPVarString(playerid, "OnSPrizeType", "Car Voucher(s)");
			SetPVarString(playerid, "OnSPrizeName", tmpName);
			SetPVarInt(playerid, "OnSPrizeAmount", amount);
		}
		else if(strcmp(choice, "giftvoucher", true) == 0)
		{
			mysql_escape_string(PName, tmpName);
			format(string, sizeof(string), "UPDATE `accounts` SET `GiftVoucher` = `GiftVoucher`+%d WHERE `Username`='%s'",amount, tmpName);
			mysql_function_query(MainPipeline, string, false, "OnStaffPrize", "i", playerid);
			format(string, sizeof(string), "Attempting to give %s %d gift reset voucher(s)..", tmpName, amount);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
			SetPVarString(playerid, "OnSPrizeType", "Gift Reset Voucher(s)");
			SetPVarString(playerid, "OnSPrizeName", tmpName);
			SetPVarInt(playerid, "OnSPrizeAmount", amount);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid choice.");
		}
	}
	return 1;
}

CMD:createbackpack(playerid, params[])
{
	new type;
	if(sscanf(params, "d", type)) 
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /createbackpack [type]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available Types: Type 1 (Armour) - Type 2 (Random Weapon) - Type 3 (Full Hunger) - Type 4 (Full Health).");
		return true;
	}
	
	if(type < 1 || type > 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid Type!");
	
	new id = NextAvailableBackpack();
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		if(id)
		{
			new Float: mypos[3];
			GetPlayerPos(playerid, mypos[0], mypos[1], mypos[2]);
			
			HungerBackpackInfo[id][hgBackpackType] = type;
			
			HungerBackpackInfo[id][hgBackpackPos][0] = mypos[0];
			HungerBackpackInfo[id][hgBackpackPos][1] = mypos[1];
			HungerBackpackInfo[id][hgBackpackPos][2] = mypos[2];
			
			AddNewBackpack(id);
			
			new string[128];
			format(string, sizeof(string), "You have successfully created a Hunger Games Backpack {FF0000}(Type: %s){FFFFFF}.", GetBackpackName(id));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_RED, "The server has reached the maximum amount of Hunger Games Backpacks.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	}
	return true;
}

CMD:starthunger(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		if(hgActive != 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "The Hunger Games event has already been started.");
		
		SendClientMessageToAll(COLOR_LIGHTBLUE, "The Hunger Games event is begining in 2 minutes, type /joinhunger to participate.");
		
		hgActive = 1;
		hgCountdown = 120;
	}
	else 
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	}
	return true;
}

CMD:endhunger(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		if(hgActive > 0)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(HungerPlayerInfo[i][hgInEvent] == 1)
				{
					SetPlayerHealth(i, HungerPlayerInfo[i][hgLastHealth]);
					SetPlayerArmor(i, HungerPlayerInfo[i][hgLastArmour]);
					SetPlayerVirtualWorld(i, HungerPlayerInfo[i][hgLastVW]);
					SetPlayerInterior(i, HungerPlayerInfo[i][hgLastInt]);
					SetPlayerPos(i, HungerPlayerInfo[i][hgLastPosition][0], HungerPlayerInfo[i][hgLastPosition][1], HungerPlayerInfo[i][hgLastPosition][2]);
								
					ResetPlayerWeapons(i);
					
					for(new w = 0; w < 12; w++)
					{
						PlayerInfo[i][pGuns][w] = HungerPlayerInfo[i][hgLastWeapon][w];
						if(PlayerInfo[i][pGuns][w] > 0 && PlayerInfo[i][pAGuns][w] == 0)
						{
							GivePlayerValidWeapon(i, PlayerInfo[i][pGuns][w], 60000);
						}
					}
							
					HungerPlayerInfo[i][hgInEvent] = 0;
					hgPlayerCount--;
					HideHungerGamesTextdraw(i);
					
					for(new v = 0; v < 600; v++)
					{
						if(IsValidDynamic3DTextLabel(HungerBackpackInfo[v][hgBackpack3DText]))
						{
							DestroyDynamic3DTextLabel(HungerBackpackInfo[v][hgBackpack3DText]);
						}
						if(IsValidDynamicPickup(HungerBackpackInfo[v][hgBackpackPickupId]))
						{
							DestroyDynamicPickup(HungerBackpackInfo[v][hgBackpackPickupId]);
						}
								
						HungerBackpackInfo[v][hgActiveEx] = 0;
					}
					
					new string[128];
					format(string, sizeof(string), "Players in event: %d", hgPlayerCount);
					PlayerTextDrawSetString(i, HungerPlayerInfo[i][hgPlayerText], string);
					
					hgActive = 0;
					
					SendClientMessageToAll(COLOR_LIGHTBLUE, "** The Hunger Games Event has been ended by an Administrator.");
				}
			}
		}
	}
	return true;
}				
				
CMD:leavehunger(playerid, params[])
{
	if(HungerPlayerInfo[playerid][hgInEvent] != 1) return SendClientMessageEx(playerid, COLOR_GREY, "You're not in the Hunger Games event.");

	if(hgActive == 2)
	{
		if(hgPlayerCount == 3)
		{
			new szmessage[128];
			format(szmessage, sizeof(szmessage), "** %s has came in third place in the Hunger Games Event.", GetPlayerNameEx(playerid));
			SendClientMessageToAll(COLOR_LIGHTBLUE, szmessage);
					
			SetPlayerHealth(playerid, HungerPlayerInfo[playerid][hgLastHealth]);
			SetPlayerArmor(playerid, HungerPlayerInfo[playerid][hgLastArmour]);
			SetPlayerVirtualWorld(playerid, HungerPlayerInfo[playerid][hgLastVW]);
			SetPlayerInterior(playerid, HungerPlayerInfo[playerid][hgLastInt]);
			SetPlayerPos(playerid, HungerPlayerInfo[playerid][hgLastPosition][0], HungerPlayerInfo[playerid][hgLastPosition][1], HungerPlayerInfo[playerid][hgLastPosition][2]);
						
			ResetPlayerWeapons(playerid);
					
			HungerPlayerInfo[playerid][hgInEvent] = 0;
			hgPlayerCount--;
			HideHungerGamesTextdraw(playerid);
			PlayerInfo[playerid][pRewardDrawChance] += 10;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "** You have been given 10 Draw Chances for the Fall Into Fun Event.");
			
			for(new w = 0; w < 12; w++)
			{
				PlayerInfo[playerid][pGuns][w] = HungerPlayerInfo[playerid][hgLastWeapon][w];
				if(PlayerInfo[playerid][pGuns][w] > 0 && PlayerInfo[playerid][pAGuns][w] == 0)
				{
					GivePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][w], 60000);
				}
			}
		}
		else if(hgPlayerCount == 2)
		{
			new szmessage[128];
			format(szmessage, sizeof(szmessage), "** %s has came in second place in the Hunger Games Event.", GetPlayerNameEx(playerid));
			SendClientMessageToAll(COLOR_LIGHTBLUE, szmessage);
					
			SetPlayerHealth(playerid, HungerPlayerInfo[playerid][hgLastHealth]);
			SetPlayerArmor(playerid, HungerPlayerInfo[playerid][hgLastArmour]);
			SetPlayerVirtualWorld(playerid, HungerPlayerInfo[playerid][hgLastVW]);
			SetPlayerInterior(playerid, HungerPlayerInfo[playerid][hgLastInt]);
			SetPlayerPos(playerid, HungerPlayerInfo[playerid][hgLastPosition][0], HungerPlayerInfo[playerid][hgLastPosition][1], HungerPlayerInfo[playerid][hgLastPosition][2]);
						
			ResetPlayerWeapons(playerid);
					
			HungerPlayerInfo[playerid][hgInEvent] = 0;
			hgPlayerCount--;
			HideHungerGamesTextdraw(playerid);
			PlayerInfo[playerid][pRewardDrawChance] += 25;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "** You have been given 25 Draw Chances for the Fall Into Fun Event.");
			
			for(new w = 0; w < 12; w++)
			{
				PlayerInfo[playerid][pGuns][w] = HungerPlayerInfo[playerid][hgLastWeapon][w];
				if(PlayerInfo[playerid][pGuns][w] > 0 && PlayerInfo[playerid][pAGuns][w] == 0)
				{
					GivePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][w], 60000);
				}
			}
					
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(HungerPlayerInfo[i][hgInEvent] == 1)
				{
					format(szmessage, sizeof(szmessage), "** %s has came in first place in the Hunger Games Event.", GetPlayerNameEx(i));
					SendClientMessageToAll(COLOR_LIGHTBLUE, szmessage);
							
					SetPlayerHealth(i, HungerPlayerInfo[i][hgLastHealth]);
					SetPlayerArmor(i, HungerPlayerInfo[i][hgLastArmour]);
					SetPlayerVirtualWorld(i, HungerPlayerInfo[i][hgLastVW]);
					SetPlayerInterior(i, HungerPlayerInfo[i][hgLastInt]);
					SetPlayerPos(i, HungerPlayerInfo[i][hgLastPosition][0], HungerPlayerInfo[i][hgLastPosition][1], HungerPlayerInfo[i][hgLastPosition][2]);
								
					ResetPlayerWeapons(i);
							
					HungerPlayerInfo[i][hgInEvent] = 0;
					hgPlayerCount--;
					SetPVarInt(i, "hungerEx", 1);
					HideHungerGamesTextdraw(i);
					PlayerInfo[i][pRewardDrawChance] += 50;
					SendClientMessageEx(i, COLOR_LIGHTBLUE, "** You have been given 50 Draw Chances for the Fall Into Fun Event.");
					hgActive = 0;
					
					for(new w = 0; w < 12; w++)
					{
						PlayerInfo[i][pGuns][w] = HungerPlayerInfo[i][hgLastWeapon][w];
						if(PlayerInfo[i][pGuns][w] > 0 && PlayerInfo[i][pAGuns][w] == 0)
						{
							GivePlayerValidWeapon(i, PlayerInfo[i][pGuns][w], 60000);
						}
					}
				}
			}
				
			for(new i = 0; i < 600; i++)
			{
				if(IsValidDynamic3DTextLabel(HungerBackpackInfo[i][hgBackpack3DText]))
				{
					DestroyDynamic3DTextLabel(HungerBackpackInfo[i][hgBackpack3DText]);
				}
				if(IsValidDynamicPickup(HungerBackpackInfo[i][hgBackpackPickupId]))
				{
					DestroyDynamicPickup(HungerBackpackInfo[i][hgBackpackPickupId]);
				}
						
				HungerBackpackInfo[i][hgActiveEx] = 0;
			}
		}
		else if(hgPlayerCount > 3 || hgPlayerCount == 1)
		{
			SetPlayerHealth(playerid, HungerPlayerInfo[playerid][hgLastHealth]);
			SetPlayerArmor(playerid, HungerPlayerInfo[playerid][hgLastArmour]);
			SetPlayerVirtualWorld(playerid, HungerPlayerInfo[playerid][hgLastVW]);
			SetPlayerInterior(playerid, HungerPlayerInfo[playerid][hgLastInt]);
			SetPlayerPos(playerid, HungerPlayerInfo[playerid][hgLastPosition][0], HungerPlayerInfo[playerid][hgLastPosition][1], HungerPlayerInfo[playerid][hgLastPosition][2]);
						
			ResetPlayerWeapons(playerid);
					
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have died and has been removed from the Hunger Games Event, better luck next time.");
					
			HungerPlayerInfo[playerid][hgInEvent] = 0;
			hgPlayerCount--;
					
			HideHungerGamesTextdraw(playerid);
			
			for(new w = 0; w < 12; w++)
			{
				PlayerInfo[playerid][pGuns][w] = HungerPlayerInfo[playerid][hgLastWeapon][w];
				if(PlayerInfo[playerid][pGuns][w] > 0 && PlayerInfo[playerid][pAGuns][w] == 0)
				{
					GivePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][w], 60000);
				}
			}
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot leave at this stage of the event.");
	
	new string[128];
	format(string, sizeof(string), "Players in event: %d", hgPlayerCount);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		PlayerTextDrawSetString(i, HungerPlayerInfo[i][hgPlayerText], string);
	}
	return true;
}	

CMD:joinhunger(playerid, params[])
{
	if(hgActive == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "The Hunger Games event has not been announced!");
	if(hgActive == 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "The Hunger Games event has already been started!");
	if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid,COLOR_GREY,"You cannot do this while being in an arena!");
   	if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
	if(PlayerCuffed[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while being cuffed.");
    if(WatchingTV[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can not do this while watching TV!");
    if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_GREY,"You can not do this while in jail or prison!");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	if(PlayerInfo[playerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot join this event as an administrator.");
	if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You're already in the Hunger Games event.");
	
	GetPlayerPos(playerid, HungerPlayerInfo[playerid][hgLastPosition][0], HungerPlayerInfo[playerid][hgLastPosition][1], HungerPlayerInfo[playerid][hgLastPosition][2]);
	new rand = random(sizeof(hgRandomSpawn));
	SetPlayerPos(playerid, hgRandomSpawn[rand][0], hgRandomSpawn[rand][1], hgRandomSpawn[rand][2]);
	
	GetPlayerHealth(playerid, HungerPlayerInfo[playerid][hgLastHealth]);
	SetPlayerHealth(playerid, 9999.9);
	
	GetPlayerArmour(playerid, HungerPlayerInfo[playerid][hgLastArmour]);
	SetPlayerArmour(playerid, 0);
	
	HungerPlayerInfo[playerid][hgLastVW] = GetPlayerVirtualWorld(playerid);
	SetPlayerVirtualWorld(playerid, 2039);
	
	HungerPlayerInfo[playerid][hgLastInt] = GetPlayerInterior(playerid);
	SetPlayerInterior(playerid, 0);
	
	for(new w = 0; w < 12; w++)
	{
		HungerPlayerInfo[playerid][hgLastWeapon][w] = PlayerInfo[playerid][pGuns][w];
	}
	
	ResetPlayerWeapons(playerid);
	pTazer{playerid} = 0;
	
	for(new x;x<MAX_PLAYERTOYS;x++) 
	{
		RemovePlayerAttachedObject(playerid, x);
	}
	
	for(new i; i < 11; i++) 
	{
		PlayerHoldingObject[playerid][i] = 0;
	}
	
	CreateHungerGamesTextdraw(playerid);
	
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have joined the Hunger Games Event.");
	SendClientMessageEx(playerid, COLOR_GRAD1, "* You may leave this event at anytime through /leavehunger.");
	SendClientMessageEx(playerid, COLOR_RED, "* Note: You have been given god mode & you cannot leave the area until the event has started.");
	
	HungerPlayerInfo[playerid][hgInEvent] = 1;
	hgPlayerCount++;
	
	new string[128];
	format(string, sizeof(string), "Players in event: %d", hgPlayerCount);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		PlayerTextDrawSetString(i, HungerPlayerInfo[i][hgPlayerText], string);
	}
	
	if(PlayerInfo[playerid][pHungerVoucher] > 0)
	{
		ShowPlayerDialog(playerid, DIALOG_HUNGERGAMES, DIALOG_STYLE_MSGBOX, "Hunger Games Voucher", "Would you like to use a Hunger Games Voucher?", "Yes", "No");
	}
	return true;
}

CMD:openbackpack(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot use this command as an administrator.");
	if(hgActive == 2)
	{
		new backpack;
		if(HungerPlayerInfo[playerid][hgInEvent] == 1)
		{
			if(GetPlayerVirtualWorld(playerid) != 2039) return SendClientMessageEx(playerid, COLOR_GRAD1, "You aren't near a backpack.");
			for(new i = 0; i < 600; i++)
			{	
				if(IsPlayerInRangeOfPoint(playerid, 1.0, HungerBackpackInfo[i][hgBackpackPos][0], HungerBackpackInfo[i][hgBackpackPos][1], HungerBackpackInfo[i][hgBackpackPos][2]))
				{
					backpack = i;
				}
			}
			
			if(HungerBackpackInfo[backpack][hgActiveEx] == 0) // Quick fix for the backpack not disappearing bug
			{
				return SendClientMessageEx(playerid, COLOR_GRAD1, "This backpack has already been opened and use.");
			}
			
			if(HungerBackpackInfo[backpack][hgBackpackType] == 1)
			{
				new Float: exarmor;
				GetPlayerArmour(playerid, exarmor);
				SetPlayerArmor(playerid, exarmor+15);
				SendClientMessageEx(playerid, COLOR_GRAD1, "You have picked up the backpack and received 15 percent armor.");
				HungerBackpackInfo[backpack][hgActiveEx] = 0;
				DestroyDynamic3DTextLabel(HungerBackpackInfo[backpack][hgBackpack3DText]);
				DestroyDynamicPickup(HungerBackpackInfo[backpack][hgBackpackPickupId]);
			}
			else if(HungerBackpackInfo[backpack][hgBackpackType] == 2)
			{
				new rand = Random(1, 35);
				if(rand > 0 && rand < 6)
				{
					GivePlayerWeapon(playerid, 24, 60000);
					SendClientMessageEx(playerid, COLOR_GRAD1, "You have picked up the backpack and received a deagle.");
					HungerBackpackInfo[backpack][hgActiveEx] = 0;
					DestroyDynamic3DTextLabel(HungerBackpackInfo[backpack][hgBackpack3DText]);
					DestroyDynamicPickup(HungerBackpackInfo[backpack][hgBackpackPickupId]);
				}
				else if(rand > 5 && rand < 11)
				{
					GivePlayerWeapon(playerid, 25, 60000);
					SendClientMessageEx(playerid, COLOR_GRAD1, "You have picked up the backpack and received a shotgun.");
					HungerBackpackInfo[backpack][hgActiveEx] = 0;
					DestroyDynamic3DTextLabel(HungerBackpackInfo[backpack][hgBackpack3DText]);
					DestroyDynamicPickup(HungerBackpackInfo[backpack][hgBackpackPickupId]);
				}
				else if(rand > 10 && rand < 16)
				{
					GivePlayerWeapon(playerid, 29, 60000);
					SendClientMessageEx(playerid, COLOR_GRAD1, "You have picked up the backpack and received a MP5.");
					HungerBackpackInfo[backpack][hgActiveEx] = 0;
					DestroyDynamic3DTextLabel(HungerBackpackInfo[backpack][hgBackpack3DText]);
					DestroyDynamicPickup(HungerBackpackInfo[backpack][hgBackpackPickupId]);
				}
				else if(rand > 15 && rand < 26)
				{
					GivePlayerWeapon(playerid, 5, 60000);
					SendClientMessageEx(playerid, COLOR_GRAD1, "You have picked up the backpack and received a baseball bat.");
					HungerBackpackInfo[backpack][hgActiveEx] = 0;
					DestroyDynamic3DTextLabel(HungerBackpackInfo[backpack][hgBackpack3DText]);
					DestroyDynamicPickup(HungerBackpackInfo[backpack][hgBackpackPickupId]);
				}
				else if(rand > 25 && rand < 36)
				{
					GivePlayerWeapon(playerid, 22, 60000);
					SendClientMessageEx(playerid, COLOR_GRAD1, "You have picked up the backpack and received a 9mm.");
					HungerBackpackInfo[backpack][hgActiveEx] = 0;
					DestroyDynamic3DTextLabel(HungerBackpackInfo[backpack][hgBackpack3DText]);
					DestroyDynamicPickup(HungerBackpackInfo[backpack][hgBackpackPickupId]);
				}
			}
			else if(HungerBackpackInfo[backpack][hgBackpackType] == 3)
			{
				PlayerInfo[playerid][pHunger] = 100;
				SendClientMessageEx(playerid, COLOR_GRAD1, "You have picked up the backpack and received 100 percent hunger.");
				HungerBackpackInfo[backpack][hgActiveEx] = 0;
				DestroyDynamic3DTextLabel(HungerBackpackInfo[backpack][hgBackpack3DText]);
				DestroyDynamicPickup(HungerBackpackInfo[backpack][hgBackpackPickupId]);
			}
			else if(HungerBackpackInfo[backpack][hgBackpackType] == 4)
			{
				SetPlayerHealth(playerid, 100.0);
				SendClientMessageEx(playerid, COLOR_GRAD1, "You have picked up the backpack and received 100 percent health.");\
				HungerBackpackInfo[backpack][hgActiveEx] = 0;
				DestroyDynamic3DTextLabel(HungerBackpackInfo[backpack][hgBackpack3DText]);
				DestroyDynamicPickup(HungerBackpackInfo[backpack][hgBackpackPickupId]);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in the Hunger Games Event");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "There's currently no active Hunger Games Event.");
	return true;
}
					
CMD:hungerhelp(playerid, params[])
{	
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "** Hunger Games: /starthunger /createbackpack /hgplayers /endhunger");
	}
	
	SendClientMessageEx(playerid, COLOR_GRAD1, "** Hunger Games: /joinhunger /miscshop (Hunger Voucher) /leavehunger /openbackpack");
	return true;
}

CMD:hgplayers(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128]; // 8024 memory is not enough when there is 400+ players in the event
		//foreach(new i : Player)
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(HungerPlayerInfo[i][hgInEvent] == 1)
				{
					format(string, sizeof(string), "Player %s (ID %i)", GetPlayerNameEx(i), i);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
			}	
		}
	}
	else
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return 1;
}

CMD:fps(playerid, params[])
{
	if(GetPVarInt(playerid, "FPSToggle") == 0)
	{
		ShowFPSCounter(playerid);
		SetPVarInt(playerid, "FPSToggle", 1);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have toggled on your FPS Counter.");
	}
	else
	{
		HideFPSCounter(playerid);
		SetPVarInt(playerid, "FPSToggle", 0);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have toggled off your FPS Counter.");
	}
	return true;
}

CMD:toghalloweenshop(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 1337 || PlayerInfo[playerid][pPR] == 2 || PlayerInfo[playerid][pShopTech] == 3)
	{
		new string[128];
		if(HalloweenShop)
		{
			HalloweenShop = 0;
			SendClientMessageEx(playerid, COLOR_RED, "You have toggled the halloween shop on.  It will now be available to players.");
			g_mysql_SaveMOTD();
			format(string, sizeof(string), "Admin %s(%i) has toggled the halloween toy shop on.", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid) );
			Log("logs/zombiecure.log", string);
		}
		else{
			HalloweenShop = 1;
			SendClientMessageEx(playerid, COLOR_RED, "You have toggled the halloween shop off.  It will not be available to players.");
			g_mysql_SaveMOTD();
			format(string, sizeof(string), "Admin %s(%i) has toggled the halloween toy shop off.", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid) );
			Log("logs/zombiecure.log", string);
		}
	}
	return 1;
}

CMD:setpumpkinstock(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 1337 || PlayerInfo[playerid][pPR] == 2 || PlayerInfo[playerid][pShopTech] == 3)
	{
		new string[128], pumpkins;
		if(sscanf(params, "d", pumpkins)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setpumpkinstock [stock]");
		format(string, sizeof(string), "You have set the pumpkin stock to %d.", pumpkins);
		SendClientMessageEx(playerid, COLOR_GRAD1, string);
		format(string, sizeof(string), "Admin %s(%i) has set the pumpkin stock to %d from %d.", GetPlayerNameEx(playerid), GetPlayerSQLId(playerid), pumpkins, PumpkinStock );
		Log("logs/zombiecure.log", string);
		PumpkinStock = pumpkins;
		g_mysql_SaveMOTD();
	}
	return 1;
}

CMD:pddoor(playerid, params[])
{
	new string[128];
	if(IsACop(playerid))
	{
		if(isnull(params))
			return SendClientMessageEx(playerid, COLOR_GRAD1, "Usage: /pddoor [open/close]");
			
		if(strcmp(params, "open", true) == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0,1487.00000000,-1762.42504883,3284.23608398)) //Door 0
			{
				format(string, sizeof(string), "* %s uses their remote to open the door.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaDoor[0],1487.00000000,-1762.42504883+1.25,3284.23608398,0.50);

			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1483.79003906,-1762.42504883,3284.23608398)) //Door 1
			{
				format(string, sizeof(string), "* %s uses their remote to open the door.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaDoor[1],1483.79003906,-1762.42504883+1.25,3284.23608398,0.50);

			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1479.85998535,-1758.31994629,3284.23388672)) //Door 2
			{
				format(string, sizeof(string), "* %s uses their remote to open the door.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaDoor[2],1479.85998535-1.25,-1758.31994629,3284.23388672,0.50);

			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1467.06701660,-1758.31994629,3284.23388672)) //Door 3
			{
				format(string, sizeof(string), "* %s uses their remote to open the door.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaDoor[3],1467.06701660-1.25,-1758.31994629,3284.23388672,0.50);
			}
		}
		else if(strcmp(params, "close", true) == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0,1487.00000000,-1762.42504883,3284.23608398)) //Door 0
			{
				format(string, sizeof(string), "* %s uses their remote to close the door.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaDoor[0],1487.00000000,-1762.42504883,3284.23608398,0.50);

			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1483.79003906,-1762.42504883,3284.23608398)) //Door 1
			{
				format(string, sizeof(string), "* %s uses their remote to close the door.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaDoor[1],1483.79003906,-1762.42504883,3284.23608398,0.50);

			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1479.85998535,-1758.31994629,3284.23388672)) //Door 2
			{
				format(string, sizeof(string), "* %s uses their remote to close the door.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaDoor[2],1479.85998535,-1758.31994629,3284.23388672,0.50);

			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1467.06701660,-1758.31994629,3284.23388672)) //Door 3
			{
				format(string, sizeof(string), "* %s uses their remote to close the door.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaDoor[3],1467.06701660,-1758.31994629,3284.23388672,0.50);
			}
		}
	}
	else 
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not a cop!");
	return true;
}

CMD:pdcell(playerid, params[])
{
	new string[128];
	if(IsACop(playerid))
	{
		if(isnull(params))
			return SendClientMessageEx(playerid, COLOR_GRAD1, "Usage: /pdcell [open/close]");
		
		if(strcmp(params, "open", true) == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1491.21484375,-1764.90002441,3284.25048828)) //Cell0
			{
				format(string, sizeof(string), "* %s uses their remote to open the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[0], 1491.21484375-1.25,-1764.90002441,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1494.41210938,-1764.90002441,3284.25048828)) //Cell1
			{
				format(string, sizeof(string), "* %s uses their remote to open the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[1], 1494.41210938-1.25,-1764.90002441,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1497.61132812,-1764.90002441,3284.25048828)) //Cell2
			{
				format(string, sizeof(string), "* %s uses their remote to open the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[2], 1497.61132812-1.25,-1764.90002441,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1500.81445312,-1764.90002441,3284.25048828)) //Cell3
			{
				format(string, sizeof(string), "* %s uses their remote to open the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[3], 1500.81445312-1.25,-1764.90002441,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1500.81994629,-1761.51000977,3284.25048828)) //Cell4
			{
				format(string, sizeof(string), "* %s uses their remote to open the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[4], 1500.81994629-1.25,-1761.51000977,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1491.22094727,-1761.50000000,3284.25048828)) //Cell5
			{
				format(string, sizeof(string), "* %s uses their remote to open the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[5], 1491.22094727-1.25,-1761.50000000,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1494.41894531,-1761.51000977,3284.25048828)) //Cell6
			{
				format(string, sizeof(string), "* %s uses their remote to open the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[6], 1494.41894531-1.25,-1761.51000977,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1497.61999512,-1761.51000977,3284.25048828)) //Cell7
			{
				format(string, sizeof(string), "* %s uses their remote to open the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[7], 1497.61999512-1.25,-1761.51000977,3284.25048828,0.50);
			}
		}
		else if(strcmp(params, "close", true) == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1491.21484375,-1764.90002441,3284.25048828)) //Cell0
			{
				format(string, sizeof(string), "* %s uses their remote to close the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[0], 1491.21484375,-1764.90002441,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1494.41210938,-1764.90002441,3284.25048828)) //Cell1
			{
				format(string, sizeof(string), "* %s uses their remote to close the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[1], 1494.41210938,-1764.90002441,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1497.61132812,-1764.90002441,3284.25048828)) //Cell2
			{
				format(string, sizeof(string), "* %s uses their remote to close the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[2], 1497.61132812,-1764.90002441,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1500.81445312,-1764.90002441,3284.25048828)) //Cell3
			{
				format(string, sizeof(string), "* %s uses their remote to close the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[3], 1500.81445312,-1764.90002441,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1500.81994629,-1761.51000977,3284.25048828)) //Cell4
			{
				format(string, sizeof(string), "* %s uses their remote to close the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[4], 1500.81994629,-1761.51000977,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1491.22094727,-1761.50000000,3284.25048828)) //Cell5
			{
				format(string, sizeof(string), "* %s uses their remote to close the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[5], 1491.22094727,-1761.50000000,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1494.41894531,-1761.51000977,3284.25048828)) //Cell6
			{
				format(string, sizeof(string), "* %s uses their remote to close the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[6], 1494.41894531,-1761.51000977,3284.25048828,0.50);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1497.61999512,-1761.51000977,3284.25048828)) //Cell7
			{
				format(string, sizeof(string), "* %s uses their remote to close the cells.", GetPlayerNameEx(playerid));
				ProxDetector(2.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(AkaCell[7], 1497.61999512,-1761.51000977,3284.25048828,0.50);
			}
		}
	}
	else
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not a cop!");
	return true;
}

/*CMD:gtedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pGangModerator] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	ShowPlayerDialog(playerid, DIALOG_GANGTAG_MAIN, DIALOG_STYLE_LIST, "Gang Tags", "Create new gang tag\nEdit gang tag", "Choose", "Close");
	return 1;
}

CMD:gtnear(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pGangModerator] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	new string[128];
	SendClientMessageEx(playerid, COLOR_RED, "Listing all gang tags within 30 meters of you...");
	for(new i = 0; i < MAX_GANGTAGS; i++)
	{
		if(GangTags[i][gt_Used] != 0 && IsPlayerInRangeOfPoint(playerid, 30, GangTags[i][gt_PosX], GangTags[i][gt_PosY], GangTags[i][gt_PosZ]))
		{
			format(string, sizeof(string), "ID: %d | Range: %f | VW: %d | Int: %d", i, GetPlayerDistanceFromPoint(playerid, GangTags[i][gt_PosX], GangTags[i][gt_PosY], GangTags[i][gt_PosZ]), GangTags[i][gt_VW], GangTags[i][gt_Int]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:gotogt(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pGangModerator] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	new gangtag;
	if(sscanf(params, "d", gangtag)) return SendClientMessageEx(playerid, COLOR_WHITE, "Syntax: /gotogt <gangtag>");
	if(gangtag < 0 || gangtag > MAX_GANGTAGS) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid gang tag specified.");
	if(GangTags[gangtag][gt_Used] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "This gang tag is not being used.");
	SetPlayerPos(playerid, GangTags[gangtag][gt_PosX], GangTags[gangtag][gt_PosY], GangTags[gangtag][gt_PosZ]);
	SendClientMessageEx(playerid, COLOR_GREY, "You have been teleported.");
	return 1;
}

CMD:gtstatus(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pGangModerator] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	new gangtag;
	if(sscanf(params, "d", gangtag)) return SendClientMessageEx(playerid, COLOR_WHITE, "Syntax: /gtstatus <gangtag>");
	if(gangtag < 0 || gangtag > MAX_GANGTAGS) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid gang tag specified.");
	new string[128];
	format(string, sizeof(string), "Status of gang tag %d:", gangtag);
	SendClientMessageEx(playerid, COLOR_GREEN, string);
	SendClientMessageEx(playerid, COLOR_GREEN, "__________________________________________________________________________________");
	format(string, sizeof(string), "SQLID: %d | PosX: %f | PosY: %f | PosZ: %f", GangTags[gangtag][gt_SQLID], GangTags[gangtag][gt_PosX], GangTags[gangtag][gt_PosY], GangTags[gangtag][gt_PosZ]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "RotX: %f | RotY: %f | RotZ: %f", GangTags[gangtag][gt_PosRX], GangTags[gangtag][gt_PosRY], GangTags[gangtag][gt_PosRZ]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Family: %d | ObjectID: %d | VW: %d | Int: %d | Time: %d", GangTags[gangtag][gt_Family], GangTags[gangtag][gt_ObjectID], GangTags[gangtag][gt_VW], GangTags[gangtag][gt_Int], GangTags[gangtag][gt_Time]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	SendClientMessageEx(playerid, COLOR_GREEN, "__________________________________________________________________________________");
	return 1;
}

CMD:taginfo(playerid, params[])
{
	new string[64];
	for(new i = 0; i < MAX_GANGTAGS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, GangTags[i][gt_PosX], GangTags[i][gt_PosY], GangTags[i][gt_PosZ]) && GangTags[i][gt_Used] != 0)
		{
			if(GangTags[i][gt_Family] != INVALID_FAMILY_ID)
			{
				format(string, sizeof(string), "This is the tag of %s.", FamilyInfo[GangTags[i][gt_Family]][FamilyName]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "There's no information about this tag.");
			}
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "You are not near any gang tag.");
	return 1;
}

CMD:spraytag(playerid, params[])
{
	if(PlayerInfo[playerid][pFMember] == INVALID_FAMILY_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a family!");
	if(PlayerInfo[playerid][pRank] < 5) return SendClientMessageEx(playerid, COLOR_GREY, "You need to be rank 5 to use this feature!");
	new string[128];
	for(new i = 0; i < MAX_GANGTAGS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, GangTags[i][gt_PosX], GangTags[i][gt_PosY], GangTags[i][gt_PosZ]))
		{
			if(GangTags[i][gt_TimeLeft] > 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "This tag is already being sprayed.");
				return 1;
			}
			if(GangTags[i][gt_Family] == PlayerInfo[playerid][pFMember])
			{
				SendClientMessageEx(playerid, COLOR_GREY, "This is already your families tag.");
				return 1;
			}
			if(GangTags[i][gt_Time] > 0)
			{
				format(string, sizeof(string), "This tag will be available to spray in %d minute(s).", GangTags[i][gt_Time]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
				return 1;
			}
			format(string, sizeof(string), "{FF8000}** {C2A2DA}%s starts spraying something on the wall.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SendClientMessageEx(playerid, COLOR_WHITE, "You started spraying your family tag on the wall, it will be finished in 30 seconds.");
			SendClientMessageEx(playerid, COLOR_WHITE, "You can press the fire key to stop spraying the wall.");
			GangTags[i][gt_TimeLeft] = 30;
			SetPVarInt(playerid, "gt_Spraying", 1);
			SetPVarInt(playerid, "gt_Spray", i);
			GangTags[i][gt_Timer] = SetTimerEx("SprayWall", 1000, true, "ii", i, playerid);
			ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "You are not near any family tag!");
	return 1;
}

CMD:tagperm(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pGangModerator] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Syntax: /tagperm <FamilyMember>");
		SendClientMessageEx(playerid, COLOR_GREY, "NOTE: The player needs to be a R6.");
		SendClientMessageEx(playerid, COLOR_GREY, "NOTE: Use this command again to remove his permissions.");
		return 1;
	}
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	new string[128];
	if(GetPVarType(giveplayerid, "gt_Perm"))
	{
		DeletePVar(giveplayerid, "gt_Perm");
		format(string, sizeof(string), "You have revoked the /tagedit permissions from %s.", GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s has revoked your /tagedit permissions.", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		return 1;
	}
	if(PlayerInfo[giveplayerid][pFMember] == INVALID_FAMILY_ID) return SendClientMessageEx(playerid, COLOR_GREY, "This player is not part of a family.");
	if(PlayerInfo[giveplayerid][pRank] < 6) return SendClientMessageEx(playerid, COLOR_GREY, "This player is not a R6.");
	SetPVarInt(giveplayerid, "gt_Perm", 1);
	format(string, sizeof(string), "You have granted %s permissions to use /tagedit for Family %s.", GetPlayerNameEx(giveplayerid), FamilyInfo[PlayerInfo[giveplayerid][pFMember]][FamilyName]);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s granted you permissions to use /tagedit.", GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has granted %s to use /tagedit for family '%s'.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), FamilyInfo[PlayerInfo[giveplayerid][pFMember]][FamilyName]);
	Log("Logs/GangTags.log", string);
	return 1;
}

CMD:tagedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pGangModerator] >= 1)
	{
		ShowPlayerDialog(playerid, DIALOG_GANGTAG_FTAGSEL, DIALOG_STYLE_INPUT, "Family ID", "Specify a valid family id:", "Choose", "Close");
	}
	else if(GetPVarInt(playerid, "gt_Perm") == 1 && PlayerInfo[playerid][pFMember] != INVALID_FAMILY_ID && PlayerInfo[playerid][pRank] >= 6)
	{
		new string[32];
		format(string, sizeof(string), "Gang Tag Edit - %s", FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyName]);
		SetPVarInt(playerid, "gt_Fam", PlayerInfo[playerid][pFMember]);
		ShowPlayerDialog(playerid, DIALOG_GANGTAG_FTAG, DIALOG_STYLE_LIST, string, "Text\nColor\nFont\nFont Size\nBackcolor\nBold\nSP Tags", "Choose", "Close");	
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}
	return 1;
}
*/
CMD:togfireworks(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		if(fireworktog == 0)
		{
			fireworktog = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled the placement of fireworks.");
		}
		else
		{
			fireworktog = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the placement of fireworks.");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized to use this command.");
	return 1;
}

// Dynamic Giftbox
CMD:dgedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 99999 || PlayerInfo[playerid][pShopTech] >= 3)
	{
		new string[128], choice[32], type, amount;
		if(sscanf(params, "s[32]dD", choice, type, amount))
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Usage: /dgedit [choice] [type] [value]");
			SendClientMessageEx(playerid, COLOR_GRAD1, "Available Choices: Money, RimKit, Firework, 7DayGVIP, 1MonthGVIP, 7DaySVIP, 1MonthSVIP, CarSlot, ToySlot");
			SendClientMessageEx(playerid, COLOR_GRAD1, "Available Choices: FullArmor, Firstaid, DDFlag, GateFlag, Credits, PriorityAd, HealthNArmor, Giftreset, Material");
			SendClientMessageEx(playerid, COLOR_GRAD1, "Available Choices: Warning, Pot, Crack, PaintballToken, VIPToken, RespectPoint, CarVoucher, BuddyInvite, Laser");
			SendClientMessageEx(playerid, COLOR_GRAD1, "Available Choices: CustomToy, AdmuteReset, NewbieMuteReset, RestrictedCarVoucher, PlatVIPVoucher");
			return SendClientMessageEx(playerid, COLOR_RED, "Available Types: 0 = Enable/Disable | 1 = Quantity available | 2 = Quantity Given | 3 = Category");
		}
		
		if(type < 0 || type > 3) 
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid Type!");
			return SendClientMessageEx(playerid, COLOR_RED, "Available Type: 0 = Enable/Disable | 1 = Quantity available | 2 = Quantity Given | 3 = Category");
		}
		
		if(amount < 0)
			return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot choose an amount below 0!");
		
		if(strcmp(choice, "money", true) == 0)
		{			
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to $%s.", number_format(amount));
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgMoney[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);		
		}
		else if(strcmp(choice, "rimkit", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgRimKit[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "firework", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgFirework[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "7daygvip", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgGVIP[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "1monthgvip", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgGVIPEx[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "7daysvip", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgSVIP[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "1monthsvip", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgSVIPEx[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "carslot", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgCarSlot[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "toyslot", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgToySlot[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "fullarmor", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgArmor[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "firstaid", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgFirstaid[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "ddflag", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgDDFlag[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "gateflag", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgGateFlag[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "credits", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgCredits[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "priorityad", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgPriorityAd[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "healthnarmor", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgHealthNArmor[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "giftreset", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgGiftReset[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "material", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgMaterial[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "warning", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgWarning[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "pot", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgPot[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "crack", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgCrack[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "paintballtoken", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgPaintballToken[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "viptoken", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgVIPToken[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "respectpoint", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgRespectPoint[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "carvoucher", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgCarVoucher[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "buddyinvite", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgBuddyInvite[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "laser", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgLaser[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "customtoy", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgCustomToy[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "admutereset", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgAdmuteReset[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "newbiemutereset", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgNewbieMuteReset[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "restrictedcarvoucher", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgRestrictedCarVoucher[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(choice, "platvipvoucher", true) == 0)
		{
			// Prepare the proper and approriate string
			switch(type)
			{
				case 0:
				{
					// Little check to make sure they're not inserting invalid values
					if(amount < 0 || amount > 1)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Disabled | 1 - Enabled");
						
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have disabled the gift.");
						case 1: format(string, sizeof(string), "You have enabled the gift.");
						default: return true;
					}
				}
				case 1:
				{
					format(string, sizeof(string), "You have set the gift quantity to %d.", amount);
				}
				case 2:
				{
					format(string, sizeof(string), "You have set the gift amount to %d.", amount);
				}
				case 3:
				{
					if(amount < 0 || amount > 3)
						return SendClientMessageEx(playerid, COLOR_RED, "0 = Common | 1 = Less Common | 2 = Rare | 3 = Super Rare");
					
					switch(amount)
					{
						case 0: format(string, sizeof(string), "You have set the category to Common.");
						case 1: format(string, sizeof(string), "You have set the category to Less Common.");
						case 2: format(string, sizeof(string), "You have set the category to Rare.");
						case 3: format(string, sizeof(string), "You have set the category to Super Rare.");
						default: return true;
					}
				}
				default: return true;
			}
			
			// Set the data to the variable
			dgPlatinumVIPVoucher[type] = amount;
			
			// Save the GiftBox Stuff
			SaveDynamicGiftBox();
			
			// Send the client message
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else 
			return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid Choice!");
	}
	else
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not an Executive Administrator!");
	return true;
}

CMD:viewgiftbox(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 99999 || PlayerInfo[playerid][pShopTech] >= 3)
	{
		ShowPlayerDynamicGiftBox(playerid);
	}
	else
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not an Executive Administrator!");
	return true;
}

CMD:togdynamicgift(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 99999 || PlayerInfo[playerid][pShopTech] >= 3)
	{
		if(IsDynamicGiftBoxEnabled == false)
		{
			IsDynamicGiftBoxEnabled = true;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled the Dynamic GiftBox, please use /dgedit to modify the giftbox items.");
		}
		else if(IsDynamicGiftBoxEnabled == true)
		{
			IsDynamicGiftBoxEnabled = false;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the Dynamic Giftbox.");
		}
	}
	else
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not an Executive Administrator!");
	return true;
}

CMD:fireworknear(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new Float: pos[3];
		SendClientMessageEx(playerid, COLOR_RED, "* Listing all fireworks within 30 meters of you...");
		for(new i, string[128]; i < MAX_PLAYERS; i++)
		{
			if(RocketExplosions[i] != -1)
			{
				pos[0] = GetPVarFloat(i, "fxpos");
				pos[1] = GetPVarFloat(i, "fypos");
				pos[2] = GetPVarFloat(i, "fzpos");
				if(IsPlayerInRangeOfPoint(playerid, 30, pos[0], pos[1], pos[2]))
				{
					format(string, sizeof(string), "** Firework Owner: %s | %f from you", GetPlayerNameEx(i), GetPlayerDistanceFromPoint(playerid, GetPVarFloat(i, "fxpos"), GetPVarFloat(i, "fypos"), GetPVarFloat(i, "fzpos")));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
			}
		}
	}
	else 
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return true;
}

CMD:vipplate(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not a Platinum VIP+");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /vipplate [use/remove]");
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
     	if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
       	{
			new Float: vHealth;
			GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], vHealth);      
    		if(vHealth < 800) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Please repair your vehicle before replacing your plate.");
			new string[64];
			if(strcmp(params, "remove", true) == 0)
			{
				PlayerVehicleInfo[playerid][d][pvPlate] = 0;
				SendClientMessageEx(playerid, COLOR_YELLOW, "Your vehicle will now appear with the default plate, parking your vehicle momentarily...");
				cmd_park(playerid, params); //Save a few lines of code here xD
			}
			else if(strcmp(params, "use", true) == 0)
			{
				format(string, sizeof(string), "{800080}PVIP");
				format(PlayerVehicleInfo[playerid][d][pvPlate], 32, "%s", string);
				SendClientMessageEx(playerid, COLOR_YELLOW, "Your vehicle will now appear with the PVIP Plate, parking your vehicle momentarily...");
				cmd_park(playerid, params); //Save a few lines of code here xD	
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /vipplate [use/remove]");
			}
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "You're not inside a vehicle that you own!");
	return 1;
}

CMD:spawnatvip(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] > 2) return SendClientMessageEx(playerid, COLOR_GREY, "You are already able to get an insurance inside the Gold VIP+ room.");
	if(PlayerInfo[playerid][pDonateRank] != 2) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Silver VIP+!");
	if(PlayerInfo[playerid][pVIPSpawn] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You already bought a spawn at the Gold VIP+ room, you will be able to use it after your next death.");
	if(!GetPVarType(playerid, "PinConfirmed")) return PinLogin(playerid);
	if(PlayerInfo[playerid][pCredits] < 10) return SendClientMessageEx(playerid, COLOR_GREY, "You need 10 credits to buy a spawn at the Gold VIP+ room. Visit shop.ng-gaming.net to purchase credits.");
	new string[128];
	SetPVarInt(playerid, "MiscShop", 9);
	format(string, sizeof(string), "Spawn at Gold VIP+ room\nYour Credits: %s\nCost: {FFD700}%s{A9C4E4}\nCredits Left: %s", number_format(PlayerInfo[playerid][pCredits]), number_format(ShopItems[30][sItemPrice]), number_format(PlayerInfo[playerid][pCredits]-ShopItems[30][sItemPrice]));
	ShowPlayerDialog(playerid, DIALOG_MISCSHOP2, DIALOG_STYLE_MSGBOX, "Purchase a spawn at Gold VIP+ room", string, "Purchase", "Cancel");
	return 1;
}

CMD:freeads(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Platinum VIP+");
	new string[128], days;
	ConvertTime(gettime() - PlayerInfo[playerid][pFreeAdsDay], .ctd=days);
	if(days >= 1)
	{
		PlayerInfo[playerid][pFreeAdsDay] = gettime();
		PlayerInfo[playerid][pFreeAdsLeft] = 3;
		SendClientMessageEx(playerid, COLOR_YELLOW, "* You still have 3 free ads left for today.");
	}	
	else if(PlayerInfo[playerid][pFreeAdsLeft] > 0)
	{
		format(string, sizeof(string), "* You still have %d free ads left for today.", PlayerInfo[playerid][pFreeAdsLeft]);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	else
	{
		new datestring[32];
		datestring = date(PlayerInfo[playerid][pFreeAdsDay]+86400, 3);
		format(string, sizeof(string), "* You have used all your free ads, you will need to wait until %s.", datestring);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

CMD:pvipjob(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Platinum VIP+");
	if(PlayerInfo[playerid][pVIPJob] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You have already used this feature.");
	SendClientMessageEx(playerid, COLOR_YELLOW, "You can select one job to be set to level 5 as a Platinum VIP+");
	ShowPlayerDialog(playerid, DIALOG_VIPJOB, DIALOG_STYLE_LIST, "Job List", "Detective\nLawyer\nWhore\nDrugs Dealer\nDrug Smuggling\nArms Dealer\nCar Mechanic\nBoxer\nFishing\nShipment Contractor\nTreasure Hunter", "Select", "Close");
	return 1;
}

CMD:savepbvehicle(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(GetPVarInt(playerid, "ArenaNumber") == -1) return SendClientMessageEx(playerid, COLOR_WHITE, "You did not select an arena yet.");
	new arenaid = GetPVarInt(playerid, "ArenaNumber");
	new vehslot = GetPVarInt(playerid, "PBVeh");
	new string[128];
	if(IsPlayerInAnyVehicle(playerid))
	{
		new Float: vPosX, Float: vPosY, Float: vPosZ, Float: vPosA, vID;
		vID = GetPlayerVehicleID(playerid);
		GetVehiclePos(vID, vPosX, vPosY, vPosZ);
		GetVehicleZAngle(vID, vPosA);
		switch(vehslot)
		{
			case 1:
			{
				PaintBallArena[arenaid][pbVeh1Model] = GetVehicleModel(vID);
				PaintBallArena[arenaid][pbVeh1X] = vPosX;
				PaintBallArena[arenaid][pbVeh1Y] = vPosY;
				PaintBallArena[arenaid][pbVeh1Z] = vPosZ;
				PaintBallArena[arenaid][pbVeh1A] = vPosA;
			}
			case 2:
			{
				PaintBallArena[arenaid][pbVeh2Model] = GetVehicleModel(vID);
				PaintBallArena[arenaid][pbVeh2X] = vPosX;
				PaintBallArena[arenaid][pbVeh2Y] = vPosY;
				PaintBallArena[arenaid][pbVeh2Z] = vPosZ;
				PaintBallArena[arenaid][pbVeh2A] = vPosA;
			}
			case 3:
			{
				PaintBallArena[arenaid][pbVeh3Model] = GetVehicleModel(vID);
				PaintBallArena[arenaid][pbVeh3X] = vPosX;
				PaintBallArena[arenaid][pbVeh3Y] = vPosY;
				PaintBallArena[arenaid][pbVeh3Z] = vPosZ;
				PaintBallArena[arenaid][pbVeh3A] = vPosA;
			}
			case 4:
			{
				PaintBallArena[arenaid][pbVeh4Model] = GetVehicleModel(vID);
				PaintBallArena[arenaid][pbVeh4X] = vPosX;
				PaintBallArena[arenaid][pbVeh4Y] = vPosY;
				PaintBallArena[arenaid][pbVeh4Z] = vPosZ;
				PaintBallArena[arenaid][pbVeh4A] = vPosA;
			}
			case 5:
			{
				PaintBallArena[arenaid][pbVeh5Model] = GetVehicleModel(vID);
				PaintBallArena[arenaid][pbVeh5X] = vPosX;
				PaintBallArena[arenaid][pbVeh5Y] = vPosY;
				PaintBallArena[arenaid][pbVeh5Z] = vPosZ;
				PaintBallArena[arenaid][pbVeh5A] = vPosA;
			}
			case 6:
			{
				PaintBallArena[arenaid][pbVeh6Model] = GetVehicleModel(vID);
				PaintBallArena[arenaid][pbVeh6X] = vPosX;
				PaintBallArena[arenaid][pbVeh6Y] = vPosY;
				PaintBallArena[arenaid][pbVeh6Z] = vPosZ;
				PaintBallArena[arenaid][pbVeh6A] = vPosA;
			}
		}
	}
	else
	{
		switch(vehslot)
		{
			case 1:
			{
				PaintBallArena[arenaid][pbVeh1Model] = 0;
				PaintBallArena[arenaid][pbVeh1X] = 0.0;
				PaintBallArena[arenaid][pbVeh1Y] = 0.0;
				PaintBallArena[arenaid][pbVeh1Z] = 0.0;
				PaintBallArena[arenaid][pbVeh1A] = 0.0;
			}
			case 2:
			{
				PaintBallArena[arenaid][pbVeh2Model] = 0;
				PaintBallArena[arenaid][pbVeh2X] = 0.0;
				PaintBallArena[arenaid][pbVeh2Y] = 0.0;
				PaintBallArena[arenaid][pbVeh2Z] = 0.0;
				PaintBallArena[arenaid][pbVeh2A] = 0.0;
			}
			case 3:
			{
				PaintBallArena[arenaid][pbVeh3Model] = 0;
				PaintBallArena[arenaid][pbVeh3X] = 0.0;
				PaintBallArena[arenaid][pbVeh3Y] = 0.0;
				PaintBallArena[arenaid][pbVeh3Z] = 0.0;
				PaintBallArena[arenaid][pbVeh3A] = 0.0;
			}
			case 4:
			{
				PaintBallArena[arenaid][pbVeh4Model] = 0;
				PaintBallArena[arenaid][pbVeh4X] = 0.0;
				PaintBallArena[arenaid][pbVeh4Y] = 0.0;
				PaintBallArena[arenaid][pbVeh4Z] = 0.0;
				PaintBallArena[arenaid][pbVeh4A] = 0.0;
			}
			case 5:
			{
				PaintBallArena[arenaid][pbVeh5Model] = 0;
				PaintBallArena[arenaid][pbVeh5X] = 0.0;
				PaintBallArena[arenaid][pbVeh5Y] = 0.0;
				PaintBallArena[arenaid][pbVeh5Z] = 0.0;
				PaintBallArena[arenaid][pbVeh5A] = 0.0;
			}
			case 6:
			{
				PaintBallArena[arenaid][pbVeh6Model] = 0;
				PaintBallArena[arenaid][pbVeh6X] = 0.0;
				PaintBallArena[arenaid][pbVeh6Y] = 0.0;
				PaintBallArena[arenaid][pbVeh6Z] = 0.0;
				PaintBallArena[arenaid][pbVeh6A] = 0.0;
			}
		}
	}
	format(string, sizeof(string), "You have adjusted War Vehicle %d for ArenaID %d.",vehslot, arenaid);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	SavePaintballArena(arenaid);
	PaintballEditArenaMenu(playerid);
	return 1;
}

CMD:ddmove(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new doorid, giveplayerid, fee, minfee, choice[16];
	if(sscanf(params, "s[16]dudd", choice, doorid, giveplayerid, fee, minfee))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ddmove <Choice> <DoorID> <playerid> <Fine (Percent)> <min. fine>");
		SendClientMessageEx(playerid, COLOR_GREY, "Choice: Exterior | Interior");
		SendClientMessageEx(playerid, COLOR_GREY, "NOTE: Set fine as 0 if you don't want to fine this player.");
		return 1;
	}
	if(doorid >= MAX_DDOORS) return SendClientMessageEx( playerid, COLOR_WHITE, "Invalid Door ID!");
	new string[128];
	new totalwealth = PlayerInfo[giveplayerid][pAccount] + GetPlayerCash(giveplayerid);
	if(PlayerInfo[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hSafeMoney];
	if(PlayerInfo[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hSafeMoney];
	if(PlayerInfo[giveplayerid][pPhousekey3] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hSafeMoney];
	if(fee > 0)
	{
		fee = totalwealth / 100 * fee;
		if(PlayerInfo[giveplayerid][pDonateRank] == 3)
		{
			fee = fee / 100 * 95;
		}
		if(PlayerInfo[giveplayerid][pDonateRank] >= 4)
		{
			fee = fee / 100 * 85;
		}
	}
	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddInteriorA]);
		DDoorsInfo[doorid][ddInteriorInt] = GetPlayerInterior(playerid);
		DDoorsInfo[doorid][ddInteriorVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the interior!");
		SaveDynamicDoor(doorid);
		format(string, sizeof(string), "%s has edited DoorID %d's Interior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		if(minfee > fee && minfee > 0)
		{
			GivePlayerCashEx(giveplayerid, TYPE_ONHAND, -minfee);
			format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: Dynamic Door Move", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(minfee), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: Dynamic Door Move", GetPlayerNameEx(giveplayerid), number_format(minfee), GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			
		}
		else if(fee > 0)
		{
			GivePlayerCashEx(giveplayerid, TYPE_ONHAND, -fee);
			format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: Dynamic Door Move", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fee), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: Dynamic Door Move", GetPlayerNameEx(giveplayerid), number_format(fee), GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
		}
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddExteriorA]);
		DDoorsInfo[doorid][ddExteriorVW] = GetPlayerVirtualWorld(playerid);
		DDoorsInfo[doorid][ddExteriorInt] = GetPlayerInterior(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the exterior!");
		DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);
		SaveDynamicDoor(doorid);
		format(string, sizeof(string), "%s has edited DoorID %d's Exterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		if(minfee > fee && minfee > 0)
		{
			GivePlayerCashEx(giveplayerid, TYPE_ONHAND, -minfee);
			format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: Dynamic Door Move", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(minfee), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: Dynamic Door Move", GetPlayerNameEx(giveplayerid), number_format(minfee), GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
		}
		else if(fee > 0)
		{
			GivePlayerCashEx(giveplayerid, TYPE_ONHAND, -fee);
			format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: Dynamic Door Move", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fee), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: Dynamic Door Move", GetPlayerNameEx(giveplayerid), number_format(fee), GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
		}
	}
	return 1;
}

CMD:hmove(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new houseid, giveplayerid, fee, minfee, choice[16];
	if(sscanf(params, "s[16]dudd", choice, houseid, giveplayerid, fee, minfee))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hmove <Choice> <HouseID> <playerid> <Fine (Percent)> <min. fine>");
		SendClientMessageEx(playerid, COLOR_GREY, "Choice: Exterior | Interior");
		SendClientMessageEx(playerid, COLOR_GREY, "NOTE: Set fine as 0 if you don't want to fine this player.");
		return 1;
	}
	new string[128];
	new Float: Pos[3];
	new totalwealth = PlayerInfo[giveplayerid][pAccount] + GetPlayerCash(giveplayerid);
	if(PlayerInfo[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hSafeMoney];
	if(PlayerInfo[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hSafeMoney];
	if(PlayerInfo[giveplayerid][pPhousekey3] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hSafeMoney];
	if(fee > 0)
	{
		fee = totalwealth / 100 * fee;
		if(PlayerInfo[giveplayerid][pDonateRank] == 3)
		{
			fee = fee / 100 * 95;
		}
		if(PlayerInfo[giveplayerid][pDonateRank] >= 4)
		{
			fee = fee / 100 * 85;
		}
	}
	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		format(string, sizeof(string), "%s has edited HouseID %d's Interior. (Before:  %f, %f, %f | After: %f, %f, %f)", GetPlayerNameEx(playerid), houseid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ], Pos[0], Pos[1], Pos[2]);
		Log("logs/hedit.log", string);
		GetPlayerPos(playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hInteriorA]);
		HouseInfo[houseid][hIntIW] = GetPlayerInterior( playerid );
		HouseInfo[houseid][hIntVW] = houseid+6000;
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the interior!" );
		SaveHouse(houseid);
		if(minfee > fee && minfee > 0)
		{
			GivePlayerCashEx(giveplayerid, TYPE_ONHAND, -minfee);
			format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: House Move", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(minfee), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: House Move", GetPlayerNameEx(giveplayerid), number_format(minfee), GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
		}
		else if(fee > 0)
		{
			GivePlayerCashEx(giveplayerid, TYPE_ONHAND, -fee);
			format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: House Move", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fee), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: House Move", GetPlayerNameEx(giveplayerid), number_format(fee), GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
		}
	}	
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		format(string, sizeof(string), "%s has edited HouseID %d's Exterior. (Before:  %f, %f, %f | After: %f, %f, %f)", GetPlayerNameEx(playerid), houseid,  HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], Pos[0], Pos[1], Pos[2]);
		Log("logs/hedit.log", string);
		GetPlayerPos(playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hExteriorA]);
		HouseInfo[houseid][hExtIW] = GetPlayerInterior(playerid);
		HouseInfo[houseid][hExtVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the exterior!" );
		SaveHouse(houseid);
		ReloadHousePickup(houseid);
		if(minfee > fee && minfee > 0)
		{
			GivePlayerCashEx(giveplayerid, TYPE_ONHAND, -minfee);
			format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: House Move", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(minfee), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: House Move", GetPlayerNameEx(giveplayerid), number_format(minfee), GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
		}
		else if(fee > 0)
		{
			GivePlayerCashEx(giveplayerid, TYPE_ONHAND, -fee);
			format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: House Move", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fee), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: House Move", GetPlayerNameEx(giveplayerid), number_format(fee), GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
		}
	}
	return 1;
}

CMD:gmove(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new gateid, giveplayerid, fee, minfee;
	if(sscanf(params, "dudd", gateid, giveplayerid, fee, minfee))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /gmove <Choice> <GateID> <playerid> <Fine (Percent)> <min. fine>");
		SendClientMessageEx(playerid, COLOR_GREY, "NOTE: Set fine as 0 if you don't want to fine this player.");
		return 1;
	}
	new string[128];
	new totalwealth = PlayerInfo[giveplayerid][pAccount] + GetPlayerCash(giveplayerid);
	if(PlayerInfo[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hSafeMoney];
	if(PlayerInfo[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hSafeMoney];
	if(PlayerInfo[giveplayerid][pPhousekey3] != INVALID_HOUSE_ID && HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hOwnerID] == GetPlayerSQLId(giveplayerid)) totalwealth += HouseInfo[PlayerInfo[giveplayerid][pPhousekey3]][hSafeMoney];
	if(fee > 0)
	{
		fee = totalwealth / 100 * fee;
		if(PlayerInfo[giveplayerid][pDonateRank] == 3)
		{
			fee = fee / 100 * 95;
		}
		if(PlayerInfo[giveplayerid][pDonateRank] >= 4)
		{
			fee = fee / 100 * 85;
		}
	}
	GetPlayerPos(playerid,GateInfo[gateid][gPosX],GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ]);
	GateInfo[gateid][gVW] = GetPlayerVirtualWorld(playerid);
	GateInfo[gateid][gInt] = GetPlayerInterior(playerid);
	format(string, sizeof(string), "Gate %d Pos moved to %f %f %f, VW: %d INT: %d", gateid, GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ], GateInfo[gateid][gVW], GateInfo[gateid][gInt]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	if(GateInfo[gateid][gModel] == 0)
	{
		GateInfo[gateid][gModel] = 18631;
		GateInfo[gateid][gRange] = 10;
		GateInfo[gateid][gSpeed] = 5.0;
	}
	if(IsValidDynamicObject(GateInfo[gateid][gGATE])) DestroyDynamicObject(GateInfo[gateid][gGATE]);
	CreateGate(gateid);
	SaveGate(gateid);
	format(string, sizeof(string), "%s has edited GateID %d's Position.", GetPlayerNameEx(playerid), gateid);
	Log("logs/gedit.log", string);
	if(minfee > fee && minfee > 0)
	{
		GivePlayerCashEx(giveplayerid, TYPE_ONHAND, -minfee);
		format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: Dynamic Door Move", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(minfee), GetPlayerNameEx(playerid));
		Log("logs/admin.log", string);
		format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: Dynamic Door Move", GetPlayerNameEx(giveplayerid), number_format(minfee), GetPlayerNameEx(playerid));
		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
	}
	else if(fee > 0)
	{
		GivePlayerCashEx(giveplayerid, TYPE_ONHAND, -fee);
		format(string, sizeof(string), "AdmCmd: %s(%d) was fined $%s by %s, reason: Dynamic Door Move", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), number_format(fee), GetPlayerNameEx(playerid));
		Log("logs/admin.log", string);
		format(string, sizeof(string), "AdmCmd: %s was fined $%s by %s, reason: Dynamic Door Move", GetPlayerNameEx(giveplayerid), number_format(fee), GetPlayerNameEx(playerid));
		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
	}
	return 1;
}

CMD:srelease(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /srelease [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pJailTime] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "This player is not currently in prison!");
			}
			else
			{
				format(string, sizeof(string), "AdmCmd: %s(%d) has been silent released from prison by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerSQLId(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/admin.log", string);
				format(string, sizeof(string), "AdmCmd: %s has been silent released from prison by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				ABroadCast(COLOR_LIGHTRED, string, 2);
				PlayerInfo[giveplayerid][pWantedLevel] = 0;
				PlayerInfo[giveplayerid][pBeingSentenced] = 0;
				SetPlayerToTeamColor(giveplayerid);
				SetPlayerHealth(giveplayerid, 100);
				SetPlayerWantedLevel(giveplayerid, 0);
				PlayerInfo[giveplayerid][pJailTime] = 0;
				SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
				SetPlayerInterior(giveplayerid,0);
				PlayerInfo[giveplayerid][pInt] = 0;
				SetPlayerVirtualWorld(giveplayerid, 0);
				PlayerInfo[giveplayerid][pVW] = 0;
				strcpy(PlayerInfo[giveplayerid][pPrisonReason], "None", 128);
				SetPlayerToTeamColor(giveplayerid);
			}
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:giftbox(playerid, params[])
{
	if(dynamicgift != 0)
	{
		new Float: pos[3];
		SendClientMessageEx(playerid, COLOR_YELLOW, "** There is currently a giftbox placed down and we have set a checkpoint to the location of the giftbox.");
		if(CheckPointCheck(playerid)) cmd_killcheckpoint(playerid, params); //If they have a checkpoint, just remove it
		DisablePlayerCheckpoint(playerid);
		GetDynamicObjectPos(dynamicgift, pos[0], pos[1], pos[2]);
		SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 5);
		SetPVarInt(playerid, "GiftBoxCP", 1);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "** There is currently no giftbox placed down.");
	}
	return true;
}

CMD:sgcheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(SGcheckUsed != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "The sprunk guard check is being used by another admin, please try again in a moment!");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sgcheck [player]");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	new Float:health;
	GetPlayerHealth(giveplayerid, health);
	if(health < 1) return SendClientMessageEx(playerid, COLOR_GREY, "This player is currently dead.");
	if(SGcheckFloats[giveplayerid][0] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "That player is currently being checked for using sprunk guard!");
	if(HHcheckFloats[giveplayerid][0] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "That player is currently being checked for health hacks!");
	if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && giveplayerid != playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
	if(playerTabbed[giveplayerid] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "That player is currently alt-tabbed!");
	new string[128];
	SGcheckUsed = 1;
	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has initiated a sprunk guard check on %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
   	ABroadCast(COLOR_YELLOW, string, 2);
  	format(string, sizeof(string), "Checking %s for sprunk guard, please wait....", GetPlayerNameEx(giveplayerid));
    SendClientMessageEx(playerid, COLOR_YELLOW, string);
	GetPlayerHealth(giveplayerid, SGcheckFloats[giveplayerid][0]);
	GetPlayerArmour(giveplayerid, SGcheckFloats[giveplayerid][1]);
	GetPlayerPos(giveplayerid, SGcheckFloats[giveplayerid][2], SGcheckFloats[giveplayerid][3], SGcheckFloats[giveplayerid][4]);
	GetPlayerFacingAngle(giveplayerid, SGcheckFloats[giveplayerid][5]);
	SGcheckVW[giveplayerid] = GetPlayerVirtualWorld(giveplayerid);
	SGcheckInt[giveplayerid] = GetPlayerInterior(giveplayerid);
	DeletePVar(giveplayerid, "IsFrozen");
	TogglePlayerControllable(giveplayerid, 1);
	SGcheckPlane = AddStaticVehicle(513,993.9423,-3078.1812,803.2570,195.0611,0,0);
	SetVehicleHealth(SGcheckPlane, 1500.0);
	IsPlayerEntering{giveplayerid} = true;
	PutPlayerInVehicle(giveplayerid, SGcheckPlane, 0);	
	SetPVarInt(giveplayerid, "SprunkGuardLic", 1);
	SetTimerEx("SprunkGuardCheck", 1000, 0, "dd", playerid, giveplayerid);
	return 1;
}
/* - Disabled until I find the issue with this
CMD:relog(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	
	new giveplayerid, string[128];
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /relog [playerid]");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified!");
	//if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot relog yourself!");
	//if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin]) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot use this command on a greater/same level administrator than you!");
	if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD1, "This player has not logged in.");
	
	OnPlayerDisconnect(giveplayerid, 4);
	SetPlayerArmor(giveplayerid, 0);
	ResetPlayerWeapons(giveplayerid);
	OnPlayerConnect(giveplayerid);
	format(string, sizeof(string), "You have relogged %s.", GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "You have been relogged by %s.", GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
	format(string, sizeof(string), "%s has forced %s to relog (/relog).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	Log("logs/relog.log", string);
	return true;
}*/

CMD:undercover(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		if(GetPVarInt(playerid, "Undercover") == 0)
		{
			SetPVarInt(playerid, "Undercover", 1);
			SendClientMessageEx(playerid, COLOR_WHITE, "** You have went into undercover mode, your admin rank will no longer show up in /v or /fc.");
		}
		else
		{
			SetPVarInt(playerid, "Undercover", 0);
			SendClientMessageEx(playerid, COLOR_WHITE, "** You have went out of undercover mode, your admin rank will now show up in /v or /fc.");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return true;
}

CMD:watchlistadd(playerid, params[])
{
	if(PlayerInfo[playerid][pWatchdog] >= 4 || PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new points = 0, days, giveplayerid, string[128];
		if(sscanf(params, "ddI(0)", giveplayerid, days, points)) return SendClientMessageEx(playerid, COLOR_GRAD1, "USAGE: /watchlistadd [playerid] [days] [points (optional)]");
		
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot put an administrator on the watchlist!");
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot put yourself on the watchlist!");
			if(days < 1 || days > 365) return SendClientMessageEx(playerid, COLOR_GRAD1, "Please specify an amount of days (1 to 365 Days).");
			if(points < 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid Points Specified!");
			if(PlayerInfo[giveplayerid][pWatchlist] == 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "This player is already on the watchlist!");
			
			if(points > 0) AddNonRPPoint(giveplayerid, points, gettime()+2592000, "Manually Added", GetPlayerSQLId(playerid), 1);
			PlayerInfo[giveplayerid][pWatchlist] = 1;
			PlayerInfo[giveplayerid][pNonRPMeter] += points;
			PlayerInfo[giveplayerid][pWatchlistTime] = gettime() + 86400 / days;
			
			format(string, sizeof(string), "You have manually added %s to the watchlist for %d days", GetPlayerNameEx(giveplayerid), days);
			SendClientMessageEx(playerid, COLOR_CYAN, string);
			
			format(string, sizeof(string), "%s has added %s to the watchlist", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("logs/watchlist.log", string);
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified!");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return true;
}

CMD:watchlistremove(playerid, params[])
{
	if(PlayerInfo[playerid][pWatchdog] >= 4 || PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new giveplayerid, string[128];
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "USAGE: /watchlistremove [playerid]");
		
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot perform this command on an administrator!");
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot perform this command on yourself!");
			if(PlayerInfo[giveplayerid][pWatchlist] == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "This player is not on the watchlist!");
			
			PlayerInfo[giveplayerid][pWatchlist] = 0;
			PlayerInfo[giveplayerid][pWatchlistTime] = 0;
			
			format(string, sizeof(string), "You have removed %s from the watchlist.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_CYAN, string);
			
			format(string, sizeof(string), "%s has removed %s from the watchlist", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("logs/watchlist.log", string);
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified!");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return true;
}

CMD:restrictaccount(playerid, params[])
{
	if(PlayerInfo[playerid][pWatchdog] >= 3 || PlayerInfo[playerid][pAdmin] >= 4)
	{
		new giveplayerid, string[128];
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "USAGE: /restrictaccount [playerid]");
		
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAccountRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "This player account is already restricted!");
			if(PlayerInfo[giveplayerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot restrict an administrator account!");
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot restrict your own account!");
			
			PlayerInfo[giveplayerid][pAccountRestricted] = 1;
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "You have restricted %s account.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_CYAN, string);
			format(string, sizeof(string), "Your account has been restricted by %s. You will not be able to drive a vehicle, give/take any damage or own any weapons", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_CYAN, string);
			SendClientMessageEx(giveplayerid, COLOR_RED, "Note: To lift this restriction, please contact a member of the RP Improvement Team.");
			
			PlayerTextDrawShow(giveplayerid, AccountRestriction[giveplayerid]);
			PlayerTextDrawShow(giveplayerid, AccountRestrictionEx[giveplayerid]);
			
			format(string, sizeof(string), "AdmCmd: %s has restricted %s account.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_LIGHTRED, string, 2);
			
			format(string, sizeof(string), "%s has restricted %s account", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("logs/restrictaccount.log", string);
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return true;
}

CMD:unrestrictaccount(playerid, params[])
{
	if(PlayerInfo[playerid][pWatchdog] >= 3 || PlayerInfo[playerid][pAdmin] >= 4)
	{
		new giveplayerid, string[128];
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "USAGE: /unrestrictaccount [playerid]");
		
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAccountRestricted] == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "This player account is not restricted!");
			if(PlayerInfo[giveplayerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot unrestrict an administrator account!");
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot unrestrict your own account!");
			
			PlayerInfo[giveplayerid][pAccountRestricted] = 0;
			
			format(string, sizeof(string), "You have unrestricted %s account.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_CYAN, string);
			format(string, sizeof(string), "Your account has been unrestricted by %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_CYAN, string);
			
			format(string, sizeof(string), "AdmCmd: %s has unrestricted %s account.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_LIGHTRED, string, 2);
			
			PlayerTextDrawHide(giveplayerid, AccountRestriction[giveplayerid]);
			PlayerTextDrawHide(giveplayerid, AccountRestrictionEx[giveplayerid]);
			
			format(string, sizeof(string), "%s has unrestricted %s account", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("logs/restrictaccount.log", string);
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return true;
}

CMD:watchdogs(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pWatchdog] >= 3)
	{
		new string[1024];
		for(new i = 0; i < MAX_PLAYERS; ++i)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pWatchdog] == 1) format(string, sizeof(string), "%s\nWatchdog %s (ID %i)", string, GetPlayerNameEx(i), i);
				else if(PlayerInfo[i][pWatchdog] == 2) format(string, sizeof(string), "%s\nSenior Watchdog %s (ID %i)", string, GetPlayerNameEx(i), i);
				else if(PlayerInfo[i][pWatchdog] == 3) format(string, sizeof(string), "%s\nRP Specialist %s (ID %i)", string, GetPlayerNameEx(i), i);
				else if(PlayerInfo[i][pWatchdog] == 4) format(string, sizeof(string), "%s\nDirector of RP Improvement %s (ID %i)", string, GetPlayerNameEx(i), i);
				if(PlayerInfo[i][pWatchdog] > 0 && GetPVarInt(i, "WatchdogChat") == 0) format(string, sizeof(string), "%s (WD Chat Toggled)", string);
			}
		}
		
		ShowPlayerDialog(playerid, DIALOG_NOTHING, DIALOG_STYLE_LIST, "Watchdogs currently online:", string, "Close", "");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return true;
}

CMD:togwd(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pWatchdog] < 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	if(GetPVarInt(playerid, "WatchdogChat") == 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "** You have disabled the watchdog chat.");
		return SetPVarInt(playerid, "WatchdogChat", 0);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "** You have enabled the watchdog chat.");
		return SetPVarInt(playerid, "WatchdogChat", 1);
	}
}
		
CMD:wd(playerid, params[]) 
{
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pWatchdog] >= 1) 
	{
		if(GetPVarInt(playerid, "WatchdogChat") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You have watchdog chat disabled - /togwd to enable it.");
		if(!isnull(params)) 
		{
			new szMessage[128];
			if(PlayerInfo[playerid][pAdmin] == 2) format(szMessage, sizeof(szMessage), "* Junior Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 3) format(szMessage, sizeof(szMessage), "* General Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 4) format(szMessage, sizeof(szMessage), "* Senior Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 1337) format(szMessage, sizeof(szMessage), "* Head Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 1338) format(szMessage, sizeof(szMessage), "* Lead Head Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pAdmin] == 99999) format(szMessage, sizeof(szMessage), "* Executive Admin %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pWatchdog] == 1) format(szMessage, sizeof(szMessage), "** Watchdog %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pWatchdog] == 2) format(szMessage, sizeof(szMessage), "** Senior Watchdog %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pWatchdog] == 3) format(szMessage, sizeof(szMessage), "** RP Specialist %s: %s", GetPlayerNameEx(playerid), params);
			else if(PlayerInfo[playerid][pWatchdog] == 4) format(szMessage, sizeof(szMessage), "** Director of RP Improvement %s: %s", GetPlayerNameEx(playerid), params);
			else format(szMessage, sizeof(szMessage), "* Undefined Rank %s: %s", GetPlayerNameEx(playerid), params);

			for(new i = 0; i < MAX_PLAYERS; ++i)
			{
				if(IsPlayerConnected(i))
				{
					if((PlayerInfo[i][pAdmin] >= 2 || PlayerInfo[i][pWatchdog] >= 1) && GetPVarInt(i, "WatchdogChat") == 1)
					{
						SendClientMessageEx(i, 0x2267F0FF, szMessage);
					}
				}	
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /wd [watchdog chat]");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return true;
}

CMD:refer(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdmin] < 1338) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't submit reports as an administrator.");
	new reason[100];
	if(PlayerInfo[playerid][pWatchdog] < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized to use this command!");
	if(GetPVarInt(playerid, "SpectatingWatch") == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only use this command when you are spectating someone!");
	if(sscanf(params, "s[100]", reason)) return SendClientMessageEx(playerid, COLOR_GRAD1, "USAGE: /refer [details]");
	if(PlayerInfo[playerid][pRMuted] != 0) return ShowPlayerDialog(playerid,7955,DIALOG_STYLE_MSGBOX,"Report blocked","You are blocked from submitting any reports!\n\nTips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.\n- For shop orders use the /shoporder command","Close", "");
 	if(GetPVarType(playerid, "HasReport")) return SendClientMessageEx(playerid, COLOR_GREY, "You can only have 1 active report at a time.");
	JustReported[playerid] = 25;
	new giveplayerid = GetPVarInt(playerid, "SpectatingWatch");
	new string[128];
	format(string, sizeof(string), "{FF0000}(Watchdog Alert) %s (ID %d) | Details: %s{FFFF91}", GetPlayerNameEx(giveplayerid), giveplayerid, reason);
	SendReportToQue(playerid, string, 2, 1);
	SetPVarInt(giveplayerid, "BeenAlerted", 1);
	SetPVarInt(playerid, "AlertedThisPlayer", giveplayerid);
	for(new i; i < MAX_PLAYERS; i++) if(PlayerInfo[i][pWatchdog] >= 1) SendClientMessageEx(i, COLOR_LIGHTBLUE, string);
	SendClientMessageEx(playerid, COLOR_YELLOW, "Your Watch Dog Alert was sent to the Admins & Watchdogs.");
	SetPVarInt(playerid, "WDReport", 2);
	format(string, sizeof(string), "Please write a brief report on what you watched %s do.\n * 30 characters min", GetPlayerNameEx(giveplayerid));
	return ShowPlayerDialog(playerid, DIALOG_WDREPORT, DIALOG_STYLE_INPUT, "Incident Report - Refer", string, "Submit", "");
}

CMD:viewassets(playerid, params[])
{
  	if(!IsAJudge(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 5) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 5+ can do this.");
	new giveplayerid, string[128];
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /viewassets [player]");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	
	format(string, sizeof(string), "%s's assets | Vehicle: %d - House: %d - Bank: %d", GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pFreezeCar], PlayerInfo[giveplayerid][pFreezeHouse], PlayerInfo[giveplayerid][pFreezeBank]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	return true;
}

CMD:wdwhitelist(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pWatchdog] >= 4)
	{
		new string[128], query[256], giveplayer[MAX_PLAYER_NAME], ip[16];
		if(sscanf(params, "s[24]s[16]", giveplayer, ip))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /wdwhitelist [watchdog name] [IP]");
			return 1;
		}

		new tmpName[24], tmpIP[16];
		mysql_escape_string(giveplayer, tmpName, MainPipeline);
		mysql_escape_string(ip, tmpIP, MainPipeline);
		SetPVarString(playerid, "OnWDWhitelist", tmpName);

		format(query, sizeof(query), "UPDATE `accounts` SET `SecureIP`='%s' WHERE `Username`='%s' AND `Watchdog` <= %d", tmpIP, tmpName, PlayerInfo[playerid][pWatchdog]);
		mysql_function_query(MainPipeline, query, false, "OnWDWhitelist", "i", playerid);

		format(string, sizeof(string), "Attempting to whitelist %s on %s's account...", tmpIP, tmpName);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return true;
}

CMD:watchlist(playerid, params[])
{
	if(PlayerInfo[playerid][pWatchdog] >= 1 || PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pSMod] == 1)
	{
		if(FetchingWatchlist == 1) return SendClientMessageEx(playerid, COLOR_RED, "Please try again later, someone is already fetching the watchlist.");
		PublicSQLString = "";
		mysql_function_query(MainPipeline, "SELECT * FROM `nonrppoints` WHERE `active` = '1' AND `manual` = '1' ORDER BY `point` DESC", true, "FetchWatchlist", "i", playerid);
		
		SendClientMessageEx(playerid, COLOR_CYAN, "Fetching the watchlist...");
		FetchingWatchlist = 1;
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	return true;
}

CMD:makewatchdog(playerid, params[])  {
	if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pWatchdog] >= 4) {

		new
			ivalue,
			iTargetID;

		if(sscanf(params, "ui", iTargetID, ivalue)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /makewatchdog [player] [level]");
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(PlayerInfo[iTargetID][pHelper] >= 1) {
				SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot make community advisors admins!");
			}
			if(PlayerInfo[iTargetID][pWatchdog] == ivalue) return SendClientMessageEx(playerid, COLOR_GREY, "This person already has this watchdog level.");
			else {

				new szRank[128];
				switch(ivalue) {
					case 0: format(szRank, sizeof(szRank), "AdmCmd: %s has removed %s's watchdog rank.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					case 1: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s a Watchdog.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					case 2: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s a Senior Watchdog.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					case 3: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s a RP Specialist.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					case 4: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s the Director of RP Improvement.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					default: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s an undefined level watchdog.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
				}	
				
				PlayerInfo[iTargetID][pWatchdog] = ivalue;
				ABroadCast(COLOR_LIGHTRED, szRank, 2);
				Log("logs/makewatchdog.log", szRank);
				
				switch(ivalue) {
					case 0: format(szRank, sizeof(szRank), "Your watchdog rank has been removed by %s.", GetPlayerNameEx(playerid));
					case 1: format(szRank, sizeof(szRank), "You have been made a Watchdog by %s.", GetPlayerNameEx(playerid));
					case 2: format(szRank, sizeof(szRank), "You have been made a Senior Watchdog by %s.", GetPlayerNameEx(playerid));
					case 3: format(szRank, sizeof(szRank), "You have been made a RP Specialist by %s.", GetPlayerNameEx(playerid));
					case 4: format(szRank, sizeof(szRank), "You have been made the Director of RP Improvement by %s.", GetPlayerNameEx(playerid));
					default: format(szRank, sizeof(szRank), "You have been made an undefined level watchdog by %s.", GetPlayerNameEx(playerid));
				}
				SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szRank);
				
				switch(ivalue) {
					case 0: format(szRank, sizeof(szRank), "You have removed %s's watchdog rank.", GetPlayerNameEx(iTargetID));
					case 1: format(szRank, sizeof(szRank), "You have made %s a Watchdog.", GetPlayerNameEx(iTargetID));
					case 2: format(szRank, sizeof(szRank), "You have made %s a Senior Watchdog.", GetPlayerNameEx(iTargetID));
					case 3: format(szRank, sizeof(szRank), "You have made %s a RP Specialist.", GetPlayerNameEx(iTargetID));
					case 4: format(szRank, sizeof(szRank), "You have made %s the Director of RP Improvement.", GetPlayerNameEx(iTargetID));
					default: format(szRank, sizeof(szRank), "You have made %s an undefined level watchdog.", GetPlayerNameEx(iTargetID));
				}
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szRank);
			}
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:valgifts(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pPR] == 2)
    {
     	if(ValGifts == 0)
     	{
           	ValGifts = 1;
           	new sString[41 + MAX_PLAYER_NAME];
			format( sString, sizeof( sString ), "AdmCmd: %s has enabled the /kissvalentine command.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, sString, 1337 );
			vgtext = CreateDynamic3DTextLabel("/kissvalentine", COLOR_RED, -1984.5751, 1117.9972, 53.1250, 10.0);
		}
		else
		{
		    ValGifts = 0;
		    new sString[41 + MAX_PLAYER_NAME];
	   		format( sString, sizeof( sString ), "AdmCmd: %s has disabled the /kissvalentine command.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, sString, 1337 );
			DestroyDynamic3DTextLabel(vgtext);
		}
	}
	return 1;
}

CMD:kissvalentine(playerid, params[])
{
	new string[128], year, month, day;
	getdate(year, month, day);
	if(ValGifts == 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "This command has been disabled!");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 10.0,-1984.5751,1117.9972,53.1250))
	{
		new giveplayerid, style;
		if(sscanf(params, "ud", giveplayerid, style)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /kissvalentine [player] [style (1-6)]");
		if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "That player is not connected");
		if(playerid == giveplayerid) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /kissvalentine [player] [style (1-6)]");
		if(!(0 < style < 7)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /kissvalentine [player] [style (1-6)]");
		new Float: ppFloats[3];

		GetPlayerPos(giveplayerid, ppFloats[0], ppFloats[1], ppFloats[2]);

		if(!IsPlayerInRangeOfPoint(playerid, 2, ppFloats[0], ppFloats[1], ppFloats[2]) || Spectating[giveplayerid] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You're too far away. You can't kiss right now.");
			return 1;
		}
		if(PlayerInfo[playerid][pGiftTime] > 0)
		{
			format(string, sizeof(string),"Item: Reset Gift Timer\nYour Credits: %s\nCost: {FFD700}%s{A9C4E4}\nCredits Left: %s", number_format(PlayerInfo[playerid][pCredits]), number_format(ShopItems[17][sItemPrice]), number_format(PlayerInfo[playerid][pCredits]-ShopItems[17][sItemPrice]));
			ShowPlayerDialog( playerid, DIALOG_SHOPGIFTRESET, DIALOG_STYLE_MSGBOX, "Reset Gift Timer", string, "Purchase", "Exit" );
			SendClientMessageEx(playerid, COLOR_GRAD2, "You have already received a gift in the last 5 hours!");
			return 1;
		}
		else if(PlayerInfo[giveplayerid][pGiftTime] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "That player has already received a gift in the last 5 hours!");
			return 1;
		}
		SetPVarInt(playerid, "kissvalstyle", style);
		SetPVarInt(giveplayerid, "kissvaloffer", playerid);
		SetPVarInt(giveplayerid, "kissvalsqlid", GetPlayerSQLId(playerid));
		
		format(string, sizeof(string), "You have requested to kiss %s, please wait for them to respond.", GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

		format(string, sizeof(string), "%s has requested to give you a kiss, please use '/accept kiss' to approve it.", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You need to be near the San Fierro Church in order to use this command.");
	return 1;
}


CMD:listgates(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	new hid, string[128];
	if(sscanf(params, "d", hid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /listgates [houseid]");
	if(hid <= 0 || hid >= MAX_HOUSES)
	{
		format(string, sizeof(string), "House ID must be between 1 and %d.", MAX_HOUSES - 1);
		return SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	format(string, sizeof(string), "Listing gates linked to house id: %d", hid);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	for(new i = 0; i < MAX_GATES; i++)
	{
		if(GateInfo[i][gHID] == hid)
		{
			format(string, sizeof(string), "- %d", i);
			SendClientMessageEx(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}


CMD:shopbpack(playerid, params[]) {
	if(PlayerInfo[playerid][pShopTech] >= 1 || PlayerInfo[playerid][pAdmin] > 3) 
	{
		new playertogive, type, orderid;

		if(sscanf(params, "uii", playertogive, type, orderid)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopbpack [player] [type] [orderid]");
			SendClientMessageEx(playerid, COLOR_WHITE, "Types: 1(Small Backpack), 2(Medium Backpack), 3(Large Backpack)");
		}
		else if(!(0 <= type <= 4)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopbpack [player] [type] [orderid]");
			SendClientMessageEx(playerid, COLOR_WHITE, "Types: 1(Small Backpack), 2(Medium Backpack), 3(Large Backpack)");
		}
		else {

			new
				TypeName[7],
				szMessage[87];

			
			switch(type)
			{
				case 1: 
				{
					TypeName = "Small";
					SetPlayerAttachedObject(playertogive, 9, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
				}
				case 2: 
				{
					TypeName = "Medium";
					SetPlayerAttachedObject(playertogive, 9, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
				}
				case 3: 
				{
					TypeName = "Large";
					SetPlayerAttachedObject(playertogive, 9, 3026, 1, -0.254999, -0.109, -0.022999, 10.6, -1.20002, 3.4, 1.265, 1.242, 1.062);
				}
			}
			
			PlayerInfo[playertogive][pBackpack] = type;
			PlayerInfo[playertogive][pBEquipped] = 1;
			PlayerInfo[playertogive][pBStoredV] = INVALID_PLAYER_VEHICLE_ID;
			PlayerInfo[playertogive][pBStoredH] = INVALID_HOUSE_ID;
			format(szMessage, sizeof(szMessage), "You have successfully created a %s Backpack for %s (OrderID: %d).", TypeName, GetPlayerNameEx(playertogive), orderid);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			
			format(szMessage, sizeof(szMessage), "You now have a %s Backpack from %s (OrderID: %d).", TypeName, GetPlayerNameEx(playerid), orderid);
			SendClientMessageEx(playertogive, COLOR_WHITE, szMessage);
			
			SendClientMessageEx(playertogive, COLOR_GREY, "Use /backpackhelp to see the list of commands.");

			format(szMessage, sizeof(szMessage), "%s created a %s Backpack (%i) for %s (OrderID: %d).", GetPlayerNameEx(playerid), TypeName, type, GetPlayerNameEx(playertogive), orderid);
			Log("logs/shoplog.log", szMessage);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
    return 1;
}

CMD:sellbackpack(playerid, params[])
{
	if(PlayerInfo[playerid][pBackpack] > 0)
	{
		if(!PlayerInfo[playerid][pBEquipped]) return SendClientMessageEx(playerid, COLOR_GREY, "You are are not wearing your backpack, you can wear it with /bwear.");
		if(GetPVarInt(playerid, "BackpackDisabled") > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use your backpack at this moment.");
		if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being inside the vehicle!");
		if(GetPVarInt(playerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command!");
		if(GetPVarInt(playerid, "sellingbackpack")) return SendClientMessageEx(playerid, COLOR_GRAD2, "You are already selling a backpack!");
		
		new string[128], giveplayerid, price, bptype[8];
		if(sscanf(params, "ui", giveplayerid, price)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellbackpack [player] [price]");
			SendClientMessageEx(playerid, COLOR_YELLOW, "WARNING: /sellbackpack will automatically remove all your items currently in your backpack.");
			return 1;
		}
		if(price < 0) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellbackpack [player] [price]");
			SendClientMessageEx(playerid, COLOR_YELLOW, "WARNING: /sellbackpack will automatically remove all your items currently in your backpack.");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(playerid == giveplayerid) return 1;
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				switch(PlayerInfo[playerid][pBackpack])
				{
					case 1: bptype = "Small";
					case 2: bptype = "Medium";
					case 3: bptype = "Large";
				}
				if(PlayerInfo[giveplayerid][pBackpack] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "That player already has a backpack!");
				SetPVarInt(giveplayerid, "sellbackpack", playerid);
				SetPVarInt(giveplayerid, "sellbackpackprice", price);
				SetPVarInt(playerid, "sellingbackpack", 1);
				format(string, sizeof(string), "* %s has offered you a %s Backpack for $%s. /accept backpack to get the backpack.", GetPlayerNameEx(playerid), bptype, number_format(price));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* You have offered %s your %s Backpack for $%s.",GetPlayerNameEx(giveplayerid), bptype, number_format(price));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			}
			else
			{
				return SendClientMessageEx(playerid, COLOR_GREY, " That person is not near you!");
			}
		}
		else
		{
			return SendClientMessageEx(playerid, COLOR_GREY, " That person is not connected!");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You do not own a backpack(Use /miscshop to get one with credits)");
	return 1;
}

CMD:listbitems(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 1 || PlayerInfo[playerid][pWatchdog] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /listbitems [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pBackpack] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "That player does not have a backpack!");
			new btype[8], weaponname[50];
			switch(PlayerInfo[giveplayerid][pBackpack])
			{
				case 1: btype = "Small";
				case 2: btype = "Medium";
				case 3: btype = "Large";
			}
			SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
			format(string, sizeof(string), "*** %s' %s Backpack items...  ***", GetPlayerNameEx(giveplayerid), btype);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			if(PlayerInfo[giveplayerid][pBItems][0] > 0)
			{
				format(string, sizeof(string), "(Backpack) %d meals.", PlayerInfo[giveplayerid][pBItems][0]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			
			if(PlayerInfo[giveplayerid][pBItems][1] > 0)
			{
				format(string, sizeof(string), "(Backpack) %d grams of pot.", PlayerInfo[giveplayerid][pBItems][1]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			
			if(PlayerInfo[giveplayerid][pBItems][2] > 0)
			{
				format(string, sizeof(string), "(Backpack) %d grams of crack.", PlayerInfo[giveplayerid][pBItems][2]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			
			if(PlayerInfo[giveplayerid][pBItems][3] > 0)
			{
				format(string, sizeof(string), "(Backpack) %d grams of heroin.", PlayerInfo[giveplayerid][pBItems][3]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			
			if(PlayerInfo[giveplayerid][pBItems][4] > 0)
			{
				format(string, sizeof(string), "(Backpack) %d grams of raw opium.", PlayerInfo[giveplayerid][pBItems][4]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			
			if(PlayerInfo[giveplayerid][pBItems][5] > 0)
			{
				format(string, sizeof(string), "(Backpack) %d Medical Kits.", PlayerInfo[giveplayerid][pBItems][5]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			new sent;
			for (new i = 6; i < 10; i++)
			{
				if(PlayerInfo[giveplayerid][pBItems][i] > 0)
				{
					if(!sent) 
					{
						format(string, sizeof(string), "*** %s' %s Backpack weapons...  ***", GetPlayerNameEx(giveplayerid), btype);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						sent = 1;
					}
					GetWeaponName(PlayerInfo[giveplayerid][pBItems][i], weaponname, sizeof(weaponname));
					format(string, sizeof(string), "Weapon: %s.", weaponname);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
				}
			}
			SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:bsearch(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pJob] == 8 || PlayerInfo[playerid][pJob2] == 8 || PlayerInfo[playerid][pJob3] == 8)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /bsearch [player]");

		if(IsPlayerConnected(giveplayerid) && ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot search yourself!");
			if(PlayerInfo[giveplayerid][pBEquipped] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "That player is not wearing a backpack!");
			new btype[8], weaponname[50];
			switch(PlayerInfo[giveplayerid][pBackpack])
			{
				case 1: btype = "Small";
				case 2: btype = "Medium";
				case 3: btype = "Large";
			}
			SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
			format(string, sizeof(string), "*** %s' %s Backpack items...  ***", GetPlayerNameEx(giveplayerid), btype);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			if(PlayerInfo[giveplayerid][pBItems][0] > 0)
			{
				format(string, sizeof(string), "(Backpack) %d meals.", PlayerInfo[giveplayerid][pBItems][0]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			
			if(PlayerInfo[giveplayerid][pBItems][1] > 0)
			{
				format(string, sizeof(string), "(Backpack) %d grams of pot.", PlayerInfo[giveplayerid][pBItems][1]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			
			if(PlayerInfo[giveplayerid][pBItems][2] > 0)
			{
				format(string, sizeof(string), "(Backpack) %d grams of crack.", PlayerInfo[giveplayerid][pBItems][2]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			
			if(PlayerInfo[giveplayerid][pBItems][3] > 0)
			{
				format(string, sizeof(string), "(Backpack) %d grams of heroin.", PlayerInfo[giveplayerid][pBItems][3]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			
			if(PlayerInfo[giveplayerid][pBItems][4] > 0)
			{
				format(string, sizeof(string), "(Backpack) %d grams of raw opium.", PlayerInfo[giveplayerid][pBItems][4]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			
			if(PlayerInfo[giveplayerid][pBItems][5] > 0)
			{
				format(string, sizeof(string), "(Backpack) %d Medical Kits.", PlayerInfo[giveplayerid][pBItems][5]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			new sent;
			for (new i = 6; i < 10; i++)
			{
				if(PlayerInfo[giveplayerid][pBItems][i] > 0)
				{
					if(!sent) 
					{
						format(string, sizeof(string), "*** %s' %s Backpack weapons...  ***", GetPlayerNameEx(giveplayerid), btype);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						sent = 1;
					}
					GetWeaponName(PlayerInfo[giveplayerid][pBItems][i], weaponname, sizeof(weaponname));
					format(string, sizeof(string), "Weapon: %s.", weaponname);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
				}
			}
			SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
			format(string, sizeof(string), "* %s has searched %s's backpack for any illegal items.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:bremove(playerid, params[])
{
    if (!IsACop(playerid))
	{
        SendClientMessageEx(playerid,COLOR_GREY,"You're not a law enforcement officer.");
        return 1;
    }
    new string[128], giveplayerid, item[6], bptype[8];
	if(sscanf(params, "us[6]", giveplayerid, item)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /bremove [player] [item]");
		SendClientMessageEx(playerid, COLOR_YELLOW, "ITEMS: Pot, Crack, Heroin, Opium, Guns, Meals");
		return 1;
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(playerid == giveplayerid) return 1;
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pBEquipped] < 1 && PlayerInfo[giveplayerid][pBackpack] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "That player is not wearing a backpack!");
			switch(PlayerInfo[playerid][pBackpack])
			{
				case 1: bptype = "Small";
				case 2: bptype = "Medium";
				case 3: bptype = "Large";
			}
			if(strcmp(item,"pot",true) == 0)
			{
				format(string, sizeof(string), "* You have taken away %s's pot from their backpack.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Officer %s has taken away your pot from your backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Officer %s has taken away %s's pot from their backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[giveplayerid][pBItems][1] = 0;
			}
			else if(strcmp(item,"crack",true) == 0)
			{
				format(string, sizeof(string), "* You have taken away %s's crack from their backpack.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Officer %s has taken away your crack from your backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Officer %s has taken away %s's crack from their backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[giveplayerid][pBItems][2] = 0;
			}
			else if(strcmp(item,"heroin",true) == 0)
			{
				format(string, sizeof(string), "* You have taken away %s's heroin from their backpack.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Officer %s has taken away your heroin from your backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Officer %s has taken away %s's heroin from their backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[giveplayerid][pBItems][3] = 0;
			}
			else if(strcmp(item,"opium",true) == 0)
			{
				format(string, sizeof(string), "* You have taken away %s's opium from their backpack.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Officer %s has taken away your opium from your backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Officer %s has taken away %s's opium from their backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[giveplayerid][pBItems][4] = 0;
			}
			else if(strcmp(item,"meals",true) == 0)
			{
				format(string, sizeof(string), "* You have taken away %s's meals from their backpack.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Officer %s has taken away your meals from your backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Officer %s has taken away %s's meals from their backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[giveplayerid][pBItems][0] = 0;
			}
			else if(strcmp(item,"guns",true) == 0)
			{
				format(string, sizeof(string), "* You have taken away %s's weapons from their backpack.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Officer %s has taken away your weapons from your backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Officer %s has taken away %s's weapons from their backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[giveplayerid][pBItems][6] = 0;
				PlayerInfo[giveplayerid][pBItems][7] = 0;
				PlayerInfo[giveplayerid][pBItems][8] = 0;
				PlayerInfo[giveplayerid][pBItems][9] = 0;
			}
		}
		else
		{
			return SendClientMessageEx(playerid, COLOR_GREY, " That person is not near you!");
		}
	}
	else
	{
		return SendClientMessageEx(playerid, COLOR_GREY, " That person is not connected!");
	}
    return 1;
}

CMD:bwear(playerid, params[])
{
	if(PlayerInfo[playerid][pBackpack] > 0)
	{
		if(GetPVarInt(playerid, "BackpackDisabled") > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use your backpack at this moment.");
		if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being inside the vehicle!");
		if(GetPVarInt(playerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command!");
		if(PlayerInfo[playerid][pBEquipped]) return SendClientMessageEx(playerid, COLOR_GREY, "You are already wearing your backpack, you can store it to your car/house with /bstore.");
		new string[128], btype[8], i = 0, Float: x, Float: y, Float: z, pvid = -1;
		if(PlayerInfo[playerid][pBStoredV] != INVALID_PLAYER_VEHICLE_ID)
		{
			for(i = 0 ; i < MAX_PLAYERVEHICLES; i++)
			{
				if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID && PlayerVehicleInfo[playerid][i][pvSlotId] == PlayerInfo[playerid][pBStoredV]) GetVehiclePos(PlayerVehicleInfo[playerid][i][pvId], x, y, z);
				if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z)) 
				{
					pvid = i;
					break;
				}
			}
			if(pvid == -1) return SendClientMessageEx(playerid,COLOR_GREY,"You are not near the vehicle where the backpack is stored.");
			new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(PlayerVehicleInfo[playerid][pvid][pvId],engine,lights,alarm,doors,bonnet,boot,objective);
			if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return SendClientMessageEx(playerid, COLOR_GRAD3, "You can't take/put stuff inside the trunk if it's closed!(/car trunk to open it)");
			if(PlayerHoldingObject[playerid][10] != 0 || IsPlayerAttachedObjectSlotUsed(playerid, 9)) 
				RemovePlayerAttachedObject(playerid, 9), PlayerHoldingObject[playerid][10] = 0;
			switch(PlayerInfo[playerid][pBackpack])
			{
				case 1: 
				{
					btype = "Small";
					SetPlayerAttachedObject(playerid, 9, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
				}
				case 2: 
				{
					btype = "Medium";
					SetPlayerAttachedObject(playerid, 9, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
				}
				case 3: 
				{
					btype = "Large";
					SetPlayerAttachedObject(playerid, 9, 3026, 1, -0.254999, -0.109, -0.022999, 10.6, -1.20002, 3.4, 1.265, 1.242, 1.062);
				}
			}
			format(string, sizeof(string), "You took your %s Backpack from your %s, use /bstore to store it.", btype, GetVehicleName(PlayerVehicleInfo[playerid][pvid][pvId]));
			SendClientMessageEx(playerid, COLOR_GREY, string);
			PlayerInfo[playerid][pBStoredV] = INVALID_PLAYER_VEHICLE_ID;
			PlayerInfo[playerid][pBEquipped] = 1;
			
			format(string, sizeof(string), "* %s has taken a backpack from their car trunk.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(PlayerInfo[playerid][pBStoredH] != INVALID_HOUSE_ID)
		{
			for(i = 0; i < MAX_HOUSES; i++)
			{
				if(HouseInfo[i][hSQLId] == PlayerInfo[playerid][pBStoredH]) 
				{
					pvid = i;
					break;
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[pvid][hInteriorX], HouseInfo[pvid][hInteriorY], HouseInfo[pvid][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[pvid][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[pvid][hIntIW])
			{
				if(PlayerHoldingObject[playerid][10] != 0 || IsPlayerAttachedObjectSlotUsed(playerid, 9)) 
					RemovePlayerAttachedObject(playerid, 9), PlayerHoldingObject[playerid][10] = 0;
				switch(PlayerInfo[playerid][pBackpack])
				{
					case 1: 
					{
						btype = "Small";
						SetPlayerAttachedObject(playerid, 9, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
					}
					case 2: 
					{
						btype = "Medium";
						SetPlayerAttachedObject(playerid, 9, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
					}
					case 3: 
					{
						btype = "Large";
						SetPlayerAttachedObject(playerid, 9, 3026, 1, -0.254999, -0.109, -0.022999, 10.6, -1.20002, 3.4, 1.265, 1.242, 1.062);
					}
				}
				format(string, sizeof(string), "You took your %s Backpack from your house, use /bstore to store it.", btype);
				SendClientMessageEx(playerid, COLOR_GREY, string);
				PlayerInfo[playerid][pBStoredH] = INVALID_HOUSE_ID;
				PlayerInfo[playerid][pBEquipped] = 1;
				
				format(string, sizeof(string), "* %s has taken a backpack from their house.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "You need to be inside the house you have stored your backpack!");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You do not own a backpack(Use /miscshop to get one with credits)");
	return 1;
}

CMD:bstore(playerid, params[])
{
	if(PlayerInfo[playerid][pBackpack] > 0)
	{
		if(!PlayerInfo[playerid][pBEquipped]) return SendClientMessageEx(playerid, COLOR_GREY, "You are are not wearing your backpack, you can wear it with /bwear.");
		if(GetPVarInt(playerid, "BackpackDisabled") > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use your backpack at this moment.");
		if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		if(GetPVarInt(playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being inside the vehicle!");
		if(GetPVarInt(playerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command!");
		new Float: Health;
		GetPlayerHealth(playerid, Health);
		if(Health < 50.0) return SendClientMessageEx(playerid,COLOR_GREY,"You cannot store a backpack in a house/car when your health lower than 80.");
		
		new string[128], housecar[6];
		if(sscanf(params, "s[6]", housecar)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /bstore [house/car]");
		

		if(strcmp(housecar, "car", true, strlen(housecar)) == 0)
		{
			new pvid = -1, Float: x, Float: y, Float: z;

			for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
			{
				if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
				if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
				{
					pvid = d;
					break;
				}
			}
			if(pvid == -1) return SendClientMessageEx(playerid,COLOR_GREY,"You are not near any vehicle that you own.");
			new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(PlayerVehicleInfo[playerid][pvid][pvId],engine,lights,alarm,doors,bonnet,boot,objective);
			if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return SendClientMessageEx(playerid, COLOR_GRAD3, "You can't take/put stuff inside the trunk if it's closed!(/car trunk to open it)");
			if(GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 510)  return SendClientMessageEx(playerid,COLOR_GREY,"That vehicle doesn't have a trunk.");
			new btype[7];
			switch(PlayerInfo[playerid][pBackpack])
			{
				case 1: btype = "Small";
				case 2: btype = "Medium";
				case 3: btype = "Large";
			}
			format(string, sizeof(string), "You stored your %s Backpack in your %s, use /bwear to wear it.", btype, GetVehicleName(PlayerVehicleInfo[playerid][pvid][pvId]));
			SendClientMessageEx(playerid, COLOR_GREY, string);
			RemovePlayerAttachedObject(playerid, 9);
			PlayerInfo[playerid][pBEquipped] = 0;
			PlayerInfo[playerid][pBStoredV] = PlayerVehicleInfo[playerid][pvid][pvSlotId];
			format(string, sizeof(string), "* %s has stored a backpack in the trunk of their car.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "[TRUNK] %s(%s) stored their %s backpack in [SQLID:%d][SlotID:%d][ModelID:%d]", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), btype, PlayerVehicleInfo[playerid][pvid][pvSlotId], pvid, PlayerVehicleInfo[playerid][pvid][pvModelId]);
			Log("logs/backpack.log", string);
		}
		else if(strcmp(housecar, "house", true, strlen(housecar)) == 0)
		{
			if(Homes[playerid] > 0)
			{
				new hid = -1;
				for(new i; i < MAX_HOUSES; i++)
				{
					if(GetPlayerSQLId(playerid) == HouseInfo[i][hOwnerID] && IsPlayerInRangeOfPoint(playerid, 50, HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hIntVW] && GetPlayerInterior(playerid) == HouseInfo[i][hIntIW]) 
					{
						hid = i;
						break;
					}
				}
				if(hid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "You're not in a house that you own.");
				new btype[7];
				switch(PlayerInfo[playerid][pBackpack])
				{
					case 1: btype = "Small";
					case 2: btype = "Medium";
					case 3: btype = "Large";
				}
				format(string, sizeof(string), "You stored your %s Backpack in your house, use /bwear to wear it.", btype);
				SendClientMessageEx(playerid, COLOR_GREY, string);
				RemovePlayerAttachedObject(playerid, 9);
				PlayerInfo[playerid][pBEquipped] = 0;
				PlayerInfo[playerid][pBStoredH] = HouseInfo[hid][hSQLId];
				format(string, sizeof(string), "* %s has stored a backpack in their house.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "[HOUSE] %s(%s) stored his %s backpack in [HouseID:%d]", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), btype, hid);
				Log("logs/backpack.log", string);
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /bstore [house/car]");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You do not own a backpack(Use /miscshop to get one with credits)");
	return 1;
}


CMD:bopen(playerid, params[])
{
	if(PlayerInfo[playerid][pBackpack] > 0)
	{
		#if defined zombiemode
		if(zombieevent == 1 && GetPVarType(playerid, "pIsZombie")) return SendClientMessageEx(playerid, COLOR_GREY, "Zombies can't use this.");
		#endif
		if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen")) return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
		if(GetPVarInt(playerid, "BackpackDisabled") > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use your backpack at this moment.");
		if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being inside the vehicle!");
		if(GetPVarInt(playerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command!");
		if(HungerPlayerInfo[playerid][hgInEvent] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "   You cannot do this while being in the Hunger Games Event!");
		if(WatchingTV[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can not do this while watching TV!");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
		if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_GREY,"   You can not open a backpack while in jail or prison!");
		if(PlayerInfo[playerid][pHospital] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't open your backpack whilst in Hospital.");
		if(!PlayerInfo[playerid][pBEquipped]) return SendClientMessageEx(playerid, COLOR_GREY, "You need to be wearing your backpack.");
		new string[122];
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
		format(string, sizeof(string), "{FF8000}** {C2A2DA}%s lays down and opens a backpack.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(string, sizeof(string), "Food({FFF94D}%d Meals{A9C4E4})\nNarcotics({FFF94D}%d Grams{A9C4E4})\nGuns", PlayerInfo[playerid][pBItems][0], GetBackpackNarcoticsGrams(playerid));
		if(PlayerInfo[playerid][pBItems][5] != 0) format(string, sizeof(string), "%s\nMedic & Kevlar Vest Kits ({FFF94D}%d{A9C4E4})",string, PlayerInfo[playerid][pBItems][5]);
		switch(PlayerInfo[playerid][pBackpack])
		{
			case 1: 
			{
				ShowPlayerDialog(playerid, DIALOG_OBACKPACK, DIALOG_STYLE_LIST, "Small Backpack Items", string, "Select", "Cancel");
			}
			case 2: 
			{
				ShowPlayerDialog(playerid, DIALOG_OBACKPACK, DIALOG_STYLE_LIST, "Medium Backpack Items", string, "Select", "Cancel");
			}
			case 3: 
			{
				ShowPlayerDialog(playerid, DIALOG_OBACKPACK, DIALOG_STYLE_LIST, "Large Backpack Items", string, "Select", "Cancel");
			}
		}
		SetPVarInt(playerid, "BackpackProt", 1);
		SetPVarInt(playerid, "BackpackOpen", 1);
	}
	return 1;
}

CMD:backpackhelp(playerid, params[])
{
	new bdialog[565];
	format(bdialog, sizeof(bdialog), "Item: Small Backpack\nFood Storage: 1 Meal\nNarcotics Storage: 30 Grams\nFirearms Storage: 1 Weapon(Handguns only)\nCost: {FFD700}%s{A9C4E4}\n\n", number_format(ShopItems[36][sItemPrice]));
	format(bdialog, sizeof(bdialog), "%sItem: Medium Backpack\nFood Storage: 3 Meal\nNarcotics Storage: 50 Grams\nFirearms Storage: 2 Weapons(Handguns or Handgun & Primary)\nCost: {FFD700}%s{A9C4E4}\n\n", bdialog, number_format(ShopItems[37][sItemPrice]));
	format(bdialog, sizeof(bdialog), "%sItem: Large Backpack\nFood Storage: 5 Meal\nNarcotics Storage: 80 Grams\nFirearms Storage: 4 Weapons(2 Handguns & 2 Primary)\nCost: {FFD700}%s{A9C4E4}\n\n\n", bdialog, number_format(ShopItems[38][sItemPrice]));
	format(bdialog, sizeof(bdialog), "%sCommands available: /bstore /bwear /bopen /sellbackpack /drop backpack (/miscshop to buy one with credits)", bdialog);
	
	ShowPlayerDialog(playerid, DIALOG_NOTHING, DIALOG_STYLE_MSGBOX, "Backpack Information", bdialog, "Exit", "");
    return 1;
}

CMD:ovmute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new query[256], tmpName[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", tmpName)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ovmute [player name]");
	new giveplayerid = ReturnUser(tmpName);
	if(IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "This player is currently connected, please use /vmute.");

	mysql_escape_string(params, tmpName);
	SetPVarString(playerid, "OnSetVMute", tmpName);

	format(query,sizeof(query),"UPDATE `accounts` SET `VIPMuted` = 1 WHERE `Username`= '%s' AND `AdminLevel` < 4", tmpName);
	mysql_function_query(MainPipeline, query, false, "OnSetVMute", "i", playerid);

	format(query, sizeof(query), "Attempting to vip mute %s's account.", tmpName);
	SendClientMessageEx(playerid, COLOR_YELLOW, query);
	return 1;
}

CMD:lastdriver(playerid, params[])
{
	new vehid, string[128];
	if(sscanf(params, "d", vehid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /lastdriver [vehicle id]");
	if(!CrateVehicleLoad[vehid][vLastDriver][0]) format(CrateVehicleLoad[vehid][vLastDriver], MAX_PLAYER_NAME, "{AA3333}Unoccupied");
	if(GetVehicleModel(vehid) != 0)
	{
		if(PlayerInfo[playerid][pAdmin] > 1)
		{
			format(string, sizeof(string), "Vehicle %d's last known driver was %s", vehid, CrateVehicleLoad[vehid][vLastDriver]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		else if(PlayerInfo[playerid][pLeader] != INVALID_GROUP_ID)
		{
			if(DynVeh[vehid] != -1)
			{
				if(DynVehicleInfo[DynVeh[vehid]][gv_igID] == PlayerInfo[playerid][pLeader])
				{
					format(string, sizeof(string), "Vehicle %d's last known driver was %s", vehid, CrateVehicleLoad[vehid][vLastDriver]);
					SendClientMessage(playerid, COLOR_YELLOW, string);				
				}
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "That vehicle does not belong to your group");
			
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized to use this command!");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid Vehicle ID");
	return 1;
}

CMD:bugreport(playerid, params[])
{
	if(gettime() - PlayerInfo[playerid][pBugReportTimeout] < 3600) 
		return ShowPlayerDialog(playerid, DIALOG_NOTHING, DIALOG_STYLE_MSGBOX , "Bug Report - {FF0000}Error", "You can only submit a bug report once every hour!\nAlternatively, you can visit http://devcp.ng-gaming.net and post a bug report there.", "Close", "");
	new query[128];
	format(query, sizeof(query), "SELECT * from `devcpBans` where `user` = %d AND `bugs` = 1", GetPlayerSQLId(playerid));
	return mysql_function_query(MainPipeline, query, true, "CheckBugReportBans", "ii", playerid, 1);
}

CMD:togvipm(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] < 5 && PlayerInfo[playerid][pShopTech] < 3 && PlayerInfo[playerid][pAdmin] < 1338) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	if(GetPVarInt(playerid, "vStaffChat") == 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "** You have disabled VIP staff chat.");
		return SetPVarInt(playerid, "vStaffChat", 0);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "** You have enabled VIP staff chat.");
		return SetPVarInt(playerid, "vStaffChat", 1);
	}
}

CMD:vipm(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] < 5 && PlayerInfo[playerid][pShopTech] < 3 && PlayerInfo[playerid][pAdmin] < 1338) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not authorized to use this command!");
	if(GetPVarInt(playerid, "vStaffChat") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You have VIP staff chat disabled - /togvipm to enable it.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vipm [text]");
	new szMessage[128];
	if(PlayerInfo[playerid][pDonateRank] >= 5) format(szMessage, sizeof(szMessage), "* VIP Moderator %s: %s", GetPlayerNameEx(playerid), params);
	else if(PlayerInfo[playerid][pShopTech] >= 3) format(szMessage, sizeof(szMessage), "* DoCR %s: %s", GetPlayerNameEx(playerid), params);
	else if(PlayerInfo[playerid][pAdmin] == 1338) format(szMessage, sizeof(szMessage), "* Lead Head Admin %s: %s", GetPlayerNameEx(playerid), params);
	else if(PlayerInfo[playerid][pAdmin] == 99999) format(szMessage, sizeof(szMessage), "* Executive Admin %s: %s", GetPlayerNameEx(playerid), params);
	else format(szMessage, sizeof(szMessage), "* Undefined Rank %s: %s", GetPlayerNameEx(playerid), params);
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
			if((PlayerInfo[playerid][pDonateRank] >= 5 || PlayerInfo[playerid][pShopTech] >= 3 || PlayerInfo[playerid][pAdmin] >= 1338) && GetPVarInt(i, "vStaffChat") == 1)
			{
				SendClientMessageEx(i, 0xff0066FF, szMessage);
			}
		}
	}
	return 1;
}

CMD:pickvehicle(playerid, params[])
{
	return cmd_pickveh(playerid, params);
}

CMD:pickveh(playerid, params[])
{
	new szMessage[150], Float: vehSize[3], Float: Pos[3], Float:a;

	if(gettime() < PlayerInfo[playerid][pLockPickTime]) {
		format(szMessage, sizeof(szMessage), "You must wait %s in order to attempt another lock pick.", ConvertTimeS(PlayerInfo[playerid][pLockPickTime] - gettime()));
		return SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	}
	if(GetPVarType(playerid, "AttemptingLockPick")) return SendClientMessageEx(playerid, COLOR_WHITE, "You are already attempting a lockpick, please wait.");
	if(GetPVarType(playerid, "DeliveringVehicleTime")) return SendClientMessageEx(playerid, COLOR_WHITE, "Deliver the vehicle you lock picked first or wait some time.");
	if(!PlayerInfo[playerid][pToolBox]) return SendClientMessageEx(playerid, COLOR_WHITE, "You need a Tool Box in order to lock pick a vehicle, get one from a Craftsman.");
	if(!PlayerInfo[playerid][pScrewdriver]) return SendClientMessageEx(playerid, COLOR_WHITE, "You need a Screwdriver in order to lock pick a vehicle, get one from a Craftsman.");
	
	if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen") || GetPVarInt(playerid, "IsInArena") != -1 || GetPVarInt( playerid, "EventToken") || IsPlayerInAnyVehicle(playerid) || HungerPlayerInfo[playerid][hgInEvent])
		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
		
		
	new vehicleid = GetClosestCar(playerid);
	/* for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		if(PlayerVehicleInfo[playerid][d][pvId] == vehicleid) return SendClientMessageEx(playerid,COLOR_GREY,"You cannot lock pick any vehicle that you own."); */
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, vehSize[0], vehSize[1], vehSize[2]);
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, Pos[0], Pos[1], Pos[2]);
	GetVehicleRelativePos(vehicleid, Pos[0], Pos[1], Pos[2], Pos[0]+((vehSize[0] / 2)-(vehSize[0])), Pos[1], 0.0);
	if(IsPlayerInRangeOfPoint(playerid, 1.0, Pos[0], Pos[1], Pos[2])) {
		for(new i = 0; i < MAX_PLAYERS; ++i) {
			if(IsPlayerConnected(i)) {
				new v = GetPlayerVehicle(i, vehicleid);
				if(v != -1) {
					if(PlayerVehicleInfo[i][v][pvLock] == 0 || PlayerVehicleInfo[i][v][pvLocksLeft] <= 0)
						return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: You can't pick lock vehicles that don't have a lock.");
					if(PlayerVehicleInfo[i][v][pvBeingPickLocked] > 0)
						return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: This vehicle is already being lock picked.");
					if(PlayerVehicleInfo[i][v][pvAllowedPlayerId] == playerid)
						return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: You can't pick lock vehicles that you have the keys of them.");
					new status, waittime, vipperk, randskill = random(100);
					switch(PlayerInfo[playerid][pDonateRank]) {
						case 1: vipperk = 5;
						case 2: vipperk = 10;
						case 3, 4, 5: vipperk = 15;
					}
					switch(PlayerInfo[playerid][pCarLockPickSkill]) {
						case 0 .. 49: if(0 <= randskill < (25+vipperk)) waittime = 180, status = 1; //Success
						case 50 .. 124: if(0 <= randskill < (35+vipperk)) waittime = 170, status = 1; //Success
						case 125 .. 224: if(0 <= randskill < (45+vipperk)) waittime = 160, status = 1; //Success
						case 225 .. 349: if(0 <= randskill < (55+vipperk)) waittime = 150, status = 1; //Success
						default: if(0 <= randskill < (65+vipperk)) waittime = 130, status = 1; //Success
					}
					format(szMessage, sizeof(szMessage), "* %s attempts to pick lock a nearby vehicle.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[playerid][pLockPickTime] = gettime() + 10;
					if(--PlayerInfo[playerid][pToolBox] <= 0) SendClientMessageEx(playerid, COLOR_PURPLE, "(( The tools from the Tool Box look spoiled, you may need to get a new Tool Box ))");
					if(status) {
						SetPVarInt(playerid, "AttemptingLockPick", 1);
						SetPVarInt(playerid, "LockPickCountdown", waittime);
						SetPVarInt(playerid, "LockPickTotalTime", waittime);
						SetPVarInt(playerid, "LockPickVehicle", vehicleid);
						SetPVarInt(playerid, "LockPickPlayer", i);
						
						PlayerVehicleInfo[i][v][pvBeingPickLocked] = 1;
						PlayerVehicleInfo[i][v][pvBeingPickLockedBy] = playerid;
						format(szMessage, sizeof(szMessage), "(( You start to pick lock this vehicle, attempting to break into it(Wait %s). ))", ConvertTimeS(waittime));
						SendClientMessageEx(playerid, COLOR_PURPLE, szMessage);
						SendClientMessageEx(playerid, COLOR_YELLOW, "Warning{FFFFFF}: Please stay still, if you move or get shot you may fail lock picking the vehicle.");
						GetVehicleZAngle(vehicleid, a);
						SetPlayerFacingAngle(playerid, a-90);
						ApplyAnimation(playerid, "COP_AMBIENT", "Copbrowse_loop", 4.1, 1, 0, 0, 0, 0, 1);
						GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
						SetPVarFloat(playerid, "LockPickPosX", Pos[0]), SetPVarFloat(playerid, "LockPickPosY", Pos[1]), SetPVarFloat(playerid, "LockPickPosZ", Pos[2]);
						new ip[MAX_PLAYER_NAME], ip2[MAX_PLAYER_NAME];
						GetPlayerIp(playerid, ip, sizeof(ip));
						GetPlayerIp(i, ip2, sizeof(ip2));
						format(szMessage, sizeof(szMessage), "[LOCK PICK] %s (IP:%s) is attempting to lock pick a %s(VID:%d Slot %d) owned by %s(IP:%s)", GetPlayerNameEx(playerid), ip, GetVehicleName(PlayerVehicleInfo[i][v][pvId]), PlayerVehicleInfo[playerid][v][pvId], v, GetPlayerNameEx(i), ip2);
						Log("logs/playervehicle.log", szMessage);
					}
					else {
						SendClientMessageEx(playerid, COLOR_PURPLE, "(( Your attempt to lock pick this vehicle failed! Try again or move on. ))");
					}
					break;
				}
			}
		}
	}
	else {
		GetPlayerPos(playerid, vehSize[0], vehSize[1], vehSize[2]);
		printf("VehicleId: %d VehX: %.1f VehY: %.1f VehZ: %.1f PlayerX: %.1f PlayerY: %.1f PlayerZ: %.1f", vehicleid, Pos[0], Pos[1], Pos[2], vehSize[0], vehSize[1], vehSize[2]);
		return SendClientMessageEx(playerid, COLOR_WHITE, "You need to be next to the drivers door in order to lock pick it.");
	}
	return 1;
}

CMD:cracktrunk(playerid, params[])
{
	new szMessage[150], Float: x, Float: y, Float: z, Float: vehSize[3];

	if(gettime() < PlayerInfo[playerid][pLockPickTime]) {
		format(szMessage, sizeof(szMessage), "You must wait %s in order to attempt another crack trunk.", ConvertTimeS(PlayerInfo[playerid][pLockPickTime] - gettime()));
		return SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	}
	//if(!PlayerInfo[playerid][pToolBox]) return SendClientMessageEx(playerid, COLOR_WHITE, "You need a Tool Box in order to lock pick a vehicle, get one from a Craftsman.");
	if(!PlayerInfo[playerid][pCrowBar]) return SendClientMessageEx(playerid, COLOR_WHITE, "You need a Crow Bar in order to crack this trunk, get one from a Craftsman.");
	//if(!PlayerInfo[playerid][pScrewdriver]) return SendClientMessageEx(playerid, COLOR_WHITE, "You need a Screwdriver in order to lock pick a vehicle, get one from a Craftsman.");
	
	if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen") || GetPVarInt(playerid, "IsInArena") != -1 || GetPVarInt( playerid, "EventToken") || IsPlayerInAnyVehicle(playerid) || HungerPlayerInfo[playerid][hgInEvent])
		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
		
		
	new vehicleid = GetClosestCar(playerid);
	
	GetPosBehindVehicle(vehicleid, x, y, z, 1.0);
	if(IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z) && GetPVarInt(playerid, "LockPickVehicle") == vehicleid) {
		if(GetPVarType(playerid, "AttemptingCrackTrunk")) return SendClientMessageEx(playerid, COLOR_WHITE, "You are already attempting to crack a trunk, please wait for the trunk to be opened.");
		if(!GetPVarType(playerid, "DeliveringVehicleTime")) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't open this trunk yet.");
		new status, randskill = random(100);
		switch(PlayerInfo[playerid][pCarLockPickSkill]) {
			case 0 .. 49: if(0 <= randskill < 25) status = 1; //Success
			case 50 .. 124: if(0 <= randskill < 35) status = 1; //Success
			case 125 .. 224: if(0 <= randskill < 45)status = 1; //Success
			case 225 .. 349: if(0 <= randskill < 55) status = 1; //Success
			default: if(0 <= randskill < 65) status = 1; //Success
		}
		format(szMessage, sizeof(szMessage), "* %s attempts to force a vehicle trunk.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pLockPickTime] = gettime() + 10;
		if(status) {
			SetPVarInt(playerid, "AttemptingCrackTrunk", 1);
			SetPVarInt(playerid, "CrackTrunkCountdown", 60);
			
			SendClientMessageEx(playerid, COLOR_PURPLE, "(( You start to crack this vehicle's trunk, attempting to break into it(Wait 1 minute) ))");
			SendClientMessageEx(playerid, COLOR_YELLOW, "Warning{FFFFFF}: Please stay still, if you move or get shot you may fail cracking this vehicle trunk.");
			GetVehicleZAngle(vehicleid, z);
			SetPlayerFacingAngle(playerid, z);
			ApplyAnimation(playerid, "COP_AMBIENT", "Copbrowse_loop", 4.1, 1, 0, 0, 0, 0, 1);
			GetPlayerPos(playerid, x, y, z);
			SetPVarFloat(playerid, "LockPickPosX", x), SetPVarFloat(playerid, "LockPickPosY", y), SetPVarFloat(playerid, "LockPickPosZ", z);
			new ip[MAX_PLAYER_NAME], ip2[MAX_PLAYER_NAME], v = GetPlayerVehicle(GetPVarInt(playerid, "LockPickPlayer"), GetPVarInt(playerid, "LockPickVehicle"));
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(GetPVarInt(playerid, "LockPickPlayer"), ip2, sizeof(ip2));
			format(szMessage, sizeof(szMessage), "[LOCK PICK] %s (IP:%s) is attempting to crack trunk a %s(VID:%d Slot %d) owned by %s(IP:%s)", GetPlayerNameEx(playerid), ip, GetVehicleName(PlayerVehicleInfo[GetPVarInt(playerid, "LockPickPlayer")][v][pvId]), PlayerVehicleInfo[GetPVarInt(playerid, "LockPickPlayer")][v][pvId], v, GetPlayerNameEx(GetPVarInt(playerid, "LockPickPlayer")), ip2);
			Log("logs/playervehicle.log", szMessage);
		}
		else {
			SendClientMessageEx(playerid, COLOR_PURPLE, "(( Your attempt to lock pick this vehicle failed! Try again or move on. ))");
		}
	}
	else {
		GetPlayerPos(playerid, vehSize[0], vehSize[1], vehSize[2]);
		printf("VehicleId: %d VehX: %.1f VehY: %.1f VehZ: %.1f PlayerX: %.1f PlayerY: %.1f PlayerZ: %.1f", vehicleid, x, y, z, vehSize[0], vehSize[1], vehSize[2]);
		return SendClientMessageEx(playerid, COLOR_WHITE, "You need to be at the back of the car that you lock picked.");
	}
	return 1;
}